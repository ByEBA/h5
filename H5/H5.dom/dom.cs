// Decompiled with JetBrains decompiler
// Type: H5.dom
// Assembly: H5.dom, Version=2.8.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 57CCBF73-D494-47BA-ACF8-95E65E795865
// Assembly location: C:\work\curiosity\tesserae\Tesserae\bin\Debug\net461\H5.dom.dll

using HighFive;
using H5.Primitive;
using System;
using System.Collections;
using System.Collections.Generic;

namespace H5
{
  [Scope]
  [GlobalMethods]
  public static class dom
  {
    private static dom.ANGLE_instanced_arraysTypeConfig _ANGLE_instanced_arraysType_BackingField;
    private static dom.AbortControllerTypeConfig _AbortControllerType_BackingField;
    private static dom.AbortSignalTypeConfig _AbortSignalType_BackingField;
    private static dom.AnalyserNodeTypeConfig _AnalyserNodeType_BackingField;
    private static dom.AnimationTypeConfig _AnimationType_BackingField;
    private static dom.AnimationEventTypeConfig _AnimationEventType_BackingField;
    private static dom.AnimationPlaybackEventTypeConfig _AnimationPlaybackEventType_BackingField;
    private static dom.ApplicationCacheTypeConfig _ApplicationCacheType_BackingField;
    private static dom.AttrTypeConfig _AttrType_BackingField;
    private static dom.AudioBufferTypeConfig _AudioBufferType_BackingField;
    private static dom.AudioBufferSourceNodeTypeConfig _AudioBufferSourceNodeType_BackingField;
    private static dom.AudioContextTypeConfig _AudioContextType_BackingField;
    private static dom.AudioDestinationNodeTypeConfig _AudioDestinationNodeType_BackingField;
    private static dom.AudioListenerTypeConfig _AudioListenerType_BackingField;
    private static dom.AudioNodeTypeConfig _AudioNodeType_BackingField;
    private static dom.AudioParamTypeConfig _AudioParamType_BackingField;
    private static dom.AudioProcessingEventTypeConfig _AudioProcessingEventType_BackingField;
    private static dom.AudioTrackTypeConfig _AudioTrackType_BackingField;
    private static dom.AudioTrackListTypeConfig _AudioTrackListType_BackingField;
    private static dom.BarPropTypeConfig _BarPropType_BackingField;
    private static dom.BeforeUnloadEventTypeConfig _BeforeUnloadEventType_BackingField;
    private static dom.BhxBrowserTypeConfig _BhxBrowserType_BackingField;
    private static dom.BiquadFilterNodeTypeConfig _BiquadFilterNodeType_BackingField;
    private static dom.BlobTypeConfig _BlobType_BackingField;
    private static dom.BroadcastChannelTypeConfig _BroadcastChannelType_BackingField;
    private static dom.ByteLengthQueuingStrategyTypeConfig _ByteLengthQueuingStrategyType_BackingField;
    private static dom.CDATASectionTypeConfig _CDATASectionType_BackingField;
    private static dom.CSS _CSSInstance_BackingField;
    private static dom.CSSConditionRuleTypeConfig _CSSConditionRuleType_BackingField;
    private static dom.CSSFontFaceRuleTypeConfig _CSSFontFaceRuleType_BackingField;
    private static dom.CSSGroupingRuleTypeConfig _CSSGroupingRuleType_BackingField;
    private static dom.CSSImportRuleTypeConfig _CSSImportRuleType_BackingField;
    private static dom.CSSKeyframeRuleTypeConfig _CSSKeyframeRuleType_BackingField;
    private static dom.CSSKeyframesRuleTypeConfig _CSSKeyframesRuleType_BackingField;
    private static dom.CSSMediaRuleTypeConfig _CSSMediaRuleType_BackingField;
    private static dom.CSSNamespaceRuleTypeConfig _CSSNamespaceRuleType_BackingField;
    private static dom.CSSPageRuleTypeConfig _CSSPageRuleType_BackingField;
    private static dom.CSSRuleTypeConfig _CSSRuleType_BackingField;
    private static dom.CSSRuleListTypeConfig _CSSRuleListType_BackingField;
    private static dom.CSSStyleDeclarationTypeConfig _CSSStyleDeclarationType_BackingField;
    private static dom.CSSStyleRuleTypeConfig _CSSStyleRuleType_BackingField;
    private static dom.CSSStyleSheetTypeConfig _CSSStyleSheetType_BackingField;
    private static dom.CSSSupportsRuleTypeConfig _CSSSupportsRuleType_BackingField;
    private static dom.CacheTypeConfig _CacheType_BackingField;
    private static dom.CacheStorageTypeConfig _CacheStorageType_BackingField;
    private static dom.CanvasGradientTypeConfig _CanvasGradientType_BackingField;
    private static dom.CanvasPatternTypeConfig _CanvasPatternType_BackingField;
    private static dom.CanvasRenderingContext2DTypeConfig _CanvasRenderingContext2DType_BackingField;
    private static dom.ChannelMergerNodeTypeConfig _ChannelMergerNodeType_BackingField;
    private static dom.ChannelSplitterNodeTypeConfig _ChannelSplitterNodeType_BackingField;
    private static dom.CharacterDataTypeConfig _CharacterDataType_BackingField;
    private static dom.ClientRectTypeConfig _ClientRectType_BackingField;
    private static dom.ClientRectListTypeConfig _ClientRectListType_BackingField;
    private static dom.ClipboardEventTypeConfig _ClipboardEventType_BackingField;
    private static dom.CloseEventTypeConfig _CloseEventType_BackingField;
    private static dom.CommentTypeConfig _CommentType_BackingField;
    private static dom.CompositionEventTypeConfig _CompositionEventType_BackingField;
    private static dom.ConsoleTypeConfig _ConsoleType_BackingField;
    private static dom.ContentScriptGlobalScopeTypeConfig _ContentScriptGlobalScopeType_BackingField;
    private static dom.ConvolverNodeTypeConfig _ConvolverNodeType_BackingField;
    private static dom.CoordinatesTypeConfig _CoordinatesType_BackingField;
    private static dom.CountQueuingStrategyTypeConfig _CountQueuingStrategyType_BackingField;
    private static dom.CryptoTypeConfig _CryptoType_BackingField;
    private static dom.CryptoKeyTypeConfig _CryptoKeyType_BackingField;
    private static dom.CryptoKeyPairTypeConfig _CryptoKeyPairType_BackingField;
    private static dom.CustomEvent2Config _CustomEvent2_BackingField;
    private static dom.DOMErrorTypeConfig _DOMErrorType_BackingField;
    private static dom.DOMExceptionTypeConfig _DOMExceptionType_BackingField;
    private static dom.DOMImplementationTypeConfig _DOMImplementationType_BackingField;
    private static dom.DOMParserTypeConfig _DOMParserType_BackingField;
    private static dom.DOMRectTypeConfig _DOMRectType_BackingField;
    private static dom.DOMRectReadOnlyTypeConfig _DOMRectReadOnlyType_BackingField;
    private static dom.DOMSettableTokenListTypeConfig _DOMSettableTokenListType_BackingField;
    private static dom.DOMStringListTypeConfig _DOMStringListType_BackingField;
    private static dom.DOMStringMapTypeConfig _DOMStringMapType_BackingField;
    private static dom.DOMTokenListTypeConfig _DOMTokenListType_BackingField;
    private static dom.DataCueTypeConfig _DataCueType_BackingField;
    private static dom.DataTransferTypeConfig _DataTransferType_BackingField;
    private static dom.DataTransferItemTypeConfig _DataTransferItemType_BackingField;
    private static dom.DataTransferItemListTypeConfig _DataTransferItemListType_BackingField;
    private static dom.DeferredPermissionRequestTypeConfig _DeferredPermissionRequestType_BackingField;
    private static dom.DelayNodeTypeConfig _DelayNodeType_BackingField;
    private static dom.DeviceAccelerationTypeConfig _DeviceAccelerationType_BackingField;
    private static dom.DeviceLightEventTypeConfig _DeviceLightEventType_BackingField;
    private static dom.DeviceMotionEventTypeConfig _DeviceMotionEventType_BackingField;
    private static dom.DeviceOrientationEventTypeConfig _DeviceOrientationEventType_BackingField;
    private static dom.DeviceRotationRateTypeConfig _DeviceRotationRateType_BackingField;
    private static dom.DocumentType2Config _DocumentType2_BackingField;
    private static dom.DocumentFragmentTypeConfig _DocumentFragmentType_BackingField;
    private static dom.DocumentTypeTypeConfig _DocumentTypeType_BackingField;
    private static dom.DragEventTypeConfig _DragEventType_BackingField;
    private static dom.DynamicsCompressorNodeTypeConfig _DynamicsCompressorNodeType_BackingField;
    private static dom.EXT_texture_filter_anisotropicTypeConfig _EXT_texture_filter_anisotropicType_BackingField;
    private static dom.ElementTypeConfig _ElementType_BackingField;
    private static dom.ErrorEventTypeConfig _ErrorEventType_BackingField;
    private static dom.EventTypeConfig _EventType_BackingField;
    private static dom.EventSourceTypeConfig _EventSourceType_BackingField;
    private static dom.EventTargetTypeConfig _EventTargetType_BackingField;
    private static dom.ExtensionScriptApisTypeConfig _ExtensionScriptApisType_BackingField;
    private static dom.ExternalTypeConfig _ExternalType_BackingField;
    private static dom.FileTypeConfig _FileType_BackingField;
    private static dom.FileListTypeConfig _FileListType_BackingField;
    private static dom.FileReaderTypeConfig _FileReaderType_BackingField;
    private static dom.FocusEventTypeConfig _FocusEventType_BackingField;
    private static dom.FocusNavigationEventTypeConfig _FocusNavigationEventType_BackingField;
    private static dom.FormDataTypeConfig _FormDataType_BackingField;
    private static dom.GainNodeTypeConfig _GainNodeType_BackingField;
    private static dom.GamepadTypeConfig _GamepadType_BackingField;
    private static dom.GamepadButtonTypeConfig _GamepadButtonType_BackingField;
    private static dom.GamepadEventTypeConfig _GamepadEventType_BackingField;
    private static dom.GamepadHapticActuatorType2Config _GamepadHapticActuatorType2_BackingField;
    private static dom.GamepadPoseTypeConfig _GamepadPoseType_BackingField;
    private static dom.GeolocationTypeConfig _GeolocationType_BackingField;
    private static dom.HTMLAllCollectionTypeConfig _HTMLAllCollectionType_BackingField;
    private static dom.HTMLAnchorElementTypeConfig _HTMLAnchorElementType_BackingField;
    private static dom.HTMLAppletElementTypeConfig _HTMLAppletElementType_BackingField;
    private static dom.HTMLAreaElementTypeConfig _HTMLAreaElementType_BackingField;
    private static dom.HTMLAreasCollectionTypeConfig _HTMLAreasCollectionType_BackingField;
    private static dom.HTMLAudioElementTypeConfig _HTMLAudioElementType_BackingField;
    private static dom.HTMLBRElementTypeConfig _HTMLBRElementType_BackingField;
    private static dom.HTMLBaseElementTypeConfig _HTMLBaseElementType_BackingField;
    private static dom.HTMLBaseFontElementTypeConfig _HTMLBaseFontElementType_BackingField;
    private static dom.HTMLBodyElementTypeConfig _HTMLBodyElementType_BackingField;
    private static dom.HTMLButtonElementTypeConfig _HTMLButtonElementType_BackingField;
    private static dom.HTMLCanvasElementTypeConfig _HTMLCanvasElementType_BackingField;
    private static dom.HTMLCollectionTypeConfig _HTMLCollectionType_BackingField;
    private static dom.HTMLDListElementTypeConfig _HTMLDListElementType_BackingField;
    private static dom.HTMLDataElementTypeConfig _HTMLDataElementType_BackingField;
    private static dom.HTMLDataListElementTypeConfig _HTMLDataListElementType_BackingField;
    private static dom.HTMLDetailsElementTypeConfig _HTMLDetailsElementType_BackingField;
    private static dom.HTMLDialogElementTypeConfig _HTMLDialogElementType_BackingField;
    private static dom.HTMLDirectoryElementTypeConfig _HTMLDirectoryElementType_BackingField;
    private static dom.HTMLDivElementTypeConfig _HTMLDivElementType_BackingField;
    private static dom.HTMLDocumentTypeConfig _HTMLDocumentType_BackingField;
    private static dom.HTMLElementTypeConfig _HTMLElementType_BackingField;
    private static dom.HTMLEmbedElementTypeConfig _HTMLEmbedElementType_BackingField;
    private static dom.HTMLFieldSetElementTypeConfig _HTMLFieldSetElementType_BackingField;
    private static dom.HTMLFontElementTypeConfig _HTMLFontElementType_BackingField;
    private static dom.HTMLFormControlsCollectionTypeConfig _HTMLFormControlsCollectionType_BackingField;
    private static dom.HTMLFormElementTypeConfig _HTMLFormElementType_BackingField;
    private static dom.HTMLFrameElementTypeConfig _HTMLFrameElementType_BackingField;
    private static dom.HTMLFrameSetElementTypeConfig _HTMLFrameSetElementType_BackingField;
    private static dom.HTMLHRElementTypeConfig _HTMLHRElementType_BackingField;
    private static dom.HTMLHeadElementTypeConfig _HTMLHeadElementType_BackingField;
    private static dom.HTMLHeadingElementTypeConfig _HTMLHeadingElementType_BackingField;
    private static dom.HTMLHtmlElementTypeConfig _HTMLHtmlElementType_BackingField;
    private static dom.HTMLIFrameElementTypeConfig _HTMLIFrameElementType_BackingField;
    private static dom.HTMLImageElementTypeConfig _HTMLImageElementType_BackingField;
    private static dom.HTMLInputElementTypeConfig _HTMLInputElementType_BackingField;
    private static dom.HTMLLIElementTypeConfig _HTMLLIElementType_BackingField;
    private static dom.HTMLLabelElementTypeConfig _HTMLLabelElementType_BackingField;
    private static dom.HTMLLegendElementTypeConfig _HTMLLegendElementType_BackingField;
    private static dom.HTMLLinkElementTypeConfig _HTMLLinkElementType_BackingField;
    private static dom.HTMLMainElementTypeConfig _HTMLMainElementType_BackingField;
    private static dom.HTMLMapElementTypeConfig _HTMLMapElementType_BackingField;
    private static dom.HTMLMarqueeElementTypeConfig _HTMLMarqueeElementType_BackingField;
    private static dom.HTMLMediaElementTypeConfig _HTMLMediaElementType_BackingField;
    private static dom.HTMLMenuElementTypeConfig _HTMLMenuElementType_BackingField;
    private static dom.HTMLMetaElementTypeConfig _HTMLMetaElementType_BackingField;
    private static dom.HTMLMeterElementTypeConfig _HTMLMeterElementType_BackingField;
    private static dom.HTMLModElementTypeConfig _HTMLModElementType_BackingField;
    private static dom.HTMLOListElementTypeConfig _HTMLOListElementType_BackingField;
    private static dom.HTMLObjectElementTypeConfig _HTMLObjectElementType_BackingField;
    private static dom.HTMLOptGroupElementTypeConfig _HTMLOptGroupElementType_BackingField;
    private static dom.HTMLOptionElementTypeConfig _HTMLOptionElementType_BackingField;
    private static dom.HTMLOptionsCollectionTypeConfig _HTMLOptionsCollectionType_BackingField;
    private static dom.HTMLOutputElementTypeConfig _HTMLOutputElementType_BackingField;
    private static dom.HTMLParagraphElementTypeConfig _HTMLParagraphElementType_BackingField;
    private static dom.HTMLParamElementTypeConfig _HTMLParamElementType_BackingField;
    private static dom.HTMLPictureElementTypeConfig _HTMLPictureElementType_BackingField;
    private static dom.HTMLPreElementTypeConfig _HTMLPreElementType_BackingField;
    private static dom.HTMLProgressElementTypeConfig _HTMLProgressElementType_BackingField;
    private static dom.HTMLQuoteElementTypeConfig _HTMLQuoteElementType_BackingField;
    private static dom.HTMLScriptElementTypeConfig _HTMLScriptElementType_BackingField;
    private static dom.HTMLSelectElementTypeConfig _HTMLSelectElementType_BackingField;
    private static dom.HTMLSourceElementTypeConfig _HTMLSourceElementType_BackingField;
    private static dom.HTMLSpanElementTypeConfig _HTMLSpanElementType_BackingField;
    private static dom.HTMLStyleElementTypeConfig _HTMLStyleElementType_BackingField;
    private static dom.HTMLSummaryElementTypeConfig _HTMLSummaryElementType_BackingField;
    private static dom.HTMLTableCaptionElementTypeConfig _HTMLTableCaptionElementType_BackingField;
    private static dom.HTMLTableCellElementTypeConfig _HTMLTableCellElementType_BackingField;
    private static dom.HTMLTableColElementTypeConfig _HTMLTableColElementType_BackingField;
    private static dom.HTMLTableDataCellElementTypeConfig _HTMLTableDataCellElementType_BackingField;
    private static dom.HTMLTableElementTypeConfig _HTMLTableElementType_BackingField;
    private static dom.HTMLTableHeaderCellElementTypeConfig _HTMLTableHeaderCellElementType_BackingField;
    private static dom.HTMLTableRowElementTypeConfig _HTMLTableRowElementType_BackingField;
    private static dom.HTMLTableSectionElementTypeConfig _HTMLTableSectionElementType_BackingField;
    private static dom.HTMLTemplateElementTypeConfig _HTMLTemplateElementType_BackingField;
    private static dom.HTMLTextAreaElementTypeConfig _HTMLTextAreaElementType_BackingField;
    private static dom.HTMLTimeElementTypeConfig _HTMLTimeElementType_BackingField;
    private static dom.HTMLTitleElementTypeConfig _HTMLTitleElementType_BackingField;
    private static dom.HTMLTrackElementTypeConfig _HTMLTrackElementType_BackingField;
    private static dom.HTMLUListElementTypeConfig _HTMLUListElementType_BackingField;
    private static dom.HTMLUnknownElementTypeConfig _HTMLUnknownElementType_BackingField;
    private static dom.HTMLVideoElementTypeConfig _HTMLVideoElementType_BackingField;
    private static dom.HTMLegendElementTypeConfig _HTMLegendElementType_BackingField;
    private static dom.HashChangeEventTypeConfig _HashChangeEventType_BackingField;
    private static dom.HeadersTypeConfig _HeadersType_BackingField;
    private static dom.HistoryTypeConfig _HistoryType_BackingField;
    private static dom.IDBCursorTypeConfig _IDBCursorType_BackingField;
    private static dom.IDBCursorWithValueTypeConfig _IDBCursorWithValueType_BackingField;
    private static dom.IDBDatabaseTypeConfig _IDBDatabaseType_BackingField;
    private static dom.IDBFactoryTypeConfig _IDBFactoryType_BackingField;
    private static dom.IDBIndexTypeConfig _IDBIndexType_BackingField;
    private static dom.IDBKeyRangeTypeConfig _IDBKeyRangeType_BackingField;
    private static dom.IDBObjectStoreTypeConfig _IDBObjectStoreType_BackingField;
    private static dom.IDBOpenDBRequestTypeConfig _IDBOpenDBRequestType_BackingField;
    private static dom.IDBRequestTypeConfig _IDBRequestType_BackingField;
    private static dom.IDBTransactionTypeConfig _IDBTransactionType_BackingField;
    private static dom.IDBVersionChangeEventTypeConfig _IDBVersionChangeEventType_BackingField;
    private static dom.IIRFilterNodeTypeConfig _IIRFilterNodeType_BackingField;
    private static dom.ImageDataTypeConfig _ImageDataType_BackingField;
    private static dom.IntersectionObserverTypeConfig _IntersectionObserverType_BackingField;
    private static dom.IntersectionObserverEntryTypeConfig _IntersectionObserverEntryType_BackingField;
    private static dom.KeyboardEventTypeConfig _KeyboardEventType_BackingField;
    private static dom.ListeningStateChangedEventTypeConfig _ListeningStateChangedEventType_BackingField;
    private static dom.LocationTypeConfig _LocationType_BackingField;
    private static dom.MSAssertionTypeConfig _MSAssertionType_BackingField;
    private static dom.MSBlobBuilderTypeConfig _MSBlobBuilderType_BackingField;
    private static dom.MSCredentialsTypeConfig _MSCredentialsType_BackingField;
    private static dom.MSDCCEventTypeConfig _MSDCCEventType_BackingField;
    private static dom.MSDSHEventTypeConfig _MSDSHEventType_BackingField;
    private static dom.MSFIDOCredentialAssertionTypeConfig _MSFIDOCredentialAssertionType_BackingField;
    private static dom.MSFIDOSignatureTypeConfig _MSFIDOSignatureType_BackingField;
    private static dom.MSFIDOSignatureAssertionTypeConfig _MSFIDOSignatureAssertionType_BackingField;
    private static dom.MSGestureTypeConfig _MSGestureType_BackingField;
    private static dom.MSGestureEventTypeConfig _MSGestureEventType_BackingField;
    private static dom.MSGraphicsTrustTypeConfig _MSGraphicsTrustType_BackingField;
    private static dom.MSInputMethodContextTypeConfig _MSInputMethodContextType_BackingField;
    private static dom.MSMediaKeyErrorTypeConfig _MSMediaKeyErrorType_BackingField;
    private static dom.MSMediaKeyMessageEventTypeConfig _MSMediaKeyMessageEventType_BackingField;
    private static dom.MSMediaKeyNeededEventTypeConfig _MSMediaKeyNeededEventType_BackingField;
    private static dom.MSMediaKeySessionTypeConfig _MSMediaKeySessionType_BackingField;
    private static dom.MSMediaKeysTypeConfig _MSMediaKeysType_BackingField;
    private static dom.MSPointerEventTypeConfig _MSPointerEventType_BackingField;
    private static dom.MSStreamTypeConfig _MSStreamType_BackingField;
    private static dom.MSStreamReaderTypeConfig _MSStreamReaderType_BackingField;
    private static dom.MediaDeviceInfoTypeConfig _MediaDeviceInfoType_BackingField;
    private static dom.MediaDevicesTypeConfig _MediaDevicesType_BackingField;
    private static dom.MediaElementAudioSourceNodeTypeConfig _MediaElementAudioSourceNodeType_BackingField;
    private static dom.MediaEncryptedEventTypeConfig _MediaEncryptedEventType_BackingField;
    private static dom.MediaErrorTypeConfig _MediaErrorType_BackingField;
    private static dom.MediaKeyMessageEventTypeConfig _MediaKeyMessageEventType_BackingField;
    private static dom.MediaKeySessionType2Config _MediaKeySessionType2_BackingField;
    private static dom.MediaKeyStatusMapTypeConfig _MediaKeyStatusMapType_BackingField;
    private static dom.MediaKeySystemAccessTypeConfig _MediaKeySystemAccessType_BackingField;
    private static dom.MediaKeysTypeConfig _MediaKeysType_BackingField;
    private static dom.MediaListTypeConfig _MediaListType_BackingField;
    private static dom.MediaQueryListTypeConfig _MediaQueryListType_BackingField;
    private static dom.MediaSourceTypeConfig _MediaSourceType_BackingField;
    private static dom.MediaStreamTypeConfig _MediaStreamType_BackingField;
    private static dom.MediaStreamAudioSourceNodeTypeConfig _MediaStreamAudioSourceNodeType_BackingField;
    private static dom.MediaStreamErrorTypeConfig _MediaStreamErrorType_BackingField;
    private static dom.MediaStreamErrorEventTypeConfig _MediaStreamErrorEventType_BackingField;
    private static dom.MediaStreamEventTypeConfig _MediaStreamEventType_BackingField;
    private static dom.MediaStreamTrackTypeConfig _MediaStreamTrackType_BackingField;
    private static dom.MediaStreamTrackEventTypeConfig _MediaStreamTrackEventType_BackingField;
    private static dom.MessageChannelTypeConfig _MessageChannelType_BackingField;
    private static dom.MessageEventTypeConfig _MessageEventType_BackingField;
    private static dom.MessagePortTypeConfig _MessagePortType_BackingField;
    private static dom.MimeTypeTypeConfig _MimeTypeType_BackingField;
    private static dom.MimeTypeArrayTypeConfig _MimeTypeArrayType_BackingField;
    private static dom.MouseEventTypeConfig _MouseEventType_BackingField;
    private static dom.MutationEventTypeConfig _MutationEventType_BackingField;
    private static dom.MutationObserverTypeConfig _MutationObserverType_BackingField;
    private static dom.MutationRecordType2Config _MutationRecordType2_BackingField;
    private static dom.NamedNodeMapTypeConfig _NamedNodeMapType_BackingField;
    private static dom.NavigatorTypeConfig _NavigatorType_BackingField;
    private static dom.NodeTypeConfig _NodeType_BackingField;
    private static dom.NodeFilter2Config _NodeFilter2_BackingField;
    private static dom.NodeIteratorTypeConfig _NodeIteratorType_BackingField;
    private static dom.NodeListTypeConfig _NodeListType_BackingField;
    private static dom.NotificationTypeConfig _NotificationType_BackingField;
    private static dom.OES_element_index_uintTypeConfig _OES_element_index_uintType_BackingField;
    private static dom.OES_standard_derivativesTypeConfig _OES_standard_derivativesType_BackingField;
    private static dom.OES_texture_floatTypeConfig _OES_texture_floatType_BackingField;
    private static dom.OES_texture_float_linearTypeConfig _OES_texture_float_linearType_BackingField;
    private static dom.OES_texture_half_floatTypeConfig _OES_texture_half_floatType_BackingField;
    private static dom.OES_texture_half_float_linearTypeConfig _OES_texture_half_float_linearType_BackingField;
    private static dom.OfflineAudioCompletionEventTypeConfig _OfflineAudioCompletionEventType_BackingField;
    private static dom.OfflineAudioContextTypeConfig _OfflineAudioContextType_BackingField;
    private static dom.OscillatorNodeTypeConfig _OscillatorNodeType_BackingField;
    private static dom.OverflowEventTypeConfig _OverflowEventType_BackingField;
    private static dom.PageTransitionEventTypeConfig _PageTransitionEventType_BackingField;
    private static dom.PannerNodeTypeConfig _PannerNodeType_BackingField;
    private static dom.Path2DTypeConfig _Path2DType_BackingField;
    private static dom.PaymentAddressTypeConfig _PaymentAddressType_BackingField;
    private static dom.PaymentRequestTypeConfig _PaymentRequestType_BackingField;
    private static dom.PaymentRequestUpdateEventTypeConfig _PaymentRequestUpdateEventType_BackingField;
    private static dom.PaymentResponseTypeConfig _PaymentResponseType_BackingField;
    private static dom.PerfWidgetExternalTypeConfig _PerfWidgetExternalType_BackingField;
    private static dom.PerformanceTypeConfig _PerformanceType_BackingField;
    private static dom.PerformanceEntryTypeConfig _PerformanceEntryType_BackingField;
    private static dom.PerformanceMarkTypeConfig _PerformanceMarkType_BackingField;
    private static dom.PerformanceMeasureTypeConfig _PerformanceMeasureType_BackingField;
    private static dom.PerformanceNavigationTypeConfig _PerformanceNavigationType_BackingField;
    private static dom.PerformanceNavigationTimingTypeConfig _PerformanceNavigationTimingType_BackingField;
    private static dom.PerformanceResourceTimingTypeConfig _PerformanceResourceTimingType_BackingField;
    private static dom.PerformanceTimingTypeConfig _PerformanceTimingType_BackingField;
    private static dom.PeriodicWaveTypeConfig _PeriodicWaveType_BackingField;
    private static dom.PermissionRequestTypeConfig _PermissionRequestType_BackingField;
    private static dom.PermissionRequestedEventTypeConfig _PermissionRequestedEventType_BackingField;
    private static dom.PluginTypeConfig _PluginType_BackingField;
    private static dom.PluginArrayTypeConfig _PluginArrayType_BackingField;
    private static dom.PointerEventTypeConfig _PointerEventType_BackingField;
    private static dom.PopStateEventTypeConfig _PopStateEventType_BackingField;
    private static dom.PositionTypeConfig _PositionType_BackingField;
    private static dom.PositionErrorTypeConfig _PositionErrorType_BackingField;
    private static dom.ProcessingInstructionTypeConfig _ProcessingInstructionType_BackingField;
    private static dom.ProgressEventTypeConfig _ProgressEventType_BackingField;
    private static dom.PushManagerTypeConfig _PushManagerType_BackingField;
    private static dom.PushSubscriptionTypeConfig _PushSubscriptionType_BackingField;
    private static dom.PushSubscriptionOptionsTypeConfig _PushSubscriptionOptionsType_BackingField;
    private static dom.RTCDTMFToneChangeEventTypeConfig _RTCDTMFToneChangeEventType_BackingField;
    private static dom.RTCDtlsTransportTypeConfig _RTCDtlsTransportType_BackingField;
    private static dom.RTCDtlsTransportStateChangedEventTypeConfig _RTCDtlsTransportStateChangedEventType_BackingField;
    private static dom.RTCDtmfSenderTypeConfig _RTCDtmfSenderType_BackingField;
    private static dom.RTCIceCandidateType2Config _RTCIceCandidateType2_BackingField;
    private static dom.RTCIceCandidatePairChangedEventTypeConfig _RTCIceCandidatePairChangedEventType_BackingField;
    private static dom.RTCIceGathererTypeConfig _RTCIceGathererType_BackingField;
    private static dom.RTCIceGathererEventTypeConfig _RTCIceGathererEventType_BackingField;
    private static dom.RTCIceTransportTypeConfig _RTCIceTransportType_BackingField;
    private static dom.RTCIceTransportStateChangedEventTypeConfig _RTCIceTransportStateChangedEventType_BackingField;
    private static dom.RTCPeerConnectionTypeConfig _RTCPeerConnectionType_BackingField;
    private static dom.RTCPeerConnectionIceEventTypeConfig _RTCPeerConnectionIceEventType_BackingField;
    private static dom.RTCRtpReceiverTypeConfig _RTCRtpReceiverType_BackingField;
    private static dom.RTCRtpSenderTypeConfig _RTCRtpSenderType_BackingField;
    private static dom.RTCSessionDescriptionTypeConfig _RTCSessionDescriptionType_BackingField;
    private static dom.RTCSrtpSdesTransportTypeConfig _RTCSrtpSdesTransportType_BackingField;
    private static dom.RTCSsrcConflictEventTypeConfig _RTCSsrcConflictEventType_BackingField;
    private static dom.RTCStatsProviderTypeConfig _RTCStatsProviderType_BackingField;
    private static dom.RandomSourceTypeConfig _RandomSourceType_BackingField;
    private static dom.RangeTypeConfig _RangeType_BackingField;
    private static dom.ReadableStreamTypeConfig _ReadableStreamType_BackingField;
    private static dom.ReadableStreamReaderTypeConfig _ReadableStreamReaderType_BackingField;
    private static dom.RequestType2Config _RequestType2_BackingField;
    private static dom.ResponseType2Config _ResponseType2_BackingField;
    private static dom.SVGAElementTypeConfig _SVGAElementType_BackingField;
    private static dom.SVGAngleTypeConfig _SVGAngleType_BackingField;
    private static dom.SVGAnimatedAngleTypeConfig _SVGAnimatedAngleType_BackingField;
    private static dom.SVGAnimatedBooleanTypeConfig _SVGAnimatedBooleanType_BackingField;
    private static dom.SVGAnimatedEnumerationTypeConfig _SVGAnimatedEnumerationType_BackingField;
    private static dom.SVGAnimatedIntegerTypeConfig _SVGAnimatedIntegerType_BackingField;
    private static dom.SVGAnimatedLengthTypeConfig _SVGAnimatedLengthType_BackingField;
    private static dom.SVGAnimatedLengthListTypeConfig _SVGAnimatedLengthListType_BackingField;
    private static dom.SVGAnimatedNumberTypeConfig _SVGAnimatedNumberType_BackingField;
    private static dom.SVGAnimatedNumberListTypeConfig _SVGAnimatedNumberListType_BackingField;
    private static dom.SVGAnimatedPreserveAspectRatioTypeConfig _SVGAnimatedPreserveAspectRatioType_BackingField;
    private static dom.SVGAnimatedRectTypeConfig _SVGAnimatedRectType_BackingField;
    private static dom.SVGAnimatedStringTypeConfig _SVGAnimatedStringType_BackingField;
    private static dom.SVGAnimatedTransformListTypeConfig _SVGAnimatedTransformListType_BackingField;
    private static dom.SVGCircleElementTypeConfig _SVGCircleElementType_BackingField;
    private static dom.SVGClipPathElementTypeConfig _SVGClipPathElementType_BackingField;
    private static dom.SVGComponentTransferFunctionElementTypeConfig _SVGComponentTransferFunctionElementType_BackingField;
    private static dom.SVGDefsElementTypeConfig _SVGDefsElementType_BackingField;
    private static dom.SVGDescElementTypeConfig _SVGDescElementType_BackingField;
    private static dom.SVGElementTypeConfig _SVGElementType_BackingField;
    private static dom.SVGElementInstanceTypeConfig _SVGElementInstanceType_BackingField;
    private static dom.SVGElementInstanceListTypeConfig _SVGElementInstanceListType_BackingField;
    private static dom.SVGEllipseElementTypeConfig _SVGEllipseElementType_BackingField;
    private static dom.SVGFEBlendElementTypeConfig _SVGFEBlendElementType_BackingField;
    private static dom.SVGFEColorMatrixElementTypeConfig _SVGFEColorMatrixElementType_BackingField;
    private static dom.SVGFEComponentTransferElementTypeConfig _SVGFEComponentTransferElementType_BackingField;
    private static dom.SVGFECompositeElementTypeConfig _SVGFECompositeElementType_BackingField;
    private static dom.SVGFEConvolveMatrixElementTypeConfig _SVGFEConvolveMatrixElementType_BackingField;
    private static dom.SVGFEDiffuseLightingElementTypeConfig _SVGFEDiffuseLightingElementType_BackingField;
    private static dom.SVGFEDisplacementMapElementTypeConfig _SVGFEDisplacementMapElementType_BackingField;
    private static dom.SVGFEDistantLightElementTypeConfig _SVGFEDistantLightElementType_BackingField;
    private static dom.SVGFEFloodElementTypeConfig _SVGFEFloodElementType_BackingField;
    private static dom.SVGFEFuncAElementTypeConfig _SVGFEFuncAElementType_BackingField;
    private static dom.SVGFEFuncBElementTypeConfig _SVGFEFuncBElementType_BackingField;
    private static dom.SVGFEFuncGElementTypeConfig _SVGFEFuncGElementType_BackingField;
    private static dom.SVGFEFuncRElementTypeConfig _SVGFEFuncRElementType_BackingField;
    private static dom.SVGFEGaussianBlurElementTypeConfig _SVGFEGaussianBlurElementType_BackingField;
    private static dom.SVGFEImageElementTypeConfig _SVGFEImageElementType_BackingField;
    private static dom.SVGFEMergeElementTypeConfig _SVGFEMergeElementType_BackingField;
    private static dom.SVGFEMergeNodeElementTypeConfig _SVGFEMergeNodeElementType_BackingField;
    private static dom.SVGFEMorphologyElementTypeConfig _SVGFEMorphologyElementType_BackingField;
    private static dom.SVGFEOffsetElementTypeConfig _SVGFEOffsetElementType_BackingField;
    private static dom.SVGFEPointLightElementTypeConfig _SVGFEPointLightElementType_BackingField;
    private static dom.SVGFESpecularLightingElementTypeConfig _SVGFESpecularLightingElementType_BackingField;
    private static dom.SVGFESpotLightElementTypeConfig _SVGFESpotLightElementType_BackingField;
    private static dom.SVGFETileElementTypeConfig _SVGFETileElementType_BackingField;
    private static dom.SVGFETurbulenceElementTypeConfig _SVGFETurbulenceElementType_BackingField;
    private static dom.SVGFilterElementTypeConfig _SVGFilterElementType_BackingField;
    private static dom.SVGForeignObjectElementTypeConfig _SVGForeignObjectElementType_BackingField;
    private static dom.SVGGElementTypeConfig _SVGGElementType_BackingField;
    private static dom.SVGGradientElementTypeConfig _SVGGradientElementType_BackingField;
    private static dom.SVGGraphicsElementTypeConfig _SVGGraphicsElementType_BackingField;
    private static dom.SVGImageElementTypeConfig _SVGImageElementType_BackingField;
    private static dom.SVGLengthTypeConfig _SVGLengthType_BackingField;
    private static dom.SVGLengthListTypeConfig _SVGLengthListType_BackingField;
    private static dom.SVGLineElementTypeConfig _SVGLineElementType_BackingField;
    private static dom.SVGLinearGradientElementTypeConfig _SVGLinearGradientElementType_BackingField;
    private static dom.SVGMarkerElementTypeConfig _SVGMarkerElementType_BackingField;
    private static dom.SVGMaskElementTypeConfig _SVGMaskElementType_BackingField;
    private static dom.SVGMatrixTypeConfig _SVGMatrixType_BackingField;
    private static dom.SVGMetadataElementTypeConfig _SVGMetadataElementType_BackingField;
    private static dom.SVGNumberTypeConfig _SVGNumberType_BackingField;
    private static dom.SVGNumberListTypeConfig _SVGNumberListType_BackingField;
    private static dom.SVGPathElementTypeConfig _SVGPathElementType_BackingField;
    private static dom.SVGPathSegTypeConfig _SVGPathSegType_BackingField;
    private static dom.SVGPathSegArcAbsTypeConfig _SVGPathSegArcAbsType_BackingField;
    private static dom.SVGPathSegArcRelTypeConfig _SVGPathSegArcRelType_BackingField;
    private static dom.SVGPathSegClosePathTypeConfig _SVGPathSegClosePathType_BackingField;
    private static dom.SVGPathSegCurvetoCubicAbsTypeConfig _SVGPathSegCurvetoCubicAbsType_BackingField;
    private static dom.SVGPathSegCurvetoCubicRelTypeConfig _SVGPathSegCurvetoCubicRelType_BackingField;
    private static dom.SVGPathSegCurvetoCubicSmoothAbsTypeConfig _SVGPathSegCurvetoCubicSmoothAbsType_BackingField;
    private static dom.SVGPathSegCurvetoCubicSmoothRelTypeConfig _SVGPathSegCurvetoCubicSmoothRelType_BackingField;
    private static dom.SVGPathSegCurvetoQuadraticAbsTypeConfig _SVGPathSegCurvetoQuadraticAbsType_BackingField;
    private static dom.SVGPathSegCurvetoQuadraticRelTypeConfig _SVGPathSegCurvetoQuadraticRelType_BackingField;
    private static dom.SVGPathSegCurvetoQuadraticSmoothAbsTypeConfig _SVGPathSegCurvetoQuadraticSmoothAbsType_BackingField;
    private static dom.SVGPathSegCurvetoQuadraticSmoothRelTypeConfig _SVGPathSegCurvetoQuadraticSmoothRelType_BackingField;
    private static dom.SVGPathSegLinetoAbsTypeConfig _SVGPathSegLinetoAbsType_BackingField;
    private static dom.SVGPathSegLinetoHorizontalAbsTypeConfig _SVGPathSegLinetoHorizontalAbsType_BackingField;
    private static dom.SVGPathSegLinetoHorizontalRelTypeConfig _SVGPathSegLinetoHorizontalRelType_BackingField;
    private static dom.SVGPathSegLinetoRelTypeConfig _SVGPathSegLinetoRelType_BackingField;
    private static dom.SVGPathSegLinetoVerticalAbsTypeConfig _SVGPathSegLinetoVerticalAbsType_BackingField;
    private static dom.SVGPathSegLinetoVerticalRelTypeConfig _SVGPathSegLinetoVerticalRelType_BackingField;
    private static dom.SVGPathSegListTypeConfig _SVGPathSegListType_BackingField;
    private static dom.SVGPathSegMovetoAbsTypeConfig _SVGPathSegMovetoAbsType_BackingField;
    private static dom.SVGPathSegMovetoRelTypeConfig _SVGPathSegMovetoRelType_BackingField;
    private static dom.SVGPatternElementTypeConfig _SVGPatternElementType_BackingField;
    private static dom.SVGPointTypeConfig _SVGPointType_BackingField;
    private static dom.SVGPointListTypeConfig _SVGPointListType_BackingField;
    private static dom.SVGPolygonElementTypeConfig _SVGPolygonElementType_BackingField;
    private static dom.SVGPolylineElementTypeConfig _SVGPolylineElementType_BackingField;
    private static dom.SVGPreserveAspectRatioTypeConfig _SVGPreserveAspectRatioType_BackingField;
    private static dom.SVGRadialGradientElementTypeConfig _SVGRadialGradientElementType_BackingField;
    private static dom.SVGRectTypeConfig _SVGRectType_BackingField;
    private static dom.SVGRectElementTypeConfig _SVGRectElementType_BackingField;
    private static dom.SVGSVGElementTypeConfig _SVGSVGElementType_BackingField;
    private static dom.SVGScriptElementTypeConfig _SVGScriptElementType_BackingField;
    private static dom.SVGStopElementTypeConfig _SVGStopElementType_BackingField;
    private static dom.SVGStringListTypeConfig _SVGStringListType_BackingField;
    private static dom.SVGStylableTypeConfig _SVGStylableType_BackingField;
    private static dom.SVGStyleElementTypeConfig _SVGStyleElementType_BackingField;
    private static dom.SVGSwitchElementTypeConfig _SVGSwitchElementType_BackingField;
    private static dom.SVGSymbolElementTypeConfig _SVGSymbolElementType_BackingField;
    private static dom.SVGTSpanElementTypeConfig _SVGTSpanElementType_BackingField;
    private static dom.SVGTextContentElementTypeConfig _SVGTextContentElementType_BackingField;
    private static dom.SVGTextElementTypeConfig _SVGTextElementType_BackingField;
    private static dom.SVGTextPathElementTypeConfig _SVGTextPathElementType_BackingField;
    private static dom.SVGTextPositioningElementTypeConfig _SVGTextPositioningElementType_BackingField;
    private static dom.SVGTitleElementTypeConfig _SVGTitleElementType_BackingField;
    private static dom.SVGTransformTypeConfig _SVGTransformType_BackingField;
    private static dom.SVGTransformListTypeConfig _SVGTransformListType_BackingField;
    private static dom.SVGUnitTypes _SVGUnitTypesInstance_BackingField;
    private static dom.SVGUseElementTypeConfig _SVGUseElementType_BackingField;
    private static dom.SVGViewElementTypeConfig _SVGViewElementType_BackingField;
    private static dom.SVGZoomAndPan2Config _SVGZoomAndPan2_BackingField;
    private static dom.SVGZoomEventTypeConfig _SVGZoomEventType_BackingField;
    private static dom.ScopedCredentialType2Config _ScopedCredentialType2_BackingField;
    private static dom.ScopedCredentialInfoTypeConfig _ScopedCredentialInfoType_BackingField;
    private static dom.ScreenTypeConfig _ScreenType_BackingField;
    private static dom.ScriptProcessorNodeTypeConfig _ScriptProcessorNodeType_BackingField;
    private static dom.SecurityPolicyViolationEventTypeConfig _SecurityPolicyViolationEventType_BackingField;
    private static dom.SelectionTypeConfig _SelectionType_BackingField;
    private static dom.ServiceUIFrameContext _ServiceUIFrameContextInstance_BackingField;
    private static dom.ServiceWorkerTypeConfig _ServiceWorkerType_BackingField;
    private static dom.ServiceWorkerContainerTypeConfig _ServiceWorkerContainerType_BackingField;
    private static dom.ServiceWorkerMessageEventTypeConfig _ServiceWorkerMessageEventType_BackingField;
    private static dom.ServiceWorkerRegistrationTypeConfig _ServiceWorkerRegistrationType_BackingField;
    private static dom.SourceBufferTypeConfig _SourceBufferType_BackingField;
    private static dom.SourceBufferListTypeConfig _SourceBufferListType_BackingField;
    private static dom.SpeechSynthesisTypeConfig _SpeechSynthesisType_BackingField;
    private static dom.SpeechSynthesisEventTypeConfig _SpeechSynthesisEventType_BackingField;
    private static dom.SpeechSynthesisUtteranceTypeConfig _SpeechSynthesisUtteranceType_BackingField;
    private static dom.SpeechSynthesisVoiceTypeConfig _SpeechSynthesisVoiceType_BackingField;
    private static dom.StereoPannerNodeTypeConfig _StereoPannerNodeType_BackingField;
    private static dom.StorageTypeConfig _StorageType_BackingField;
    private static dom.StorageEventTypeConfig _StorageEventType_BackingField;
    private static dom.StyleMediaTypeConfig _StyleMediaType_BackingField;
    private static dom.StyleSheetTypeConfig _StyleSheetType_BackingField;
    private static dom.StyleSheetListTypeConfig _StyleSheetListType_BackingField;
    private static dom.SubtleCryptoTypeConfig _SubtleCryptoType_BackingField;
    private static dom.SyncManagerTypeConfig _SyncManagerType_BackingField;
    private static dom.TextTypeConfig _TextType_BackingField;
    private static dom.TextDecoderTypeConfig _TextDecoderType_BackingField;
    private static dom.TextEncoderTypeConfig _TextEncoderType_BackingField;
    private static dom.TextEventTypeConfig _TextEventType_BackingField;
    private static dom.TextMetricsTypeConfig _TextMetricsType_BackingField;
    private static dom.TextTrackTypeConfig _TextTrackType_BackingField;
    private static dom.TextTrackCueTypeConfig _TextTrackCueType_BackingField;
    private static dom.TextTrackCueListTypeConfig _TextTrackCueListType_BackingField;
    private static dom.TextTrackListTypeConfig _TextTrackListType_BackingField;
    private static dom.TimeRangesTypeConfig _TimeRangesType_BackingField;
    private static dom.TouchTypeConfig _TouchType_BackingField;
    private static dom.TouchEventTypeConfig _TouchEventType_BackingField;
    private static dom.TouchListTypeConfig _TouchListType_BackingField;
    private static dom.TrackEventTypeConfig _TrackEventType_BackingField;
    private static dom.TransitionEventTypeConfig _TransitionEventType_BackingField;
    private static dom.TreeWalkerTypeConfig _TreeWalkerType_BackingField;
    private static dom.UIEventTypeConfig _UIEventType_BackingField;
    private static dom.URLTypeConfig _URLType_BackingField;
    private static dom.URLSearchParamsTypeConfig _URLSearchParamsType_BackingField;
    private static dom.VRDisplayTypeConfig _VRDisplayType_BackingField;
    private static dom.VRDisplayCapabilitiesTypeConfig _VRDisplayCapabilitiesType_BackingField;
    private static dom.VRDisplayEventTypeConfig _VRDisplayEventType_BackingField;
    private static dom.VREyeParametersTypeConfig _VREyeParametersType_BackingField;
    private static dom.VRFieldOfViewTypeConfig _VRFieldOfViewType_BackingField;
    private static dom.VRFrameDataTypeConfig _VRFrameDataType_BackingField;
    private static dom.VRPoseTypeConfig _VRPoseType_BackingField;
    private static dom.ValidityStateTypeConfig _ValidityStateType_BackingField;
    private static dom.VideoPlaybackQualityTypeConfig _VideoPlaybackQualityType_BackingField;
    private static dom.VideoTrackTypeConfig _VideoTrackType_BackingField;
    private static dom.VideoTrackListTypeConfig _VideoTrackListType_BackingField;
    private static dom.WEBGL_compressed_texture_s3tcTypeConfig _WEBGL_compressed_texture_s3tcType_BackingField;
    private static dom.WEBGL_debug_renderer_infoTypeConfig _WEBGL_debug_renderer_infoType_BackingField;
    private static dom.WEBGL_depth_textureTypeConfig _WEBGL_depth_textureType_BackingField;
    private static dom.WaveShaperNodeTypeConfig _WaveShaperNodeType_BackingField;
    private static dom.WebAuthenticationTypeConfig _WebAuthenticationType_BackingField;
    private static dom.WebAuthnAssertionTypeConfig _WebAuthnAssertionType_BackingField;
    private static dom.WebGLActiveInfoTypeConfig _WebGLActiveInfoType_BackingField;
    private static dom.WebGLBufferTypeConfig _WebGLBufferType_BackingField;
    private static dom.WebGLContextEventTypeConfig _WebGLContextEventType_BackingField;
    private static dom.WebGLFramebufferTypeConfig _WebGLFramebufferType_BackingField;
    private static dom.WebGLObjectTypeConfig _WebGLObjectType_BackingField;
    private static dom.WebGLProgramTypeConfig _WebGLProgramType_BackingField;
    private static dom.WebGLRenderbufferTypeConfig _WebGLRenderbufferType_BackingField;
    private static dom.WebGLRenderingContextTypeConfig _WebGLRenderingContextType_BackingField;
    private static dom.WebGLShaderTypeConfig _WebGLShaderType_BackingField;
    private static dom.WebGLShaderPrecisionFormatTypeConfig _WebGLShaderPrecisionFormatType_BackingField;
    private static dom.WebGLTextureTypeConfig _WebGLTextureType_BackingField;
    private static dom.WebGLUniformLocationTypeConfig _WebGLUniformLocationType_BackingField;
    private static dom.WebKitCSSMatrixTypeConfig _WebKitCSSMatrixType_BackingField;
    private static dom.WebKitDirectoryEntryTypeConfig _WebKitDirectoryEntryType_BackingField;
    private static dom.WebKitDirectoryReaderTypeConfig _WebKitDirectoryReaderType_BackingField;
    private static dom.WebKitEntryTypeConfig _WebKitEntryType_BackingField;
    private static dom.WebKitFileEntryTypeConfig _WebKitFileEntryType_BackingField;
    private static dom.WebKitFileSystemTypeConfig _WebKitFileSystemType_BackingField;
    private static dom.WebKitPointTypeConfig _WebKitPointType_BackingField;
    private static dom.WebSocketTypeConfig _WebSocketType_BackingField;
    private static dom.WheelEventTypeConfig _WheelEventType_BackingField;
    private static dom.WindowTypeConfig _WindowType_BackingField;
    private static dom.WorkerTypeConfig _WorkerType_BackingField;
    private static dom.WritableStreamTypeConfig _WritableStreamType_BackingField;
    private static dom.WritableStreamDefaultControllerTypeConfig _WritableStreamDefaultControllerType_BackingField;
    private static dom.WritableStreamDefaultWriterTypeConfig _WritableStreamDefaultWriterType_BackingField;
    private static dom.XMLDocumentTypeConfig _XMLDocumentType_BackingField;
    private static dom.XMLHttpRequestTypeConfig _XMLHttpRequestType_BackingField;
    private static dom.XMLHttpRequestUploadTypeConfig _XMLHttpRequestUploadType_BackingField;
    private static dom.XMLSerializerTypeConfig _XMLSerializerType_BackingField;
    private static dom.XPathEvaluatorTypeConfig _XPathEvaluatorType_BackingField;
    private static dom.XPathExpressionTypeConfig _XPathExpressionType_BackingField;
    private static dom.XPathNSResolverTypeConfig _XPathNSResolverType_BackingField;
    private static dom.XPathResultTypeConfig _XPathResultType_BackingField;
    private static dom.XSLTProcessorTypeConfig _XSLTProcessorType_BackingField;
    private static dom.webkitRTCPeerConnectionTypeConfig _webkitRTCPeerConnectionType_BackingField;
    private static dom.AudioConfig _Audio_BackingField;
    private static dom.ImageConfig _Image_BackingField;
    private static dom.OptionConfig _Option_BackingField;
    private static dom.BlobStatics _BlobInstance_BackingField;
    private static dom.URLStatics _URLInstance_BackingField;
    private static dom.URLSearchParamsStatics _URLSearchParamsInstance_BackingField;
    private static dom.ApplicationCache _applicationCache_BackingField;
    private static dom.CacheStorage _caches_BackingField;
    private static dom.Navigator _clientInformation_BackingField;
    private static bool _closed_BackingField;
    private static dom.Crypto _crypto_BackingField;
    private static dom.CustomElementRegistry _customElements_BackingField;
    private static string _defaultStatus_BackingField;
    private static double _devicePixelRatio_BackingField;
    private static string _doNotTrack_BackingField;
    private static dom.Document _document_BackingField;
    private static Union<dom.Event, Undefined> _event_BackingField;
    private static dom.External _external_BackingField;
    private static dom.Element _frameElement_BackingField;
    private static dom.Window _frames_BackingField;
    private static dom.History _history_BackingField;
    private static double _innerHeight_BackingField;
    private static double _innerWidth_BackingField;
    private static bool _isSecureContext_BackingField;
    private static double _length_BackingField;
    private static dom.Location _location_BackingField;
    private static dom.BarProp _locationbar_BackingField;
    private static dom.BarProp _menubar_BackingField;
    private static dom.ExtensionScriptApis _msContentScript_BackingField;
    private static dom.MSCredentials _msCredentials_BackingField;
    public static readonly Never name;
    private static dom.Navigator _navigator_BackingField;
    private static Union<string, bool> _offscreenBuffering_BackingField;
    private static dom.onabortFn _onabort_BackingField;
    private static dom.onbeforeunloadFn _onbeforeunload_BackingField;
    private static dom.onblurFn _onblur_BackingField;
    private static dom.oncanplayFn _oncanplay_BackingField;
    private static dom.oncanplayFn _oncanplaythrough_BackingField;
    private static dom.oncanplayFn _onchange_BackingField;
    private static dom.onclickFn _onclick_BackingField;
    private static dom.oncanplayFn _oncompassneedscalibration_BackingField;
    private static dom.oncontextmenuFn _oncontextmenu_BackingField;
    private static dom.onclickFn _ondblclick_BackingField;
    private static dom.ondevicelightFn _ondevicelight_BackingField;
    private static dom.ondevicemotionFn _ondevicemotion_BackingField;
    private static dom.ondeviceorientationFn _ondeviceorientation_BackingField;
    private static dom.ondragFn _ondrag_BackingField;
    private static dom.ondragFn _ondragend_BackingField;
    private static dom.ondragFn _ondragenter_BackingField;
    private static dom.ondragFn _ondragleave_BackingField;
    private static dom.ondragFn _ondragover_BackingField;
    private static dom.ondragFn _ondragstart_BackingField;
    private static dom.ondragFn _ondrop_BackingField;
    private static dom.oncanplayFn _ondurationchange_BackingField;
    private static dom.oncanplayFn _onemptied_BackingField;
    private static dom.oncanplayFn _onended_BackingField;
    private static dom.ErrorEventHandler _onerror_BackingField;
    private static dom.onblurFn _onfocus_BackingField;
    private static dom.onhashchangeFn _onhashchange_BackingField;
    private static dom.oncanplayFn _oninput_BackingField;
    private static dom.oncanplayFn _oninvalid_BackingField;
    private static dom.onkeydownFn _onkeydown_BackingField;
    private static dom.onkeydownFn _onkeypress_BackingField;
    private static dom.onkeydownFn _onkeyup_BackingField;
    private static dom.oncanplayFn _onload_BackingField;
    private static dom.oncanplayFn _onloadeddata_BackingField;
    private static dom.oncanplayFn _onloadedmetadata_BackingField;
    private static dom.oncanplayFn _onloadstart_BackingField;
    private static dom.onmessageFn _onmessage_BackingField;
    private static dom.onclickFn _onmousedown_BackingField;
    private static dom.onclickFn _onmouseenter_BackingField;
    private static dom.onclickFn _onmouseleave_BackingField;
    private static dom.onclickFn _onmousemove_BackingField;
    private static dom.onclickFn _onmouseout_BackingField;
    private static dom.onclickFn _onmouseover_BackingField;
    private static dom.onclickFn _onmouseup_BackingField;
    private static dom.onmousewheelFn _onmousewheel_BackingField;
    private static dom.oncanplayFn _onmsgesturechange_BackingField;
    private static dom.oncanplayFn _onmsgesturedoubletap_BackingField;
    private static dom.oncanplayFn _onmsgestureend_BackingField;
    private static dom.oncanplayFn _onmsgesturehold_BackingField;
    private static dom.oncanplayFn _onmsgesturestart_BackingField;
    private static dom.oncanplayFn _onmsgesturetap_BackingField;
    private static dom.oncanplayFn _onmsinertiastart_BackingField;
    private static dom.oncanplayFn _onmspointercancel_BackingField;
    private static dom.oncanplayFn _onmspointerdown_BackingField;
    private static dom.oncanplayFn _onmspointerenter_BackingField;
    private static dom.oncanplayFn _onmspointerleave_BackingField;
    private static dom.oncanplayFn _onmspointermove_BackingField;
    private static dom.oncanplayFn _onmspointerout_BackingField;
    private static dom.oncanplayFn _onmspointerover_BackingField;
    private static dom.oncanplayFn _onmspointerup_BackingField;
    private static dom.oncanplayFn _onoffline_BackingField;
    private static dom.oncanplayFn _ononline_BackingField;
    private static dom.oncanplayFn _onorientationchange_BackingField;
    private static dom.onpagehideFn _onpagehide_BackingField;
    private static dom.onpagehideFn _onpageshow_BackingField;
    private static dom.oncanplayFn _onpause_BackingField;
    private static dom.oncanplayFn _onplay_BackingField;
    private static dom.oncanplayFn _onplaying_BackingField;
    private static dom.onpopstateFn _onpopstate_BackingField;
    private static dom.onprogressFn _onprogress_BackingField;
    private static dom.oncanplayFn _onratechange_BackingField;
    private static dom.onprogressFn _onreadystatechange_BackingField;
    private static dom.oncanplayFn _onreset_BackingField;
    private static dom.onabortFn _onresize_BackingField;
    private static dom.onabortFn _onscroll_BackingField;
    private static dom.oncanplayFn _onseeked_BackingField;
    private static dom.oncanplayFn _onseeking_BackingField;
    private static dom.onabortFn _onselect_BackingField;
    private static dom.oncanplayFn _onstalled_BackingField;
    private static dom.onstorageFn _onstorage_BackingField;
    private static dom.oncanplayFn _onsubmit_BackingField;
    private static dom.oncanplayFn _onsuspend_BackingField;
    private static dom.oncanplayFn _ontimeupdate_BackingField;
    private static dom.ontouchcancelFn _ontouchcancel_BackingField;
    private static dom.ontouchendFn _ontouchend_BackingField;
    private static dom.ontouchmoveFn _ontouchmove_BackingField;
    private static dom.ontouchstartFn _ontouchstart_BackingField;
    private static dom.oncanplayFn _onunload_BackingField;
    private static dom.oncanplayFn _onvolumechange_BackingField;
    private static dom.oncanplayFn _onvrdisplayactivate_BackingField;
    private static dom.oncanplayFn _onvrdisplayblur_BackingField;
    private static dom.oncanplayFn _onvrdisplayconnect_BackingField;
    private static dom.oncanplayFn _onvrdisplaydeactivate_BackingField;
    private static dom.oncanplayFn _onvrdisplaydisconnect_BackingField;
    private static dom.oncanplayFn _onvrdisplayfocus_BackingField;
    private static dom.oncanplayFn _onvrdisplaypointerrestricted_BackingField;
    private static dom.oncanplayFn _onvrdisplaypointerunrestricted_BackingField;
    private static dom.oncanplayFn _onvrdisplaypresentchange_BackingField;
    private static dom.oncanplayFn _onwaiting_BackingField;
    private static object _opener_BackingField;
    private static Union<string, double> _orientation_BackingField;
    private static double _outerHeight_BackingField;
    private static double _outerWidth_BackingField;
    private static double _pageXOffset_BackingField;
    private static double _pageYOffset_BackingField;
    private static dom.Window _parent_BackingField;
    private static dom.Performance _performance_BackingField;
    private static dom.BarProp _personalbar_BackingField;
    private static dom.Screen _screen_BackingField;
    private static double _screenLeft_BackingField;
    private static double _screenTop_BackingField;
    private static double _screenX_BackingField;
    private static double _screenY_BackingField;
    private static double _scrollX_BackingField;
    private static double _scrollY_BackingField;
    private static dom.BarProp _scrollbars_BackingField;
    private static dom.Window _self_BackingField;
    private static dom.SpeechSynthesis _speechSynthesis_BackingField;
    private static string _status_BackingField;
    private static dom.BarProp _statusbar_BackingField;
    private static dom.StyleMedia _styleMedia_BackingField;
    private static dom.BarProp _toolbar_BackingField;
    private static dom.Window _top_BackingField;
    private static dom.Window _window_BackingField;
    private static dom.Storage _sessionStorage_BackingField;
    private static dom.Storage _localStorage_BackingField;
    private static dom.Console _console_BackingField;
    private static dom.oncontextmenuFn _onpointercancel_BackingField;
    private static dom.oncontextmenuFn _onpointerdown_BackingField;
    private static dom.oncontextmenuFn _onpointerenter_BackingField;
    private static dom.oncontextmenuFn _onpointerleave_BackingField;
    private static dom.oncontextmenuFn _onpointermove_BackingField;
    private static dom.oncontextmenuFn _onpointerout_BackingField;
    private static dom.oncontextmenuFn _onpointerover_BackingField;
    private static dom.oncontextmenuFn _onpointerup_BackingField;
    private static dom.onmousewheelFn _onwheel_BackingField;
    private static dom.IDBFactory _indexedDB_BackingField;

    [Name("ANGLE_instanced_arrays")]
    public static dom.ANGLE_instanced_arraysTypeConfig ANGLE_instanced_arraysType
    {
      get
      {
        return dom._ANGLE_instanced_arraysType_BackingField;
      }
      set
      {
        dom._ANGLE_instanced_arraysType_BackingField = value;
      }
    }

    [Name("AbortController")]
    public static dom.AbortControllerTypeConfig AbortControllerType
    {
      get
      {
        return dom._AbortControllerType_BackingField;
      }
      set
      {
        dom._AbortControllerType_BackingField = value;
      }
    }

    [Name("AbortSignal")]
    public static dom.AbortSignalTypeConfig AbortSignalType
    {
      get
      {
        return dom._AbortSignalType_BackingField;
      }
      set
      {
        dom._AbortSignalType_BackingField = value;
      }
    }

    [Name("AnalyserNode")]
    public static dom.AnalyserNodeTypeConfig AnalyserNodeType
    {
      get
      {
        return dom._AnalyserNodeType_BackingField;
      }
      set
      {
        dom._AnalyserNodeType_BackingField = value;
      }
    }

    [Name("Animation")]
    public static dom.AnimationTypeConfig AnimationType
    {
      get
      {
        return dom._AnimationType_BackingField;
      }
      set
      {
        dom._AnimationType_BackingField = value;
      }
    }

    [Name("AnimationEvent")]
    public static dom.AnimationEventTypeConfig AnimationEventType
    {
      get
      {
        return dom._AnimationEventType_BackingField;
      }
      set
      {
        dom._AnimationEventType_BackingField = value;
      }
    }

    [Name("AnimationPlaybackEvent")]
    public static dom.AnimationPlaybackEventTypeConfig AnimationPlaybackEventType
    {
      get
      {
        return dom._AnimationPlaybackEventType_BackingField;
      }
      set
      {
        dom._AnimationPlaybackEventType_BackingField = value;
      }
    }

    [Name("ApplicationCache")]
    public static dom.ApplicationCacheTypeConfig ApplicationCacheType
    {
      get
      {
        return dom._ApplicationCacheType_BackingField;
      }
      set
      {
        dom._ApplicationCacheType_BackingField = value;
      }
    }

    [Name("Attr")]
    public static dom.AttrTypeConfig AttrType
    {
      get
      {
        return dom._AttrType_BackingField;
      }
      set
      {
        dom._AttrType_BackingField = value;
      }
    }

    [Name("AudioBuffer")]
    public static dom.AudioBufferTypeConfig AudioBufferType
    {
      get
      {
        return dom._AudioBufferType_BackingField;
      }
      set
      {
        dom._AudioBufferType_BackingField = value;
      }
    }

    [Name("AudioBufferSourceNode")]
    public static dom.AudioBufferSourceNodeTypeConfig AudioBufferSourceNodeType
    {
      get
      {
        return dom._AudioBufferSourceNodeType_BackingField;
      }
      set
      {
        dom._AudioBufferSourceNodeType_BackingField = value;
      }
    }

    [Name("AudioContext")]
    public static dom.AudioContextTypeConfig AudioContextType
    {
      get
      {
        return dom._AudioContextType_BackingField;
      }
      set
      {
        dom._AudioContextType_BackingField = value;
      }
    }

    [Name("AudioDestinationNode")]
    public static dom.AudioDestinationNodeTypeConfig AudioDestinationNodeType
    {
      get
      {
        return dom._AudioDestinationNodeType_BackingField;
      }
      set
      {
        dom._AudioDestinationNodeType_BackingField = value;
      }
    }

    [Name("AudioListener")]
    public static dom.AudioListenerTypeConfig AudioListenerType
    {
      get
      {
        return dom._AudioListenerType_BackingField;
      }
      set
      {
        dom._AudioListenerType_BackingField = value;
      }
    }

    [Name("AudioNode")]
    public static dom.AudioNodeTypeConfig AudioNodeType
    {
      get
      {
        return dom._AudioNodeType_BackingField;
      }
      set
      {
        dom._AudioNodeType_BackingField = value;
      }
    }

    [Name("AudioParam")]
    public static dom.AudioParamTypeConfig AudioParamType
    {
      get
      {
        return dom._AudioParamType_BackingField;
      }
      set
      {
        dom._AudioParamType_BackingField = value;
      }
    }

    [Name("AudioProcessingEvent")]
    public static dom.AudioProcessingEventTypeConfig AudioProcessingEventType
    {
      get
      {
        return dom._AudioProcessingEventType_BackingField;
      }
      set
      {
        dom._AudioProcessingEventType_BackingField = value;
      }
    }

    [Name("AudioTrack")]
    public static dom.AudioTrackTypeConfig AudioTrackType
    {
      get
      {
        return dom._AudioTrackType_BackingField;
      }
      set
      {
        dom._AudioTrackType_BackingField = value;
      }
    }

    [Name("AudioTrackList")]
    public static dom.AudioTrackListTypeConfig AudioTrackListType
    {
      get
      {
        return dom._AudioTrackListType_BackingField;
      }
      set
      {
        dom._AudioTrackListType_BackingField = value;
      }
    }

    [Name("BarProp")]
    public static dom.BarPropTypeConfig BarPropType
    {
      get
      {
        return dom._BarPropType_BackingField;
      }
      set
      {
        dom._BarPropType_BackingField = value;
      }
    }

    [Name("BeforeUnloadEvent")]
    public static dom.BeforeUnloadEventTypeConfig BeforeUnloadEventType
    {
      get
      {
        return dom._BeforeUnloadEventType_BackingField;
      }
      set
      {
        dom._BeforeUnloadEventType_BackingField = value;
      }
    }

    [Name("BhxBrowser")]
    public static dom.BhxBrowserTypeConfig BhxBrowserType
    {
      get
      {
        return dom._BhxBrowserType_BackingField;
      }
      set
      {
        dom._BhxBrowserType_BackingField = value;
      }
    }

    [Name("BiquadFilterNode")]
    public static dom.BiquadFilterNodeTypeConfig BiquadFilterNodeType
    {
      get
      {
        return dom._BiquadFilterNodeType_BackingField;
      }
      set
      {
        dom._BiquadFilterNodeType_BackingField = value;
      }
    }

    [Name("Blob")]
    public static dom.BlobTypeConfig BlobType
    {
      get
      {
        return dom._BlobType_BackingField;
      }
      set
      {
        dom._BlobType_BackingField = value;
      }
    }

    [Name("BroadcastChannel")]
    public static dom.BroadcastChannelTypeConfig BroadcastChannelType
    {
      get
      {
        return dom._BroadcastChannelType_BackingField;
      }
      set
      {
        dom._BroadcastChannelType_BackingField = value;
      }
    }

    [Name("ByteLengthQueuingStrategy")]
    public static dom.ByteLengthQueuingStrategyTypeConfig ByteLengthQueuingStrategyType
    {
      get
      {
        return dom._ByteLengthQueuingStrategyType_BackingField;
      }
      set
      {
        dom._ByteLengthQueuingStrategyType_BackingField = value;
      }
    }

    [Name("CDATASection")]
    public static dom.CDATASectionTypeConfig CDATASectionType
    {
      get
      {
        return dom._CDATASectionType_BackingField;
      }
      set
      {
        dom._CDATASectionType_BackingField = value;
      }
    }

    [Name("CSS")]
    public static dom.CSS CSSInstance
    {
      get
      {
        return dom._CSSInstance_BackingField;
      }
      set
      {
        dom._CSSInstance_BackingField = value;
      }
    }

    [Name("CSSConditionRule")]
    public static dom.CSSConditionRuleTypeConfig CSSConditionRuleType
    {
      get
      {
        return dom._CSSConditionRuleType_BackingField;
      }
      set
      {
        dom._CSSConditionRuleType_BackingField = value;
      }
    }

    [Name("CSSFontFaceRule")]
    public static dom.CSSFontFaceRuleTypeConfig CSSFontFaceRuleType
    {
      get
      {
        return dom._CSSFontFaceRuleType_BackingField;
      }
      set
      {
        dom._CSSFontFaceRuleType_BackingField = value;
      }
    }

    [Name("CSSGroupingRule")]
    public static dom.CSSGroupingRuleTypeConfig CSSGroupingRuleType
    {
      get
      {
        return dom._CSSGroupingRuleType_BackingField;
      }
      set
      {
        dom._CSSGroupingRuleType_BackingField = value;
      }
    }

    [Name("CSSImportRule")]
    public static dom.CSSImportRuleTypeConfig CSSImportRuleType
    {
      get
      {
        return dom._CSSImportRuleType_BackingField;
      }
      set
      {
        dom._CSSImportRuleType_BackingField = value;
      }
    }

    [Name("CSSKeyframeRule")]
    public static dom.CSSKeyframeRuleTypeConfig CSSKeyframeRuleType
    {
      get
      {
        return dom._CSSKeyframeRuleType_BackingField;
      }
      set
      {
        dom._CSSKeyframeRuleType_BackingField = value;
      }
    }

    [Name("CSSKeyframesRule")]
    public static dom.CSSKeyframesRuleTypeConfig CSSKeyframesRuleType
    {
      get
      {
        return dom._CSSKeyframesRuleType_BackingField;
      }
      set
      {
        dom._CSSKeyframesRuleType_BackingField = value;
      }
    }

    [Name("CSSMediaRule")]
    public static dom.CSSMediaRuleTypeConfig CSSMediaRuleType
    {
      get
      {
        return dom._CSSMediaRuleType_BackingField;
      }
      set
      {
        dom._CSSMediaRuleType_BackingField = value;
      }
    }

    [Name("CSSNamespaceRule")]
    public static dom.CSSNamespaceRuleTypeConfig CSSNamespaceRuleType
    {
      get
      {
        return dom._CSSNamespaceRuleType_BackingField;
      }
      set
      {
        dom._CSSNamespaceRuleType_BackingField = value;
      }
    }

    [Name("CSSPageRule")]
    public static dom.CSSPageRuleTypeConfig CSSPageRuleType
    {
      get
      {
        return dom._CSSPageRuleType_BackingField;
      }
      set
      {
        dom._CSSPageRuleType_BackingField = value;
      }
    }

    [Name("CSSRule")]
    public static dom.CSSRuleTypeConfig CSSRuleType
    {
      get
      {
        return dom._CSSRuleType_BackingField;
      }
      set
      {
        dom._CSSRuleType_BackingField = value;
      }
    }

    [Name("CSSRuleList")]
    public static dom.CSSRuleListTypeConfig CSSRuleListType
    {
      get
      {
        return dom._CSSRuleListType_BackingField;
      }
      set
      {
        dom._CSSRuleListType_BackingField = value;
      }
    }

    [Name("CSSStyleDeclaration")]
    public static dom.CSSStyleDeclarationTypeConfig CSSStyleDeclarationType
    {
      get
      {
        return dom._CSSStyleDeclarationType_BackingField;
      }
      set
      {
        dom._CSSStyleDeclarationType_BackingField = value;
      }
    }

    [Name("CSSStyleRule")]
    public static dom.CSSStyleRuleTypeConfig CSSStyleRuleType
    {
      get
      {
        return dom._CSSStyleRuleType_BackingField;
      }
      set
      {
        dom._CSSStyleRuleType_BackingField = value;
      }
    }

    [Name("CSSStyleSheet")]
    public static dom.CSSStyleSheetTypeConfig CSSStyleSheetType
    {
      get
      {
        return dom._CSSStyleSheetType_BackingField;
      }
      set
      {
        dom._CSSStyleSheetType_BackingField = value;
      }
    }

    [Name("CSSSupportsRule")]
    public static dom.CSSSupportsRuleTypeConfig CSSSupportsRuleType
    {
      get
      {
        return dom._CSSSupportsRuleType_BackingField;
      }
      set
      {
        dom._CSSSupportsRuleType_BackingField = value;
      }
    }

    [Name("Cache")]
    public static dom.CacheTypeConfig CacheType
    {
      get
      {
        return dom._CacheType_BackingField;
      }
      set
      {
        dom._CacheType_BackingField = value;
      }
    }

    [Name("CacheStorage")]
    public static dom.CacheStorageTypeConfig CacheStorageType
    {
      get
      {
        return dom._CacheStorageType_BackingField;
      }
      set
      {
        dom._CacheStorageType_BackingField = value;
      }
    }

    [Name("CanvasGradient")]
    public static dom.CanvasGradientTypeConfig CanvasGradientType
    {
      get
      {
        return dom._CanvasGradientType_BackingField;
      }
      set
      {
        dom._CanvasGradientType_BackingField = value;
      }
    }

    [Name("CanvasPattern")]
    public static dom.CanvasPatternTypeConfig CanvasPatternType
    {
      get
      {
        return dom._CanvasPatternType_BackingField;
      }
      set
      {
        dom._CanvasPatternType_BackingField = value;
      }
    }

    [Name("CanvasRenderingContext2D")]
    public static dom.CanvasRenderingContext2DTypeConfig CanvasRenderingContext2DType
    {
      get
      {
        return dom._CanvasRenderingContext2DType_BackingField;
      }
      set
      {
        dom._CanvasRenderingContext2DType_BackingField = value;
      }
    }

    [Name("ChannelMergerNode")]
    public static dom.ChannelMergerNodeTypeConfig ChannelMergerNodeType
    {
      get
      {
        return dom._ChannelMergerNodeType_BackingField;
      }
      set
      {
        dom._ChannelMergerNodeType_BackingField = value;
      }
    }

    [Name("ChannelSplitterNode")]
    public static dom.ChannelSplitterNodeTypeConfig ChannelSplitterNodeType
    {
      get
      {
        return dom._ChannelSplitterNodeType_BackingField;
      }
      set
      {
        dom._ChannelSplitterNodeType_BackingField = value;
      }
    }

    [Name("CharacterData")]
    public static dom.CharacterDataTypeConfig CharacterDataType
    {
      get
      {
        return dom._CharacterDataType_BackingField;
      }
      set
      {
        dom._CharacterDataType_BackingField = value;
      }
    }

    [Name("ClientRect")]
    public static dom.ClientRectTypeConfig ClientRectType
    {
      get
      {
        return dom._ClientRectType_BackingField;
      }
      set
      {
        dom._ClientRectType_BackingField = value;
      }
    }

    [Name("ClientRectList")]
    public static dom.ClientRectListTypeConfig ClientRectListType
    {
      get
      {
        return dom._ClientRectListType_BackingField;
      }
      set
      {
        dom._ClientRectListType_BackingField = value;
      }
    }

    [Name("ClipboardEvent")]
    public static dom.ClipboardEventTypeConfig ClipboardEventType
    {
      get
      {
        return dom._ClipboardEventType_BackingField;
      }
      set
      {
        dom._ClipboardEventType_BackingField = value;
      }
    }

    [Name("CloseEvent")]
    public static dom.CloseEventTypeConfig CloseEventType
    {
      get
      {
        return dom._CloseEventType_BackingField;
      }
      set
      {
        dom._CloseEventType_BackingField = value;
      }
    }

    [Name("Comment")]
    public static dom.CommentTypeConfig CommentType
    {
      get
      {
        return dom._CommentType_BackingField;
      }
      set
      {
        dom._CommentType_BackingField = value;
      }
    }

    [Name("CompositionEvent")]
    public static dom.CompositionEventTypeConfig CompositionEventType
    {
      get
      {
        return dom._CompositionEventType_BackingField;
      }
      set
      {
        dom._CompositionEventType_BackingField = value;
      }
    }

    [Name("Console")]
    public static dom.ConsoleTypeConfig ConsoleType
    {
      get
      {
        return dom._ConsoleType_BackingField;
      }
      set
      {
        dom._ConsoleType_BackingField = value;
      }
    }

    [Name("ContentScriptGlobalScope")]
    public static dom.ContentScriptGlobalScopeTypeConfig ContentScriptGlobalScopeType
    {
      get
      {
        return dom._ContentScriptGlobalScopeType_BackingField;
      }
      set
      {
        dom._ContentScriptGlobalScopeType_BackingField = value;
      }
    }

    [Name("ConvolverNode")]
    public static dom.ConvolverNodeTypeConfig ConvolverNodeType
    {
      get
      {
        return dom._ConvolverNodeType_BackingField;
      }
      set
      {
        dom._ConvolverNodeType_BackingField = value;
      }
    }

    [Name("Coordinates")]
    public static dom.CoordinatesTypeConfig CoordinatesType
    {
      get
      {
        return dom._CoordinatesType_BackingField;
      }
      set
      {
        dom._CoordinatesType_BackingField = value;
      }
    }

    [Name("CountQueuingStrategy")]
    public static dom.CountQueuingStrategyTypeConfig CountQueuingStrategyType
    {
      get
      {
        return dom._CountQueuingStrategyType_BackingField;
      }
      set
      {
        dom._CountQueuingStrategyType_BackingField = value;
      }
    }

    [Name("Crypto")]
    public static dom.CryptoTypeConfig CryptoType
    {
      get
      {
        return dom._CryptoType_BackingField;
      }
      set
      {
        dom._CryptoType_BackingField = value;
      }
    }

    [Name("CryptoKey")]
    public static dom.CryptoKeyTypeConfig CryptoKeyType
    {
      get
      {
        return dom._CryptoKeyType_BackingField;
      }
      set
      {
        dom._CryptoKeyType_BackingField = value;
      }
    }

    [Name("CryptoKeyPair")]
    public static dom.CryptoKeyPairTypeConfig CryptoKeyPairType
    {
      get
      {
        return dom._CryptoKeyPairType_BackingField;
      }
      set
      {
        dom._CryptoKeyPairType_BackingField = value;
      }
    }

    [Name("CustomEvent")]
    public static dom.CustomEvent2Config CustomEvent2
    {
      get
      {
        return dom._CustomEvent2_BackingField;
      }
      set
      {
        dom._CustomEvent2_BackingField = value;
      }
    }

    [Name("DOMError")]
    public static dom.DOMErrorTypeConfig DOMErrorType
    {
      get
      {
        return dom._DOMErrorType_BackingField;
      }
      set
      {
        dom._DOMErrorType_BackingField = value;
      }
    }

    [Name("DOMException")]
    public static dom.DOMExceptionTypeConfig DOMExceptionType
    {
      get
      {
        return dom._DOMExceptionType_BackingField;
      }
      set
      {
        dom._DOMExceptionType_BackingField = value;
      }
    }

    [Name("DOMImplementation")]
    public static dom.DOMImplementationTypeConfig DOMImplementationType
    {
      get
      {
        return dom._DOMImplementationType_BackingField;
      }
      set
      {
        dom._DOMImplementationType_BackingField = value;
      }
    }

    [Name("DOMParser")]
    public static dom.DOMParserTypeConfig DOMParserType
    {
      get
      {
        return dom._DOMParserType_BackingField;
      }
      set
      {
        dom._DOMParserType_BackingField = value;
      }
    }

    [Name("DOMRect")]
    public static dom.DOMRectTypeConfig DOMRectType
    {
      get
      {
        return dom._DOMRectType_BackingField;
      }
      set
      {
        dom._DOMRectType_BackingField = value;
      }
    }

    [Name("DOMRectReadOnly")]
    public static dom.DOMRectReadOnlyTypeConfig DOMRectReadOnlyType
    {
      get
      {
        return dom._DOMRectReadOnlyType_BackingField;
      }
      set
      {
        dom._DOMRectReadOnlyType_BackingField = value;
      }
    }

    [Name("DOMSettableTokenList")]
    public static dom.DOMSettableTokenListTypeConfig DOMSettableTokenListType
    {
      get
      {
        return dom._DOMSettableTokenListType_BackingField;
      }
      set
      {
        dom._DOMSettableTokenListType_BackingField = value;
      }
    }

    [Name("DOMStringList")]
    public static dom.DOMStringListTypeConfig DOMStringListType
    {
      get
      {
        return dom._DOMStringListType_BackingField;
      }
      set
      {
        dom._DOMStringListType_BackingField = value;
      }
    }

    [Name("DOMStringMap")]
    public static dom.DOMStringMapTypeConfig DOMStringMapType
    {
      get
      {
        return dom._DOMStringMapType_BackingField;
      }
      set
      {
        dom._DOMStringMapType_BackingField = value;
      }
    }

    [Name("DOMTokenList")]
    public static dom.DOMTokenListTypeConfig DOMTokenListType
    {
      get
      {
        return dom._DOMTokenListType_BackingField;
      }
      set
      {
        dom._DOMTokenListType_BackingField = value;
      }
    }

    [Name("DataCue")]
    public static dom.DataCueTypeConfig DataCueType
    {
      get
      {
        return dom._DataCueType_BackingField;
      }
      set
      {
        dom._DataCueType_BackingField = value;
      }
    }

    [Name("DataTransfer")]
    public static dom.DataTransferTypeConfig DataTransferType
    {
      get
      {
        return dom._DataTransferType_BackingField;
      }
      set
      {
        dom._DataTransferType_BackingField = value;
      }
    }

    [Name("DataTransferItem")]
    public static dom.DataTransferItemTypeConfig DataTransferItemType
    {
      get
      {
        return dom._DataTransferItemType_BackingField;
      }
      set
      {
        dom._DataTransferItemType_BackingField = value;
      }
    }

    [Name("DataTransferItemList")]
    public static dom.DataTransferItemListTypeConfig DataTransferItemListType
    {
      get
      {
        return dom._DataTransferItemListType_BackingField;
      }
      set
      {
        dom._DataTransferItemListType_BackingField = value;
      }
    }

    [Name("DeferredPermissionRequest")]
    public static dom.DeferredPermissionRequestTypeConfig DeferredPermissionRequestType
    {
      get
      {
        return dom._DeferredPermissionRequestType_BackingField;
      }
      set
      {
        dom._DeferredPermissionRequestType_BackingField = value;
      }
    }

    [Name("DelayNode")]
    public static dom.DelayNodeTypeConfig DelayNodeType
    {
      get
      {
        return dom._DelayNodeType_BackingField;
      }
      set
      {
        dom._DelayNodeType_BackingField = value;
      }
    }

    [Name("DeviceAcceleration")]
    public static dom.DeviceAccelerationTypeConfig DeviceAccelerationType
    {
      get
      {
        return dom._DeviceAccelerationType_BackingField;
      }
      set
      {
        dom._DeviceAccelerationType_BackingField = value;
      }
    }

    [Name("DeviceLightEvent")]
    public static dom.DeviceLightEventTypeConfig DeviceLightEventType
    {
      get
      {
        return dom._DeviceLightEventType_BackingField;
      }
      set
      {
        dom._DeviceLightEventType_BackingField = value;
      }
    }

    [Name("DeviceMotionEvent")]
    public static dom.DeviceMotionEventTypeConfig DeviceMotionEventType
    {
      get
      {
        return dom._DeviceMotionEventType_BackingField;
      }
      set
      {
        dom._DeviceMotionEventType_BackingField = value;
      }
    }

    [Name("DeviceOrientationEvent")]
    public static dom.DeviceOrientationEventTypeConfig DeviceOrientationEventType
    {
      get
      {
        return dom._DeviceOrientationEventType_BackingField;
      }
      set
      {
        dom._DeviceOrientationEventType_BackingField = value;
      }
    }

    [Name("DeviceRotationRate")]
    public static dom.DeviceRotationRateTypeConfig DeviceRotationRateType
    {
      get
      {
        return dom._DeviceRotationRateType_BackingField;
      }
      set
      {
        dom._DeviceRotationRateType_BackingField = value;
      }
    }

    [Name("Document")]
    public static dom.DocumentType2Config DocumentType2
    {
      get
      {
        return dom._DocumentType2_BackingField;
      }
      set
      {
        dom._DocumentType2_BackingField = value;
      }
    }

    [Name("DocumentFragment")]
    public static dom.DocumentFragmentTypeConfig DocumentFragmentType
    {
      get
      {
        return dom._DocumentFragmentType_BackingField;
      }
      set
      {
        dom._DocumentFragmentType_BackingField = value;
      }
    }

    [Name("DocumentType")]
    public static dom.DocumentTypeTypeConfig DocumentTypeType
    {
      get
      {
        return dom._DocumentTypeType_BackingField;
      }
      set
      {
        dom._DocumentTypeType_BackingField = value;
      }
    }

    [Name("DragEvent")]
    public static dom.DragEventTypeConfig DragEventType
    {
      get
      {
        return dom._DragEventType_BackingField;
      }
      set
      {
        dom._DragEventType_BackingField = value;
      }
    }

    [Name("DynamicsCompressorNode")]
    public static dom.DynamicsCompressorNodeTypeConfig DynamicsCompressorNodeType
    {
      get
      {
        return dom._DynamicsCompressorNodeType_BackingField;
      }
      set
      {
        dom._DynamicsCompressorNodeType_BackingField = value;
      }
    }

    [Name("EXT_texture_filter_anisotropic")]
    public static dom.EXT_texture_filter_anisotropicTypeConfig EXT_texture_filter_anisotropicType
    {
      get
      {
        return dom._EXT_texture_filter_anisotropicType_BackingField;
      }
      set
      {
        dom._EXT_texture_filter_anisotropicType_BackingField = value;
      }
    }

    [Name("Element")]
    public static dom.ElementTypeConfig ElementType
    {
      get
      {
        return dom._ElementType_BackingField;
      }
      set
      {
        dom._ElementType_BackingField = value;
      }
    }

    [Name("ErrorEvent")]
    public static dom.ErrorEventTypeConfig ErrorEventType
    {
      get
      {
        return dom._ErrorEventType_BackingField;
      }
      set
      {
        dom._ErrorEventType_BackingField = value;
      }
    }

    [Name("Event")]
    public static dom.EventTypeConfig EventType
    {
      get
      {
        return dom._EventType_BackingField;
      }
      set
      {
        dom._EventType_BackingField = value;
      }
    }

    [Name("EventSource")]
    public static dom.EventSourceTypeConfig EventSourceType
    {
      get
      {
        return dom._EventSourceType_BackingField;
      }
      set
      {
        dom._EventSourceType_BackingField = value;
      }
    }

    [Name("EventTarget")]
    public static dom.EventTargetTypeConfig EventTargetType
    {
      get
      {
        return dom._EventTargetType_BackingField;
      }
      set
      {
        dom._EventTargetType_BackingField = value;
      }
    }

    [Name("ExtensionScriptApis")]
    public static dom.ExtensionScriptApisTypeConfig ExtensionScriptApisType
    {
      get
      {
        return dom._ExtensionScriptApisType_BackingField;
      }
      set
      {
        dom._ExtensionScriptApisType_BackingField = value;
      }
    }

    [Name("External")]
    public static dom.ExternalTypeConfig ExternalType
    {
      get
      {
        return dom._ExternalType_BackingField;
      }
      set
      {
        dom._ExternalType_BackingField = value;
      }
    }

    [Name("File")]
    public static dom.FileTypeConfig FileType
    {
      get
      {
        return dom._FileType_BackingField;
      }
      set
      {
        dom._FileType_BackingField = value;
      }
    }

    [Name("FileList")]
    public static dom.FileListTypeConfig FileListType
    {
      get
      {
        return dom._FileListType_BackingField;
      }
      set
      {
        dom._FileListType_BackingField = value;
      }
    }

    [Name("FileReader")]
    public static dom.FileReaderTypeConfig FileReaderType
    {
      get
      {
        return dom._FileReaderType_BackingField;
      }
      set
      {
        dom._FileReaderType_BackingField = value;
      }
    }

    [Name("FocusEvent")]
    public static dom.FocusEventTypeConfig FocusEventType
    {
      get
      {
        return dom._FocusEventType_BackingField;
      }
      set
      {
        dom._FocusEventType_BackingField = value;
      }
    }

    [Name("FocusNavigationEvent")]
    public static dom.FocusNavigationEventTypeConfig FocusNavigationEventType
    {
      get
      {
        return dom._FocusNavigationEventType_BackingField;
      }
      set
      {
        dom._FocusNavigationEventType_BackingField = value;
      }
    }

    [Name("FormData")]
    public static dom.FormDataTypeConfig FormDataType
    {
      get
      {
        return dom._FormDataType_BackingField;
      }
      set
      {
        dom._FormDataType_BackingField = value;
      }
    }

    [Name("GainNode")]
    public static dom.GainNodeTypeConfig GainNodeType
    {
      get
      {
        return dom._GainNodeType_BackingField;
      }
      set
      {
        dom._GainNodeType_BackingField = value;
      }
    }

    [Name("Gamepad")]
    public static dom.GamepadTypeConfig GamepadType
    {
      get
      {
        return dom._GamepadType_BackingField;
      }
      set
      {
        dom._GamepadType_BackingField = value;
      }
    }

    [Name("GamepadButton")]
    public static dom.GamepadButtonTypeConfig GamepadButtonType
    {
      get
      {
        return dom._GamepadButtonType_BackingField;
      }
      set
      {
        dom._GamepadButtonType_BackingField = value;
      }
    }

    [Name("GamepadEvent")]
    public static dom.GamepadEventTypeConfig GamepadEventType
    {
      get
      {
        return dom._GamepadEventType_BackingField;
      }
      set
      {
        dom._GamepadEventType_BackingField = value;
      }
    }

    [Name("GamepadHapticActuator")]
    public static dom.GamepadHapticActuatorType2Config GamepadHapticActuatorType2
    {
      get
      {
        return dom._GamepadHapticActuatorType2_BackingField;
      }
      set
      {
        dom._GamepadHapticActuatorType2_BackingField = value;
      }
    }

    [Name("GamepadPose")]
    public static dom.GamepadPoseTypeConfig GamepadPoseType
    {
      get
      {
        return dom._GamepadPoseType_BackingField;
      }
      set
      {
        dom._GamepadPoseType_BackingField = value;
      }
    }

    [Name("Geolocation")]
    public static dom.GeolocationTypeConfig GeolocationType
    {
      get
      {
        return dom._GeolocationType_BackingField;
      }
      set
      {
        dom._GeolocationType_BackingField = value;
      }
    }

    [Name("HTMLAllCollection")]
    public static dom.HTMLAllCollectionTypeConfig HTMLAllCollectionType
    {
      get
      {
        return dom._HTMLAllCollectionType_BackingField;
      }
      set
      {
        dom._HTMLAllCollectionType_BackingField = value;
      }
    }

    [Name("HTMLAnchorElement")]
    public static dom.HTMLAnchorElementTypeConfig HTMLAnchorElementType
    {
      get
      {
        return dom._HTMLAnchorElementType_BackingField;
      }
      set
      {
        dom._HTMLAnchorElementType_BackingField = value;
      }
    }

    [Name("HTMLAppletElement")]
    public static dom.HTMLAppletElementTypeConfig HTMLAppletElementType
    {
      get
      {
        return dom._HTMLAppletElementType_BackingField;
      }
      set
      {
        dom._HTMLAppletElementType_BackingField = value;
      }
    }

    [Name("HTMLAreaElement")]
    public static dom.HTMLAreaElementTypeConfig HTMLAreaElementType
    {
      get
      {
        return dom._HTMLAreaElementType_BackingField;
      }
      set
      {
        dom._HTMLAreaElementType_BackingField = value;
      }
    }

    [Name("HTMLAreasCollection")]
    public static dom.HTMLAreasCollectionTypeConfig HTMLAreasCollectionType
    {
      get
      {
        return dom._HTMLAreasCollectionType_BackingField;
      }
      set
      {
        dom._HTMLAreasCollectionType_BackingField = value;
      }
    }

    [Name("HTMLAudioElement")]
    public static dom.HTMLAudioElementTypeConfig HTMLAudioElementType
    {
      get
      {
        return dom._HTMLAudioElementType_BackingField;
      }
      set
      {
        dom._HTMLAudioElementType_BackingField = value;
      }
    }

    [Name("HTMLBRElement")]
    public static dom.HTMLBRElementTypeConfig HTMLBRElementType
    {
      get
      {
        return dom._HTMLBRElementType_BackingField;
      }
      set
      {
        dom._HTMLBRElementType_BackingField = value;
      }
    }

    [Name("HTMLBaseElement")]
    public static dom.HTMLBaseElementTypeConfig HTMLBaseElementType
    {
      get
      {
        return dom._HTMLBaseElementType_BackingField;
      }
      set
      {
        dom._HTMLBaseElementType_BackingField = value;
      }
    }

    [Name("HTMLBaseFontElement")]
    public static dom.HTMLBaseFontElementTypeConfig HTMLBaseFontElementType
    {
      get
      {
        return dom._HTMLBaseFontElementType_BackingField;
      }
      set
      {
        dom._HTMLBaseFontElementType_BackingField = value;
      }
    }

    [Name("HTMLBodyElement")]
    public static dom.HTMLBodyElementTypeConfig HTMLBodyElementType
    {
      get
      {
        return dom._HTMLBodyElementType_BackingField;
      }
      set
      {
        dom._HTMLBodyElementType_BackingField = value;
      }
    }

    [Name("HTMLButtonElement")]
    public static dom.HTMLButtonElementTypeConfig HTMLButtonElementType
    {
      get
      {
        return dom._HTMLButtonElementType_BackingField;
      }
      set
      {
        dom._HTMLButtonElementType_BackingField = value;
      }
    }

    [Name("HTMLCanvasElement")]
    public static dom.HTMLCanvasElementTypeConfig HTMLCanvasElementType
    {
      get
      {
        return dom._HTMLCanvasElementType_BackingField;
      }
      set
      {
        dom._HTMLCanvasElementType_BackingField = value;
      }
    }

    [Name("HTMLCollection")]
    public static dom.HTMLCollectionTypeConfig HTMLCollectionType
    {
      get
      {
        return dom._HTMLCollectionType_BackingField;
      }
      set
      {
        dom._HTMLCollectionType_BackingField = value;
      }
    }

    [Name("HTMLDListElement")]
    public static dom.HTMLDListElementTypeConfig HTMLDListElementType
    {
      get
      {
        return dom._HTMLDListElementType_BackingField;
      }
      set
      {
        dom._HTMLDListElementType_BackingField = value;
      }
    }

    [Name("HTMLDataElement")]
    public static dom.HTMLDataElementTypeConfig HTMLDataElementType
    {
      get
      {
        return dom._HTMLDataElementType_BackingField;
      }
      set
      {
        dom._HTMLDataElementType_BackingField = value;
      }
    }

    [Name("HTMLDataListElement")]
    public static dom.HTMLDataListElementTypeConfig HTMLDataListElementType
    {
      get
      {
        return dom._HTMLDataListElementType_BackingField;
      }
      set
      {
        dom._HTMLDataListElementType_BackingField = value;
      }
    }

    [Name("HTMLDetailsElement")]
    public static dom.HTMLDetailsElementTypeConfig HTMLDetailsElementType
    {
      get
      {
        return dom._HTMLDetailsElementType_BackingField;
      }
      set
      {
        dom._HTMLDetailsElementType_BackingField = value;
      }
    }

    [Name("HTMLDialogElement")]
    public static dom.HTMLDialogElementTypeConfig HTMLDialogElementType
    {
      get
      {
        return dom._HTMLDialogElementType_BackingField;
      }
      set
      {
        dom._HTMLDialogElementType_BackingField = value;
      }
    }

    [Name("HTMLDirectoryElement")]
    public static dom.HTMLDirectoryElementTypeConfig HTMLDirectoryElementType
    {
      get
      {
        return dom._HTMLDirectoryElementType_BackingField;
      }
      set
      {
        dom._HTMLDirectoryElementType_BackingField = value;
      }
    }

    [Name("HTMLDivElement")]
    public static dom.HTMLDivElementTypeConfig HTMLDivElementType
    {
      get
      {
        return dom._HTMLDivElementType_BackingField;
      }
      set
      {
        dom._HTMLDivElementType_BackingField = value;
      }
    }

    [Name("HTMLDocument")]
    public static dom.HTMLDocumentTypeConfig HTMLDocumentType
    {
      get
      {
        return dom._HTMLDocumentType_BackingField;
      }
      set
      {
        dom._HTMLDocumentType_BackingField = value;
      }
    }

    [Name("HTMLElement")]
    public static dom.HTMLElementTypeConfig HTMLElementType
    {
      get
      {
        return dom._HTMLElementType_BackingField;
      }
      set
      {
        dom._HTMLElementType_BackingField = value;
      }
    }

    [Name("HTMLEmbedElement")]
    public static dom.HTMLEmbedElementTypeConfig HTMLEmbedElementType
    {
      get
      {
        return dom._HTMLEmbedElementType_BackingField;
      }
      set
      {
        dom._HTMLEmbedElementType_BackingField = value;
      }
    }

    [Name("HTMLFieldSetElement")]
    public static dom.HTMLFieldSetElementTypeConfig HTMLFieldSetElementType
    {
      get
      {
        return dom._HTMLFieldSetElementType_BackingField;
      }
      set
      {
        dom._HTMLFieldSetElementType_BackingField = value;
      }
    }

    [Name("HTMLFontElement")]
    public static dom.HTMLFontElementTypeConfig HTMLFontElementType
    {
      get
      {
        return dom._HTMLFontElementType_BackingField;
      }
      set
      {
        dom._HTMLFontElementType_BackingField = value;
      }
    }

    [Name("HTMLFormControlsCollection")]
    public static dom.HTMLFormControlsCollectionTypeConfig HTMLFormControlsCollectionType
    {
      get
      {
        return dom._HTMLFormControlsCollectionType_BackingField;
      }
      set
      {
        dom._HTMLFormControlsCollectionType_BackingField = value;
      }
    }

    [Name("HTMLFormElement")]
    public static dom.HTMLFormElementTypeConfig HTMLFormElementType
    {
      get
      {
        return dom._HTMLFormElementType_BackingField;
      }
      set
      {
        dom._HTMLFormElementType_BackingField = value;
      }
    }

    [Name("HTMLFrameElement")]
    public static dom.HTMLFrameElementTypeConfig HTMLFrameElementType
    {
      get
      {
        return dom._HTMLFrameElementType_BackingField;
      }
      set
      {
        dom._HTMLFrameElementType_BackingField = value;
      }
    }

    [Name("HTMLFrameSetElement")]
    public static dom.HTMLFrameSetElementTypeConfig HTMLFrameSetElementType
    {
      get
      {
        return dom._HTMLFrameSetElementType_BackingField;
      }
      set
      {
        dom._HTMLFrameSetElementType_BackingField = value;
      }
    }

    [Name("HTMLHRElement")]
    public static dom.HTMLHRElementTypeConfig HTMLHRElementType
    {
      get
      {
        return dom._HTMLHRElementType_BackingField;
      }
      set
      {
        dom._HTMLHRElementType_BackingField = value;
      }
    }

    [Name("HTMLHeadElement")]
    public static dom.HTMLHeadElementTypeConfig HTMLHeadElementType
    {
      get
      {
        return dom._HTMLHeadElementType_BackingField;
      }
      set
      {
        dom._HTMLHeadElementType_BackingField = value;
      }
    }

    [Name("HTMLHeadingElement")]
    public static dom.HTMLHeadingElementTypeConfig HTMLHeadingElementType
    {
      get
      {
        return dom._HTMLHeadingElementType_BackingField;
      }
      set
      {
        dom._HTMLHeadingElementType_BackingField = value;
      }
    }

    [Name("HTMLHtmlElement")]
    public static dom.HTMLHtmlElementTypeConfig HTMLHtmlElementType
    {
      get
      {
        return dom._HTMLHtmlElementType_BackingField;
      }
      set
      {
        dom._HTMLHtmlElementType_BackingField = value;
      }
    }

    [Name("HTMLIFrameElement")]
    public static dom.HTMLIFrameElementTypeConfig HTMLIFrameElementType
    {
      get
      {
        return dom._HTMLIFrameElementType_BackingField;
      }
      set
      {
        dom._HTMLIFrameElementType_BackingField = value;
      }
    }

    [Name("HTMLImageElement")]
    public static dom.HTMLImageElementTypeConfig HTMLImageElementType
    {
      get
      {
        return dom._HTMLImageElementType_BackingField;
      }
      set
      {
        dom._HTMLImageElementType_BackingField = value;
      }
    }

    [Name("HTMLInputElement")]
    public static dom.HTMLInputElementTypeConfig HTMLInputElementType
    {
      get
      {
        return dom._HTMLInputElementType_BackingField;
      }
      set
      {
        dom._HTMLInputElementType_BackingField = value;
      }
    }

    [Name("HTMLLIElement")]
    public static dom.HTMLLIElementTypeConfig HTMLLIElementType
    {
      get
      {
        return dom._HTMLLIElementType_BackingField;
      }
      set
      {
        dom._HTMLLIElementType_BackingField = value;
      }
    }

    [Name("HTMLLabelElement")]
    public static dom.HTMLLabelElementTypeConfig HTMLLabelElementType
    {
      get
      {
        return dom._HTMLLabelElementType_BackingField;
      }
      set
      {
        dom._HTMLLabelElementType_BackingField = value;
      }
    }

    [Name("HTMLLegendElement")]
    public static dom.HTMLLegendElementTypeConfig HTMLLegendElementType
    {
      get
      {
        return dom._HTMLLegendElementType_BackingField;
      }
      set
      {
        dom._HTMLLegendElementType_BackingField = value;
      }
    }

    [Name("HTMLLinkElement")]
    public static dom.HTMLLinkElementTypeConfig HTMLLinkElementType
    {
      get
      {
        return dom._HTMLLinkElementType_BackingField;
      }
      set
      {
        dom._HTMLLinkElementType_BackingField = value;
      }
    }

    [Name("HTMLMainElement")]
    public static dom.HTMLMainElementTypeConfig HTMLMainElementType
    {
      get
      {
        return dom._HTMLMainElementType_BackingField;
      }
      set
      {
        dom._HTMLMainElementType_BackingField = value;
      }
    }

    [Name("HTMLMapElement")]
    public static dom.HTMLMapElementTypeConfig HTMLMapElementType
    {
      get
      {
        return dom._HTMLMapElementType_BackingField;
      }
      set
      {
        dom._HTMLMapElementType_BackingField = value;
      }
    }

    [Name("HTMLMarqueeElement")]
    public static dom.HTMLMarqueeElementTypeConfig HTMLMarqueeElementType
    {
      get
      {
        return dom._HTMLMarqueeElementType_BackingField;
      }
      set
      {
        dom._HTMLMarqueeElementType_BackingField = value;
      }
    }

    [Name("HTMLMediaElement")]
    public static dom.HTMLMediaElementTypeConfig HTMLMediaElementType
    {
      get
      {
        return dom._HTMLMediaElementType_BackingField;
      }
      set
      {
        dom._HTMLMediaElementType_BackingField = value;
      }
    }

    [Name("HTMLMenuElement")]
    public static dom.HTMLMenuElementTypeConfig HTMLMenuElementType
    {
      get
      {
        return dom._HTMLMenuElementType_BackingField;
      }
      set
      {
        dom._HTMLMenuElementType_BackingField = value;
      }
    }

    [Name("HTMLMetaElement")]
    public static dom.HTMLMetaElementTypeConfig HTMLMetaElementType
    {
      get
      {
        return dom._HTMLMetaElementType_BackingField;
      }
      set
      {
        dom._HTMLMetaElementType_BackingField = value;
      }
    }

    [Name("HTMLMeterElement")]
    public static dom.HTMLMeterElementTypeConfig HTMLMeterElementType
    {
      get
      {
        return dom._HTMLMeterElementType_BackingField;
      }
      set
      {
        dom._HTMLMeterElementType_BackingField = value;
      }
    }

    [Name("HTMLModElement")]
    public static dom.HTMLModElementTypeConfig HTMLModElementType
    {
      get
      {
        return dom._HTMLModElementType_BackingField;
      }
      set
      {
        dom._HTMLModElementType_BackingField = value;
      }
    }

    [Name("HTMLOListElement")]
    public static dom.HTMLOListElementTypeConfig HTMLOListElementType
    {
      get
      {
        return dom._HTMLOListElementType_BackingField;
      }
      set
      {
        dom._HTMLOListElementType_BackingField = value;
      }
    }

    [Name("HTMLObjectElement")]
    public static dom.HTMLObjectElementTypeConfig HTMLObjectElementType
    {
      get
      {
        return dom._HTMLObjectElementType_BackingField;
      }
      set
      {
        dom._HTMLObjectElementType_BackingField = value;
      }
    }

    [Name("HTMLOptGroupElement")]
    public static dom.HTMLOptGroupElementTypeConfig HTMLOptGroupElementType
    {
      get
      {
        return dom._HTMLOptGroupElementType_BackingField;
      }
      set
      {
        dom._HTMLOptGroupElementType_BackingField = value;
      }
    }

    [Name("HTMLOptionElement")]
    public static dom.HTMLOptionElementTypeConfig HTMLOptionElementType
    {
      get
      {
        return dom._HTMLOptionElementType_BackingField;
      }
      set
      {
        dom._HTMLOptionElementType_BackingField = value;
      }
    }

    [Name("HTMLOptionsCollection")]
    public static dom.HTMLOptionsCollectionTypeConfig HTMLOptionsCollectionType
    {
      get
      {
        return dom._HTMLOptionsCollectionType_BackingField;
      }
      set
      {
        dom._HTMLOptionsCollectionType_BackingField = value;
      }
    }

    [Name("HTMLOutputElement")]
    public static dom.HTMLOutputElementTypeConfig HTMLOutputElementType
    {
      get
      {
        return dom._HTMLOutputElementType_BackingField;
      }
      set
      {
        dom._HTMLOutputElementType_BackingField = value;
      }
    }

    [Name("HTMLParagraphElement")]
    public static dom.HTMLParagraphElementTypeConfig HTMLParagraphElementType
    {
      get
      {
        return dom._HTMLParagraphElementType_BackingField;
      }
      set
      {
        dom._HTMLParagraphElementType_BackingField = value;
      }
    }

    [Name("HTMLParamElement")]
    public static dom.HTMLParamElementTypeConfig HTMLParamElementType
    {
      get
      {
        return dom._HTMLParamElementType_BackingField;
      }
      set
      {
        dom._HTMLParamElementType_BackingField = value;
      }
    }

    [Name("HTMLPictureElement")]
    public static dom.HTMLPictureElementTypeConfig HTMLPictureElementType
    {
      get
      {
        return dom._HTMLPictureElementType_BackingField;
      }
      set
      {
        dom._HTMLPictureElementType_BackingField = value;
      }
    }

    [Name("HTMLPreElement")]
    public static dom.HTMLPreElementTypeConfig HTMLPreElementType
    {
      get
      {
        return dom._HTMLPreElementType_BackingField;
      }
      set
      {
        dom._HTMLPreElementType_BackingField = value;
      }
    }

    [Name("HTMLProgressElement")]
    public static dom.HTMLProgressElementTypeConfig HTMLProgressElementType
    {
      get
      {
        return dom._HTMLProgressElementType_BackingField;
      }
      set
      {
        dom._HTMLProgressElementType_BackingField = value;
      }
    }

    [Name("HTMLQuoteElement")]
    public static dom.HTMLQuoteElementTypeConfig HTMLQuoteElementType
    {
      get
      {
        return dom._HTMLQuoteElementType_BackingField;
      }
      set
      {
        dom._HTMLQuoteElementType_BackingField = value;
      }
    }

    [Name("HTMLScriptElement")]
    public static dom.HTMLScriptElementTypeConfig HTMLScriptElementType
    {
      get
      {
        return dom._HTMLScriptElementType_BackingField;
      }
      set
      {
        dom._HTMLScriptElementType_BackingField = value;
      }
    }

    [Name("HTMLSelectElement")]
    public static dom.HTMLSelectElementTypeConfig HTMLSelectElementType
    {
      get
      {
        return dom._HTMLSelectElementType_BackingField;
      }
      set
      {
        dom._HTMLSelectElementType_BackingField = value;
      }
    }

    [Name("HTMLSourceElement")]
    public static dom.HTMLSourceElementTypeConfig HTMLSourceElementType
    {
      get
      {
        return dom._HTMLSourceElementType_BackingField;
      }
      set
      {
        dom._HTMLSourceElementType_BackingField = value;
      }
    }

    [Name("HTMLSpanElement")]
    public static dom.HTMLSpanElementTypeConfig HTMLSpanElementType
    {
      get
      {
        return dom._HTMLSpanElementType_BackingField;
      }
      set
      {
        dom._HTMLSpanElementType_BackingField = value;
      }
    }

    [Name("HTMLStyleElement")]
    public static dom.HTMLStyleElementTypeConfig HTMLStyleElementType
    {
      get
      {
        return dom._HTMLStyleElementType_BackingField;
      }
      set
      {
        dom._HTMLStyleElementType_BackingField = value;
      }
    }

    [Name("HTMLSummaryElement")]
    public static dom.HTMLSummaryElementTypeConfig HTMLSummaryElementType
    {
      get
      {
        return dom._HTMLSummaryElementType_BackingField;
      }
      set
      {
        dom._HTMLSummaryElementType_BackingField = value;
      }
    }

    [Name("HTMLTableCaptionElement")]
    public static dom.HTMLTableCaptionElementTypeConfig HTMLTableCaptionElementType
    {
      get
      {
        return dom._HTMLTableCaptionElementType_BackingField;
      }
      set
      {
        dom._HTMLTableCaptionElementType_BackingField = value;
      }
    }

    [Name("HTMLTableCellElement")]
    public static dom.HTMLTableCellElementTypeConfig HTMLTableCellElementType
    {
      get
      {
        return dom._HTMLTableCellElementType_BackingField;
      }
      set
      {
        dom._HTMLTableCellElementType_BackingField = value;
      }
    }

    [Name("HTMLTableColElement")]
    public static dom.HTMLTableColElementTypeConfig HTMLTableColElementType
    {
      get
      {
        return dom._HTMLTableColElementType_BackingField;
      }
      set
      {
        dom._HTMLTableColElementType_BackingField = value;
      }
    }

    [Name("HTMLTableDataCellElement")]
    public static dom.HTMLTableDataCellElementTypeConfig HTMLTableDataCellElementType
    {
      get
      {
        return dom._HTMLTableDataCellElementType_BackingField;
      }
      set
      {
        dom._HTMLTableDataCellElementType_BackingField = value;
      }
    }

    [Name("HTMLTableElement")]
    public static dom.HTMLTableElementTypeConfig HTMLTableElementType
    {
      get
      {
        return dom._HTMLTableElementType_BackingField;
      }
      set
      {
        dom._HTMLTableElementType_BackingField = value;
      }
    }

    [Name("HTMLTableHeaderCellElement")]
    public static dom.HTMLTableHeaderCellElementTypeConfig HTMLTableHeaderCellElementType
    {
      get
      {
        return dom._HTMLTableHeaderCellElementType_BackingField;
      }
      set
      {
        dom._HTMLTableHeaderCellElementType_BackingField = value;
      }
    }

    [Name("HTMLTableRowElement")]
    public static dom.HTMLTableRowElementTypeConfig HTMLTableRowElementType
    {
      get
      {
        return dom._HTMLTableRowElementType_BackingField;
      }
      set
      {
        dom._HTMLTableRowElementType_BackingField = value;
      }
    }

    [Name("HTMLTableSectionElement")]
    public static dom.HTMLTableSectionElementTypeConfig HTMLTableSectionElementType
    {
      get
      {
        return dom._HTMLTableSectionElementType_BackingField;
      }
      set
      {
        dom._HTMLTableSectionElementType_BackingField = value;
      }
    }

    [Name("HTMLTemplateElement")]
    public static dom.HTMLTemplateElementTypeConfig HTMLTemplateElementType
    {
      get
      {
        return dom._HTMLTemplateElementType_BackingField;
      }
      set
      {
        dom._HTMLTemplateElementType_BackingField = value;
      }
    }

    [Name("HTMLTextAreaElement")]
    public static dom.HTMLTextAreaElementTypeConfig HTMLTextAreaElementType
    {
      get
      {
        return dom._HTMLTextAreaElementType_BackingField;
      }
      set
      {
        dom._HTMLTextAreaElementType_BackingField = value;
      }
    }

    [Name("HTMLTimeElement")]
    public static dom.HTMLTimeElementTypeConfig HTMLTimeElementType
    {
      get
      {
        return dom._HTMLTimeElementType_BackingField;
      }
      set
      {
        dom._HTMLTimeElementType_BackingField = value;
      }
    }

    [Name("HTMLTitleElement")]
    public static dom.HTMLTitleElementTypeConfig HTMLTitleElementType
    {
      get
      {
        return dom._HTMLTitleElementType_BackingField;
      }
      set
      {
        dom._HTMLTitleElementType_BackingField = value;
      }
    }

    [Name("HTMLTrackElement")]
    public static dom.HTMLTrackElementTypeConfig HTMLTrackElementType
    {
      get
      {
        return dom._HTMLTrackElementType_BackingField;
      }
      set
      {
        dom._HTMLTrackElementType_BackingField = value;
      }
    }

    [Name("HTMLUListElement")]
    public static dom.HTMLUListElementTypeConfig HTMLUListElementType
    {
      get
      {
        return dom._HTMLUListElementType_BackingField;
      }
      set
      {
        dom._HTMLUListElementType_BackingField = value;
      }
    }

    [Name("HTMLUnknownElement")]
    public static dom.HTMLUnknownElementTypeConfig HTMLUnknownElementType
    {
      get
      {
        return dom._HTMLUnknownElementType_BackingField;
      }
      set
      {
        dom._HTMLUnknownElementType_BackingField = value;
      }
    }

    [Name("HTMLVideoElement")]
    public static dom.HTMLVideoElementTypeConfig HTMLVideoElementType
    {
      get
      {
        return dom._HTMLVideoElementType_BackingField;
      }
      set
      {
        dom._HTMLVideoElementType_BackingField = value;
      }
    }

    [Name("HTMLegendElement")]
    public static dom.HTMLegendElementTypeConfig HTMLegendElementType
    {
      get
      {
        return dom._HTMLegendElementType_BackingField;
      }
      set
      {
        dom._HTMLegendElementType_BackingField = value;
      }
    }

    [Name("HashChangeEvent")]
    public static dom.HashChangeEventTypeConfig HashChangeEventType
    {
      get
      {
        return dom._HashChangeEventType_BackingField;
      }
      set
      {
        dom._HashChangeEventType_BackingField = value;
      }
    }

    [Name("Headers")]
    public static dom.HeadersTypeConfig HeadersType
    {
      get
      {
        return dom._HeadersType_BackingField;
      }
      set
      {
        dom._HeadersType_BackingField = value;
      }
    }

    [Name("History")]
    public static dom.HistoryTypeConfig HistoryType
    {
      get
      {
        return dom._HistoryType_BackingField;
      }
      set
      {
        dom._HistoryType_BackingField = value;
      }
    }

    [Name("IDBCursor")]
    public static dom.IDBCursorTypeConfig IDBCursorType
    {
      get
      {
        return dom._IDBCursorType_BackingField;
      }
      set
      {
        dom._IDBCursorType_BackingField = value;
      }
    }

    [Name("IDBCursorWithValue")]
    public static dom.IDBCursorWithValueTypeConfig IDBCursorWithValueType
    {
      get
      {
        return dom._IDBCursorWithValueType_BackingField;
      }
      set
      {
        dom._IDBCursorWithValueType_BackingField = value;
      }
    }

    [Name("IDBDatabase")]
    public static dom.IDBDatabaseTypeConfig IDBDatabaseType
    {
      get
      {
        return dom._IDBDatabaseType_BackingField;
      }
      set
      {
        dom._IDBDatabaseType_BackingField = value;
      }
    }

    [Name("IDBFactory")]
    public static dom.IDBFactoryTypeConfig IDBFactoryType
    {
      get
      {
        return dom._IDBFactoryType_BackingField;
      }
      set
      {
        dom._IDBFactoryType_BackingField = value;
      }
    }

    [Name("IDBIndex")]
    public static dom.IDBIndexTypeConfig IDBIndexType
    {
      get
      {
        return dom._IDBIndexType_BackingField;
      }
      set
      {
        dom._IDBIndexType_BackingField = value;
      }
    }

    [Name("IDBKeyRange")]
    public static dom.IDBKeyRangeTypeConfig IDBKeyRangeType
    {
      get
      {
        return dom._IDBKeyRangeType_BackingField;
      }
      set
      {
        dom._IDBKeyRangeType_BackingField = value;
      }
    }

    [Name("IDBObjectStore")]
    public static dom.IDBObjectStoreTypeConfig IDBObjectStoreType
    {
      get
      {
        return dom._IDBObjectStoreType_BackingField;
      }
      set
      {
        dom._IDBObjectStoreType_BackingField = value;
      }
    }

    [Name("IDBOpenDBRequest")]
    public static dom.IDBOpenDBRequestTypeConfig IDBOpenDBRequestType
    {
      get
      {
        return dom._IDBOpenDBRequestType_BackingField;
      }
      set
      {
        dom._IDBOpenDBRequestType_BackingField = value;
      }
    }

    [Name("IDBRequest")]
    public static dom.IDBRequestTypeConfig IDBRequestType
    {
      get
      {
        return dom._IDBRequestType_BackingField;
      }
      set
      {
        dom._IDBRequestType_BackingField = value;
      }
    }

    [Name("IDBTransaction")]
    public static dom.IDBTransactionTypeConfig IDBTransactionType
    {
      get
      {
        return dom._IDBTransactionType_BackingField;
      }
      set
      {
        dom._IDBTransactionType_BackingField = value;
      }
    }

    [Name("IDBVersionChangeEvent")]
    public static dom.IDBVersionChangeEventTypeConfig IDBVersionChangeEventType
    {
      get
      {
        return dom._IDBVersionChangeEventType_BackingField;
      }
      set
      {
        dom._IDBVersionChangeEventType_BackingField = value;
      }
    }

    [Name("IIRFilterNode")]
    public static dom.IIRFilterNodeTypeConfig IIRFilterNodeType
    {
      get
      {
        return dom._IIRFilterNodeType_BackingField;
      }
      set
      {
        dom._IIRFilterNodeType_BackingField = value;
      }
    }

    [Name("ImageData")]
    public static dom.ImageDataTypeConfig ImageDataType
    {
      get
      {
        return dom._ImageDataType_BackingField;
      }
      set
      {
        dom._ImageDataType_BackingField = value;
      }
    }

    [Name("IntersectionObserver")]
    public static dom.IntersectionObserverTypeConfig IntersectionObserverType
    {
      get
      {
        return dom._IntersectionObserverType_BackingField;
      }
      set
      {
        dom._IntersectionObserverType_BackingField = value;
      }
    }

    [Name("IntersectionObserverEntry")]
    public static dom.IntersectionObserverEntryTypeConfig IntersectionObserverEntryType
    {
      get
      {
        return dom._IntersectionObserverEntryType_BackingField;
      }
      set
      {
        dom._IntersectionObserverEntryType_BackingField = value;
      }
    }

    [Name("KeyboardEvent")]
    public static dom.KeyboardEventTypeConfig KeyboardEventType
    {
      get
      {
        return dom._KeyboardEventType_BackingField;
      }
      set
      {
        dom._KeyboardEventType_BackingField = value;
      }
    }

    [Name("ListeningStateChangedEvent")]
    public static dom.ListeningStateChangedEventTypeConfig ListeningStateChangedEventType
    {
      get
      {
        return dom._ListeningStateChangedEventType_BackingField;
      }
      set
      {
        dom._ListeningStateChangedEventType_BackingField = value;
      }
    }

    [Name("Location")]
    public static dom.LocationTypeConfig LocationType
    {
      get
      {
        return dom._LocationType_BackingField;
      }
      set
      {
        dom._LocationType_BackingField = value;
      }
    }

    [Name("MSAssertion")]
    public static dom.MSAssertionTypeConfig MSAssertionType
    {
      get
      {
        return dom._MSAssertionType_BackingField;
      }
      set
      {
        dom._MSAssertionType_BackingField = value;
      }
    }

    [Name("MSBlobBuilder")]
    public static dom.MSBlobBuilderTypeConfig MSBlobBuilderType
    {
      get
      {
        return dom._MSBlobBuilderType_BackingField;
      }
      set
      {
        dom._MSBlobBuilderType_BackingField = value;
      }
    }

    [Name("MSCredentials")]
    public static dom.MSCredentialsTypeConfig MSCredentialsType
    {
      get
      {
        return dom._MSCredentialsType_BackingField;
      }
      set
      {
        dom._MSCredentialsType_BackingField = value;
      }
    }

    [Name("MSDCCEvent")]
    public static dom.MSDCCEventTypeConfig MSDCCEventType
    {
      get
      {
        return dom._MSDCCEventType_BackingField;
      }
      set
      {
        dom._MSDCCEventType_BackingField = value;
      }
    }

    [Name("MSDSHEvent")]
    public static dom.MSDSHEventTypeConfig MSDSHEventType
    {
      get
      {
        return dom._MSDSHEventType_BackingField;
      }
      set
      {
        dom._MSDSHEventType_BackingField = value;
      }
    }

    [Name("MSFIDOCredentialAssertion")]
    public static dom.MSFIDOCredentialAssertionTypeConfig MSFIDOCredentialAssertionType
    {
      get
      {
        return dom._MSFIDOCredentialAssertionType_BackingField;
      }
      set
      {
        dom._MSFIDOCredentialAssertionType_BackingField = value;
      }
    }

    [Name("MSFIDOSignature")]
    public static dom.MSFIDOSignatureTypeConfig MSFIDOSignatureType
    {
      get
      {
        return dom._MSFIDOSignatureType_BackingField;
      }
      set
      {
        dom._MSFIDOSignatureType_BackingField = value;
      }
    }

    [Name("MSFIDOSignatureAssertion")]
    public static dom.MSFIDOSignatureAssertionTypeConfig MSFIDOSignatureAssertionType
    {
      get
      {
        return dom._MSFIDOSignatureAssertionType_BackingField;
      }
      set
      {
        dom._MSFIDOSignatureAssertionType_BackingField = value;
      }
    }

    [Name("MSGesture")]
    public static dom.MSGestureTypeConfig MSGestureType
    {
      get
      {
        return dom._MSGestureType_BackingField;
      }
      set
      {
        dom._MSGestureType_BackingField = value;
      }
    }

    [Name("MSGestureEvent")]
    public static dom.MSGestureEventTypeConfig MSGestureEventType
    {
      get
      {
        return dom._MSGestureEventType_BackingField;
      }
      set
      {
        dom._MSGestureEventType_BackingField = value;
      }
    }

    [Name("MSGraphicsTrust")]
    public static dom.MSGraphicsTrustTypeConfig MSGraphicsTrustType
    {
      get
      {
        return dom._MSGraphicsTrustType_BackingField;
      }
      set
      {
        dom._MSGraphicsTrustType_BackingField = value;
      }
    }

    [Name("MSInputMethodContext")]
    public static dom.MSInputMethodContextTypeConfig MSInputMethodContextType
    {
      get
      {
        return dom._MSInputMethodContextType_BackingField;
      }
      set
      {
        dom._MSInputMethodContextType_BackingField = value;
      }
    }

    [Name("MSMediaKeyError")]
    public static dom.MSMediaKeyErrorTypeConfig MSMediaKeyErrorType
    {
      get
      {
        return dom._MSMediaKeyErrorType_BackingField;
      }
      set
      {
        dom._MSMediaKeyErrorType_BackingField = value;
      }
    }

    [Name("MSMediaKeyMessageEvent")]
    public static dom.MSMediaKeyMessageEventTypeConfig MSMediaKeyMessageEventType
    {
      get
      {
        return dom._MSMediaKeyMessageEventType_BackingField;
      }
      set
      {
        dom._MSMediaKeyMessageEventType_BackingField = value;
      }
    }

    [Name("MSMediaKeyNeededEvent")]
    public static dom.MSMediaKeyNeededEventTypeConfig MSMediaKeyNeededEventType
    {
      get
      {
        return dom._MSMediaKeyNeededEventType_BackingField;
      }
      set
      {
        dom._MSMediaKeyNeededEventType_BackingField = value;
      }
    }

    [Name("MSMediaKeySession")]
    public static dom.MSMediaKeySessionTypeConfig MSMediaKeySessionType
    {
      get
      {
        return dom._MSMediaKeySessionType_BackingField;
      }
      set
      {
        dom._MSMediaKeySessionType_BackingField = value;
      }
    }

    [Name("MSMediaKeys")]
    public static dom.MSMediaKeysTypeConfig MSMediaKeysType
    {
      get
      {
        return dom._MSMediaKeysType_BackingField;
      }
      set
      {
        dom._MSMediaKeysType_BackingField = value;
      }
    }

    [Name("MSPointerEvent")]
    public static dom.MSPointerEventTypeConfig MSPointerEventType
    {
      get
      {
        return dom._MSPointerEventType_BackingField;
      }
      set
      {
        dom._MSPointerEventType_BackingField = value;
      }
    }

    [Name("MSStream")]
    public static dom.MSStreamTypeConfig MSStreamType
    {
      get
      {
        return dom._MSStreamType_BackingField;
      }
      set
      {
        dom._MSStreamType_BackingField = value;
      }
    }

    [Name("MSStreamReader")]
    public static dom.MSStreamReaderTypeConfig MSStreamReaderType
    {
      get
      {
        return dom._MSStreamReaderType_BackingField;
      }
      set
      {
        dom._MSStreamReaderType_BackingField = value;
      }
    }

    [Name("MediaDeviceInfo")]
    public static dom.MediaDeviceInfoTypeConfig MediaDeviceInfoType
    {
      get
      {
        return dom._MediaDeviceInfoType_BackingField;
      }
      set
      {
        dom._MediaDeviceInfoType_BackingField = value;
      }
    }

    [Name("MediaDevices")]
    public static dom.MediaDevicesTypeConfig MediaDevicesType
    {
      get
      {
        return dom._MediaDevicesType_BackingField;
      }
      set
      {
        dom._MediaDevicesType_BackingField = value;
      }
    }

    [Name("MediaElementAudioSourceNode")]
    public static dom.MediaElementAudioSourceNodeTypeConfig MediaElementAudioSourceNodeType
    {
      get
      {
        return dom._MediaElementAudioSourceNodeType_BackingField;
      }
      set
      {
        dom._MediaElementAudioSourceNodeType_BackingField = value;
      }
    }

    [Name("MediaEncryptedEvent")]
    public static dom.MediaEncryptedEventTypeConfig MediaEncryptedEventType
    {
      get
      {
        return dom._MediaEncryptedEventType_BackingField;
      }
      set
      {
        dom._MediaEncryptedEventType_BackingField = value;
      }
    }

    [Name("MediaError")]
    public static dom.MediaErrorTypeConfig MediaErrorType
    {
      get
      {
        return dom._MediaErrorType_BackingField;
      }
      set
      {
        dom._MediaErrorType_BackingField = value;
      }
    }

    [Name("MediaKeyMessageEvent")]
    public static dom.MediaKeyMessageEventTypeConfig MediaKeyMessageEventType
    {
      get
      {
        return dom._MediaKeyMessageEventType_BackingField;
      }
      set
      {
        dom._MediaKeyMessageEventType_BackingField = value;
      }
    }

    [Name("MediaKeySession")]
    public static dom.MediaKeySessionType2Config MediaKeySessionType2
    {
      get
      {
        return dom._MediaKeySessionType2_BackingField;
      }
      set
      {
        dom._MediaKeySessionType2_BackingField = value;
      }
    }

    [Name("MediaKeyStatusMap")]
    public static dom.MediaKeyStatusMapTypeConfig MediaKeyStatusMapType
    {
      get
      {
        return dom._MediaKeyStatusMapType_BackingField;
      }
      set
      {
        dom._MediaKeyStatusMapType_BackingField = value;
      }
    }

    [Name("MediaKeySystemAccess")]
    public static dom.MediaKeySystemAccessTypeConfig MediaKeySystemAccessType
    {
      get
      {
        return dom._MediaKeySystemAccessType_BackingField;
      }
      set
      {
        dom._MediaKeySystemAccessType_BackingField = value;
      }
    }

    [Name("MediaKeys")]
    public static dom.MediaKeysTypeConfig MediaKeysType
    {
      get
      {
        return dom._MediaKeysType_BackingField;
      }
      set
      {
        dom._MediaKeysType_BackingField = value;
      }
    }

    [Name("MediaList")]
    public static dom.MediaListTypeConfig MediaListType
    {
      get
      {
        return dom._MediaListType_BackingField;
      }
      set
      {
        dom._MediaListType_BackingField = value;
      }
    }

    [Name("MediaQueryList")]
    public static dom.MediaQueryListTypeConfig MediaQueryListType
    {
      get
      {
        return dom._MediaQueryListType_BackingField;
      }
      set
      {
        dom._MediaQueryListType_BackingField = value;
      }
    }

    [Name("MediaSource")]
    public static dom.MediaSourceTypeConfig MediaSourceType
    {
      get
      {
        return dom._MediaSourceType_BackingField;
      }
      set
      {
        dom._MediaSourceType_BackingField = value;
      }
    }

    [Name("MediaStream")]
    public static dom.MediaStreamTypeConfig MediaStreamType
    {
      get
      {
        return dom._MediaStreamType_BackingField;
      }
      set
      {
        dom._MediaStreamType_BackingField = value;
      }
    }

    [Name("MediaStreamAudioSourceNode")]
    public static dom.MediaStreamAudioSourceNodeTypeConfig MediaStreamAudioSourceNodeType
    {
      get
      {
        return dom._MediaStreamAudioSourceNodeType_BackingField;
      }
      set
      {
        dom._MediaStreamAudioSourceNodeType_BackingField = value;
      }
    }

    [Name("MediaStreamError")]
    public static dom.MediaStreamErrorTypeConfig MediaStreamErrorType
    {
      get
      {
        return dom._MediaStreamErrorType_BackingField;
      }
      set
      {
        dom._MediaStreamErrorType_BackingField = value;
      }
    }

    [Name("MediaStreamErrorEvent")]
    public static dom.MediaStreamErrorEventTypeConfig MediaStreamErrorEventType
    {
      get
      {
        return dom._MediaStreamErrorEventType_BackingField;
      }
      set
      {
        dom._MediaStreamErrorEventType_BackingField = value;
      }
    }

    [Name("MediaStreamEvent")]
    public static dom.MediaStreamEventTypeConfig MediaStreamEventType
    {
      get
      {
        return dom._MediaStreamEventType_BackingField;
      }
      set
      {
        dom._MediaStreamEventType_BackingField = value;
      }
    }

    [Name("MediaStreamTrack")]
    public static dom.MediaStreamTrackTypeConfig MediaStreamTrackType
    {
      get
      {
        return dom._MediaStreamTrackType_BackingField;
      }
      set
      {
        dom._MediaStreamTrackType_BackingField = value;
      }
    }

    [Name("MediaStreamTrackEvent")]
    public static dom.MediaStreamTrackEventTypeConfig MediaStreamTrackEventType
    {
      get
      {
        return dom._MediaStreamTrackEventType_BackingField;
      }
      set
      {
        dom._MediaStreamTrackEventType_BackingField = value;
      }
    }

    [Name("MessageChannel")]
    public static dom.MessageChannelTypeConfig MessageChannelType
    {
      get
      {
        return dom._MessageChannelType_BackingField;
      }
      set
      {
        dom._MessageChannelType_BackingField = value;
      }
    }

    [Name("MessageEvent")]
    public static dom.MessageEventTypeConfig MessageEventType
    {
      get
      {
        return dom._MessageEventType_BackingField;
      }
      set
      {
        dom._MessageEventType_BackingField = value;
      }
    }

    [Name("MessagePort")]
    public static dom.MessagePortTypeConfig MessagePortType
    {
      get
      {
        return dom._MessagePortType_BackingField;
      }
      set
      {
        dom._MessagePortType_BackingField = value;
      }
    }

    [Name("MimeType")]
    public static dom.MimeTypeTypeConfig MimeTypeType
    {
      get
      {
        return dom._MimeTypeType_BackingField;
      }
      set
      {
        dom._MimeTypeType_BackingField = value;
      }
    }

    [Name("MimeTypeArray")]
    public static dom.MimeTypeArrayTypeConfig MimeTypeArrayType
    {
      get
      {
        return dom._MimeTypeArrayType_BackingField;
      }
      set
      {
        dom._MimeTypeArrayType_BackingField = value;
      }
    }

    [Name("MouseEvent")]
    public static dom.MouseEventTypeConfig MouseEventType
    {
      get
      {
        return dom._MouseEventType_BackingField;
      }
      set
      {
        dom._MouseEventType_BackingField = value;
      }
    }

    [Name("MutationEvent")]
    public static dom.MutationEventTypeConfig MutationEventType
    {
      get
      {
        return dom._MutationEventType_BackingField;
      }
      set
      {
        dom._MutationEventType_BackingField = value;
      }
    }

    [Name("MutationObserver")]
    public static dom.MutationObserverTypeConfig MutationObserverType
    {
      get
      {
        return dom._MutationObserverType_BackingField;
      }
      set
      {
        dom._MutationObserverType_BackingField = value;
      }
    }

    [Name("MutationRecord")]
    public static dom.MutationRecordType2Config MutationRecordType2
    {
      get
      {
        return dom._MutationRecordType2_BackingField;
      }
      set
      {
        dom._MutationRecordType2_BackingField = value;
      }
    }

    [Name("NamedNodeMap")]
    public static dom.NamedNodeMapTypeConfig NamedNodeMapType
    {
      get
      {
        return dom._NamedNodeMapType_BackingField;
      }
      set
      {
        dom._NamedNodeMapType_BackingField = value;
      }
    }

    [Name("Navigator")]
    public static dom.NavigatorTypeConfig NavigatorType
    {
      get
      {
        return dom._NavigatorType_BackingField;
      }
      set
      {
        dom._NavigatorType_BackingField = value;
      }
    }

    [Name("Node")]
    public static dom.NodeTypeConfig NodeType
    {
      get
      {
        return dom._NodeType_BackingField;
      }
      set
      {
        dom._NodeType_BackingField = value;
      }
    }

    [Name("NodeFilter")]
    public static dom.NodeFilter2Config NodeFilter2
    {
      get
      {
        return dom._NodeFilter2_BackingField;
      }
      set
      {
        dom._NodeFilter2_BackingField = value;
      }
    }

    [Name("NodeIterator")]
    public static dom.NodeIteratorTypeConfig NodeIteratorType
    {
      get
      {
        return dom._NodeIteratorType_BackingField;
      }
      set
      {
        dom._NodeIteratorType_BackingField = value;
      }
    }

    [Name("NodeList")]
    public static dom.NodeListTypeConfig NodeListType
    {
      get
      {
        return dom._NodeListType_BackingField;
      }
      set
      {
        dom._NodeListType_BackingField = value;
      }
    }

    [Name("Notification")]
    public static dom.NotificationTypeConfig NotificationType
    {
      get
      {
        return dom._NotificationType_BackingField;
      }
      set
      {
        dom._NotificationType_BackingField = value;
      }
    }

    [Name("OES_element_index_uint")]
    public static dom.OES_element_index_uintTypeConfig OES_element_index_uintType
    {
      get
      {
        return dom._OES_element_index_uintType_BackingField;
      }
      set
      {
        dom._OES_element_index_uintType_BackingField = value;
      }
    }

    [Name("OES_standard_derivatives")]
    public static dom.OES_standard_derivativesTypeConfig OES_standard_derivativesType
    {
      get
      {
        return dom._OES_standard_derivativesType_BackingField;
      }
      set
      {
        dom._OES_standard_derivativesType_BackingField = value;
      }
    }

    [Name("OES_texture_float")]
    public static dom.OES_texture_floatTypeConfig OES_texture_floatType
    {
      get
      {
        return dom._OES_texture_floatType_BackingField;
      }
      set
      {
        dom._OES_texture_floatType_BackingField = value;
      }
    }

    [Name("OES_texture_float_linear")]
    public static dom.OES_texture_float_linearTypeConfig OES_texture_float_linearType
    {
      get
      {
        return dom._OES_texture_float_linearType_BackingField;
      }
      set
      {
        dom._OES_texture_float_linearType_BackingField = value;
      }
    }

    [Name("OES_texture_half_float")]
    public static dom.OES_texture_half_floatTypeConfig OES_texture_half_floatType
    {
      get
      {
        return dom._OES_texture_half_floatType_BackingField;
      }
      set
      {
        dom._OES_texture_half_floatType_BackingField = value;
      }
    }

    [Name("OES_texture_half_float_linear")]
    public static dom.OES_texture_half_float_linearTypeConfig OES_texture_half_float_linearType
    {
      get
      {
        return dom._OES_texture_half_float_linearType_BackingField;
      }
      set
      {
        dom._OES_texture_half_float_linearType_BackingField = value;
      }
    }

    [Name("OfflineAudioCompletionEvent")]
    public static dom.OfflineAudioCompletionEventTypeConfig OfflineAudioCompletionEventType
    {
      get
      {
        return dom._OfflineAudioCompletionEventType_BackingField;
      }
      set
      {
        dom._OfflineAudioCompletionEventType_BackingField = value;
      }
    }

    [Name("OfflineAudioContext")]
    public static dom.OfflineAudioContextTypeConfig OfflineAudioContextType
    {
      get
      {
        return dom._OfflineAudioContextType_BackingField;
      }
      set
      {
        dom._OfflineAudioContextType_BackingField = value;
      }
    }

    [Name("OscillatorNode")]
    public static dom.OscillatorNodeTypeConfig OscillatorNodeType
    {
      get
      {
        return dom._OscillatorNodeType_BackingField;
      }
      set
      {
        dom._OscillatorNodeType_BackingField = value;
      }
    }

    [Name("OverflowEvent")]
    public static dom.OverflowEventTypeConfig OverflowEventType
    {
      get
      {
        return dom._OverflowEventType_BackingField;
      }
      set
      {
        dom._OverflowEventType_BackingField = value;
      }
    }

    [Name("PageTransitionEvent")]
    public static dom.PageTransitionEventTypeConfig PageTransitionEventType
    {
      get
      {
        return dom._PageTransitionEventType_BackingField;
      }
      set
      {
        dom._PageTransitionEventType_BackingField = value;
      }
    }

    [Name("PannerNode")]
    public static dom.PannerNodeTypeConfig PannerNodeType
    {
      get
      {
        return dom._PannerNodeType_BackingField;
      }
      set
      {
        dom._PannerNodeType_BackingField = value;
      }
    }

    [Name("Path2D")]
    public static dom.Path2DTypeConfig Path2DType
    {
      get
      {
        return dom._Path2DType_BackingField;
      }
      set
      {
        dom._Path2DType_BackingField = value;
      }
    }

    [Name("PaymentAddress")]
    public static dom.PaymentAddressTypeConfig PaymentAddressType
    {
      get
      {
        return dom._PaymentAddressType_BackingField;
      }
      set
      {
        dom._PaymentAddressType_BackingField = value;
      }
    }

    [Name("PaymentRequest")]
    public static dom.PaymentRequestTypeConfig PaymentRequestType
    {
      get
      {
        return dom._PaymentRequestType_BackingField;
      }
      set
      {
        dom._PaymentRequestType_BackingField = value;
      }
    }

    [Name("PaymentRequestUpdateEvent")]
    public static dom.PaymentRequestUpdateEventTypeConfig PaymentRequestUpdateEventType
    {
      get
      {
        return dom._PaymentRequestUpdateEventType_BackingField;
      }
      set
      {
        dom._PaymentRequestUpdateEventType_BackingField = value;
      }
    }

    [Name("PaymentResponse")]
    public static dom.PaymentResponseTypeConfig PaymentResponseType
    {
      get
      {
        return dom._PaymentResponseType_BackingField;
      }
      set
      {
        dom._PaymentResponseType_BackingField = value;
      }
    }

    [Name("PerfWidgetExternal")]
    public static dom.PerfWidgetExternalTypeConfig PerfWidgetExternalType
    {
      get
      {
        return dom._PerfWidgetExternalType_BackingField;
      }
      set
      {
        dom._PerfWidgetExternalType_BackingField = value;
      }
    }

    [Name("Performance")]
    public static dom.PerformanceTypeConfig PerformanceType
    {
      get
      {
        return dom._PerformanceType_BackingField;
      }
      set
      {
        dom._PerformanceType_BackingField = value;
      }
    }

    [Name("PerformanceEntry")]
    public static dom.PerformanceEntryTypeConfig PerformanceEntryType
    {
      get
      {
        return dom._PerformanceEntryType_BackingField;
      }
      set
      {
        dom._PerformanceEntryType_BackingField = value;
      }
    }

    [Name("PerformanceMark")]
    public static dom.PerformanceMarkTypeConfig PerformanceMarkType
    {
      get
      {
        return dom._PerformanceMarkType_BackingField;
      }
      set
      {
        dom._PerformanceMarkType_BackingField = value;
      }
    }

    [Name("PerformanceMeasure")]
    public static dom.PerformanceMeasureTypeConfig PerformanceMeasureType
    {
      get
      {
        return dom._PerformanceMeasureType_BackingField;
      }
      set
      {
        dom._PerformanceMeasureType_BackingField = value;
      }
    }

    [Name("PerformanceNavigation")]
    public static dom.PerformanceNavigationTypeConfig PerformanceNavigationType
    {
      get
      {
        return dom._PerformanceNavigationType_BackingField;
      }
      set
      {
        dom._PerformanceNavigationType_BackingField = value;
      }
    }

    [Name("PerformanceNavigationTiming")]
    public static dom.PerformanceNavigationTimingTypeConfig PerformanceNavigationTimingType
    {
      get
      {
        return dom._PerformanceNavigationTimingType_BackingField;
      }
      set
      {
        dom._PerformanceNavigationTimingType_BackingField = value;
      }
    }

    [Name("PerformanceResourceTiming")]
    public static dom.PerformanceResourceTimingTypeConfig PerformanceResourceTimingType
    {
      get
      {
        return dom._PerformanceResourceTimingType_BackingField;
      }
      set
      {
        dom._PerformanceResourceTimingType_BackingField = value;
      }
    }

    [Name("PerformanceTiming")]
    public static dom.PerformanceTimingTypeConfig PerformanceTimingType
    {
      get
      {
        return dom._PerformanceTimingType_BackingField;
      }
      set
      {
        dom._PerformanceTimingType_BackingField = value;
      }
    }

    [Name("PeriodicWave")]
    public static dom.PeriodicWaveTypeConfig PeriodicWaveType
    {
      get
      {
        return dom._PeriodicWaveType_BackingField;
      }
      set
      {
        dom._PeriodicWaveType_BackingField = value;
      }
    }

    [Name("PermissionRequest")]
    public static dom.PermissionRequestTypeConfig PermissionRequestType
    {
      get
      {
        return dom._PermissionRequestType_BackingField;
      }
      set
      {
        dom._PermissionRequestType_BackingField = value;
      }
    }

    [Name("PermissionRequestedEvent")]
    public static dom.PermissionRequestedEventTypeConfig PermissionRequestedEventType
    {
      get
      {
        return dom._PermissionRequestedEventType_BackingField;
      }
      set
      {
        dom._PermissionRequestedEventType_BackingField = value;
      }
    }

    [Name("Plugin")]
    public static dom.PluginTypeConfig PluginType
    {
      get
      {
        return dom._PluginType_BackingField;
      }
      set
      {
        dom._PluginType_BackingField = value;
      }
    }

    [Name("PluginArray")]
    public static dom.PluginArrayTypeConfig PluginArrayType
    {
      get
      {
        return dom._PluginArrayType_BackingField;
      }
      set
      {
        dom._PluginArrayType_BackingField = value;
      }
    }

    [Name("PointerEvent")]
    public static dom.PointerEventTypeConfig PointerEventType
    {
      get
      {
        return dom._PointerEventType_BackingField;
      }
      set
      {
        dom._PointerEventType_BackingField = value;
      }
    }

    [Name("PopStateEvent")]
    public static dom.PopStateEventTypeConfig PopStateEventType
    {
      get
      {
        return dom._PopStateEventType_BackingField;
      }
      set
      {
        dom._PopStateEventType_BackingField = value;
      }
    }

    [Name("Position")]
    public static dom.PositionTypeConfig PositionType
    {
      get
      {
        return dom._PositionType_BackingField;
      }
      set
      {
        dom._PositionType_BackingField = value;
      }
    }

    [Name("PositionError")]
    public static dom.PositionErrorTypeConfig PositionErrorType
    {
      get
      {
        return dom._PositionErrorType_BackingField;
      }
      set
      {
        dom._PositionErrorType_BackingField = value;
      }
    }

    [Name("ProcessingInstruction")]
    public static dom.ProcessingInstructionTypeConfig ProcessingInstructionType
    {
      get
      {
        return dom._ProcessingInstructionType_BackingField;
      }
      set
      {
        dom._ProcessingInstructionType_BackingField = value;
      }
    }

    [Name("ProgressEvent")]
    public static dom.ProgressEventTypeConfig ProgressEventType
    {
      get
      {
        return dom._ProgressEventType_BackingField;
      }
      set
      {
        dom._ProgressEventType_BackingField = value;
      }
    }

    [Name("PushManager")]
    public static dom.PushManagerTypeConfig PushManagerType
    {
      get
      {
        return dom._PushManagerType_BackingField;
      }
      set
      {
        dom._PushManagerType_BackingField = value;
      }
    }

    [Name("PushSubscription")]
    public static dom.PushSubscriptionTypeConfig PushSubscriptionType
    {
      get
      {
        return dom._PushSubscriptionType_BackingField;
      }
      set
      {
        dom._PushSubscriptionType_BackingField = value;
      }
    }

    [Name("PushSubscriptionOptions")]
    public static dom.PushSubscriptionOptionsTypeConfig PushSubscriptionOptionsType
    {
      get
      {
        return dom._PushSubscriptionOptionsType_BackingField;
      }
      set
      {
        dom._PushSubscriptionOptionsType_BackingField = value;
      }
    }

    [Name("RTCDTMFToneChangeEvent")]
    public static dom.RTCDTMFToneChangeEventTypeConfig RTCDTMFToneChangeEventType
    {
      get
      {
        return dom._RTCDTMFToneChangeEventType_BackingField;
      }
      set
      {
        dom._RTCDTMFToneChangeEventType_BackingField = value;
      }
    }

    [Name("RTCDtlsTransport")]
    public static dom.RTCDtlsTransportTypeConfig RTCDtlsTransportType
    {
      get
      {
        return dom._RTCDtlsTransportType_BackingField;
      }
      set
      {
        dom._RTCDtlsTransportType_BackingField = value;
      }
    }

    [Name("RTCDtlsTransportStateChangedEvent")]
    public static dom.RTCDtlsTransportStateChangedEventTypeConfig RTCDtlsTransportStateChangedEventType
    {
      get
      {
        return dom._RTCDtlsTransportStateChangedEventType_BackingField;
      }
      set
      {
        dom._RTCDtlsTransportStateChangedEventType_BackingField = value;
      }
    }

    [Name("RTCDtmfSender")]
    public static dom.RTCDtmfSenderTypeConfig RTCDtmfSenderType
    {
      get
      {
        return dom._RTCDtmfSenderType_BackingField;
      }
      set
      {
        dom._RTCDtmfSenderType_BackingField = value;
      }
    }

    [Name("RTCIceCandidate")]
    public static dom.RTCIceCandidateType2Config RTCIceCandidateType2
    {
      get
      {
        return dom._RTCIceCandidateType2_BackingField;
      }
      set
      {
        dom._RTCIceCandidateType2_BackingField = value;
      }
    }

    [Name("RTCIceCandidatePairChangedEvent")]
    public static dom.RTCIceCandidatePairChangedEventTypeConfig RTCIceCandidatePairChangedEventType
    {
      get
      {
        return dom._RTCIceCandidatePairChangedEventType_BackingField;
      }
      set
      {
        dom._RTCIceCandidatePairChangedEventType_BackingField = value;
      }
    }

    [Name("RTCIceGatherer")]
    public static dom.RTCIceGathererTypeConfig RTCIceGathererType
    {
      get
      {
        return dom._RTCIceGathererType_BackingField;
      }
      set
      {
        dom._RTCIceGathererType_BackingField = value;
      }
    }

    [Name("RTCIceGathererEvent")]
    public static dom.RTCIceGathererEventTypeConfig RTCIceGathererEventType
    {
      get
      {
        return dom._RTCIceGathererEventType_BackingField;
      }
      set
      {
        dom._RTCIceGathererEventType_BackingField = value;
      }
    }

    [Name("RTCIceTransport")]
    public static dom.RTCIceTransportTypeConfig RTCIceTransportType
    {
      get
      {
        return dom._RTCIceTransportType_BackingField;
      }
      set
      {
        dom._RTCIceTransportType_BackingField = value;
      }
    }

    [Name("RTCIceTransportStateChangedEvent")]
    public static dom.RTCIceTransportStateChangedEventTypeConfig RTCIceTransportStateChangedEventType
    {
      get
      {
        return dom._RTCIceTransportStateChangedEventType_BackingField;
      }
      set
      {
        dom._RTCIceTransportStateChangedEventType_BackingField = value;
      }
    }

    [Name("RTCPeerConnection")]
    public static dom.RTCPeerConnectionTypeConfig RTCPeerConnectionType
    {
      get
      {
        return dom._RTCPeerConnectionType_BackingField;
      }
      set
      {
        dom._RTCPeerConnectionType_BackingField = value;
      }
    }

    [Name("RTCPeerConnectionIceEvent")]
    public static dom.RTCPeerConnectionIceEventTypeConfig RTCPeerConnectionIceEventType
    {
      get
      {
        return dom._RTCPeerConnectionIceEventType_BackingField;
      }
      set
      {
        dom._RTCPeerConnectionIceEventType_BackingField = value;
      }
    }

    [Name("RTCRtpReceiver")]
    public static dom.RTCRtpReceiverTypeConfig RTCRtpReceiverType
    {
      get
      {
        return dom._RTCRtpReceiverType_BackingField;
      }
      set
      {
        dom._RTCRtpReceiverType_BackingField = value;
      }
    }

    [Name("RTCRtpSender")]
    public static dom.RTCRtpSenderTypeConfig RTCRtpSenderType
    {
      get
      {
        return dom._RTCRtpSenderType_BackingField;
      }
      set
      {
        dom._RTCRtpSenderType_BackingField = value;
      }
    }

    [Name("RTCSessionDescription")]
    public static dom.RTCSessionDescriptionTypeConfig RTCSessionDescriptionType
    {
      get
      {
        return dom._RTCSessionDescriptionType_BackingField;
      }
      set
      {
        dom._RTCSessionDescriptionType_BackingField = value;
      }
    }

    [Name("RTCSrtpSdesTransport")]
    public static dom.RTCSrtpSdesTransportTypeConfig RTCSrtpSdesTransportType
    {
      get
      {
        return dom._RTCSrtpSdesTransportType_BackingField;
      }
      set
      {
        dom._RTCSrtpSdesTransportType_BackingField = value;
      }
    }

    [Name("RTCSsrcConflictEvent")]
    public static dom.RTCSsrcConflictEventTypeConfig RTCSsrcConflictEventType
    {
      get
      {
        return dom._RTCSsrcConflictEventType_BackingField;
      }
      set
      {
        dom._RTCSsrcConflictEventType_BackingField = value;
      }
    }

    [Name("RTCStatsProvider")]
    public static dom.RTCStatsProviderTypeConfig RTCStatsProviderType
    {
      get
      {
        return dom._RTCStatsProviderType_BackingField;
      }
      set
      {
        dom._RTCStatsProviderType_BackingField = value;
      }
    }

    [Name("RandomSource")]
    public static dom.RandomSourceTypeConfig RandomSourceType
    {
      get
      {
        return dom._RandomSourceType_BackingField;
      }
      set
      {
        dom._RandomSourceType_BackingField = value;
      }
    }

    [Name("Range")]
    public static dom.RangeTypeConfig RangeType
    {
      get
      {
        return dom._RangeType_BackingField;
      }
      set
      {
        dom._RangeType_BackingField = value;
      }
    }

    [Name("ReadableStream")]
    public static dom.ReadableStreamTypeConfig ReadableStreamType
    {
      get
      {
        return dom._ReadableStreamType_BackingField;
      }
      set
      {
        dom._ReadableStreamType_BackingField = value;
      }
    }

    [Name("ReadableStreamReader")]
    public static dom.ReadableStreamReaderTypeConfig ReadableStreamReaderType
    {
      get
      {
        return dom._ReadableStreamReaderType_BackingField;
      }
      set
      {
        dom._ReadableStreamReaderType_BackingField = value;
      }
    }

    [Name("Request")]
    public static dom.RequestType2Config RequestType2
    {
      get
      {
        return dom._RequestType2_BackingField;
      }
      set
      {
        dom._RequestType2_BackingField = value;
      }
    }

    [Name("Response")]
    public static dom.ResponseType2Config ResponseType2
    {
      get
      {
        return dom._ResponseType2_BackingField;
      }
      set
      {
        dom._ResponseType2_BackingField = value;
      }
    }

    [Name("SVGAElement")]
    public static dom.SVGAElementTypeConfig SVGAElementType
    {
      get
      {
        return dom._SVGAElementType_BackingField;
      }
      set
      {
        dom._SVGAElementType_BackingField = value;
      }
    }

    [Name("SVGAngle")]
    public static dom.SVGAngleTypeConfig SVGAngleType
    {
      get
      {
        return dom._SVGAngleType_BackingField;
      }
      set
      {
        dom._SVGAngleType_BackingField = value;
      }
    }

    [Name("SVGAnimatedAngle")]
    public static dom.SVGAnimatedAngleTypeConfig SVGAnimatedAngleType
    {
      get
      {
        return dom._SVGAnimatedAngleType_BackingField;
      }
      set
      {
        dom._SVGAnimatedAngleType_BackingField = value;
      }
    }

    [Name("SVGAnimatedBoolean")]
    public static dom.SVGAnimatedBooleanTypeConfig SVGAnimatedBooleanType
    {
      get
      {
        return dom._SVGAnimatedBooleanType_BackingField;
      }
      set
      {
        dom._SVGAnimatedBooleanType_BackingField = value;
      }
    }

    [Name("SVGAnimatedEnumeration")]
    public static dom.SVGAnimatedEnumerationTypeConfig SVGAnimatedEnumerationType
    {
      get
      {
        return dom._SVGAnimatedEnumerationType_BackingField;
      }
      set
      {
        dom._SVGAnimatedEnumerationType_BackingField = value;
      }
    }

    [Name("SVGAnimatedInteger")]
    public static dom.SVGAnimatedIntegerTypeConfig SVGAnimatedIntegerType
    {
      get
      {
        return dom._SVGAnimatedIntegerType_BackingField;
      }
      set
      {
        dom._SVGAnimatedIntegerType_BackingField = value;
      }
    }

    [Name("SVGAnimatedLength")]
    public static dom.SVGAnimatedLengthTypeConfig SVGAnimatedLengthType
    {
      get
      {
        return dom._SVGAnimatedLengthType_BackingField;
      }
      set
      {
        dom._SVGAnimatedLengthType_BackingField = value;
      }
    }

    [Name("SVGAnimatedLengthList")]
    public static dom.SVGAnimatedLengthListTypeConfig SVGAnimatedLengthListType
    {
      get
      {
        return dom._SVGAnimatedLengthListType_BackingField;
      }
      set
      {
        dom._SVGAnimatedLengthListType_BackingField = value;
      }
    }

    [Name("SVGAnimatedNumber")]
    public static dom.SVGAnimatedNumberTypeConfig SVGAnimatedNumberType
    {
      get
      {
        return dom._SVGAnimatedNumberType_BackingField;
      }
      set
      {
        dom._SVGAnimatedNumberType_BackingField = value;
      }
    }

    [Name("SVGAnimatedNumberList")]
    public static dom.SVGAnimatedNumberListTypeConfig SVGAnimatedNumberListType
    {
      get
      {
        return dom._SVGAnimatedNumberListType_BackingField;
      }
      set
      {
        dom._SVGAnimatedNumberListType_BackingField = value;
      }
    }

    [Name("SVGAnimatedPreserveAspectRatio")]
    public static dom.SVGAnimatedPreserveAspectRatioTypeConfig SVGAnimatedPreserveAspectRatioType
    {
      get
      {
        return dom._SVGAnimatedPreserveAspectRatioType_BackingField;
      }
      set
      {
        dom._SVGAnimatedPreserveAspectRatioType_BackingField = value;
      }
    }

    [Name("SVGAnimatedRect")]
    public static dom.SVGAnimatedRectTypeConfig SVGAnimatedRectType
    {
      get
      {
        return dom._SVGAnimatedRectType_BackingField;
      }
      set
      {
        dom._SVGAnimatedRectType_BackingField = value;
      }
    }

    [Name("SVGAnimatedString")]
    public static dom.SVGAnimatedStringTypeConfig SVGAnimatedStringType
    {
      get
      {
        return dom._SVGAnimatedStringType_BackingField;
      }
      set
      {
        dom._SVGAnimatedStringType_BackingField = value;
      }
    }

    [Name("SVGAnimatedTransformList")]
    public static dom.SVGAnimatedTransformListTypeConfig SVGAnimatedTransformListType
    {
      get
      {
        return dom._SVGAnimatedTransformListType_BackingField;
      }
      set
      {
        dom._SVGAnimatedTransformListType_BackingField = value;
      }
    }

    [Name("SVGCircleElement")]
    public static dom.SVGCircleElementTypeConfig SVGCircleElementType
    {
      get
      {
        return dom._SVGCircleElementType_BackingField;
      }
      set
      {
        dom._SVGCircleElementType_BackingField = value;
      }
    }

    [Name("SVGClipPathElement")]
    public static dom.SVGClipPathElementTypeConfig SVGClipPathElementType
    {
      get
      {
        return dom._SVGClipPathElementType_BackingField;
      }
      set
      {
        dom._SVGClipPathElementType_BackingField = value;
      }
    }

    [Name("SVGComponentTransferFunctionElement")]
    public static dom.SVGComponentTransferFunctionElementTypeConfig SVGComponentTransferFunctionElementType
    {
      get
      {
        return dom._SVGComponentTransferFunctionElementType_BackingField;
      }
      set
      {
        dom._SVGComponentTransferFunctionElementType_BackingField = value;
      }
    }

    [Name("SVGDefsElement")]
    public static dom.SVGDefsElementTypeConfig SVGDefsElementType
    {
      get
      {
        return dom._SVGDefsElementType_BackingField;
      }
      set
      {
        dom._SVGDefsElementType_BackingField = value;
      }
    }

    [Name("SVGDescElement")]
    public static dom.SVGDescElementTypeConfig SVGDescElementType
    {
      get
      {
        return dom._SVGDescElementType_BackingField;
      }
      set
      {
        dom._SVGDescElementType_BackingField = value;
      }
    }

    [Name("SVGElement")]
    public static dom.SVGElementTypeConfig SVGElementType
    {
      get
      {
        return dom._SVGElementType_BackingField;
      }
      set
      {
        dom._SVGElementType_BackingField = value;
      }
    }

    [Name("SVGElementInstance")]
    public static dom.SVGElementInstanceTypeConfig SVGElementInstanceType
    {
      get
      {
        return dom._SVGElementInstanceType_BackingField;
      }
      set
      {
        dom._SVGElementInstanceType_BackingField = value;
      }
    }

    [Name("SVGElementInstanceList")]
    public static dom.SVGElementInstanceListTypeConfig SVGElementInstanceListType
    {
      get
      {
        return dom._SVGElementInstanceListType_BackingField;
      }
      set
      {
        dom._SVGElementInstanceListType_BackingField = value;
      }
    }

    [Name("SVGEllipseElement")]
    public static dom.SVGEllipseElementTypeConfig SVGEllipseElementType
    {
      get
      {
        return dom._SVGEllipseElementType_BackingField;
      }
      set
      {
        dom._SVGEllipseElementType_BackingField = value;
      }
    }

    [Name("SVGFEBlendElement")]
    public static dom.SVGFEBlendElementTypeConfig SVGFEBlendElementType
    {
      get
      {
        return dom._SVGFEBlendElementType_BackingField;
      }
      set
      {
        dom._SVGFEBlendElementType_BackingField = value;
      }
    }

    [Name("SVGFEColorMatrixElement")]
    public static dom.SVGFEColorMatrixElementTypeConfig SVGFEColorMatrixElementType
    {
      get
      {
        return dom._SVGFEColorMatrixElementType_BackingField;
      }
      set
      {
        dom._SVGFEColorMatrixElementType_BackingField = value;
      }
    }

    [Name("SVGFEComponentTransferElement")]
    public static dom.SVGFEComponentTransferElementTypeConfig SVGFEComponentTransferElementType
    {
      get
      {
        return dom._SVGFEComponentTransferElementType_BackingField;
      }
      set
      {
        dom._SVGFEComponentTransferElementType_BackingField = value;
      }
    }

    [Name("SVGFECompositeElement")]
    public static dom.SVGFECompositeElementTypeConfig SVGFECompositeElementType
    {
      get
      {
        return dom._SVGFECompositeElementType_BackingField;
      }
      set
      {
        dom._SVGFECompositeElementType_BackingField = value;
      }
    }

    [Name("SVGFEConvolveMatrixElement")]
    public static dom.SVGFEConvolveMatrixElementTypeConfig SVGFEConvolveMatrixElementType
    {
      get
      {
        return dom._SVGFEConvolveMatrixElementType_BackingField;
      }
      set
      {
        dom._SVGFEConvolveMatrixElementType_BackingField = value;
      }
    }

    [Name("SVGFEDiffuseLightingElement")]
    public static dom.SVGFEDiffuseLightingElementTypeConfig SVGFEDiffuseLightingElementType
    {
      get
      {
        return dom._SVGFEDiffuseLightingElementType_BackingField;
      }
      set
      {
        dom._SVGFEDiffuseLightingElementType_BackingField = value;
      }
    }

    [Name("SVGFEDisplacementMapElement")]
    public static dom.SVGFEDisplacementMapElementTypeConfig SVGFEDisplacementMapElementType
    {
      get
      {
        return dom._SVGFEDisplacementMapElementType_BackingField;
      }
      set
      {
        dom._SVGFEDisplacementMapElementType_BackingField = value;
      }
    }

    [Name("SVGFEDistantLightElement")]
    public static dom.SVGFEDistantLightElementTypeConfig SVGFEDistantLightElementType
    {
      get
      {
        return dom._SVGFEDistantLightElementType_BackingField;
      }
      set
      {
        dom._SVGFEDistantLightElementType_BackingField = value;
      }
    }

    [Name("SVGFEFloodElement")]
    public static dom.SVGFEFloodElementTypeConfig SVGFEFloodElementType
    {
      get
      {
        return dom._SVGFEFloodElementType_BackingField;
      }
      set
      {
        dom._SVGFEFloodElementType_BackingField = value;
      }
    }

    [Name("SVGFEFuncAElement")]
    public static dom.SVGFEFuncAElementTypeConfig SVGFEFuncAElementType
    {
      get
      {
        return dom._SVGFEFuncAElementType_BackingField;
      }
      set
      {
        dom._SVGFEFuncAElementType_BackingField = value;
      }
    }

    [Name("SVGFEFuncBElement")]
    public static dom.SVGFEFuncBElementTypeConfig SVGFEFuncBElementType
    {
      get
      {
        return dom._SVGFEFuncBElementType_BackingField;
      }
      set
      {
        dom._SVGFEFuncBElementType_BackingField = value;
      }
    }

    [Name("SVGFEFuncGElement")]
    public static dom.SVGFEFuncGElementTypeConfig SVGFEFuncGElementType
    {
      get
      {
        return dom._SVGFEFuncGElementType_BackingField;
      }
      set
      {
        dom._SVGFEFuncGElementType_BackingField = value;
      }
    }

    [Name("SVGFEFuncRElement")]
    public static dom.SVGFEFuncRElementTypeConfig SVGFEFuncRElementType
    {
      get
      {
        return dom._SVGFEFuncRElementType_BackingField;
      }
      set
      {
        dom._SVGFEFuncRElementType_BackingField = value;
      }
    }

    [Name("SVGFEGaussianBlurElement")]
    public static dom.SVGFEGaussianBlurElementTypeConfig SVGFEGaussianBlurElementType
    {
      get
      {
        return dom._SVGFEGaussianBlurElementType_BackingField;
      }
      set
      {
        dom._SVGFEGaussianBlurElementType_BackingField = value;
      }
    }

    [Name("SVGFEImageElement")]
    public static dom.SVGFEImageElementTypeConfig SVGFEImageElementType
    {
      get
      {
        return dom._SVGFEImageElementType_BackingField;
      }
      set
      {
        dom._SVGFEImageElementType_BackingField = value;
      }
    }

    [Name("SVGFEMergeElement")]
    public static dom.SVGFEMergeElementTypeConfig SVGFEMergeElementType
    {
      get
      {
        return dom._SVGFEMergeElementType_BackingField;
      }
      set
      {
        dom._SVGFEMergeElementType_BackingField = value;
      }
    }

    [Name("SVGFEMergeNodeElement")]
    public static dom.SVGFEMergeNodeElementTypeConfig SVGFEMergeNodeElementType
    {
      get
      {
        return dom._SVGFEMergeNodeElementType_BackingField;
      }
      set
      {
        dom._SVGFEMergeNodeElementType_BackingField = value;
      }
    }

    [Name("SVGFEMorphologyElement")]
    public static dom.SVGFEMorphologyElementTypeConfig SVGFEMorphologyElementType
    {
      get
      {
        return dom._SVGFEMorphologyElementType_BackingField;
      }
      set
      {
        dom._SVGFEMorphologyElementType_BackingField = value;
      }
    }

    [Name("SVGFEOffsetElement")]
    public static dom.SVGFEOffsetElementTypeConfig SVGFEOffsetElementType
    {
      get
      {
        return dom._SVGFEOffsetElementType_BackingField;
      }
      set
      {
        dom._SVGFEOffsetElementType_BackingField = value;
      }
    }

    [Name("SVGFEPointLightElement")]
    public static dom.SVGFEPointLightElementTypeConfig SVGFEPointLightElementType
    {
      get
      {
        return dom._SVGFEPointLightElementType_BackingField;
      }
      set
      {
        dom._SVGFEPointLightElementType_BackingField = value;
      }
    }

    [Name("SVGFESpecularLightingElement")]
    public static dom.SVGFESpecularLightingElementTypeConfig SVGFESpecularLightingElementType
    {
      get
      {
        return dom._SVGFESpecularLightingElementType_BackingField;
      }
      set
      {
        dom._SVGFESpecularLightingElementType_BackingField = value;
      }
    }

    [Name("SVGFESpotLightElement")]
    public static dom.SVGFESpotLightElementTypeConfig SVGFESpotLightElementType
    {
      get
      {
        return dom._SVGFESpotLightElementType_BackingField;
      }
      set
      {
        dom._SVGFESpotLightElementType_BackingField = value;
      }
    }

    [Name("SVGFETileElement")]
    public static dom.SVGFETileElementTypeConfig SVGFETileElementType
    {
      get
      {
        return dom._SVGFETileElementType_BackingField;
      }
      set
      {
        dom._SVGFETileElementType_BackingField = value;
      }
    }

    [Name("SVGFETurbulenceElement")]
    public static dom.SVGFETurbulenceElementTypeConfig SVGFETurbulenceElementType
    {
      get
      {
        return dom._SVGFETurbulenceElementType_BackingField;
      }
      set
      {
        dom._SVGFETurbulenceElementType_BackingField = value;
      }
    }

    [Name("SVGFilterElement")]
    public static dom.SVGFilterElementTypeConfig SVGFilterElementType
    {
      get
      {
        return dom._SVGFilterElementType_BackingField;
      }
      set
      {
        dom._SVGFilterElementType_BackingField = value;
      }
    }

    [Name("SVGForeignObjectElement")]
    public static dom.SVGForeignObjectElementTypeConfig SVGForeignObjectElementType
    {
      get
      {
        return dom._SVGForeignObjectElementType_BackingField;
      }
      set
      {
        dom._SVGForeignObjectElementType_BackingField = value;
      }
    }

    [Name("SVGGElement")]
    public static dom.SVGGElementTypeConfig SVGGElementType
    {
      get
      {
        return dom._SVGGElementType_BackingField;
      }
      set
      {
        dom._SVGGElementType_BackingField = value;
      }
    }

    [Name("SVGGradientElement")]
    public static dom.SVGGradientElementTypeConfig SVGGradientElementType
    {
      get
      {
        return dom._SVGGradientElementType_BackingField;
      }
      set
      {
        dom._SVGGradientElementType_BackingField = value;
      }
    }

    [Name("SVGGraphicsElement")]
    public static dom.SVGGraphicsElementTypeConfig SVGGraphicsElementType
    {
      get
      {
        return dom._SVGGraphicsElementType_BackingField;
      }
      set
      {
        dom._SVGGraphicsElementType_BackingField = value;
      }
    }

    [Name("SVGImageElement")]
    public static dom.SVGImageElementTypeConfig SVGImageElementType
    {
      get
      {
        return dom._SVGImageElementType_BackingField;
      }
      set
      {
        dom._SVGImageElementType_BackingField = value;
      }
    }

    [Name("SVGLength")]
    public static dom.SVGLengthTypeConfig SVGLengthType
    {
      get
      {
        return dom._SVGLengthType_BackingField;
      }
      set
      {
        dom._SVGLengthType_BackingField = value;
      }
    }

    [Name("SVGLengthList")]
    public static dom.SVGLengthListTypeConfig SVGLengthListType
    {
      get
      {
        return dom._SVGLengthListType_BackingField;
      }
      set
      {
        dom._SVGLengthListType_BackingField = value;
      }
    }

    [Name("SVGLineElement")]
    public static dom.SVGLineElementTypeConfig SVGLineElementType
    {
      get
      {
        return dom._SVGLineElementType_BackingField;
      }
      set
      {
        dom._SVGLineElementType_BackingField = value;
      }
    }

    [Name("SVGLinearGradientElement")]
    public static dom.SVGLinearGradientElementTypeConfig SVGLinearGradientElementType
    {
      get
      {
        return dom._SVGLinearGradientElementType_BackingField;
      }
      set
      {
        dom._SVGLinearGradientElementType_BackingField = value;
      }
    }

    [Name("SVGMarkerElement")]
    public static dom.SVGMarkerElementTypeConfig SVGMarkerElementType
    {
      get
      {
        return dom._SVGMarkerElementType_BackingField;
      }
      set
      {
        dom._SVGMarkerElementType_BackingField = value;
      }
    }

    [Name("SVGMaskElement")]
    public static dom.SVGMaskElementTypeConfig SVGMaskElementType
    {
      get
      {
        return dom._SVGMaskElementType_BackingField;
      }
      set
      {
        dom._SVGMaskElementType_BackingField = value;
      }
    }

    [Name("SVGMatrix")]
    public static dom.SVGMatrixTypeConfig SVGMatrixType
    {
      get
      {
        return dom._SVGMatrixType_BackingField;
      }
      set
      {
        dom._SVGMatrixType_BackingField = value;
      }
    }

    [Name("SVGMetadataElement")]
    public static dom.SVGMetadataElementTypeConfig SVGMetadataElementType
    {
      get
      {
        return dom._SVGMetadataElementType_BackingField;
      }
      set
      {
        dom._SVGMetadataElementType_BackingField = value;
      }
    }

    [Name("SVGNumber")]
    public static dom.SVGNumberTypeConfig SVGNumberType
    {
      get
      {
        return dom._SVGNumberType_BackingField;
      }
      set
      {
        dom._SVGNumberType_BackingField = value;
      }
    }

    [Name("SVGNumberList")]
    public static dom.SVGNumberListTypeConfig SVGNumberListType
    {
      get
      {
        return dom._SVGNumberListType_BackingField;
      }
      set
      {
        dom._SVGNumberListType_BackingField = value;
      }
    }

    [Name("SVGPathElement")]
    public static dom.SVGPathElementTypeConfig SVGPathElementType
    {
      get
      {
        return dom._SVGPathElementType_BackingField;
      }
      set
      {
        dom._SVGPathElementType_BackingField = value;
      }
    }

    [Name("SVGPathSeg")]
    public static dom.SVGPathSegTypeConfig SVGPathSegType
    {
      get
      {
        return dom._SVGPathSegType_BackingField;
      }
      set
      {
        dom._SVGPathSegType_BackingField = value;
      }
    }

    [Name("SVGPathSegArcAbs")]
    public static dom.SVGPathSegArcAbsTypeConfig SVGPathSegArcAbsType
    {
      get
      {
        return dom._SVGPathSegArcAbsType_BackingField;
      }
      set
      {
        dom._SVGPathSegArcAbsType_BackingField = value;
      }
    }

    [Name("SVGPathSegArcRel")]
    public static dom.SVGPathSegArcRelTypeConfig SVGPathSegArcRelType
    {
      get
      {
        return dom._SVGPathSegArcRelType_BackingField;
      }
      set
      {
        dom._SVGPathSegArcRelType_BackingField = value;
      }
    }

    [Name("SVGPathSegClosePath")]
    public static dom.SVGPathSegClosePathTypeConfig SVGPathSegClosePathType
    {
      get
      {
        return dom._SVGPathSegClosePathType_BackingField;
      }
      set
      {
        dom._SVGPathSegClosePathType_BackingField = value;
      }
    }

    [Name("SVGPathSegCurvetoCubicAbs")]
    public static dom.SVGPathSegCurvetoCubicAbsTypeConfig SVGPathSegCurvetoCubicAbsType
    {
      get
      {
        return dom._SVGPathSegCurvetoCubicAbsType_BackingField;
      }
      set
      {
        dom._SVGPathSegCurvetoCubicAbsType_BackingField = value;
      }
    }

    [Name("SVGPathSegCurvetoCubicRel")]
    public static dom.SVGPathSegCurvetoCubicRelTypeConfig SVGPathSegCurvetoCubicRelType
    {
      get
      {
        return dom._SVGPathSegCurvetoCubicRelType_BackingField;
      }
      set
      {
        dom._SVGPathSegCurvetoCubicRelType_BackingField = value;
      }
    }

    [Name("SVGPathSegCurvetoCubicSmoothAbs")]
    public static dom.SVGPathSegCurvetoCubicSmoothAbsTypeConfig SVGPathSegCurvetoCubicSmoothAbsType
    {
      get
      {
        return dom._SVGPathSegCurvetoCubicSmoothAbsType_BackingField;
      }
      set
      {
        dom._SVGPathSegCurvetoCubicSmoothAbsType_BackingField = value;
      }
    }

    [Name("SVGPathSegCurvetoCubicSmoothRel")]
    public static dom.SVGPathSegCurvetoCubicSmoothRelTypeConfig SVGPathSegCurvetoCubicSmoothRelType
    {
      get
      {
        return dom._SVGPathSegCurvetoCubicSmoothRelType_BackingField;
      }
      set
      {
        dom._SVGPathSegCurvetoCubicSmoothRelType_BackingField = value;
      }
    }

    [Name("SVGPathSegCurvetoQuadraticAbs")]
    public static dom.SVGPathSegCurvetoQuadraticAbsTypeConfig SVGPathSegCurvetoQuadraticAbsType
    {
      get
      {
        return dom._SVGPathSegCurvetoQuadraticAbsType_BackingField;
      }
      set
      {
        dom._SVGPathSegCurvetoQuadraticAbsType_BackingField = value;
      }
    }

    [Name("SVGPathSegCurvetoQuadraticRel")]
    public static dom.SVGPathSegCurvetoQuadraticRelTypeConfig SVGPathSegCurvetoQuadraticRelType
    {
      get
      {
        return dom._SVGPathSegCurvetoQuadraticRelType_BackingField;
      }
      set
      {
        dom._SVGPathSegCurvetoQuadraticRelType_BackingField = value;
      }
    }

    [Name("SVGPathSegCurvetoQuadraticSmoothAbs")]
    public static dom.SVGPathSegCurvetoQuadraticSmoothAbsTypeConfig SVGPathSegCurvetoQuadraticSmoothAbsType
    {
      get
      {
        return dom._SVGPathSegCurvetoQuadraticSmoothAbsType_BackingField;
      }
      set
      {
        dom._SVGPathSegCurvetoQuadraticSmoothAbsType_BackingField = value;
      }
    }

    [Name("SVGPathSegCurvetoQuadraticSmoothRel")]
    public static dom.SVGPathSegCurvetoQuadraticSmoothRelTypeConfig SVGPathSegCurvetoQuadraticSmoothRelType
    {
      get
      {
        return dom._SVGPathSegCurvetoQuadraticSmoothRelType_BackingField;
      }
      set
      {
        dom._SVGPathSegCurvetoQuadraticSmoothRelType_BackingField = value;
      }
    }

    [Name("SVGPathSegLinetoAbs")]
    public static dom.SVGPathSegLinetoAbsTypeConfig SVGPathSegLinetoAbsType
    {
      get
      {
        return dom._SVGPathSegLinetoAbsType_BackingField;
      }
      set
      {
        dom._SVGPathSegLinetoAbsType_BackingField = value;
      }
    }

    [Name("SVGPathSegLinetoHorizontalAbs")]
    public static dom.SVGPathSegLinetoHorizontalAbsTypeConfig SVGPathSegLinetoHorizontalAbsType
    {
      get
      {
        return dom._SVGPathSegLinetoHorizontalAbsType_BackingField;
      }
      set
      {
        dom._SVGPathSegLinetoHorizontalAbsType_BackingField = value;
      }
    }

    [Name("SVGPathSegLinetoHorizontalRel")]
    public static dom.SVGPathSegLinetoHorizontalRelTypeConfig SVGPathSegLinetoHorizontalRelType
    {
      get
      {
        return dom._SVGPathSegLinetoHorizontalRelType_BackingField;
      }
      set
      {
        dom._SVGPathSegLinetoHorizontalRelType_BackingField = value;
      }
    }

    [Name("SVGPathSegLinetoRel")]
    public static dom.SVGPathSegLinetoRelTypeConfig SVGPathSegLinetoRelType
    {
      get
      {
        return dom._SVGPathSegLinetoRelType_BackingField;
      }
      set
      {
        dom._SVGPathSegLinetoRelType_BackingField = value;
      }
    }

    [Name("SVGPathSegLinetoVerticalAbs")]
    public static dom.SVGPathSegLinetoVerticalAbsTypeConfig SVGPathSegLinetoVerticalAbsType
    {
      get
      {
        return dom._SVGPathSegLinetoVerticalAbsType_BackingField;
      }
      set
      {
        dom._SVGPathSegLinetoVerticalAbsType_BackingField = value;
      }
    }

    [Name("SVGPathSegLinetoVerticalRel")]
    public static dom.SVGPathSegLinetoVerticalRelTypeConfig SVGPathSegLinetoVerticalRelType
    {
      get
      {
        return dom._SVGPathSegLinetoVerticalRelType_BackingField;
      }
      set
      {
        dom._SVGPathSegLinetoVerticalRelType_BackingField = value;
      }
    }

    [Name("SVGPathSegList")]
    public static dom.SVGPathSegListTypeConfig SVGPathSegListType
    {
      get
      {
        return dom._SVGPathSegListType_BackingField;
      }
      set
      {
        dom._SVGPathSegListType_BackingField = value;
      }
    }

    [Name("SVGPathSegMovetoAbs")]
    public static dom.SVGPathSegMovetoAbsTypeConfig SVGPathSegMovetoAbsType
    {
      get
      {
        return dom._SVGPathSegMovetoAbsType_BackingField;
      }
      set
      {
        dom._SVGPathSegMovetoAbsType_BackingField = value;
      }
    }

    [Name("SVGPathSegMovetoRel")]
    public static dom.SVGPathSegMovetoRelTypeConfig SVGPathSegMovetoRelType
    {
      get
      {
        return dom._SVGPathSegMovetoRelType_BackingField;
      }
      set
      {
        dom._SVGPathSegMovetoRelType_BackingField = value;
      }
    }

    [Name("SVGPatternElement")]
    public static dom.SVGPatternElementTypeConfig SVGPatternElementType
    {
      get
      {
        return dom._SVGPatternElementType_BackingField;
      }
      set
      {
        dom._SVGPatternElementType_BackingField = value;
      }
    }

    [Name("SVGPoint")]
    public static dom.SVGPointTypeConfig SVGPointType
    {
      get
      {
        return dom._SVGPointType_BackingField;
      }
      set
      {
        dom._SVGPointType_BackingField = value;
      }
    }

    [Name("SVGPointList")]
    public static dom.SVGPointListTypeConfig SVGPointListType
    {
      get
      {
        return dom._SVGPointListType_BackingField;
      }
      set
      {
        dom._SVGPointListType_BackingField = value;
      }
    }

    [Name("SVGPolygonElement")]
    public static dom.SVGPolygonElementTypeConfig SVGPolygonElementType
    {
      get
      {
        return dom._SVGPolygonElementType_BackingField;
      }
      set
      {
        dom._SVGPolygonElementType_BackingField = value;
      }
    }

    [Name("SVGPolylineElement")]
    public static dom.SVGPolylineElementTypeConfig SVGPolylineElementType
    {
      get
      {
        return dom._SVGPolylineElementType_BackingField;
      }
      set
      {
        dom._SVGPolylineElementType_BackingField = value;
      }
    }

    [Name("SVGPreserveAspectRatio")]
    public static dom.SVGPreserveAspectRatioTypeConfig SVGPreserveAspectRatioType
    {
      get
      {
        return dom._SVGPreserveAspectRatioType_BackingField;
      }
      set
      {
        dom._SVGPreserveAspectRatioType_BackingField = value;
      }
    }

    [Name("SVGRadialGradientElement")]
    public static dom.SVGRadialGradientElementTypeConfig SVGRadialGradientElementType
    {
      get
      {
        return dom._SVGRadialGradientElementType_BackingField;
      }
      set
      {
        dom._SVGRadialGradientElementType_BackingField = value;
      }
    }

    [Name("SVGRect")]
    public static dom.SVGRectTypeConfig SVGRectType
    {
      get
      {
        return dom._SVGRectType_BackingField;
      }
      set
      {
        dom._SVGRectType_BackingField = value;
      }
    }

    [Name("SVGRectElement")]
    public static dom.SVGRectElementTypeConfig SVGRectElementType
    {
      get
      {
        return dom._SVGRectElementType_BackingField;
      }
      set
      {
        dom._SVGRectElementType_BackingField = value;
      }
    }

    [Name("SVGSVGElement")]
    public static dom.SVGSVGElementTypeConfig SVGSVGElementType
    {
      get
      {
        return dom._SVGSVGElementType_BackingField;
      }
      set
      {
        dom._SVGSVGElementType_BackingField = value;
      }
    }

    [Name("SVGScriptElement")]
    public static dom.SVGScriptElementTypeConfig SVGScriptElementType
    {
      get
      {
        return dom._SVGScriptElementType_BackingField;
      }
      set
      {
        dom._SVGScriptElementType_BackingField = value;
      }
    }

    [Name("SVGStopElement")]
    public static dom.SVGStopElementTypeConfig SVGStopElementType
    {
      get
      {
        return dom._SVGStopElementType_BackingField;
      }
      set
      {
        dom._SVGStopElementType_BackingField = value;
      }
    }

    [Name("SVGStringList")]
    public static dom.SVGStringListTypeConfig SVGStringListType
    {
      get
      {
        return dom._SVGStringListType_BackingField;
      }
      set
      {
        dom._SVGStringListType_BackingField = value;
      }
    }

    [Name("SVGStylable")]
    public static dom.SVGStylableTypeConfig SVGStylableType
    {
      get
      {
        return dom._SVGStylableType_BackingField;
      }
      set
      {
        dom._SVGStylableType_BackingField = value;
      }
    }

    [Name("SVGStyleElement")]
    public static dom.SVGStyleElementTypeConfig SVGStyleElementType
    {
      get
      {
        return dom._SVGStyleElementType_BackingField;
      }
      set
      {
        dom._SVGStyleElementType_BackingField = value;
      }
    }

    [Name("SVGSwitchElement")]
    public static dom.SVGSwitchElementTypeConfig SVGSwitchElementType
    {
      get
      {
        return dom._SVGSwitchElementType_BackingField;
      }
      set
      {
        dom._SVGSwitchElementType_BackingField = value;
      }
    }

    [Name("SVGSymbolElement")]
    public static dom.SVGSymbolElementTypeConfig SVGSymbolElementType
    {
      get
      {
        return dom._SVGSymbolElementType_BackingField;
      }
      set
      {
        dom._SVGSymbolElementType_BackingField = value;
      }
    }

    [Name("SVGTSpanElement")]
    public static dom.SVGTSpanElementTypeConfig SVGTSpanElementType
    {
      get
      {
        return dom._SVGTSpanElementType_BackingField;
      }
      set
      {
        dom._SVGTSpanElementType_BackingField = value;
      }
    }

    [Name("SVGTextContentElement")]
    public static dom.SVGTextContentElementTypeConfig SVGTextContentElementType
    {
      get
      {
        return dom._SVGTextContentElementType_BackingField;
      }
      set
      {
        dom._SVGTextContentElementType_BackingField = value;
      }
    }

    [Name("SVGTextElement")]
    public static dom.SVGTextElementTypeConfig SVGTextElementType
    {
      get
      {
        return dom._SVGTextElementType_BackingField;
      }
      set
      {
        dom._SVGTextElementType_BackingField = value;
      }
    }

    [Name("SVGTextPathElement")]
    public static dom.SVGTextPathElementTypeConfig SVGTextPathElementType
    {
      get
      {
        return dom._SVGTextPathElementType_BackingField;
      }
      set
      {
        dom._SVGTextPathElementType_BackingField = value;
      }
    }

    [Name("SVGTextPositioningElement")]
    public static dom.SVGTextPositioningElementTypeConfig SVGTextPositioningElementType
    {
      get
      {
        return dom._SVGTextPositioningElementType_BackingField;
      }
      set
      {
        dom._SVGTextPositioningElementType_BackingField = value;
      }
    }

    [Name("SVGTitleElement")]
    public static dom.SVGTitleElementTypeConfig SVGTitleElementType
    {
      get
      {
        return dom._SVGTitleElementType_BackingField;
      }
      set
      {
        dom._SVGTitleElementType_BackingField = value;
      }
    }

    [Name("SVGTransform")]
    public static dom.SVGTransformTypeConfig SVGTransformType
    {
      get
      {
        return dom._SVGTransformType_BackingField;
      }
      set
      {
        dom._SVGTransformType_BackingField = value;
      }
    }

    [Name("SVGTransformList")]
    public static dom.SVGTransformListTypeConfig SVGTransformListType
    {
      get
      {
        return dom._SVGTransformListType_BackingField;
      }
      set
      {
        dom._SVGTransformListType_BackingField = value;
      }
    }

    [Name("SVGUnitTypes")]
    public static dom.SVGUnitTypes SVGUnitTypesInstance
    {
      get
      {
        return dom._SVGUnitTypesInstance_BackingField;
      }
      set
      {
        dom._SVGUnitTypesInstance_BackingField = value;
      }
    }

    [Name("SVGUseElement")]
    public static dom.SVGUseElementTypeConfig SVGUseElementType
    {
      get
      {
        return dom._SVGUseElementType_BackingField;
      }
      set
      {
        dom._SVGUseElementType_BackingField = value;
      }
    }

    [Name("SVGViewElement")]
    public static dom.SVGViewElementTypeConfig SVGViewElementType
    {
      get
      {
        return dom._SVGViewElementType_BackingField;
      }
      set
      {
        dom._SVGViewElementType_BackingField = value;
      }
    }

    [Name("SVGZoomAndPan")]
    public static dom.SVGZoomAndPan2Config SVGZoomAndPan2
    {
      get
      {
        return dom._SVGZoomAndPan2_BackingField;
      }
      set
      {
        dom._SVGZoomAndPan2_BackingField = value;
      }
    }

    [Name("SVGZoomEvent")]
    public static dom.SVGZoomEventTypeConfig SVGZoomEventType
    {
      get
      {
        return dom._SVGZoomEventType_BackingField;
      }
      set
      {
        dom._SVGZoomEventType_BackingField = value;
      }
    }

    [Name("ScopedCredential")]
    public static dom.ScopedCredentialType2Config ScopedCredentialType2
    {
      get
      {
        return dom._ScopedCredentialType2_BackingField;
      }
      set
      {
        dom._ScopedCredentialType2_BackingField = value;
      }
    }

    [Name("ScopedCredentialInfo")]
    public static dom.ScopedCredentialInfoTypeConfig ScopedCredentialInfoType
    {
      get
      {
        return dom._ScopedCredentialInfoType_BackingField;
      }
      set
      {
        dom._ScopedCredentialInfoType_BackingField = value;
      }
    }

    [Name("Screen")]
    public static dom.ScreenTypeConfig ScreenType
    {
      get
      {
        return dom._ScreenType_BackingField;
      }
      set
      {
        dom._ScreenType_BackingField = value;
      }
    }

    [Name("ScriptProcessorNode")]
    public static dom.ScriptProcessorNodeTypeConfig ScriptProcessorNodeType
    {
      get
      {
        return dom._ScriptProcessorNodeType_BackingField;
      }
      set
      {
        dom._ScriptProcessorNodeType_BackingField = value;
      }
    }

    [Name("SecurityPolicyViolationEvent")]
    public static dom.SecurityPolicyViolationEventTypeConfig SecurityPolicyViolationEventType
    {
      get
      {
        return dom._SecurityPolicyViolationEventType_BackingField;
      }
      set
      {
        dom._SecurityPolicyViolationEventType_BackingField = value;
      }
    }

    [Name("Selection")]
    public static dom.SelectionTypeConfig SelectionType
    {
      get
      {
        return dom._SelectionType_BackingField;
      }
      set
      {
        dom._SelectionType_BackingField = value;
      }
    }

    [Name("ServiceUIFrameContext")]
    public static dom.ServiceUIFrameContext ServiceUIFrameContextInstance
    {
      get
      {
        return dom._ServiceUIFrameContextInstance_BackingField;
      }
      set
      {
        dom._ServiceUIFrameContextInstance_BackingField = value;
      }
    }

    [Name("ServiceWorker")]
    public static dom.ServiceWorkerTypeConfig ServiceWorkerType
    {
      get
      {
        return dom._ServiceWorkerType_BackingField;
      }
      set
      {
        dom._ServiceWorkerType_BackingField = value;
      }
    }

    [Name("ServiceWorkerContainer")]
    public static dom.ServiceWorkerContainerTypeConfig ServiceWorkerContainerType
    {
      get
      {
        return dom._ServiceWorkerContainerType_BackingField;
      }
      set
      {
        dom._ServiceWorkerContainerType_BackingField = value;
      }
    }

    [Name("ServiceWorkerMessageEvent")]
    public static dom.ServiceWorkerMessageEventTypeConfig ServiceWorkerMessageEventType
    {
      get
      {
        return dom._ServiceWorkerMessageEventType_BackingField;
      }
      set
      {
        dom._ServiceWorkerMessageEventType_BackingField = value;
      }
    }

    [Name("ServiceWorkerRegistration")]
    public static dom.ServiceWorkerRegistrationTypeConfig ServiceWorkerRegistrationType
    {
      get
      {
        return dom._ServiceWorkerRegistrationType_BackingField;
      }
      set
      {
        dom._ServiceWorkerRegistrationType_BackingField = value;
      }
    }

    [Name("SourceBuffer")]
    public static dom.SourceBufferTypeConfig SourceBufferType
    {
      get
      {
        return dom._SourceBufferType_BackingField;
      }
      set
      {
        dom._SourceBufferType_BackingField = value;
      }
    }

    [Name("SourceBufferList")]
    public static dom.SourceBufferListTypeConfig SourceBufferListType
    {
      get
      {
        return dom._SourceBufferListType_BackingField;
      }
      set
      {
        dom._SourceBufferListType_BackingField = value;
      }
    }

    [Name("SpeechSynthesis")]
    public static dom.SpeechSynthesisTypeConfig SpeechSynthesisType
    {
      get
      {
        return dom._SpeechSynthesisType_BackingField;
      }
      set
      {
        dom._SpeechSynthesisType_BackingField = value;
      }
    }

    [Name("SpeechSynthesisEvent")]
    public static dom.SpeechSynthesisEventTypeConfig SpeechSynthesisEventType
    {
      get
      {
        return dom._SpeechSynthesisEventType_BackingField;
      }
      set
      {
        dom._SpeechSynthesisEventType_BackingField = value;
      }
    }

    [Name("SpeechSynthesisUtterance")]
    public static dom.SpeechSynthesisUtteranceTypeConfig SpeechSynthesisUtteranceType
    {
      get
      {
        return dom._SpeechSynthesisUtteranceType_BackingField;
      }
      set
      {
        dom._SpeechSynthesisUtteranceType_BackingField = value;
      }
    }

    [Name("SpeechSynthesisVoice")]
    public static dom.SpeechSynthesisVoiceTypeConfig SpeechSynthesisVoiceType
    {
      get
      {
        return dom._SpeechSynthesisVoiceType_BackingField;
      }
      set
      {
        dom._SpeechSynthesisVoiceType_BackingField = value;
      }
    }

    [Name("StereoPannerNode")]
    public static dom.StereoPannerNodeTypeConfig StereoPannerNodeType
    {
      get
      {
        return dom._StereoPannerNodeType_BackingField;
      }
      set
      {
        dom._StereoPannerNodeType_BackingField = value;
      }
    }

    [Name("Storage")]
    public static dom.StorageTypeConfig StorageType
    {
      get
      {
        return dom._StorageType_BackingField;
      }
      set
      {
        dom._StorageType_BackingField = value;
      }
    }

    [Name("StorageEvent")]
    public static dom.StorageEventTypeConfig StorageEventType
    {
      get
      {
        return dom._StorageEventType_BackingField;
      }
      set
      {
        dom._StorageEventType_BackingField = value;
      }
    }

    [Name("StyleMedia")]
    public static dom.StyleMediaTypeConfig StyleMediaType
    {
      get
      {
        return dom._StyleMediaType_BackingField;
      }
      set
      {
        dom._StyleMediaType_BackingField = value;
      }
    }

    [Name("StyleSheet")]
    public static dom.StyleSheetTypeConfig StyleSheetType
    {
      get
      {
        return dom._StyleSheetType_BackingField;
      }
      set
      {
        dom._StyleSheetType_BackingField = value;
      }
    }

    [Name("StyleSheetList")]
    public static dom.StyleSheetListTypeConfig StyleSheetListType
    {
      get
      {
        return dom._StyleSheetListType_BackingField;
      }
      set
      {
        dom._StyleSheetListType_BackingField = value;
      }
    }

    [Name("SubtleCrypto")]
    public static dom.SubtleCryptoTypeConfig SubtleCryptoType
    {
      get
      {
        return dom._SubtleCryptoType_BackingField;
      }
      set
      {
        dom._SubtleCryptoType_BackingField = value;
      }
    }

    [Name("SyncManager")]
    public static dom.SyncManagerTypeConfig SyncManagerType
    {
      get
      {
        return dom._SyncManagerType_BackingField;
      }
      set
      {
        dom._SyncManagerType_BackingField = value;
      }
    }

    [Name("Text")]
    public static dom.TextTypeConfig TextType
    {
      get
      {
        return dom._TextType_BackingField;
      }
      set
      {
        dom._TextType_BackingField = value;
      }
    }

    [Name("TextDecoder")]
    public static dom.TextDecoderTypeConfig TextDecoderType
    {
      get
      {
        return dom._TextDecoderType_BackingField;
      }
      set
      {
        dom._TextDecoderType_BackingField = value;
      }
    }

    [Name("TextEncoder")]
    public static dom.TextEncoderTypeConfig TextEncoderType
    {
      get
      {
        return dom._TextEncoderType_BackingField;
      }
      set
      {
        dom._TextEncoderType_BackingField = value;
      }
    }

    [Name("TextEvent")]
    public static dom.TextEventTypeConfig TextEventType
    {
      get
      {
        return dom._TextEventType_BackingField;
      }
      set
      {
        dom._TextEventType_BackingField = value;
      }
    }

    [Name("TextMetrics")]
    public static dom.TextMetricsTypeConfig TextMetricsType
    {
      get
      {
        return dom._TextMetricsType_BackingField;
      }
      set
      {
        dom._TextMetricsType_BackingField = value;
      }
    }

    [Name("TextTrack")]
    public static dom.TextTrackTypeConfig TextTrackType
    {
      get
      {
        return dom._TextTrackType_BackingField;
      }
      set
      {
        dom._TextTrackType_BackingField = value;
      }
    }

    [Name("TextTrackCue")]
    public static dom.TextTrackCueTypeConfig TextTrackCueType
    {
      get
      {
        return dom._TextTrackCueType_BackingField;
      }
      set
      {
        dom._TextTrackCueType_BackingField = value;
      }
    }

    [Name("TextTrackCueList")]
    public static dom.TextTrackCueListTypeConfig TextTrackCueListType
    {
      get
      {
        return dom._TextTrackCueListType_BackingField;
      }
      set
      {
        dom._TextTrackCueListType_BackingField = value;
      }
    }

    [Name("TextTrackList")]
    public static dom.TextTrackListTypeConfig TextTrackListType
    {
      get
      {
        return dom._TextTrackListType_BackingField;
      }
      set
      {
        dom._TextTrackListType_BackingField = value;
      }
    }

    [Name("TimeRanges")]
    public static dom.TimeRangesTypeConfig TimeRangesType
    {
      get
      {
        return dom._TimeRangesType_BackingField;
      }
      set
      {
        dom._TimeRangesType_BackingField = value;
      }
    }

    [Name("Touch")]
    public static dom.TouchTypeConfig TouchType
    {
      get
      {
        return dom._TouchType_BackingField;
      }
      set
      {
        dom._TouchType_BackingField = value;
      }
    }

    [Name("TouchEvent")]
    public static dom.TouchEventTypeConfig TouchEventType
    {
      get
      {
        return dom._TouchEventType_BackingField;
      }
      set
      {
        dom._TouchEventType_BackingField = value;
      }
    }

    [Name("TouchList")]
    public static dom.TouchListTypeConfig TouchListType
    {
      get
      {
        return dom._TouchListType_BackingField;
      }
      set
      {
        dom._TouchListType_BackingField = value;
      }
    }

    [Name("TrackEvent")]
    public static dom.TrackEventTypeConfig TrackEventType
    {
      get
      {
        return dom._TrackEventType_BackingField;
      }
      set
      {
        dom._TrackEventType_BackingField = value;
      }
    }

    [Name("TransitionEvent")]
    public static dom.TransitionEventTypeConfig TransitionEventType
    {
      get
      {
        return dom._TransitionEventType_BackingField;
      }
      set
      {
        dom._TransitionEventType_BackingField = value;
      }
    }

    [Name("TreeWalker")]
    public static dom.TreeWalkerTypeConfig TreeWalkerType
    {
      get
      {
        return dom._TreeWalkerType_BackingField;
      }
      set
      {
        dom._TreeWalkerType_BackingField = value;
      }
    }

    [Name("UIEvent")]
    public static dom.UIEventTypeConfig UIEventType
    {
      get
      {
        return dom._UIEventType_BackingField;
      }
      set
      {
        dom._UIEventType_BackingField = value;
      }
    }

    [Name("URL")]
    public static dom.URLTypeConfig URLType
    {
      get
      {
        return dom._URLType_BackingField;
      }
      set
      {
        dom._URLType_BackingField = value;
      }
    }

    [Name("URLSearchParams")]
    public static dom.URLSearchParamsTypeConfig URLSearchParamsType
    {
      get
      {
        return dom._URLSearchParamsType_BackingField;
      }
      set
      {
        dom._URLSearchParamsType_BackingField = value;
      }
    }

    [Name("VRDisplay")]
    public static dom.VRDisplayTypeConfig VRDisplayType
    {
      get
      {
        return dom._VRDisplayType_BackingField;
      }
      set
      {
        dom._VRDisplayType_BackingField = value;
      }
    }

    [Name("VRDisplayCapabilities")]
    public static dom.VRDisplayCapabilitiesTypeConfig VRDisplayCapabilitiesType
    {
      get
      {
        return dom._VRDisplayCapabilitiesType_BackingField;
      }
      set
      {
        dom._VRDisplayCapabilitiesType_BackingField = value;
      }
    }

    [Name("VRDisplayEvent")]
    public static dom.VRDisplayEventTypeConfig VRDisplayEventType
    {
      get
      {
        return dom._VRDisplayEventType_BackingField;
      }
      set
      {
        dom._VRDisplayEventType_BackingField = value;
      }
    }

    [Name("VREyeParameters")]
    public static dom.VREyeParametersTypeConfig VREyeParametersType
    {
      get
      {
        return dom._VREyeParametersType_BackingField;
      }
      set
      {
        dom._VREyeParametersType_BackingField = value;
      }
    }

    [Name("VRFieldOfView")]
    public static dom.VRFieldOfViewTypeConfig VRFieldOfViewType
    {
      get
      {
        return dom._VRFieldOfViewType_BackingField;
      }
      set
      {
        dom._VRFieldOfViewType_BackingField = value;
      }
    }

    [Name("VRFrameData")]
    public static dom.VRFrameDataTypeConfig VRFrameDataType
    {
      get
      {
        return dom._VRFrameDataType_BackingField;
      }
      set
      {
        dom._VRFrameDataType_BackingField = value;
      }
    }

    [Name("VRPose")]
    public static dom.VRPoseTypeConfig VRPoseType
    {
      get
      {
        return dom._VRPoseType_BackingField;
      }
      set
      {
        dom._VRPoseType_BackingField = value;
      }
    }

    [Name("ValidityState")]
    public static dom.ValidityStateTypeConfig ValidityStateType
    {
      get
      {
        return dom._ValidityStateType_BackingField;
      }
      set
      {
        dom._ValidityStateType_BackingField = value;
      }
    }

    [Name("VideoPlaybackQuality")]
    public static dom.VideoPlaybackQualityTypeConfig VideoPlaybackQualityType
    {
      get
      {
        return dom._VideoPlaybackQualityType_BackingField;
      }
      set
      {
        dom._VideoPlaybackQualityType_BackingField = value;
      }
    }

    [Name("VideoTrack")]
    public static dom.VideoTrackTypeConfig VideoTrackType
    {
      get
      {
        return dom._VideoTrackType_BackingField;
      }
      set
      {
        dom._VideoTrackType_BackingField = value;
      }
    }

    [Name("VideoTrackList")]
    public static dom.VideoTrackListTypeConfig VideoTrackListType
    {
      get
      {
        return dom._VideoTrackListType_BackingField;
      }
      set
      {
        dom._VideoTrackListType_BackingField = value;
      }
    }

    [Name("WEBGL_compressed_texture_s3tc")]
    public static dom.WEBGL_compressed_texture_s3tcTypeConfig WEBGL_compressed_texture_s3tcType
    {
      get
      {
        return dom._WEBGL_compressed_texture_s3tcType_BackingField;
      }
      set
      {
        dom._WEBGL_compressed_texture_s3tcType_BackingField = value;
      }
    }

    [Name("WEBGL_debug_renderer_info")]
    public static dom.WEBGL_debug_renderer_infoTypeConfig WEBGL_debug_renderer_infoType
    {
      get
      {
        return dom._WEBGL_debug_renderer_infoType_BackingField;
      }
      set
      {
        dom._WEBGL_debug_renderer_infoType_BackingField = value;
      }
    }

    [Name("WEBGL_depth_texture")]
    public static dom.WEBGL_depth_textureTypeConfig WEBGL_depth_textureType
    {
      get
      {
        return dom._WEBGL_depth_textureType_BackingField;
      }
      set
      {
        dom._WEBGL_depth_textureType_BackingField = value;
      }
    }

    [Name("WaveShaperNode")]
    public static dom.WaveShaperNodeTypeConfig WaveShaperNodeType
    {
      get
      {
        return dom._WaveShaperNodeType_BackingField;
      }
      set
      {
        dom._WaveShaperNodeType_BackingField = value;
      }
    }

    [Name("WebAuthentication")]
    public static dom.WebAuthenticationTypeConfig WebAuthenticationType
    {
      get
      {
        return dom._WebAuthenticationType_BackingField;
      }
      set
      {
        dom._WebAuthenticationType_BackingField = value;
      }
    }

    [Name("WebAuthnAssertion")]
    public static dom.WebAuthnAssertionTypeConfig WebAuthnAssertionType
    {
      get
      {
        return dom._WebAuthnAssertionType_BackingField;
      }
      set
      {
        dom._WebAuthnAssertionType_BackingField = value;
      }
    }

    [Name("WebGLActiveInfo")]
    public static dom.WebGLActiveInfoTypeConfig WebGLActiveInfoType
    {
      get
      {
        return dom._WebGLActiveInfoType_BackingField;
      }
      set
      {
        dom._WebGLActiveInfoType_BackingField = value;
      }
    }

    [Name("WebGLBuffer")]
    public static dom.WebGLBufferTypeConfig WebGLBufferType
    {
      get
      {
        return dom._WebGLBufferType_BackingField;
      }
      set
      {
        dom._WebGLBufferType_BackingField = value;
      }
    }

    [Name("WebGLContextEvent")]
    public static dom.WebGLContextEventTypeConfig WebGLContextEventType
    {
      get
      {
        return dom._WebGLContextEventType_BackingField;
      }
      set
      {
        dom._WebGLContextEventType_BackingField = value;
      }
    }

    [Name("WebGLFramebuffer")]
    public static dom.WebGLFramebufferTypeConfig WebGLFramebufferType
    {
      get
      {
        return dom._WebGLFramebufferType_BackingField;
      }
      set
      {
        dom._WebGLFramebufferType_BackingField = value;
      }
    }

    [Name("WebGLObject")]
    public static dom.WebGLObjectTypeConfig WebGLObjectType
    {
      get
      {
        return dom._WebGLObjectType_BackingField;
      }
      set
      {
        dom._WebGLObjectType_BackingField = value;
      }
    }

    [Name("WebGLProgram")]
    public static dom.WebGLProgramTypeConfig WebGLProgramType
    {
      get
      {
        return dom._WebGLProgramType_BackingField;
      }
      set
      {
        dom._WebGLProgramType_BackingField = value;
      }
    }

    [Name("WebGLRenderbuffer")]
    public static dom.WebGLRenderbufferTypeConfig WebGLRenderbufferType
    {
      get
      {
        return dom._WebGLRenderbufferType_BackingField;
      }
      set
      {
        dom._WebGLRenderbufferType_BackingField = value;
      }
    }

    [Name("WebGLRenderingContext")]
    public static dom.WebGLRenderingContextTypeConfig WebGLRenderingContextType
    {
      get
      {
        return dom._WebGLRenderingContextType_BackingField;
      }
      set
      {
        dom._WebGLRenderingContextType_BackingField = value;
      }
    }

    [Name("WebGLShader")]
    public static dom.WebGLShaderTypeConfig WebGLShaderType
    {
      get
      {
        return dom._WebGLShaderType_BackingField;
      }
      set
      {
        dom._WebGLShaderType_BackingField = value;
      }
    }

    [Name("WebGLShaderPrecisionFormat")]
    public static dom.WebGLShaderPrecisionFormatTypeConfig WebGLShaderPrecisionFormatType
    {
      get
      {
        return dom._WebGLShaderPrecisionFormatType_BackingField;
      }
      set
      {
        dom._WebGLShaderPrecisionFormatType_BackingField = value;
      }
    }

    [Name("WebGLTexture")]
    public static dom.WebGLTextureTypeConfig WebGLTextureType
    {
      get
      {
        return dom._WebGLTextureType_BackingField;
      }
      set
      {
        dom._WebGLTextureType_BackingField = value;
      }
    }

    [Name("WebGLUniformLocation")]
    public static dom.WebGLUniformLocationTypeConfig WebGLUniformLocationType
    {
      get
      {
        return dom._WebGLUniformLocationType_BackingField;
      }
      set
      {
        dom._WebGLUniformLocationType_BackingField = value;
      }
    }

    [Name("WebKitCSSMatrix")]
    public static dom.WebKitCSSMatrixTypeConfig WebKitCSSMatrixType
    {
      get
      {
        return dom._WebKitCSSMatrixType_BackingField;
      }
      set
      {
        dom._WebKitCSSMatrixType_BackingField = value;
      }
    }

    [Name("WebKitDirectoryEntry")]
    public static dom.WebKitDirectoryEntryTypeConfig WebKitDirectoryEntryType
    {
      get
      {
        return dom._WebKitDirectoryEntryType_BackingField;
      }
      set
      {
        dom._WebKitDirectoryEntryType_BackingField = value;
      }
    }

    [Name("WebKitDirectoryReader")]
    public static dom.WebKitDirectoryReaderTypeConfig WebKitDirectoryReaderType
    {
      get
      {
        return dom._WebKitDirectoryReaderType_BackingField;
      }
      set
      {
        dom._WebKitDirectoryReaderType_BackingField = value;
      }
    }

    [Name("WebKitEntry")]
    public static dom.WebKitEntryTypeConfig WebKitEntryType
    {
      get
      {
        return dom._WebKitEntryType_BackingField;
      }
      set
      {
        dom._WebKitEntryType_BackingField = value;
      }
    }

    [Name("WebKitFileEntry")]
    public static dom.WebKitFileEntryTypeConfig WebKitFileEntryType
    {
      get
      {
        return dom._WebKitFileEntryType_BackingField;
      }
      set
      {
        dom._WebKitFileEntryType_BackingField = value;
      }
    }

    [Name("WebKitFileSystem")]
    public static dom.WebKitFileSystemTypeConfig WebKitFileSystemType
    {
      get
      {
        return dom._WebKitFileSystemType_BackingField;
      }
      set
      {
        dom._WebKitFileSystemType_BackingField = value;
      }
    }

    [Name("WebKitPoint")]
    public static dom.WebKitPointTypeConfig WebKitPointType
    {
      get
      {
        return dom._WebKitPointType_BackingField;
      }
      set
      {
        dom._WebKitPointType_BackingField = value;
      }
    }

    [Name("WebSocket")]
    public static dom.WebSocketTypeConfig WebSocketType
    {
      get
      {
        return dom._WebSocketType_BackingField;
      }
      set
      {
        dom._WebSocketType_BackingField = value;
      }
    }

    [Name("WheelEvent")]
    public static dom.WheelEventTypeConfig WheelEventType
    {
      get
      {
        return dom._WheelEventType_BackingField;
      }
      set
      {
        dom._WheelEventType_BackingField = value;
      }
    }

    [Name("Window")]
    public static dom.WindowTypeConfig WindowType
    {
      get
      {
        return dom._WindowType_BackingField;
      }
      set
      {
        dom._WindowType_BackingField = value;
      }
    }

    [Name("Worker")]
    public static dom.WorkerTypeConfig WorkerType
    {
      get
      {
        return dom._WorkerType_BackingField;
      }
      set
      {
        dom._WorkerType_BackingField = value;
      }
    }

    [Name("WritableStream")]
    public static dom.WritableStreamTypeConfig WritableStreamType
    {
      get
      {
        return dom._WritableStreamType_BackingField;
      }
      set
      {
        dom._WritableStreamType_BackingField = value;
      }
    }

    [Name("WritableStreamDefaultController")]
    public static dom.WritableStreamDefaultControllerTypeConfig WritableStreamDefaultControllerType
    {
      get
      {
        return dom._WritableStreamDefaultControllerType_BackingField;
      }
      set
      {
        dom._WritableStreamDefaultControllerType_BackingField = value;
      }
    }

    [Name("WritableStreamDefaultWriter")]
    public static dom.WritableStreamDefaultWriterTypeConfig WritableStreamDefaultWriterType
    {
      get
      {
        return dom._WritableStreamDefaultWriterType_BackingField;
      }
      set
      {
        dom._WritableStreamDefaultWriterType_BackingField = value;
      }
    }

    [Name("XMLDocument")]
    public static dom.XMLDocumentTypeConfig XMLDocumentType
    {
      get
      {
        return dom._XMLDocumentType_BackingField;
      }
      set
      {
        dom._XMLDocumentType_BackingField = value;
      }
    }

    [Name("XMLHttpRequest")]
    public static dom.XMLHttpRequestTypeConfig XMLHttpRequestType
    {
      get
      {
        return dom._XMLHttpRequestType_BackingField;
      }
      set
      {
        dom._XMLHttpRequestType_BackingField = value;
      }
    }

    [Name("XMLHttpRequestUpload")]
    public static dom.XMLHttpRequestUploadTypeConfig XMLHttpRequestUploadType
    {
      get
      {
        return dom._XMLHttpRequestUploadType_BackingField;
      }
      set
      {
        dom._XMLHttpRequestUploadType_BackingField = value;
      }
    }

    [Name("XMLSerializer")]
    public static dom.XMLSerializerTypeConfig XMLSerializerType
    {
      get
      {
        return dom._XMLSerializerType_BackingField;
      }
      set
      {
        dom._XMLSerializerType_BackingField = value;
      }
    }

    [Name("XPathEvaluator")]
    public static dom.XPathEvaluatorTypeConfig XPathEvaluatorType
    {
      get
      {
        return dom._XPathEvaluatorType_BackingField;
      }
      set
      {
        dom._XPathEvaluatorType_BackingField = value;
      }
    }

    [Name("XPathExpression")]
    public static dom.XPathExpressionTypeConfig XPathExpressionType
    {
      get
      {
        return dom._XPathExpressionType_BackingField;
      }
      set
      {
        dom._XPathExpressionType_BackingField = value;
      }
    }

    [Name("XPathNSResolver")]
    public static dom.XPathNSResolverTypeConfig XPathNSResolverType
    {
      get
      {
        return dom._XPathNSResolverType_BackingField;
      }
      set
      {
        dom._XPathNSResolverType_BackingField = value;
      }
    }

    [Name("XPathResult")]
    public static dom.XPathResultTypeConfig XPathResultType
    {
      get
      {
        return dom._XPathResultType_BackingField;
      }
      set
      {
        dom._XPathResultType_BackingField = value;
      }
    }

    [Name("XSLTProcessor")]
    public static dom.XSLTProcessorTypeConfig XSLTProcessorType
    {
      get
      {
        return dom._XSLTProcessorType_BackingField;
      }
      set
      {
        dom._XSLTProcessorType_BackingField = value;
      }
    }

    [Name("webkitRTCPeerConnection")]
    public static dom.webkitRTCPeerConnectionTypeConfig webkitRTCPeerConnectionType
    {
      get
      {
        return dom._webkitRTCPeerConnectionType_BackingField;
      }
      set
      {
        dom._webkitRTCPeerConnectionType_BackingField = value;
      }
    }

    public static dom.AudioConfig Audio
    {
      get
      {
        return dom._Audio_BackingField;
      }
      set
      {
        dom._Audio_BackingField = value;
      }
    }

    public static dom.ImageConfig Image
    {
      get
      {
        return dom._Image_BackingField;
      }
      set
      {
        dom._Image_BackingField = value;
      }
    }

    public static dom.OptionConfig Option
    {
      get
      {
        return dom._Option_BackingField;
      }
      set
      {
        dom._Option_BackingField = value;
      }
    }

    [Name("Blob")]
    public static dom.BlobStatics BlobInstance
    {
      get
      {
        return dom._BlobInstance_BackingField;
      }
      set
      {
        dom._BlobInstance_BackingField = value;
      }
    }

    [Name("URL")]
    public static dom.URLStatics URLInstance
    {
      get
      {
        return dom._URLInstance_BackingField;
      }
      set
      {
        dom._URLInstance_BackingField = value;
      }
    }

    [Name("URLSearchParams")]
    public static dom.URLSearchParamsStatics URLSearchParamsInstance
    {
      get
      {
        return dom._URLSearchParamsInstance_BackingField;
      }
      set
      {
        dom._URLSearchParamsInstance_BackingField = value;
      }
    }

    public static dom.ApplicationCache applicationCache
    {
      get
      {
        return dom._applicationCache_BackingField;
      }
      set
      {
        dom._applicationCache_BackingField = value;
      }
    }

    public static dom.CacheStorage caches
    {
      get
      {
        return dom._caches_BackingField;
      }
      set
      {
        dom._caches_BackingField = value;
      }
    }

    public static dom.Navigator clientInformation
    {
      get
      {
        return dom._clientInformation_BackingField;
      }
      set
      {
        dom._clientInformation_BackingField = value;
      }
    }

    public static bool closed
    {
      get
      {
        return dom._closed_BackingField;
      }
      set
      {
        dom._closed_BackingField = value;
      }
    }

    public static dom.Crypto crypto
    {
      get
      {
        return dom._crypto_BackingField;
      }
      set
      {
        dom._crypto_BackingField = value;
      }
    }

    public static dom.CustomElementRegistry customElements
    {
      get
      {
        return dom._customElements_BackingField;
      }
      set
      {
        dom._customElements_BackingField = value;
      }
    }

    public static string defaultStatus
    {
      get
      {
        return dom._defaultStatus_BackingField;
      }
      set
      {
        dom._defaultStatus_BackingField = value;
      }
    }

    public static double devicePixelRatio
    {
      get
      {
        return dom._devicePixelRatio_BackingField;
      }
      set
      {
        dom._devicePixelRatio_BackingField = value;
      }
    }

    public static string doNotTrack
    {
      get
      {
        return dom._doNotTrack_BackingField;
      }
      set
      {
        dom._doNotTrack_BackingField = value;
      }
    }

    public static dom.Document document
    {
      get
      {
        return dom._document_BackingField;
      }
      set
      {
        dom._document_BackingField = value;
      }
    }

    [Name("event")]
    public static Union<dom.Event, Undefined> @event
    {
      get
      {
        return dom._event_BackingField;
      }
      set
      {
        dom._event_BackingField = value;
      }
    }

    public static dom.External external
    {
      get
      {
        return dom._external_BackingField;
      }
      set
      {
        dom._external_BackingField = value;
      }
    }

    public static dom.Element frameElement
    {
      get
      {
        return dom._frameElement_BackingField;
      }
      set
      {
        dom._frameElement_BackingField = value;
      }
    }

    public static dom.Window frames
    {
      get
      {
        return dom._frames_BackingField;
      }
      set
      {
        dom._frames_BackingField = value;
      }
    }

    public static dom.History history
    {
      get
      {
        return dom._history_BackingField;
      }
      set
      {
        dom._history_BackingField = value;
      }
    }

    public static double innerHeight
    {
      get
      {
        return dom._innerHeight_BackingField;
      }
      set
      {
        dom._innerHeight_BackingField = value;
      }
    }

    public static double innerWidth
    {
      get
      {
        return dom._innerWidth_BackingField;
      }
      set
      {
        dom._innerWidth_BackingField = value;
      }
    }

    public static bool isSecureContext
    {
      get
      {
        return dom._isSecureContext_BackingField;
      }
      set
      {
        dom._isSecureContext_BackingField = value;
      }
    }

    public static double length
    {
      get
      {
        return dom._length_BackingField;
      }
      set
      {
        dom._length_BackingField = value;
      }
    }

    public static dom.Location location
    {
      get
      {
        return dom._location_BackingField;
      }
      set
      {
        dom._location_BackingField = value;
      }
    }

    public static dom.BarProp locationbar
    {
      get
      {
        return dom._locationbar_BackingField;
      }
      set
      {
        dom._locationbar_BackingField = value;
      }
    }

    public static dom.BarProp menubar
    {
      get
      {
        return dom._menubar_BackingField;
      }
      set
      {
        dom._menubar_BackingField = value;
      }
    }

    public static dom.ExtensionScriptApis msContentScript
    {
      get
      {
        return dom._msContentScript_BackingField;
      }
      set
      {
        dom._msContentScript_BackingField = value;
      }
    }

    public static dom.MSCredentials msCredentials
    {
      get
      {
        return dom._msCredentials_BackingField;
      }
      set
      {
        dom._msCredentials_BackingField = value;
      }
    }

    public static dom.Navigator navigator
    {
      get
      {
        return dom._navigator_BackingField;
      }
      set
      {
        dom._navigator_BackingField = value;
      }
    }

    public static Union<string, bool> offscreenBuffering
    {
      get
      {
        return dom._offscreenBuffering_BackingField;
      }
      set
      {
        dom._offscreenBuffering_BackingField = value;
      }
    }

    public static dom.onabortFn onabort
    {
      get
      {
        return dom._onabort_BackingField;
      }
      set
      {
        dom._onabort_BackingField = value;
      }
    }

    public static dom.onbeforeunloadFn onbeforeunload
    {
      get
      {
        return dom._onbeforeunload_BackingField;
      }
      set
      {
        dom._onbeforeunload_BackingField = value;
      }
    }

    public static dom.onblurFn onblur
    {
      get
      {
        return dom._onblur_BackingField;
      }
      set
      {
        dom._onblur_BackingField = value;
      }
    }

    public static dom.oncanplayFn oncanplay
    {
      get
      {
        return dom._oncanplay_BackingField;
      }
      set
      {
        dom._oncanplay_BackingField = value;
      }
    }

    public static dom.oncanplayFn oncanplaythrough
    {
      get
      {
        return dom._oncanplaythrough_BackingField;
      }
      set
      {
        dom._oncanplaythrough_BackingField = value;
      }
    }

    public static dom.oncanplayFn onchange
    {
      get
      {
        return dom._onchange_BackingField;
      }
      set
      {
        dom._onchange_BackingField = value;
      }
    }

    public static dom.onclickFn onclick
    {
      get
      {
        return dom._onclick_BackingField;
      }
      set
      {
        dom._onclick_BackingField = value;
      }
    }

    public static dom.oncanplayFn oncompassneedscalibration
    {
      get
      {
        return dom._oncompassneedscalibration_BackingField;
      }
      set
      {
        dom._oncompassneedscalibration_BackingField = value;
      }
    }

    public static dom.oncontextmenuFn oncontextmenu
    {
      get
      {
        return dom._oncontextmenu_BackingField;
      }
      set
      {
        dom._oncontextmenu_BackingField = value;
      }
    }

    public static dom.onclickFn ondblclick
    {
      get
      {
        return dom._ondblclick_BackingField;
      }
      set
      {
        dom._ondblclick_BackingField = value;
      }
    }

    public static dom.ondevicelightFn ondevicelight
    {
      get
      {
        return dom._ondevicelight_BackingField;
      }
      set
      {
        dom._ondevicelight_BackingField = value;
      }
    }

    public static dom.ondevicemotionFn ondevicemotion
    {
      get
      {
        return dom._ondevicemotion_BackingField;
      }
      set
      {
        dom._ondevicemotion_BackingField = value;
      }
    }

    public static dom.ondeviceorientationFn ondeviceorientation
    {
      get
      {
        return dom._ondeviceorientation_BackingField;
      }
      set
      {
        dom._ondeviceorientation_BackingField = value;
      }
    }

    public static dom.ondragFn ondrag
    {
      get
      {
        return dom._ondrag_BackingField;
      }
      set
      {
        dom._ondrag_BackingField = value;
      }
    }

    public static dom.ondragFn ondragend
    {
      get
      {
        return dom._ondragend_BackingField;
      }
      set
      {
        dom._ondragend_BackingField = value;
      }
    }

    public static dom.ondragFn ondragenter
    {
      get
      {
        return dom._ondragenter_BackingField;
      }
      set
      {
        dom._ondragenter_BackingField = value;
      }
    }

    public static dom.ondragFn ondragleave
    {
      get
      {
        return dom._ondragleave_BackingField;
      }
      set
      {
        dom._ondragleave_BackingField = value;
      }
    }

    public static dom.ondragFn ondragover
    {
      get
      {
        return dom._ondragover_BackingField;
      }
      set
      {
        dom._ondragover_BackingField = value;
      }
    }

    public static dom.ondragFn ondragstart
    {
      get
      {
        return dom._ondragstart_BackingField;
      }
      set
      {
        dom._ondragstart_BackingField = value;
      }
    }

    public static dom.ondragFn ondrop
    {
      get
      {
        return dom._ondrop_BackingField;
      }
      set
      {
        dom._ondrop_BackingField = value;
      }
    }

    public static dom.oncanplayFn ondurationchange
    {
      get
      {
        return dom._ondurationchange_BackingField;
      }
      set
      {
        dom._ondurationchange_BackingField = value;
      }
    }

    public static dom.oncanplayFn onemptied
    {
      get
      {
        return dom._onemptied_BackingField;
      }
      set
      {
        dom._onemptied_BackingField = value;
      }
    }

    public static dom.oncanplayFn onended
    {
      get
      {
        return dom._onended_BackingField;
      }
      set
      {
        dom._onended_BackingField = value;
      }
    }

    public static dom.ErrorEventHandler onerror
    {
      get
      {
        return dom._onerror_BackingField;
      }
      set
      {
        dom._onerror_BackingField = value;
      }
    }

    public static dom.onblurFn onfocus
    {
      get
      {
        return dom._onfocus_BackingField;
      }
      set
      {
        dom._onfocus_BackingField = value;
      }
    }

    public static dom.onhashchangeFn onhashchange
    {
      get
      {
        return dom._onhashchange_BackingField;
      }
      set
      {
        dom._onhashchange_BackingField = value;
      }
    }

    public static dom.oncanplayFn oninput
    {
      get
      {
        return dom._oninput_BackingField;
      }
      set
      {
        dom._oninput_BackingField = value;
      }
    }

    public static dom.oncanplayFn oninvalid
    {
      get
      {
        return dom._oninvalid_BackingField;
      }
      set
      {
        dom._oninvalid_BackingField = value;
      }
    }

    public static dom.onkeydownFn onkeydown
    {
      get
      {
        return dom._onkeydown_BackingField;
      }
      set
      {
        dom._onkeydown_BackingField = value;
      }
    }

    public static dom.onkeydownFn onkeypress
    {
      get
      {
        return dom._onkeypress_BackingField;
      }
      set
      {
        dom._onkeypress_BackingField = value;
      }
    }

    public static dom.onkeydownFn onkeyup
    {
      get
      {
        return dom._onkeyup_BackingField;
      }
      set
      {
        dom._onkeyup_BackingField = value;
      }
    }

    public static dom.oncanplayFn onload
    {
      get
      {
        return dom._onload_BackingField;
      }
      set
      {
        dom._onload_BackingField = value;
      }
    }

    public static dom.oncanplayFn onloadeddata
    {
      get
      {
        return dom._onloadeddata_BackingField;
      }
      set
      {
        dom._onloadeddata_BackingField = value;
      }
    }

    public static dom.oncanplayFn onloadedmetadata
    {
      get
      {
        return dom._onloadedmetadata_BackingField;
      }
      set
      {
        dom._onloadedmetadata_BackingField = value;
      }
    }

    public static dom.oncanplayFn onloadstart
    {
      get
      {
        return dom._onloadstart_BackingField;
      }
      set
      {
        dom._onloadstart_BackingField = value;
      }
    }

    public static dom.onmessageFn onmessage
    {
      get
      {
        return dom._onmessage_BackingField;
      }
      set
      {
        dom._onmessage_BackingField = value;
      }
    }

    public static dom.onclickFn onmousedown
    {
      get
      {
        return dom._onmousedown_BackingField;
      }
      set
      {
        dom._onmousedown_BackingField = value;
      }
    }

    public static dom.onclickFn onmouseenter
    {
      get
      {
        return dom._onmouseenter_BackingField;
      }
      set
      {
        dom._onmouseenter_BackingField = value;
      }
    }

    public static dom.onclickFn onmouseleave
    {
      get
      {
        return dom._onmouseleave_BackingField;
      }
      set
      {
        dom._onmouseleave_BackingField = value;
      }
    }

    public static dom.onclickFn onmousemove
    {
      get
      {
        return dom._onmousemove_BackingField;
      }
      set
      {
        dom._onmousemove_BackingField = value;
      }
    }

    public static dom.onclickFn onmouseout
    {
      get
      {
        return dom._onmouseout_BackingField;
      }
      set
      {
        dom._onmouseout_BackingField = value;
      }
    }

    public static dom.onclickFn onmouseover
    {
      get
      {
        return dom._onmouseover_BackingField;
      }
      set
      {
        dom._onmouseover_BackingField = value;
      }
    }

    public static dom.onclickFn onmouseup
    {
      get
      {
        return dom._onmouseup_BackingField;
      }
      set
      {
        dom._onmouseup_BackingField = value;
      }
    }

    public static dom.onmousewheelFn onmousewheel
    {
      get
      {
        return dom._onmousewheel_BackingField;
      }
      set
      {
        dom._onmousewheel_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmsgesturechange
    {
      get
      {
        return dom._onmsgesturechange_BackingField;
      }
      set
      {
        dom._onmsgesturechange_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmsgesturedoubletap
    {
      get
      {
        return dom._onmsgesturedoubletap_BackingField;
      }
      set
      {
        dom._onmsgesturedoubletap_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmsgestureend
    {
      get
      {
        return dom._onmsgestureend_BackingField;
      }
      set
      {
        dom._onmsgestureend_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmsgesturehold
    {
      get
      {
        return dom._onmsgesturehold_BackingField;
      }
      set
      {
        dom._onmsgesturehold_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmsgesturestart
    {
      get
      {
        return dom._onmsgesturestart_BackingField;
      }
      set
      {
        dom._onmsgesturestart_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmsgesturetap
    {
      get
      {
        return dom._onmsgesturetap_BackingField;
      }
      set
      {
        dom._onmsgesturetap_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmsinertiastart
    {
      get
      {
        return dom._onmsinertiastart_BackingField;
      }
      set
      {
        dom._onmsinertiastart_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmspointercancel
    {
      get
      {
        return dom._onmspointercancel_BackingField;
      }
      set
      {
        dom._onmspointercancel_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmspointerdown
    {
      get
      {
        return dom._onmspointerdown_BackingField;
      }
      set
      {
        dom._onmspointerdown_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmspointerenter
    {
      get
      {
        return dom._onmspointerenter_BackingField;
      }
      set
      {
        dom._onmspointerenter_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmspointerleave
    {
      get
      {
        return dom._onmspointerleave_BackingField;
      }
      set
      {
        dom._onmspointerleave_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmspointermove
    {
      get
      {
        return dom._onmspointermove_BackingField;
      }
      set
      {
        dom._onmspointermove_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmspointerout
    {
      get
      {
        return dom._onmspointerout_BackingField;
      }
      set
      {
        dom._onmspointerout_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmspointerover
    {
      get
      {
        return dom._onmspointerover_BackingField;
      }
      set
      {
        dom._onmspointerover_BackingField = value;
      }
    }

    public static dom.oncanplayFn onmspointerup
    {
      get
      {
        return dom._onmspointerup_BackingField;
      }
      set
      {
        dom._onmspointerup_BackingField = value;
      }
    }

    public static dom.oncanplayFn onoffline
    {
      get
      {
        return dom._onoffline_BackingField;
      }
      set
      {
        dom._onoffline_BackingField = value;
      }
    }

    public static dom.oncanplayFn ononline
    {
      get
      {
        return dom._ononline_BackingField;
      }
      set
      {
        dom._ononline_BackingField = value;
      }
    }

    public static dom.oncanplayFn onorientationchange
    {
      get
      {
        return dom._onorientationchange_BackingField;
      }
      set
      {
        dom._onorientationchange_BackingField = value;
      }
    }

    public static dom.onpagehideFn onpagehide
    {
      get
      {
        return dom._onpagehide_BackingField;
      }
      set
      {
        dom._onpagehide_BackingField = value;
      }
    }

    public static dom.onpagehideFn onpageshow
    {
      get
      {
        return dom._onpageshow_BackingField;
      }
      set
      {
        dom._onpageshow_BackingField = value;
      }
    }

    public static dom.oncanplayFn onpause
    {
      get
      {
        return dom._onpause_BackingField;
      }
      set
      {
        dom._onpause_BackingField = value;
      }
    }

    public static dom.oncanplayFn onplay
    {
      get
      {
        return dom._onplay_BackingField;
      }
      set
      {
        dom._onplay_BackingField = value;
      }
    }

    public static dom.oncanplayFn onplaying
    {
      get
      {
        return dom._onplaying_BackingField;
      }
      set
      {
        dom._onplaying_BackingField = value;
      }
    }

    public static dom.onpopstateFn onpopstate
    {
      get
      {
        return dom._onpopstate_BackingField;
      }
      set
      {
        dom._onpopstate_BackingField = value;
      }
    }

    public static dom.onprogressFn onprogress
    {
      get
      {
        return dom._onprogress_BackingField;
      }
      set
      {
        dom._onprogress_BackingField = value;
      }
    }

    public static dom.oncanplayFn onratechange
    {
      get
      {
        return dom._onratechange_BackingField;
      }
      set
      {
        dom._onratechange_BackingField = value;
      }
    }

    public static dom.onprogressFn onreadystatechange
    {
      get
      {
        return dom._onreadystatechange_BackingField;
      }
      set
      {
        dom._onreadystatechange_BackingField = value;
      }
    }

    public static dom.oncanplayFn onreset
    {
      get
      {
        return dom._onreset_BackingField;
      }
      set
      {
        dom._onreset_BackingField = value;
      }
    }

    public static dom.onabortFn onresize
    {
      get
      {
        return dom._onresize_BackingField;
      }
      set
      {
        dom._onresize_BackingField = value;
      }
    }

    public static dom.onabortFn onscroll
    {
      get
      {
        return dom._onscroll_BackingField;
      }
      set
      {
        dom._onscroll_BackingField = value;
      }
    }

    public static dom.oncanplayFn onseeked
    {
      get
      {
        return dom._onseeked_BackingField;
      }
      set
      {
        dom._onseeked_BackingField = value;
      }
    }

    public static dom.oncanplayFn onseeking
    {
      get
      {
        return dom._onseeking_BackingField;
      }
      set
      {
        dom._onseeking_BackingField = value;
      }
    }

    public static dom.onabortFn onselect
    {
      get
      {
        return dom._onselect_BackingField;
      }
      set
      {
        dom._onselect_BackingField = value;
      }
    }

    public static dom.oncanplayFn onstalled
    {
      get
      {
        return dom._onstalled_BackingField;
      }
      set
      {
        dom._onstalled_BackingField = value;
      }
    }

    public static dom.onstorageFn onstorage
    {
      get
      {
        return dom._onstorage_BackingField;
      }
      set
      {
        dom._onstorage_BackingField = value;
      }
    }

    public static dom.oncanplayFn onsubmit
    {
      get
      {
        return dom._onsubmit_BackingField;
      }
      set
      {
        dom._onsubmit_BackingField = value;
      }
    }

    public static dom.oncanplayFn onsuspend
    {
      get
      {
        return dom._onsuspend_BackingField;
      }
      set
      {
        dom._onsuspend_BackingField = value;
      }
    }

    public static dom.oncanplayFn ontimeupdate
    {
      get
      {
        return dom._ontimeupdate_BackingField;
      }
      set
      {
        dom._ontimeupdate_BackingField = value;
      }
    }

    public static dom.ontouchcancelFn ontouchcancel
    {
      get
      {
        return dom._ontouchcancel_BackingField;
      }
      set
      {
        dom._ontouchcancel_BackingField = value;
      }
    }

    public static dom.ontouchendFn ontouchend
    {
      get
      {
        return dom._ontouchend_BackingField;
      }
      set
      {
        dom._ontouchend_BackingField = value;
      }
    }

    public static dom.ontouchmoveFn ontouchmove
    {
      get
      {
        return dom._ontouchmove_BackingField;
      }
      set
      {
        dom._ontouchmove_BackingField = value;
      }
    }

    public static dom.ontouchstartFn ontouchstart
    {
      get
      {
        return dom._ontouchstart_BackingField;
      }
      set
      {
        dom._ontouchstart_BackingField = value;
      }
    }

    public static dom.oncanplayFn onunload
    {
      get
      {
        return dom._onunload_BackingField;
      }
      set
      {
        dom._onunload_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvolumechange
    {
      get
      {
        return dom._onvolumechange_BackingField;
      }
      set
      {
        dom._onvolumechange_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvrdisplayactivate
    {
      get
      {
        return dom._onvrdisplayactivate_BackingField;
      }
      set
      {
        dom._onvrdisplayactivate_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvrdisplayblur
    {
      get
      {
        return dom._onvrdisplayblur_BackingField;
      }
      set
      {
        dom._onvrdisplayblur_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvrdisplayconnect
    {
      get
      {
        return dom._onvrdisplayconnect_BackingField;
      }
      set
      {
        dom._onvrdisplayconnect_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvrdisplaydeactivate
    {
      get
      {
        return dom._onvrdisplaydeactivate_BackingField;
      }
      set
      {
        dom._onvrdisplaydeactivate_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvrdisplaydisconnect
    {
      get
      {
        return dom._onvrdisplaydisconnect_BackingField;
      }
      set
      {
        dom._onvrdisplaydisconnect_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvrdisplayfocus
    {
      get
      {
        return dom._onvrdisplayfocus_BackingField;
      }
      set
      {
        dom._onvrdisplayfocus_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvrdisplaypointerrestricted
    {
      get
      {
        return dom._onvrdisplaypointerrestricted_BackingField;
      }
      set
      {
        dom._onvrdisplaypointerrestricted_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvrdisplaypointerunrestricted
    {
      get
      {
        return dom._onvrdisplaypointerunrestricted_BackingField;
      }
      set
      {
        dom._onvrdisplaypointerunrestricted_BackingField = value;
      }
    }

    public static dom.oncanplayFn onvrdisplaypresentchange
    {
      get
      {
        return dom._onvrdisplaypresentchange_BackingField;
      }
      set
      {
        dom._onvrdisplaypresentchange_BackingField = value;
      }
    }

    public static dom.oncanplayFn onwaiting
    {
      get
      {
        return dom._onwaiting_BackingField;
      }
      set
      {
        dom._onwaiting_BackingField = value;
      }
    }

    public static object opener
    {
      get
      {
        return dom._opener_BackingField;
      }
      set
      {
        dom._opener_BackingField = value;
      }
    }

    public static Union<string, double> orientation
    {
      get
      {
        return dom._orientation_BackingField;
      }
      set
      {
        dom._orientation_BackingField = value;
      }
    }

    public static double outerHeight
    {
      get
      {
        return dom._outerHeight_BackingField;
      }
      set
      {
        dom._outerHeight_BackingField = value;
      }
    }

    public static double outerWidth
    {
      get
      {
        return dom._outerWidth_BackingField;
      }
      set
      {
        dom._outerWidth_BackingField = value;
      }
    }

    public static double pageXOffset
    {
      get
      {
        return dom._pageXOffset_BackingField;
      }
      set
      {
        dom._pageXOffset_BackingField = value;
      }
    }

    public static double pageYOffset
    {
      get
      {
        return dom._pageYOffset_BackingField;
      }
      set
      {
        dom._pageYOffset_BackingField = value;
      }
    }

    public static dom.Window parent
    {
      get
      {
        return dom._parent_BackingField;
      }
      set
      {
        dom._parent_BackingField = value;
      }
    }

    public static dom.Performance performance
    {
      get
      {
        return dom._performance_BackingField;
      }
      set
      {
        dom._performance_BackingField = value;
      }
    }

    public static dom.BarProp personalbar
    {
      get
      {
        return dom._personalbar_BackingField;
      }
      set
      {
        dom._personalbar_BackingField = value;
      }
    }

    public static dom.Screen screen
    {
      get
      {
        return dom._screen_BackingField;
      }
      set
      {
        dom._screen_BackingField = value;
      }
    }

    public static double screenLeft
    {
      get
      {
        return dom._screenLeft_BackingField;
      }
      set
      {
        dom._screenLeft_BackingField = value;
      }
    }

    public static double screenTop
    {
      get
      {
        return dom._screenTop_BackingField;
      }
      set
      {
        dom._screenTop_BackingField = value;
      }
    }

    public static double screenX
    {
      get
      {
        return dom._screenX_BackingField;
      }
      set
      {
        dom._screenX_BackingField = value;
      }
    }

    public static double screenY
    {
      get
      {
        return dom._screenY_BackingField;
      }
      set
      {
        dom._screenY_BackingField = value;
      }
    }

    public static double scrollX
    {
      get
      {
        return dom._scrollX_BackingField;
      }
      set
      {
        dom._scrollX_BackingField = value;
      }
    }

    public static double scrollY
    {
      get
      {
        return dom._scrollY_BackingField;
      }
      set
      {
        dom._scrollY_BackingField = value;
      }
    }

    public static dom.BarProp scrollbars
    {
      get
      {
        return dom._scrollbars_BackingField;
      }
      set
      {
        dom._scrollbars_BackingField = value;
      }
    }

    public static dom.Window self
    {
      get
      {
        return dom._self_BackingField;
      }
      set
      {
        dom._self_BackingField = value;
      }
    }

    public static dom.SpeechSynthesis speechSynthesis
    {
      get
      {
        return dom._speechSynthesis_BackingField;
      }
      set
      {
        dom._speechSynthesis_BackingField = value;
      }
    }

    public static string status
    {
      get
      {
        return dom._status_BackingField;
      }
      set
      {
        dom._status_BackingField = value;
      }
    }

    public static dom.BarProp statusbar
    {
      get
      {
        return dom._statusbar_BackingField;
      }
      set
      {
        dom._statusbar_BackingField = value;
      }
    }

    public static dom.StyleMedia styleMedia
    {
      get
      {
        return dom._styleMedia_BackingField;
      }
      set
      {
        dom._styleMedia_BackingField = value;
      }
    }

    public static dom.BarProp toolbar
    {
      get
      {
        return dom._toolbar_BackingField;
      }
      set
      {
        dom._toolbar_BackingField = value;
      }
    }

    public static dom.Window top
    {
      get
      {
        return dom._top_BackingField;
      }
      set
      {
        dom._top_BackingField = value;
      }
    }

    public static dom.Window window
    {
      get
      {
        return dom._window_BackingField;
      }
      set
      {
        dom._window_BackingField = value;
      }
    }

    public static extern void alert();

    public static extern void alert(object message);

    public static extern void blur();

    public static extern void cancelAnimationFrame(double handle);

    public static extern void captureEvents();

    public static extern void close();

    public static extern bool confirm();

    public static extern bool confirm(string message);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLImageElement image);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.SVGImageElement image);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLVideoElement image);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLCanvasElement image);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(dom.ImageBitmap image);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(dom.ImageData image);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(dom.Blob image);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLImageElement image,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.SVGImageElement image,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLVideoElement image,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLCanvasElement image,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.ImageBitmap image,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.ImageData image,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.Blob image,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image,
      double sx,
      double sy,
      double sw,
      double sh);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLImageElement image,
      double sx,
      double sy,
      double sw,
      double sh);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.SVGImageElement image,
      double sx,
      double sy,
      double sw,
      double sh);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLVideoElement image,
      double sx,
      double sy,
      double sw,
      double sh);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLCanvasElement image,
      double sx,
      double sy,
      double sw,
      double sh);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.ImageBitmap image,
      double sx,
      double sy,
      double sw,
      double sh);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.ImageData image,
      double sx,
      double sy,
      double sw,
      double sh);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.Blob image,
      double sx,
      double sy,
      double sw,
      double sh);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image,
      double sx,
      double sy,
      double sw,
      double sh,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLImageElement image,
      double sx,
      double sy,
      double sw,
      double sh,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.SVGImageElement image,
      double sx,
      double sy,
      double sw,
      double sh,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLVideoElement image,
      double sx,
      double sy,
      double sw,
      double sh,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.HTMLCanvasElement image,
      double sx,
      double sy,
      double sw,
      double sh,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.ImageBitmap image,
      double sx,
      double sy,
      double sw,
      double sh,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.ImageData image,
      double sx,
      double sy,
      double sw,
      double sh,
      dom.ImageBitmapOptions options);

    public static extern es5.Promise<dom.ImageBitmap> createImageBitmap(
      dom.Blob image,
      double sx,
      double sy,
      double sw,
      double sh,
      dom.ImageBitmapOptions options);

    public static extern void departFocus(
      dom.NavigationReason navigationReason,
      dom.FocusNavigationOrigin origin);

    public static extern void focus();

    public static extern dom.CSSStyleDeclaration getComputedStyle(dom.Element elt);

    public static extern dom.CSSStyleDeclaration getComputedStyle(
      dom.Element elt,
      string pseudoElt);

    public static extern dom.CSSRuleList getMatchedCSSRules(dom.Element elt);

    public static extern dom.CSSRuleList getMatchedCSSRules(dom.Element elt, string pseudoElt);

    public static extern dom.Selection getSelection();

    public static extern dom.MediaQueryList matchMedia(string mediaQuery);

    public static extern void moveBy();

    public static extern void moveBy(double x);

    public static extern void moveBy(double x, double y);

    public static extern void moveTo();

    public static extern void moveTo(double x);

    public static extern void moveTo(double x, double y);

    public static extern void msWriteProfilerMark(string profilerMarkName);

    public static extern dom.Window open();

    public static extern dom.Window open(string url);

    public static extern dom.Window open(string url, string target);

    public static extern dom.Window open(string url, string target, string features);

    public static extern dom.Window open(
      string url,
      string target,
      string features,
      bool replace);

    public static extern void postMessage(object message, string targetOrigin);

    public static extern void postMessage(object message, string targetOrigin, object[] transfer);

    public static extern void print();

    public static extern string prompt();

    public static extern string prompt(string message);

    public static extern string prompt(string message, string _default);

    public static extern void releaseEvents();

    public static extern double requestAnimationFrame(dom.FrameRequestCallback callback);

    public static extern void resizeBy();

    public static extern void resizeBy(double x);

    public static extern void resizeBy(double x, double y);

    public static extern void resizeTo();

    public static extern void resizeTo(double x);

    public static extern void resizeTo(double x, double y);

    public static extern void scroll();

    public static extern void scroll(dom.ScrollToOptions options);

    public static extern void scroll(double x);

    public static extern void scroll(double x, double y);

    public static extern void scrollBy();

    public static extern void scrollBy(dom.ScrollToOptions options);

    public static extern void scrollBy(double x);

    public static extern void scrollBy(double x, double y);

    public static extern void scrollTo();

    public static extern void scrollTo(dom.ScrollToOptions options);

    public static extern void scrollTo(double x);

    public static extern void scrollTo(double x, double y);

    public static extern void stop();

    public static extern void webkitCancelAnimationFrame(double handle);

    public static extern dom.WebKitPoint webkitConvertPointFromNodeToPage(
      dom.Node node,
      dom.WebKitPoint pt);

    public static extern dom.WebKitPoint webkitConvertPointFromPageToNode(
      dom.Node node,
      dom.WebKitPoint pt);

    public static extern double webkitRequestAnimationFrame(dom.FrameRequestCallback callback);

    public static extern string toString();

    public static extern bool dispatchEvent(dom.Event evt);

    public static extern void clearInterval();

    public static extern void clearInterval(double handle);

    public static extern void clearTimeout();

    public static extern void clearTimeout(double handle);

    public static extern double setInterval(dom.setIntervalFn handler, double timeout);

    public static extern double setInterval(object handler);

    [ExpandParams]
    public static extern double setInterval(object handler, object timeout, params object[] args);

    public static extern double setTimeout(dom.setTimeoutFn handler, double timeout);

    public static extern double setTimeout(object handler);

    [ExpandParams]
    public static extern double setTimeout(object handler, object timeout, params object[] args);

    public static extern void clearImmediate(double handle);

    public static extern double setImmediate(dom.setImmediateFn handler);

    [ExpandParams]
    public static extern double setImmediate(object handler, params object[] args);

    public static dom.Storage sessionStorage
    {
      get
      {
        return dom._sessionStorage_BackingField;
      }
      set
      {
        dom._sessionStorage_BackingField = value;
      }
    }

    public static dom.Storage localStorage
    {
      get
      {
        return dom._localStorage_BackingField;
      }
      set
      {
        dom._localStorage_BackingField = value;
      }
    }

    public static dom.Console console
    {
      get
      {
        return dom._console_BackingField;
      }
      set
      {
        dom._console_BackingField = value;
      }
    }

    public static dom.oncontextmenuFn onpointercancel
    {
      get
      {
        return dom._onpointercancel_BackingField;
      }
      set
      {
        dom._onpointercancel_BackingField = value;
      }
    }

    public static dom.oncontextmenuFn onpointerdown
    {
      get
      {
        return dom._onpointerdown_BackingField;
      }
      set
      {
        dom._onpointerdown_BackingField = value;
      }
    }

    public static dom.oncontextmenuFn onpointerenter
    {
      get
      {
        return dom._onpointerenter_BackingField;
      }
      set
      {
        dom._onpointerenter_BackingField = value;
      }
    }

    public static dom.oncontextmenuFn onpointerleave
    {
      get
      {
        return dom._onpointerleave_BackingField;
      }
      set
      {
        dom._onpointerleave_BackingField = value;
      }
    }

    public static dom.oncontextmenuFn onpointermove
    {
      get
      {
        return dom._onpointermove_BackingField;
      }
      set
      {
        dom._onpointermove_BackingField = value;
      }
    }

    public static dom.oncontextmenuFn onpointerout
    {
      get
      {
        return dom._onpointerout_BackingField;
      }
      set
      {
        dom._onpointerout_BackingField = value;
      }
    }

    public static dom.oncontextmenuFn onpointerover
    {
      get
      {
        return dom._onpointerover_BackingField;
      }
      set
      {
        dom._onpointerover_BackingField = value;
      }
    }

    public static dom.oncontextmenuFn onpointerup
    {
      get
      {
        return dom._onpointerup_BackingField;
      }
      set
      {
        dom._onpointerup_BackingField = value;
      }
    }

    public static dom.onmousewheelFn onwheel
    {
      get
      {
        return dom._onwheel_BackingField;
      }
      set
      {
        dom._onwheel_BackingField = value;
      }
    }

    public static dom.IDBFactory indexedDB
    {
      get
      {
        return dom._indexedDB_BackingField;
      }
      set
      {
        dom._indexedDB_BackingField = value;
      }
    }

    public static extern string atob(string encodedString);

    public static extern string btoa(string rawString);

    public static extern es5.Promise<dom.Response> fetch();

    public static extern es5.Promise<dom.Response> fetch(Union<dom.Request, string> input);

    public static extern es5.Promise<dom.Response> fetch(dom.Request input);

    public static extern es5.Promise<dom.Response> fetch(string input);

    public static extern es5.Promise<dom.Response> fetch(
      Union<dom.Request, string> input,
      dom.RequestInit init);

    public static extern es5.Promise<dom.Response> fetch(
      dom.Request input,
      dom.RequestInit init);

    public static extern es5.Promise<dom.Response> fetch(string input, dom.RequestInit init);

    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public static extern void addEventListener<K>(K type, dom.addEventListenerFn<K> listener);

    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public static extern void addEventListener<K>(
      K type,
      dom.addEventListenerFn<K> listener,
      Union<bool, dom.AddEventListenerOptions> options);

    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public static extern void addEventListener<K>(
      K type,
      dom.addEventListenerFn<K> listener,
      bool options);

    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public static extern void addEventListener<K>(
      K type,
      dom.addEventListenerFn<K> listener,
      dom.AddEventListenerOptions options);

    public static extern void addEventListener(
      string type,
      dom.EventListenerOrEventListenerObject listener);

    public static extern void addEventListener(
      string type,
      Union<dom.EventListener, dom.EventListenerObject> listener);

    public static extern void addEventListener(string type, dom.EventListener listener);

    public static extern void addEventListener(string type, dom.EventListenerObject listener);

    public static extern void addEventListener(string type, Action<dom.Event> listener);

    public static extern void addEventListener(
      string type,
      dom.EventListenerOrEventListenerObject listener,
      Union<bool, dom.AddEventListenerOptions> options);

    public static extern void addEventListener(
      string type,
      Union<dom.EventListener, dom.EventListenerObject> listener,
      bool options);

    public static extern void addEventListener(
      string type,
      Union<dom.EventListener, dom.EventListenerObject> listener,
      dom.AddEventListenerOptions options);

    public static extern void addEventListener(
      string type,
      dom.EventListener listener,
      bool options);

    public static extern void addEventListener(
      string type,
      dom.EventListener listener,
      dom.AddEventListenerOptions options);

    public static extern void addEventListener(
      string type,
      dom.EventListenerObject listener,
      bool options);

    public static extern void addEventListener(
      string type,
      dom.EventListenerObject listener,
      dom.AddEventListenerOptions options);

    public static extern void addEventListener(
      string type,
      Action<dom.Event> listener,
      Union<bool, dom.AddEventListenerOptions> options);

    public static extern void addEventListener(
      string type,
      Action<dom.Event> listener,
      bool options);

    public static extern void addEventListener(
      string type,
      Action<dom.Event> listener,
      dom.AddEventListenerOptions options);

    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public static extern void removeEventListener<K>(K type, dom.removeEventListenerFn<K> listener);

    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public static extern void removeEventListener<K>(
      K type,
      dom.removeEventListenerFn<K> listener,
      Union<bool, dom.EventListenerOptions> options);

    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public static extern void removeEventListener<K>(
      K type,
      dom.removeEventListenerFn<K> listener,
      bool options);

    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public static extern void removeEventListener<K>(
      K type,
      dom.removeEventListenerFn<K> listener,
      dom.EventListenerOptions options);

    public static extern void removeEventListener(
      string type,
      dom.EventListenerOrEventListenerObject listener);

    public static extern void removeEventListener(
      string type,
      Union<dom.EventListener, dom.EventListenerObject> listener);

    public static extern void removeEventListener(string type, dom.EventListener listener);

    public static extern void removeEventListener(string type, dom.EventListenerObject listener);

    public static extern void removeEventListener(string type, Action<dom.Event> listener);

    public static extern void removeEventListener(
      string type,
      dom.EventListenerOrEventListenerObject listener,
      Union<bool, dom.EventListenerOptions> options);

    public static extern void removeEventListener(
      string type,
      Union<dom.EventListener, dom.EventListenerObject> listener,
      bool options);

    public static extern void removeEventListener(
      string type,
      Union<dom.EventListener, dom.EventListenerObject> listener,
      dom.EventListenerOptions options);

    public static extern void removeEventListener(
      string type,
      dom.EventListener listener,
      bool options);

    public static extern void removeEventListener(
      string type,
      dom.EventListener listener,
      dom.EventListenerOptions options);

    public static extern void removeEventListener(
      string type,
      dom.EventListenerObject listener,
      bool options);

    public static extern void removeEventListener(
      string type,
      dom.EventListenerObject listener,
      dom.EventListenerOptions options);

    public static extern void removeEventListener(
      string type,
      Action<dom.Event> listener,
      Union<bool, dom.EventListenerOptions> options);

    public static extern void removeEventListener(
      string type,
      Action<dom.Event> listener,
      bool options);

    public static extern void removeEventListener(
      string type,
      Action<dom.Event> listener,
      dom.EventListenerOptions options);

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class Account : IObject
    {
      private string _displayName_BackingField;
      private string _id_BackingField;
      private string _imageURL_BackingField;
      private string _name_BackingField;
      private string _rpDisplayName_BackingField;

      public string displayName
      {
        get
        {
          return this._displayName_BackingField;
        }
        set
        {
          this._displayName_BackingField = value;
        }
      }

      public string id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public string imageURL
      {
        get
        {
          return this._imageURL_BackingField;
        }
        set
        {
          this._imageURL_BackingField = value;
        }
      }

      public string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public string rpDisplayName
      {
        get
        {
          return this._rpDisplayName_BackingField;
        }
        set
        {
          this._rpDisplayName_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AddEventListenerOptions : dom.EventListenerOptions
    {
      private bool? _once_BackingField;
      private bool? _passive_BackingField;

      public bool? once
      {
        get
        {
          return this._once_BackingField;
        }
        set
        {
          this._once_BackingField = value;
        }
      }

      public bool? passive
      {
        get
        {
          return this._passive_BackingField;
        }
        set
        {
          this._passive_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AesCbcParams : dom.Algorithm
    {
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> _iv_BackingField;

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> iv
      {
        get
        {
          return this._iv_BackingField;
        }
        set
        {
          this._iv_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AesCtrParams : dom.Algorithm
    {
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> _counter_BackingField;
      private double _length_BackingField;

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> counter
      {
        get
        {
          return this._counter_BackingField;
        }
        set
        {
          this._counter_BackingField = value;
        }
      }

      public double length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AesDerivedKeyParams : dom.Algorithm
    {
      private double _length_BackingField;

      public double length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AesGcmParams : dom.Algorithm
    {
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> _additionalData_BackingField;
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> _iv_BackingField;
      private double? _tagLength_BackingField;

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> additionalData
      {
        get
        {
          return this._additionalData_BackingField;
        }
        set
        {
          this._additionalData_BackingField = value;
        }
      }

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> iv
      {
        get
        {
          return this._iv_BackingField;
        }
        set
        {
          this._iv_BackingField = value;
        }
      }

      public double? tagLength
      {
        get
        {
          return this._tagLength_BackingField;
        }
        set
        {
          this._tagLength_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AesKeyAlgorithm : dom.KeyAlgorithm
    {
      private double _length_BackingField;

      public double length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AesKeyGenParams : dom.Algorithm
    {
      private double _length_BackingField;

      public double length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class Algorithm : IObject
    {
      private string _name_BackingField;

      public string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AnalyserOptions : dom.AudioNodeOptions
    {
      private double? _fftSize_BackingField;
      private double? _maxDecibels_BackingField;
      private double? _minDecibels_BackingField;
      private double? _smoothingTimeConstant_BackingField;

      public double? fftSize
      {
        get
        {
          return this._fftSize_BackingField;
        }
        set
        {
          this._fftSize_BackingField = value;
        }
      }

      public double? maxDecibels
      {
        get
        {
          return this._maxDecibels_BackingField;
        }
        set
        {
          this._maxDecibels_BackingField = value;
        }
      }

      public double? minDecibels
      {
        get
        {
          return this._minDecibels_BackingField;
        }
        set
        {
          this._minDecibels_BackingField = value;
        }
      }

      public double? smoothingTimeConstant
      {
        get
        {
          return this._smoothingTimeConstant_BackingField;
        }
        set
        {
          this._smoothingTimeConstant_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AnimationEventInit : dom.EventInit
    {
      private string _animationName_BackingField;
      private double? _elapsedTime_BackingField;

      public string animationName
      {
        get
        {
          return this._animationName_BackingField;
        }
        set
        {
          this._animationName_BackingField = value;
        }
      }

      public double? elapsedTime
      {
        get
        {
          return this._elapsedTime_BackingField;
        }
        set
        {
          this._elapsedTime_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AssertionOptions : IObject
    {
      private dom.ScopedCredentialDescriptor[] _allowList_BackingField;
      private dom.WebAuthnExtensions _extensions_BackingField;
      private string _rpId_BackingField;
      private double? _timeoutSeconds_BackingField;

      public dom.ScopedCredentialDescriptor[] allowList
      {
        get
        {
          return this._allowList_BackingField;
        }
        set
        {
          this._allowList_BackingField = value;
        }
      }

      public dom.WebAuthnExtensions extensions
      {
        get
        {
          return this._extensions_BackingField;
        }
        set
        {
          this._extensions_BackingField = value;
        }
      }

      public string rpId
      {
        get
        {
          return this._rpId_BackingField;
        }
        set
        {
          this._rpId_BackingField = value;
        }
      }

      public double? timeoutSeconds
      {
        get
        {
          return this._timeoutSeconds_BackingField;
        }
        set
        {
          this._timeoutSeconds_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioBufferOptions : IObject
    {
      private double _length_BackingField;
      private double? _numberOfChannels_BackingField;
      private double _sampleRate_BackingField;

      public double length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }

      public double? numberOfChannels
      {
        get
        {
          return this._numberOfChannels_BackingField;
        }
        set
        {
          this._numberOfChannels_BackingField = value;
        }
      }

      public double sampleRate
      {
        get
        {
          return this._sampleRate_BackingField;
        }
        set
        {
          this._sampleRate_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioBufferSourceOptions : IObject
    {
      private dom.AudioBuffer _buffer_BackingField;
      private double? _detune_BackingField;
      private bool? _loop_BackingField;
      private double? _loopEnd_BackingField;
      private double? _loopStart_BackingField;
      private double? _playbackRate_BackingField;

      public dom.AudioBuffer buffer
      {
        get
        {
          return this._buffer_BackingField;
        }
        set
        {
          this._buffer_BackingField = value;
        }
      }

      public double? detune
      {
        get
        {
          return this._detune_BackingField;
        }
        set
        {
          this._detune_BackingField = value;
        }
      }

      public bool? loop
      {
        get
        {
          return this._loop_BackingField;
        }
        set
        {
          this._loop_BackingField = value;
        }
      }

      public double? loopEnd
      {
        get
        {
          return this._loopEnd_BackingField;
        }
        set
        {
          this._loopEnd_BackingField = value;
        }
      }

      public double? loopStart
      {
        get
        {
          return this._loopStart_BackingField;
        }
        set
        {
          this._loopStart_BackingField = value;
        }
      }

      public double? playbackRate
      {
        get
        {
          return this._playbackRate_BackingField;
        }
        set
        {
          this._playbackRate_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioContextInfo : IObject
    {
      private double? _currentTime_BackingField;
      private double? _sampleRate_BackingField;

      public double? currentTime
      {
        get
        {
          return this._currentTime_BackingField;
        }
        set
        {
          this._currentTime_BackingField = value;
        }
      }

      public double? sampleRate
      {
        get
        {
          return this._sampleRate_BackingField;
        }
        set
        {
          this._sampleRate_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioContextOptions : IObject
    {
      private Union<dom.AudioContextLatencyCategory, double> _latencyHint_BackingField;
      private double? _sampleRate_BackingField;

      public Union<dom.AudioContextLatencyCategory, double> latencyHint
      {
        get
        {
          return this._latencyHint_BackingField;
        }
        set
        {
          this._latencyHint_BackingField = value;
        }
      }

      public double? sampleRate
      {
        get
        {
          return this._sampleRate_BackingField;
        }
        set
        {
          this._sampleRate_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioNodeOptions : IObject
    {
      private double? _channelCount_BackingField;
      private dom.ChannelCountMode _channelCountMode_BackingField;
      private dom.ChannelInterpretation _channelInterpretation_BackingField;

      public double? channelCount
      {
        get
        {
          return this._channelCount_BackingField;
        }
        set
        {
          this._channelCount_BackingField = value;
        }
      }

      public dom.ChannelCountMode channelCountMode
      {
        get
        {
          return this._channelCountMode_BackingField;
        }
        set
        {
          this._channelCountMode_BackingField = value;
        }
      }

      public dom.ChannelInterpretation channelInterpretation
      {
        get
        {
          return this._channelInterpretation_BackingField;
        }
        set
        {
          this._channelInterpretation_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioParamDescriptor : IObject
    {
      private double? _defaultValue_BackingField;
      private double? _maxValue_BackingField;
      private double? _minValue_BackingField;
      private string _name_BackingField;

      public double? defaultValue
      {
        get
        {
          return this._defaultValue_BackingField;
        }
        set
        {
          this._defaultValue_BackingField = value;
        }
      }

      public double? maxValue
      {
        get
        {
          return this._maxValue_BackingField;
        }
        set
        {
          this._maxValue_BackingField = value;
        }
      }

      public double? minValue
      {
        get
        {
          return this._minValue_BackingField;
        }
        set
        {
          this._minValue_BackingField = value;
        }
      }

      public string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioProcessingEventInit : dom.EventInit
    {
      private dom.AudioBuffer _inputBuffer_BackingField;
      private dom.AudioBuffer _outputBuffer_BackingField;
      private double _playbackTime_BackingField;

      public dom.AudioBuffer inputBuffer
      {
        get
        {
          return this._inputBuffer_BackingField;
        }
        set
        {
          this._inputBuffer_BackingField = value;
        }
      }

      public dom.AudioBuffer outputBuffer
      {
        get
        {
          return this._outputBuffer_BackingField;
        }
        set
        {
          this._outputBuffer_BackingField = value;
        }
      }

      public double playbackTime
      {
        get
        {
          return this._playbackTime_BackingField;
        }
        set
        {
          this._playbackTime_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioTimestamp : IObject
    {
      private double? _contextTime_BackingField;
      private double? _performanceTime_BackingField;

      public double? contextTime
      {
        get
        {
          return this._contextTime_BackingField;
        }
        set
        {
          this._contextTime_BackingField = value;
        }
      }

      public double? performanceTime
      {
        get
        {
          return this._performanceTime_BackingField;
        }
        set
        {
          this._performanceTime_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class BiquadFilterOptions : dom.AudioNodeOptions
    {
      private double? _Q_BackingField;
      private double? _detune_BackingField;
      private double? _frequency_BackingField;
      private double? _gain_BackingField;
      private dom.BiquadFilterType _type_BackingField;

      public double? Q
      {
        get
        {
          return this._Q_BackingField;
        }
        set
        {
          this._Q_BackingField = value;
        }
      }

      public double? detune
      {
        get
        {
          return this._detune_BackingField;
        }
        set
        {
          this._detune_BackingField = value;
        }
      }

      public double? frequency
      {
        get
        {
          return this._frequency_BackingField;
        }
        set
        {
          this._frequency_BackingField = value;
        }
      }

      public double? gain
      {
        get
        {
          return this._gain_BackingField;
        }
        set
        {
          this._gain_BackingField = value;
        }
      }

      public dom.BiquadFilterType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ByteLengthChunk : IObject
    {
      private double? _byteLength_BackingField;

      public double? byteLength
      {
        get
        {
          return this._byteLength_BackingField;
        }
        set
        {
          this._byteLength_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class CacheQueryOptions : IObject
    {
      private string _cacheName_BackingField;
      private bool? _ignoreMethod_BackingField;
      private bool? _ignoreSearch_BackingField;
      private bool? _ignoreVary_BackingField;

      public string cacheName
      {
        get
        {
          return this._cacheName_BackingField;
        }
        set
        {
          this._cacheName_BackingField = value;
        }
      }

      public bool? ignoreMethod
      {
        get
        {
          return this._ignoreMethod_BackingField;
        }
        set
        {
          this._ignoreMethod_BackingField = value;
        }
      }

      public bool? ignoreSearch
      {
        get
        {
          return this._ignoreSearch_BackingField;
        }
        set
        {
          this._ignoreSearch_BackingField = value;
        }
      }

      public bool? ignoreVary
      {
        get
        {
          return this._ignoreVary_BackingField;
        }
        set
        {
          this._ignoreVary_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ChannelMergerOptions : dom.AudioNodeOptions
    {
      private double? _numberOfInputs_BackingField;

      public double? numberOfInputs
      {
        get
        {
          return this._numberOfInputs_BackingField;
        }
        set
        {
          this._numberOfInputs_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ChannelSplitterOptions : dom.AudioNodeOptions
    {
      private double? _numberOfOutputs_BackingField;

      public double? numberOfOutputs
      {
        get
        {
          return this._numberOfOutputs_BackingField;
        }
        set
        {
          this._numberOfOutputs_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ClientData : IObject
    {
      private string _challenge_BackingField;
      private dom.WebAuthnExtensions _extensions_BackingField;
      private Union<string, dom.Algorithm> _hashAlg_BackingField;
      private string _origin_BackingField;
      private string _rpId_BackingField;
      private string _tokenBinding_BackingField;

      public string challenge
      {
        get
        {
          return this._challenge_BackingField;
        }
        set
        {
          this._challenge_BackingField = value;
        }
      }

      public dom.WebAuthnExtensions extensions
      {
        get
        {
          return this._extensions_BackingField;
        }
        set
        {
          this._extensions_BackingField = value;
        }
      }

      public Union<string, dom.Algorithm> hashAlg
      {
        get
        {
          return this._hashAlg_BackingField;
        }
        set
        {
          this._hashAlg_BackingField = value;
        }
      }

      public string origin
      {
        get
        {
          return this._origin_BackingField;
        }
        set
        {
          this._origin_BackingField = value;
        }
      }

      public string rpId
      {
        get
        {
          return this._rpId_BackingField;
        }
        set
        {
          this._rpId_BackingField = value;
        }
      }

      public string tokenBinding
      {
        get
        {
          return this._tokenBinding_BackingField;
        }
        set
        {
          this._tokenBinding_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ClientQueryOptions : IObject
    {
      private bool? _includeReserved_BackingField;
      private bool? _includeUncontrolled_BackingField;
      private dom.ClientTypes _type_BackingField;

      public bool? includeReserved
      {
        get
        {
          return this._includeReserved_BackingField;
        }
        set
        {
          this._includeReserved_BackingField = value;
        }
      }

      public bool? includeUncontrolled
      {
        get
        {
          return this._includeUncontrolled_BackingField;
        }
        set
        {
          this._includeUncontrolled_BackingField = value;
        }
      }

      public dom.ClientTypes type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class CloseEventInit : dom.EventInit
    {
      private ushort? _code_BackingField;
      private string _reason_BackingField;
      private bool? _wasClean_BackingField;

      public ushort? code
      {
        get
        {
          return this._code_BackingField;
        }
        set
        {
          this._code_BackingField = value;
        }
      }

      public string reason
      {
        get
        {
          return this._reason_BackingField;
        }
        set
        {
          this._reason_BackingField = value;
        }
      }

      public bool? wasClean
      {
        get
        {
          return this._wasClean_BackingField;
        }
        set
        {
          this._wasClean_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class CompositionEventInit : dom.UIEventInit
    {
      private string _data_BackingField;

      public string data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ConfirmSiteSpecificExceptionsInformation : dom.ExceptionInformation
    {
      private string[] _arrayOfDomainStrings_BackingField;

      public string[] arrayOfDomainStrings
      {
        get
        {
          return this._arrayOfDomainStrings_BackingField;
        }
        set
        {
          this._arrayOfDomainStrings_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ConstantSourceOptions : IObject
    {
      private double? _offset_BackingField;

      public double? offset
      {
        get
        {
          return this._offset_BackingField;
        }
        set
        {
          this._offset_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ConstrainBooleanParameters : IObject
    {
      private bool? _exact_BackingField;
      private bool? _ideal_BackingField;

      public bool? exact
      {
        get
        {
          return this._exact_BackingField;
        }
        set
        {
          this._exact_BackingField = value;
        }
      }

      public bool? ideal
      {
        get
        {
          return this._ideal_BackingField;
        }
        set
        {
          this._ideal_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ConstrainDOMStringParameters : IObject
    {
      private Union<string, string[]> _exact_BackingField;
      private Union<string, string[]> _ideal_BackingField;

      public Union<string, string[]> exact
      {
        get
        {
          return this._exact_BackingField;
        }
        set
        {
          this._exact_BackingField = value;
        }
      }

      public Union<string, string[]> ideal
      {
        get
        {
          return this._ideal_BackingField;
        }
        set
        {
          this._ideal_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ConstrainDoubleRange : dom.DoubleRange
    {
      private double? _exact_BackingField;
      private double? _ideal_BackingField;

      public double? exact
      {
        get
        {
          return this._exact_BackingField;
        }
        set
        {
          this._exact_BackingField = value;
        }
      }

      public double? ideal
      {
        get
        {
          return this._ideal_BackingField;
        }
        set
        {
          this._ideal_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ConstrainLongRange : dom.LongRange
    {
      private double? _exact_BackingField;
      private double? _ideal_BackingField;

      public double? exact
      {
        get
        {
          return this._exact_BackingField;
        }
        set
        {
          this._exact_BackingField = value;
        }
      }

      public double? ideal
      {
        get
        {
          return this._ideal_BackingField;
        }
        set
        {
          this._ideal_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ConstrainVideoFacingModeParameters : IObject
    {
      private Union<dom.VideoFacingModeEnum, dom.VideoFacingModeEnum[]> _exact_BackingField;
      private Union<dom.VideoFacingModeEnum, dom.VideoFacingModeEnum[]> _ideal_BackingField;

      public Union<dom.VideoFacingModeEnum, dom.VideoFacingModeEnum[]> exact
      {
        get
        {
          return this._exact_BackingField;
        }
        set
        {
          this._exact_BackingField = value;
        }
      }

      public Union<dom.VideoFacingModeEnum, dom.VideoFacingModeEnum[]> ideal
      {
        get
        {
          return this._ideal_BackingField;
        }
        set
        {
          this._ideal_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ConvolverOptions : dom.AudioNodeOptions
    {
      private dom.AudioBuffer _buffer_BackingField;
      private bool? _disableNormalization_BackingField;

      public dom.AudioBuffer buffer
      {
        get
        {
          return this._buffer_BackingField;
        }
        set
        {
          this._buffer_BackingField = value;
        }
      }

      public bool? disableNormalization
      {
        get
        {
          return this._disableNormalization_BackingField;
        }
        set
        {
          this._disableNormalization_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [IgnoreGeneric(AllowInTypeScript = true)]
    [GenericDefault("T", typeof (object))]
    [ObjectLiteral]
    [FormerInterface]
    public class CustomEventInit<T> : dom.EventInit
    {
      private T _detail_BackingField;

      public T detail
      {
        get
        {
          return this._detail_BackingField;
        }
        set
        {
          this._detail_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DOMRectInit : IObject
    {
      private double? _height_BackingField;
      private double? _width_BackingField;
      private double? _x_BackingField;
      private double? _y_BackingField;

      public double? height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public double? width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public double? x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public double? y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DelayOptions : dom.AudioNodeOptions
    {
      private double? _delayTime_BackingField;
      private double? _maxDelayTime_BackingField;

      public double? delayTime
      {
        get
        {
          return this._delayTime_BackingField;
        }
        set
        {
          this._delayTime_BackingField = value;
        }
      }

      public double? maxDelayTime
      {
        get
        {
          return this._maxDelayTime_BackingField;
        }
        set
        {
          this._maxDelayTime_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DeviceAccelerationDict : IObject
    {
      private double? _x_BackingField;
      private double? _y_BackingField;
      private double? _z_BackingField;

      public double? x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public double? y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }

      public double? z
      {
        get
        {
          return this._z_BackingField;
        }
        set
        {
          this._z_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DeviceLightEventInit : dom.EventInit
    {
      private double? _value_BackingField;

      public double? value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DeviceMotionEventInit : dom.EventInit
    {
      private dom.DeviceAccelerationDict _acceleration_BackingField;
      private dom.DeviceAccelerationDict _accelerationIncludingGravity_BackingField;
      private double? _interval_BackingField;
      private dom.DeviceRotationRateDict _rotationRate_BackingField;

      public dom.DeviceAccelerationDict acceleration
      {
        get
        {
          return this._acceleration_BackingField;
        }
        set
        {
          this._acceleration_BackingField = value;
        }
      }

      public dom.DeviceAccelerationDict accelerationIncludingGravity
      {
        get
        {
          return this._accelerationIncludingGravity_BackingField;
        }
        set
        {
          this._accelerationIncludingGravity_BackingField = value;
        }
      }

      public double? interval
      {
        get
        {
          return this._interval_BackingField;
        }
        set
        {
          this._interval_BackingField = value;
        }
      }

      public dom.DeviceRotationRateDict rotationRate
      {
        get
        {
          return this._rotationRate_BackingField;
        }
        set
        {
          this._rotationRate_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DeviceOrientationEventInit : dom.EventInit
    {
      private bool? _absolute_BackingField;
      private double? _alpha_BackingField;
      private double? _beta_BackingField;
      private double? _gamma_BackingField;

      public bool? absolute
      {
        get
        {
          return this._absolute_BackingField;
        }
        set
        {
          this._absolute_BackingField = value;
        }
      }

      public double? alpha
      {
        get
        {
          return this._alpha_BackingField;
        }
        set
        {
          this._alpha_BackingField = value;
        }
      }

      public double? beta
      {
        get
        {
          return this._beta_BackingField;
        }
        set
        {
          this._beta_BackingField = value;
        }
      }

      public double? gamma
      {
        get
        {
          return this._gamma_BackingField;
        }
        set
        {
          this._gamma_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DeviceRotationRateDict : IObject
    {
      private double? _alpha_BackingField;
      private double? _beta_BackingField;
      private double? _gamma_BackingField;

      public double? alpha
      {
        get
        {
          return this._alpha_BackingField;
        }
        set
        {
          this._alpha_BackingField = value;
        }
      }

      public double? beta
      {
        get
        {
          return this._beta_BackingField;
        }
        set
        {
          this._beta_BackingField = value;
        }
      }

      public double? gamma
      {
        get
        {
          return this._gamma_BackingField;
        }
        set
        {
          this._gamma_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DoubleRange : IObject
    {
      private double? _max_BackingField;
      private double? _min_BackingField;

      public double? max
      {
        get
        {
          return this._max_BackingField;
        }
        set
        {
          this._max_BackingField = value;
        }
      }

      public double? min
      {
        get
        {
          return this._min_BackingField;
        }
        set
        {
          this._min_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DynamicsCompressorOptions : dom.AudioNodeOptions
    {
      private double? _attack_BackingField;
      private double? _knee_BackingField;
      private double? _ratio_BackingField;
      private double? _release_BackingField;
      private double? _threshold_BackingField;

      public double? attack
      {
        get
        {
          return this._attack_BackingField;
        }
        set
        {
          this._attack_BackingField = value;
        }
      }

      public double? knee
      {
        get
        {
          return this._knee_BackingField;
        }
        set
        {
          this._knee_BackingField = value;
        }
      }

      public double? ratio
      {
        get
        {
          return this._ratio_BackingField;
        }
        set
        {
          this._ratio_BackingField = value;
        }
      }

      public double? release
      {
        get
        {
          return this._release_BackingField;
        }
        set
        {
          this._release_BackingField = value;
        }
      }

      public double? threshold
      {
        get
        {
          return this._threshold_BackingField;
        }
        set
        {
          this._threshold_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EcKeyAlgorithm : dom.KeyAlgorithm
    {
      private string _namedCurve_BackingField;

      public string namedCurve
      {
        get
        {
          return this._namedCurve_BackingField;
        }
        set
        {
          this._namedCurve_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EcKeyGenParams : dom.Algorithm
    {
      private string _namedCurve_BackingField;

      public string namedCurve
      {
        get
        {
          return this._namedCurve_BackingField;
        }
        set
        {
          this._namedCurve_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EcKeyImportParams : dom.Algorithm
    {
      private string _namedCurve_BackingField;

      public string namedCurve
      {
        get
        {
          return this._namedCurve_BackingField;
        }
        set
        {
          this._namedCurve_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EcdhKeyDeriveParams : dom.Algorithm
    {
      private dom.CryptoKey _public_BackingField;

      [Name("public")]
      public dom.CryptoKey @public
      {
        get
        {
          return this._public_BackingField;
        }
        set
        {
          this._public_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EcdsaParams : dom.Algorithm
    {
      private Union<string, dom.Algorithm> _hash_BackingField;

      public Union<string, dom.Algorithm> hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ErrorEventInit : dom.EventInit
    {
      private uint? _colno_BackingField;
      private object _error_BackingField;
      private string _filename_BackingField;
      private uint? _lineno_BackingField;
      private string _message_BackingField;

      public uint? colno
      {
        get
        {
          return this._colno_BackingField;
        }
        set
        {
          this._colno_BackingField = value;
        }
      }

      public object error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public string filename
      {
        get
        {
          return this._filename_BackingField;
        }
        set
        {
          this._filename_BackingField = value;
        }
      }

      public uint? lineno
      {
        get
        {
          return this._lineno_BackingField;
        }
        set
        {
          this._lineno_BackingField = value;
        }
      }

      public string message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EventInit : IObject
    {
      private bool? _bubbles_BackingField;
      private bool? _cancelable_BackingField;
      private bool? _scoped_BackingField;

      public bool? bubbles
      {
        get
        {
          return this._bubbles_BackingField;
        }
        set
        {
          this._bubbles_BackingField = value;
        }
      }

      public bool? cancelable
      {
        get
        {
          return this._cancelable_BackingField;
        }
        set
        {
          this._cancelable_BackingField = value;
        }
      }

      public bool? scoped
      {
        get
        {
          return this._scoped_BackingField;
        }
        set
        {
          this._scoped_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EventListenerOptions : IObject
    {
      private bool? _capture_BackingField;

      public bool? capture
      {
        get
        {
          return this._capture_BackingField;
        }
        set
        {
          this._capture_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EventModifierInit : dom.UIEventInit
    {
      private bool? _altKey_BackingField;
      private bool? _ctrlKey_BackingField;
      private bool? _metaKey_BackingField;
      private bool? _modifierAltGraph_BackingField;
      private bool? _modifierCapsLock_BackingField;
      private bool? _modifierFn_BackingField;
      private bool? _modifierFnLock_BackingField;
      private bool? _modifierHyper_BackingField;
      private bool? _modifierNumLock_BackingField;
      private bool? _modifierOS_BackingField;
      private bool? _modifierScrollLock_BackingField;
      private bool? _modifierSuper_BackingField;
      private bool? _modifierSymbol_BackingField;
      private bool? _modifierSymbolLock_BackingField;
      private bool? _shiftKey_BackingField;

      public bool? altKey
      {
        get
        {
          return this._altKey_BackingField;
        }
        set
        {
          this._altKey_BackingField = value;
        }
      }

      public bool? ctrlKey
      {
        get
        {
          return this._ctrlKey_BackingField;
        }
        set
        {
          this._ctrlKey_BackingField = value;
        }
      }

      public bool? metaKey
      {
        get
        {
          return this._metaKey_BackingField;
        }
        set
        {
          this._metaKey_BackingField = value;
        }
      }

      public bool? modifierAltGraph
      {
        get
        {
          return this._modifierAltGraph_BackingField;
        }
        set
        {
          this._modifierAltGraph_BackingField = value;
        }
      }

      public bool? modifierCapsLock
      {
        get
        {
          return this._modifierCapsLock_BackingField;
        }
        set
        {
          this._modifierCapsLock_BackingField = value;
        }
      }

      public bool? modifierFn
      {
        get
        {
          return this._modifierFn_BackingField;
        }
        set
        {
          this._modifierFn_BackingField = value;
        }
      }

      public bool? modifierFnLock
      {
        get
        {
          return this._modifierFnLock_BackingField;
        }
        set
        {
          this._modifierFnLock_BackingField = value;
        }
      }

      public bool? modifierHyper
      {
        get
        {
          return this._modifierHyper_BackingField;
        }
        set
        {
          this._modifierHyper_BackingField = value;
        }
      }

      public bool? modifierNumLock
      {
        get
        {
          return this._modifierNumLock_BackingField;
        }
        set
        {
          this._modifierNumLock_BackingField = value;
        }
      }

      public bool? modifierOS
      {
        get
        {
          return this._modifierOS_BackingField;
        }
        set
        {
          this._modifierOS_BackingField = value;
        }
      }

      public bool? modifierScrollLock
      {
        get
        {
          return this._modifierScrollLock_BackingField;
        }
        set
        {
          this._modifierScrollLock_BackingField = value;
        }
      }

      public bool? modifierSuper
      {
        get
        {
          return this._modifierSuper_BackingField;
        }
        set
        {
          this._modifierSuper_BackingField = value;
        }
      }

      public bool? modifierSymbol
      {
        get
        {
          return this._modifierSymbol_BackingField;
        }
        set
        {
          this._modifierSymbol_BackingField = value;
        }
      }

      public bool? modifierSymbolLock
      {
        get
        {
          return this._modifierSymbolLock_BackingField;
        }
        set
        {
          this._modifierSymbolLock_BackingField = value;
        }
      }

      public bool? shiftKey
      {
        get
        {
          return this._shiftKey_BackingField;
        }
        set
        {
          this._shiftKey_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ExceptionInformation : IObject
    {
      private string _domain_BackingField;

      public string domain
      {
        get
        {
          return this._domain_BackingField;
        }
        set
        {
          this._domain_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ExtendableEventInit : dom.EventInit
    {
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ExtendableMessageEventInit : dom.ExtendableEventInit
    {
      private object _data_BackingField;
      private string _lastEventId_BackingField;
      private string _origin_BackingField;
      private dom.MessagePort[] _ports_BackingField;
      private Union<IObject, dom.ServiceWorker, dom.MessagePort, Null> _source_BackingField;

      public object data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public string lastEventId
      {
        get
        {
          return this._lastEventId_BackingField;
        }
        set
        {
          this._lastEventId_BackingField = value;
        }
      }

      public string origin
      {
        get
        {
          return this._origin_BackingField;
        }
        set
        {
          this._origin_BackingField = value;
        }
      }

      public dom.MessagePort[] ports
      {
        get
        {
          return this._ports_BackingField;
        }
        set
        {
          this._ports_BackingField = value;
        }
      }

      public Union<IObject, dom.ServiceWorker, dom.MessagePort, Null> source
      {
        get
        {
          return this._source_BackingField;
        }
        set
        {
          this._source_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class FetchEventInit : dom.ExtendableEventInit
    {
      private string _clientId_BackingField;
      private dom.Request _request_BackingField;
      private string _reservedClientId_BackingField;
      private string _targetClientId_BackingField;

      public string clientId
      {
        get
        {
          return this._clientId_BackingField;
        }
        set
        {
          this._clientId_BackingField = value;
        }
      }

      public dom.Request request
      {
        get
        {
          return this._request_BackingField;
        }
        set
        {
          this._request_BackingField = value;
        }
      }

      public string reservedClientId
      {
        get
        {
          return this._reservedClientId_BackingField;
        }
        set
        {
          this._reservedClientId_BackingField = value;
        }
      }

      public string targetClientId
      {
        get
        {
          return this._targetClientId_BackingField;
        }
        set
        {
          this._targetClientId_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class FocusEventInit : dom.UIEventInit
    {
      private dom.EventTarget _relatedTarget_BackingField;

      public dom.EventTarget relatedTarget
      {
        get
        {
          return this._relatedTarget_BackingField;
        }
        set
        {
          this._relatedTarget_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class FocusNavigationEventInit : dom.EventInit
    {
      private string _navigationReason_BackingField;
      private double? _originHeight_BackingField;
      private double? _originLeft_BackingField;
      private double? _originTop_BackingField;
      private double? _originWidth_BackingField;

      public string navigationReason
      {
        get
        {
          return this._navigationReason_BackingField;
        }
        set
        {
          this._navigationReason_BackingField = value;
        }
      }

      public double? originHeight
      {
        get
        {
          return this._originHeight_BackingField;
        }
        set
        {
          this._originHeight_BackingField = value;
        }
      }

      public double? originLeft
      {
        get
        {
          return this._originLeft_BackingField;
        }
        set
        {
          this._originLeft_BackingField = value;
        }
      }

      public double? originTop
      {
        get
        {
          return this._originTop_BackingField;
        }
        set
        {
          this._originTop_BackingField = value;
        }
      }

      public double? originWidth
      {
        get
        {
          return this._originWidth_BackingField;
        }
        set
        {
          this._originWidth_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class FocusNavigationOrigin : IObject
    {
      private double? _originHeight_BackingField;
      private double? _originLeft_BackingField;
      private double? _originTop_BackingField;
      private double? _originWidth_BackingField;

      public double? originHeight
      {
        get
        {
          return this._originHeight_BackingField;
        }
        set
        {
          this._originHeight_BackingField = value;
        }
      }

      public double? originLeft
      {
        get
        {
          return this._originLeft_BackingField;
        }
        set
        {
          this._originLeft_BackingField = value;
        }
      }

      public double? originTop
      {
        get
        {
          return this._originTop_BackingField;
        }
        set
        {
          this._originTop_BackingField = value;
        }
      }

      public double? originWidth
      {
        get
        {
          return this._originWidth_BackingField;
        }
        set
        {
          this._originWidth_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class GainOptions : dom.AudioNodeOptions
    {
      private double? _gain_BackingField;

      public double? gain
      {
        get
        {
          return this._gain_BackingField;
        }
        set
        {
          this._gain_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class GamepadEventInit : dom.EventInit
    {
      private dom.Gamepad _gamepad_BackingField;

      public dom.Gamepad gamepad
      {
        get
        {
          return this._gamepad_BackingField;
        }
        set
        {
          this._gamepad_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class GetNotificationOptions : IObject
    {
      private string _tag_BackingField;

      public string tag
      {
        get
        {
          return this._tag_BackingField;
        }
        set
        {
          this._tag_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HashChangeEventInit : dom.EventInit
    {
      private string _newURL_BackingField;
      private string _oldURL_BackingField;

      public string newURL
      {
        get
        {
          return this._newURL_BackingField;
        }
        set
        {
          this._newURL_BackingField = value;
        }
      }

      public string oldURL
      {
        get
        {
          return this._oldURL_BackingField;
        }
        set
        {
          this._oldURL_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HkdfParams : dom.Algorithm
    {
      private Union<string, dom.Algorithm> _hash_BackingField;
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> _info_BackingField;
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> _salt_BackingField;

      public Union<string, dom.Algorithm> hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> info
      {
        get
        {
          return this._info_BackingField;
        }
        set
        {
          this._info_BackingField = value;
        }
      }

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> salt
      {
        get
        {
          return this._salt_BackingField;
        }
        set
        {
          this._salt_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HmacImportParams : dom.Algorithm
    {
      private Union<string, dom.Algorithm> _hash_BackingField;
      private double? _length_BackingField;

      public Union<string, dom.Algorithm> hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public double? length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HmacKeyAlgorithm : dom.KeyAlgorithm
    {
      private dom.KeyAlgorithm _hash_BackingField;
      private double _length_BackingField;

      public dom.KeyAlgorithm hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public double length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HmacKeyGenParams : dom.Algorithm
    {
      private Union<string, dom.Algorithm> _hash_BackingField;
      private double? _length_BackingField;

      public Union<string, dom.Algorithm> hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public double? length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class IDBIndexParameters : IObject
    {
      private bool? _multiEntry_BackingField;
      private bool? _unique_BackingField;

      public bool? multiEntry
      {
        get
        {
          return this._multiEntry_BackingField;
        }
        set
        {
          this._multiEntry_BackingField = value;
        }
      }

      public bool? unique
      {
        get
        {
          return this._unique_BackingField;
        }
        set
        {
          this._unique_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class IDBObjectStoreParameters : IObject
    {
      private bool? _autoIncrement_BackingField;
      private Union<string, string[]> _keyPath_BackingField;

      public bool? autoIncrement
      {
        get
        {
          return this._autoIncrement_BackingField;
        }
        set
        {
          this._autoIncrement_BackingField = value;
        }
      }

      public Union<string, string[]> keyPath
      {
        get
        {
          return this._keyPath_BackingField;
        }
        set
        {
          this._keyPath_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class IIRFilterOptions : dom.AudioNodeOptions
    {
      private double[] _feedback_BackingField;
      private double[] _feedforward_BackingField;

      public double[] feedback
      {
        get
        {
          return this._feedback_BackingField;
        }
        set
        {
          this._feedback_BackingField = value;
        }
      }

      public double[] feedforward
      {
        get
        {
          return this._feedforward_BackingField;
        }
        set
        {
          this._feedforward_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class IntersectionObserverEntryInit : IObject
    {
      private dom.DOMRectInit _boundingClientRect_BackingField;
      private dom.DOMRectInit _intersectionRect_BackingField;
      private bool _isIntersecting_BackingField;
      private dom.DOMRectInit _rootBounds_BackingField;
      private dom.Element _target_BackingField;
      private double _time_BackingField;

      public dom.DOMRectInit boundingClientRect
      {
        get
        {
          return this._boundingClientRect_BackingField;
        }
        set
        {
          this._boundingClientRect_BackingField = value;
        }
      }

      public dom.DOMRectInit intersectionRect
      {
        get
        {
          return this._intersectionRect_BackingField;
        }
        set
        {
          this._intersectionRect_BackingField = value;
        }
      }

      public bool isIntersecting
      {
        get
        {
          return this._isIntersecting_BackingField;
        }
        set
        {
          this._isIntersecting_BackingField = value;
        }
      }

      public dom.DOMRectInit rootBounds
      {
        get
        {
          return this._rootBounds_BackingField;
        }
        set
        {
          this._rootBounds_BackingField = value;
        }
      }

      public dom.Element target
      {
        get
        {
          return this._target_BackingField;
        }
        set
        {
          this._target_BackingField = value;
        }
      }

      public double time
      {
        get
        {
          return this._time_BackingField;
        }
        set
        {
          this._time_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class IntersectionObserverInit : IObject
    {
      private dom.Element _root_BackingField;
      private string _rootMargin_BackingField;
      private Union<double, double[]> _threshold_BackingField;

      public dom.Element root
      {
        get
        {
          return this._root_BackingField;
        }
        set
        {
          this._root_BackingField = value;
        }
      }

      public string rootMargin
      {
        get
        {
          return this._rootMargin_BackingField;
        }
        set
        {
          this._rootMargin_BackingField = value;
        }
      }

      public Union<double, double[]> threshold
      {
        get
        {
          return this._threshold_BackingField;
        }
        set
        {
          this._threshold_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class JsonWebKey : IObject
    {
      private string _alg_BackingField;
      private string _crv_BackingField;
      private string _d_BackingField;
      private string _dp_BackingField;
      private string _dq_BackingField;
      private string _e_BackingField;
      private bool? _ext_BackingField;
      private string _k_BackingField;
      private string[] _key_ops_BackingField;
      private string _kty_BackingField;
      private string _n_BackingField;
      private dom.RsaOtherPrimesInfo[] _oth_BackingField;
      private string _p_BackingField;
      private string _q_BackingField;
      private string _qi_BackingField;
      private string _use_BackingField;
      private string _x_BackingField;
      private string _y_BackingField;

      public string alg
      {
        get
        {
          return this._alg_BackingField;
        }
        set
        {
          this._alg_BackingField = value;
        }
      }

      public string crv
      {
        get
        {
          return this._crv_BackingField;
        }
        set
        {
          this._crv_BackingField = value;
        }
      }

      public string d
      {
        get
        {
          return this._d_BackingField;
        }
        set
        {
          this._d_BackingField = value;
        }
      }

      public string dp
      {
        get
        {
          return this._dp_BackingField;
        }
        set
        {
          this._dp_BackingField = value;
        }
      }

      public string dq
      {
        get
        {
          return this._dq_BackingField;
        }
        set
        {
          this._dq_BackingField = value;
        }
      }

      public string e
      {
        get
        {
          return this._e_BackingField;
        }
        set
        {
          this._e_BackingField = value;
        }
      }

      public bool? ext
      {
        get
        {
          return this._ext_BackingField;
        }
        set
        {
          this._ext_BackingField = value;
        }
      }

      public string k
      {
        get
        {
          return this._k_BackingField;
        }
        set
        {
          this._k_BackingField = value;
        }
      }

      public string[] key_ops
      {
        get
        {
          return this._key_ops_BackingField;
        }
        set
        {
          this._key_ops_BackingField = value;
        }
      }

      public string kty
      {
        get
        {
          return this._kty_BackingField;
        }
        set
        {
          this._kty_BackingField = value;
        }
      }

      public string n
      {
        get
        {
          return this._n_BackingField;
        }
        set
        {
          this._n_BackingField = value;
        }
      }

      public dom.RsaOtherPrimesInfo[] oth
      {
        get
        {
          return this._oth_BackingField;
        }
        set
        {
          this._oth_BackingField = value;
        }
      }

      public string p
      {
        get
        {
          return this._p_BackingField;
        }
        set
        {
          this._p_BackingField = value;
        }
      }

      public string q
      {
        get
        {
          return this._q_BackingField;
        }
        set
        {
          this._q_BackingField = value;
        }
      }

      public string qi
      {
        get
        {
          return this._qi_BackingField;
        }
        set
        {
          this._qi_BackingField = value;
        }
      }

      public string use
      {
        get
        {
          return this._use_BackingField;
        }
        set
        {
          this._use_BackingField = value;
        }
      }

      public string x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public string y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class KeyAlgorithm : IObject
    {
      private string _name_BackingField;

      public string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class KeyboardEventInit : dom.EventModifierInit
    {
      private string _code_BackingField;
      private string _key_BackingField;
      private uint? _location_BackingField;
      private bool? _repeat_BackingField;

      public string code
      {
        get
        {
          return this._code_BackingField;
        }
        set
        {
          this._code_BackingField = value;
        }
      }

      public string key
      {
        get
        {
          return this._key_BackingField;
        }
        set
        {
          this._key_BackingField = value;
        }
      }

      public uint? location
      {
        get
        {
          return this._location_BackingField;
        }
        set
        {
          this._location_BackingField = value;
        }
      }

      public bool? repeat
      {
        get
        {
          return this._repeat_BackingField;
        }
        set
        {
          this._repeat_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class LongRange : IObject
    {
      private double? _max_BackingField;
      private double? _min_BackingField;

      public double? max
      {
        get
        {
          return this._max_BackingField;
        }
        set
        {
          this._max_BackingField = value;
        }
      }

      public double? min
      {
        get
        {
          return this._min_BackingField;
        }
        set
        {
          this._min_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSAccountInfo : IObject
    {
      private string _accountImageUri_BackingField;
      private string _accountName_BackingField;
      private string _rpDisplayName_BackingField;
      private string _userDisplayName_BackingField;
      private string _userId_BackingField;

      public string accountImageUri
      {
        get
        {
          return this._accountImageUri_BackingField;
        }
        set
        {
          this._accountImageUri_BackingField = value;
        }
      }

      public string accountName
      {
        get
        {
          return this._accountName_BackingField;
        }
        set
        {
          this._accountName_BackingField = value;
        }
      }

      public string rpDisplayName
      {
        get
        {
          return this._rpDisplayName_BackingField;
        }
        set
        {
          this._rpDisplayName_BackingField = value;
        }
      }

      public string userDisplayName
      {
        get
        {
          return this._userDisplayName_BackingField;
        }
        set
        {
          this._userDisplayName_BackingField = value;
        }
      }

      public string userId
      {
        get
        {
          return this._userId_BackingField;
        }
        set
        {
          this._userId_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSAudioLocalClientEvent : dom.MSLocalClientEventBase
    {
      private double? _cpuInsufficientEventRatio_BackingField;
      private double? _deviceCaptureNotFunctioningEventRatio_BackingField;
      private double? _deviceClippingEventRatio_BackingField;
      private double? _deviceEchoEventRatio_BackingField;
      private double? _deviceGlitchesEventRatio_BackingField;
      private double? _deviceHalfDuplexAECEventRatio_BackingField;
      private double? _deviceHowlingEventCount_BackingField;
      private double? _deviceLowSNREventRatio_BackingField;
      private double? _deviceLowSpeechLevelEventRatio_BackingField;
      private double? _deviceMultipleEndpointsEventCount_BackingField;
      private double? _deviceNearEndToEchoRatioEventRatio_BackingField;
      private double? _deviceRenderMuteEventRatio_BackingField;
      private double? _deviceRenderNotFunctioningEventRatio_BackingField;
      private double? _deviceRenderZeroVolumeEventRatio_BackingField;
      private double? _networkDelayEventRatio_BackingField;
      private double? _networkSendQualityEventRatio_BackingField;

      public double? cpuInsufficientEventRatio
      {
        get
        {
          return this._cpuInsufficientEventRatio_BackingField;
        }
        set
        {
          this._cpuInsufficientEventRatio_BackingField = value;
        }
      }

      public double? deviceCaptureNotFunctioningEventRatio
      {
        get
        {
          return this._deviceCaptureNotFunctioningEventRatio_BackingField;
        }
        set
        {
          this._deviceCaptureNotFunctioningEventRatio_BackingField = value;
        }
      }

      public double? deviceClippingEventRatio
      {
        get
        {
          return this._deviceClippingEventRatio_BackingField;
        }
        set
        {
          this._deviceClippingEventRatio_BackingField = value;
        }
      }

      public double? deviceEchoEventRatio
      {
        get
        {
          return this._deviceEchoEventRatio_BackingField;
        }
        set
        {
          this._deviceEchoEventRatio_BackingField = value;
        }
      }

      public double? deviceGlitchesEventRatio
      {
        get
        {
          return this._deviceGlitchesEventRatio_BackingField;
        }
        set
        {
          this._deviceGlitchesEventRatio_BackingField = value;
        }
      }

      public double? deviceHalfDuplexAECEventRatio
      {
        get
        {
          return this._deviceHalfDuplexAECEventRatio_BackingField;
        }
        set
        {
          this._deviceHalfDuplexAECEventRatio_BackingField = value;
        }
      }

      public double? deviceHowlingEventCount
      {
        get
        {
          return this._deviceHowlingEventCount_BackingField;
        }
        set
        {
          this._deviceHowlingEventCount_BackingField = value;
        }
      }

      public double? deviceLowSNREventRatio
      {
        get
        {
          return this._deviceLowSNREventRatio_BackingField;
        }
        set
        {
          this._deviceLowSNREventRatio_BackingField = value;
        }
      }

      public double? deviceLowSpeechLevelEventRatio
      {
        get
        {
          return this._deviceLowSpeechLevelEventRatio_BackingField;
        }
        set
        {
          this._deviceLowSpeechLevelEventRatio_BackingField = value;
        }
      }

      public double? deviceMultipleEndpointsEventCount
      {
        get
        {
          return this._deviceMultipleEndpointsEventCount_BackingField;
        }
        set
        {
          this._deviceMultipleEndpointsEventCount_BackingField = value;
        }
      }

      public double? deviceNearEndToEchoRatioEventRatio
      {
        get
        {
          return this._deviceNearEndToEchoRatioEventRatio_BackingField;
        }
        set
        {
          this._deviceNearEndToEchoRatioEventRatio_BackingField = value;
        }
      }

      public double? deviceRenderMuteEventRatio
      {
        get
        {
          return this._deviceRenderMuteEventRatio_BackingField;
        }
        set
        {
          this._deviceRenderMuteEventRatio_BackingField = value;
        }
      }

      public double? deviceRenderNotFunctioningEventRatio
      {
        get
        {
          return this._deviceRenderNotFunctioningEventRatio_BackingField;
        }
        set
        {
          this._deviceRenderNotFunctioningEventRatio_BackingField = value;
        }
      }

      public double? deviceRenderZeroVolumeEventRatio
      {
        get
        {
          return this._deviceRenderZeroVolumeEventRatio_BackingField;
        }
        set
        {
          this._deviceRenderZeroVolumeEventRatio_BackingField = value;
        }
      }

      public double? networkDelayEventRatio
      {
        get
        {
          return this._networkDelayEventRatio_BackingField;
        }
        set
        {
          this._networkDelayEventRatio_BackingField = value;
        }
      }

      public double? networkSendQualityEventRatio
      {
        get
        {
          return this._networkSendQualityEventRatio_BackingField;
        }
        set
        {
          this._networkSendQualityEventRatio_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSAudioRecvPayload : dom.MSPayloadBase
    {
      private double? _burstLossLength1_BackingField;
      private double? _burstLossLength2_BackingField;
      private double? _burstLossLength3_BackingField;
      private double? _burstLossLength4_BackingField;
      private double? _burstLossLength5_BackingField;
      private double? _burstLossLength6_BackingField;
      private double? _burstLossLength7_BackingField;
      private double? _burstLossLength8OrHigher_BackingField;
      private double? _fecRecvDistance1_BackingField;
      private double? _fecRecvDistance2_BackingField;
      private double? _fecRecvDistance3_BackingField;
      private double? _packetReorderDepthAvg_BackingField;
      private double? _packetReorderDepthMax_BackingField;
      private double? _packetReorderRatio_BackingField;
      private double? _ratioCompressedSamplesAvg_BackingField;
      private double? _ratioConcealedSamplesAvg_BackingField;
      private double? _ratioStretchedSamplesAvg_BackingField;
      private double? _samplingRate_BackingField;
      private dom.MSAudioRecvSignal _signal_BackingField;

      public double? burstLossLength1
      {
        get
        {
          return this._burstLossLength1_BackingField;
        }
        set
        {
          this._burstLossLength1_BackingField = value;
        }
      }

      public double? burstLossLength2
      {
        get
        {
          return this._burstLossLength2_BackingField;
        }
        set
        {
          this._burstLossLength2_BackingField = value;
        }
      }

      public double? burstLossLength3
      {
        get
        {
          return this._burstLossLength3_BackingField;
        }
        set
        {
          this._burstLossLength3_BackingField = value;
        }
      }

      public double? burstLossLength4
      {
        get
        {
          return this._burstLossLength4_BackingField;
        }
        set
        {
          this._burstLossLength4_BackingField = value;
        }
      }

      public double? burstLossLength5
      {
        get
        {
          return this._burstLossLength5_BackingField;
        }
        set
        {
          this._burstLossLength5_BackingField = value;
        }
      }

      public double? burstLossLength6
      {
        get
        {
          return this._burstLossLength6_BackingField;
        }
        set
        {
          this._burstLossLength6_BackingField = value;
        }
      }

      public double? burstLossLength7
      {
        get
        {
          return this._burstLossLength7_BackingField;
        }
        set
        {
          this._burstLossLength7_BackingField = value;
        }
      }

      public double? burstLossLength8OrHigher
      {
        get
        {
          return this._burstLossLength8OrHigher_BackingField;
        }
        set
        {
          this._burstLossLength8OrHigher_BackingField = value;
        }
      }

      public double? fecRecvDistance1
      {
        get
        {
          return this._fecRecvDistance1_BackingField;
        }
        set
        {
          this._fecRecvDistance1_BackingField = value;
        }
      }

      public double? fecRecvDistance2
      {
        get
        {
          return this._fecRecvDistance2_BackingField;
        }
        set
        {
          this._fecRecvDistance2_BackingField = value;
        }
      }

      public double? fecRecvDistance3
      {
        get
        {
          return this._fecRecvDistance3_BackingField;
        }
        set
        {
          this._fecRecvDistance3_BackingField = value;
        }
      }

      public double? packetReorderDepthAvg
      {
        get
        {
          return this._packetReorderDepthAvg_BackingField;
        }
        set
        {
          this._packetReorderDepthAvg_BackingField = value;
        }
      }

      public double? packetReorderDepthMax
      {
        get
        {
          return this._packetReorderDepthMax_BackingField;
        }
        set
        {
          this._packetReorderDepthMax_BackingField = value;
        }
      }

      public double? packetReorderRatio
      {
        get
        {
          return this._packetReorderRatio_BackingField;
        }
        set
        {
          this._packetReorderRatio_BackingField = value;
        }
      }

      public double? ratioCompressedSamplesAvg
      {
        get
        {
          return this._ratioCompressedSamplesAvg_BackingField;
        }
        set
        {
          this._ratioCompressedSamplesAvg_BackingField = value;
        }
      }

      public double? ratioConcealedSamplesAvg
      {
        get
        {
          return this._ratioConcealedSamplesAvg_BackingField;
        }
        set
        {
          this._ratioConcealedSamplesAvg_BackingField = value;
        }
      }

      public double? ratioStretchedSamplesAvg
      {
        get
        {
          return this._ratioStretchedSamplesAvg_BackingField;
        }
        set
        {
          this._ratioStretchedSamplesAvg_BackingField = value;
        }
      }

      public double? samplingRate
      {
        get
        {
          return this._samplingRate_BackingField;
        }
        set
        {
          this._samplingRate_BackingField = value;
        }
      }

      public dom.MSAudioRecvSignal signal
      {
        get
        {
          return this._signal_BackingField;
        }
        set
        {
          this._signal_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSAudioRecvSignal : IObject
    {
      private double? _initialSignalLevelRMS_BackingField;
      private double? _recvNoiseLevelCh1_BackingField;
      private double? _recvSignalLevelCh1_BackingField;
      private double? _renderLoopbackSignalLevel_BackingField;
      private double? _renderNoiseLevel_BackingField;
      private double? _renderSignalLevel_BackingField;

      public double? initialSignalLevelRMS
      {
        get
        {
          return this._initialSignalLevelRMS_BackingField;
        }
        set
        {
          this._initialSignalLevelRMS_BackingField = value;
        }
      }

      public double? recvNoiseLevelCh1
      {
        get
        {
          return this._recvNoiseLevelCh1_BackingField;
        }
        set
        {
          this._recvNoiseLevelCh1_BackingField = value;
        }
      }

      public double? recvSignalLevelCh1
      {
        get
        {
          return this._recvSignalLevelCh1_BackingField;
        }
        set
        {
          this._recvSignalLevelCh1_BackingField = value;
        }
      }

      public double? renderLoopbackSignalLevel
      {
        get
        {
          return this._renderLoopbackSignalLevel_BackingField;
        }
        set
        {
          this._renderLoopbackSignalLevel_BackingField = value;
        }
      }

      public double? renderNoiseLevel
      {
        get
        {
          return this._renderNoiseLevel_BackingField;
        }
        set
        {
          this._renderNoiseLevel_BackingField = value;
        }
      }

      public double? renderSignalLevel
      {
        get
        {
          return this._renderSignalLevel_BackingField;
        }
        set
        {
          this._renderSignalLevel_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSAudioSendPayload : dom.MSPayloadBase
    {
      private bool? _audioFECUsed_BackingField;
      private double? _samplingRate_BackingField;
      private double? _sendMutePercent_BackingField;
      private dom.MSAudioSendSignal _signal_BackingField;

      public bool? audioFECUsed
      {
        get
        {
          return this._audioFECUsed_BackingField;
        }
        set
        {
          this._audioFECUsed_BackingField = value;
        }
      }

      public double? samplingRate
      {
        get
        {
          return this._samplingRate_BackingField;
        }
        set
        {
          this._samplingRate_BackingField = value;
        }
      }

      public double? sendMutePercent
      {
        get
        {
          return this._sendMutePercent_BackingField;
        }
        set
        {
          this._sendMutePercent_BackingField = value;
        }
      }

      public dom.MSAudioSendSignal signal
      {
        get
        {
          return this._signal_BackingField;
        }
        set
        {
          this._signal_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSAudioSendSignal : IObject
    {
      private double? _noiseLevel_BackingField;
      private double? _sendNoiseLevelCh1_BackingField;
      private double? _sendSignalLevelCh1_BackingField;

      public double? noiseLevel
      {
        get
        {
          return this._noiseLevel_BackingField;
        }
        set
        {
          this._noiseLevel_BackingField = value;
        }
      }

      public double? sendNoiseLevelCh1
      {
        get
        {
          return this._sendNoiseLevelCh1_BackingField;
        }
        set
        {
          this._sendNoiseLevelCh1_BackingField = value;
        }
      }

      public double? sendSignalLevelCh1
      {
        get
        {
          return this._sendSignalLevelCh1_BackingField;
        }
        set
        {
          this._sendSignalLevelCh1_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSConnectivity : IObject
    {
      private dom.MSIceType _iceType_BackingField;
      private dom.MSIceWarningFlags _iceWarningFlags_BackingField;
      private dom.MSRelayAddress _relayAddress_BackingField;

      public dom.MSIceType iceType
      {
        get
        {
          return this._iceType_BackingField;
        }
        set
        {
          this._iceType_BackingField = value;
        }
      }

      public dom.MSIceWarningFlags iceWarningFlags
      {
        get
        {
          return this._iceWarningFlags_BackingField;
        }
        set
        {
          this._iceWarningFlags_BackingField = value;
        }
      }

      public dom.MSRelayAddress relayAddress
      {
        get
        {
          return this._relayAddress_BackingField;
        }
        set
        {
          this._relayAddress_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSCredentialFilter : IObject
    {
      private dom.MSCredentialSpec[] _accept_BackingField;

      public dom.MSCredentialSpec[] accept
      {
        get
        {
          return this._accept_BackingField;
        }
        set
        {
          this._accept_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSCredentialParameters : IObject
    {
      private dom.MSCredentialType _type_BackingField;

      public dom.MSCredentialType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSCredentialSpec : IObject
    {
      private string _id_BackingField;
      private dom.MSCredentialType _type_BackingField;

      public string id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public dom.MSCredentialType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSDCCEventInit : dom.EventInit
    {
      private double? _maxFr_BackingField;
      private double? _maxFs_BackingField;

      public double? maxFr
      {
        get
        {
          return this._maxFr_BackingField;
        }
        set
        {
          this._maxFr_BackingField = value;
        }
      }

      public double? maxFs
      {
        get
        {
          return this._maxFs_BackingField;
        }
        set
        {
          this._maxFs_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSDSHEventInit : dom.EventInit
    {
      private double[] _sources_BackingField;
      private double? _timestamp_BackingField;

      public double[] sources
      {
        get
        {
          return this._sources_BackingField;
        }
        set
        {
          this._sources_BackingField = value;
        }
      }

      public double? timestamp
      {
        get
        {
          return this._timestamp_BackingField;
        }
        set
        {
          this._timestamp_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSDelay : IObject
    {
      private double? _roundTrip_BackingField;
      private double? _roundTripMax_BackingField;

      public double? roundTrip
      {
        get
        {
          return this._roundTrip_BackingField;
        }
        set
        {
          this._roundTrip_BackingField = value;
        }
      }

      public double? roundTripMax
      {
        get
        {
          return this._roundTripMax_BackingField;
        }
        set
        {
          this._roundTripMax_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSDescription : dom.RTCStats
    {
      private dom.MSConnectivity _connectivity_BackingField;
      private string _deviceDevName_BackingField;
      private dom.MSIPAddressInfo _localAddr_BackingField;
      private dom.MSNetworkConnectivityInfo _networkconnectivity_BackingField;
      private dom.MSIPAddressInfo _reflexiveLocalIPAddr_BackingField;
      private dom.MSIPAddressInfo _remoteAddr_BackingField;
      private dom.RTCIceProtocol _transport_BackingField;

      public dom.MSConnectivity connectivity
      {
        get
        {
          return this._connectivity_BackingField;
        }
        set
        {
          this._connectivity_BackingField = value;
        }
      }

      public string deviceDevName
      {
        get
        {
          return this._deviceDevName_BackingField;
        }
        set
        {
          this._deviceDevName_BackingField = value;
        }
      }

      public dom.MSIPAddressInfo localAddr
      {
        get
        {
          return this._localAddr_BackingField;
        }
        set
        {
          this._localAddr_BackingField = value;
        }
      }

      public dom.MSNetworkConnectivityInfo networkconnectivity
      {
        get
        {
          return this._networkconnectivity_BackingField;
        }
        set
        {
          this._networkconnectivity_BackingField = value;
        }
      }

      public dom.MSIPAddressInfo reflexiveLocalIPAddr
      {
        get
        {
          return this._reflexiveLocalIPAddr_BackingField;
        }
        set
        {
          this._reflexiveLocalIPAddr_BackingField = value;
        }
      }

      public dom.MSIPAddressInfo remoteAddr
      {
        get
        {
          return this._remoteAddr_BackingField;
        }
        set
        {
          this._remoteAddr_BackingField = value;
        }
      }

      public dom.RTCIceProtocol transport
      {
        get
        {
          return this._transport_BackingField;
        }
        set
        {
          this._transport_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSFIDOCredentialParameters : dom.MSCredentialParameters
    {
      private Union<string, dom.Algorithm> _algorithm_BackingField;
      private string[] _authenticators_BackingField;

      public Union<string, dom.Algorithm> algorithm
      {
        get
        {
          return this._algorithm_BackingField;
        }
        set
        {
          this._algorithm_BackingField = value;
        }
      }

      public string[] authenticators
      {
        get
        {
          return this._authenticators_BackingField;
        }
        set
        {
          this._authenticators_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSIPAddressInfo : IObject
    {
      private string _ipAddr_BackingField;
      private string _manufacturerMacAddrMask_BackingField;
      private double? _port_BackingField;

      public string ipAddr
      {
        get
        {
          return this._ipAddr_BackingField;
        }
        set
        {
          this._ipAddr_BackingField = value;
        }
      }

      public string manufacturerMacAddrMask
      {
        get
        {
          return this._manufacturerMacAddrMask_BackingField;
        }
        set
        {
          this._manufacturerMacAddrMask_BackingField = value;
        }
      }

      public double? port
      {
        get
        {
          return this._port_BackingField;
        }
        set
        {
          this._port_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSIceWarningFlags : IObject
    {
      private bool? _allocationMessageIntegrityFailed_BackingField;
      private bool? _alternateServerReceived_BackingField;
      private bool? _connCheckMessageIntegrityFailed_BackingField;
      private bool? _connCheckOtherError_BackingField;
      private bool? _fipsAllocationFailure_BackingField;
      private bool? _multipleRelayServersAttempted_BackingField;
      private bool? _noRelayServersConfigured_BackingField;
      private bool? _portRangeExhausted_BackingField;
      private bool? _pseudoTLSFailure_BackingField;
      private bool? _tcpNatConnectivityFailed_BackingField;
      private bool? _tcpRelayConnectivityFailed_BackingField;
      private bool? _turnAuthUnknownUsernameError_BackingField;
      private bool? _turnTcpAllocateFailed_BackingField;
      private bool? _turnTcpSendFailed_BackingField;
      private bool? _turnTcpTimedOut_BackingField;
      private bool? _turnTurnTcpConnectivityFailed_BackingField;
      private bool? _turnUdpAllocateFailed_BackingField;
      private bool? _turnUdpSendFailed_BackingField;
      private bool? _udpLocalConnectivityFailed_BackingField;
      private bool? _udpNatConnectivityFailed_BackingField;
      private bool? _udpRelayConnectivityFailed_BackingField;
      private bool? _useCandidateChecksFailed_BackingField;

      public bool? allocationMessageIntegrityFailed
      {
        get
        {
          return this._allocationMessageIntegrityFailed_BackingField;
        }
        set
        {
          this._allocationMessageIntegrityFailed_BackingField = value;
        }
      }

      public bool? alternateServerReceived
      {
        get
        {
          return this._alternateServerReceived_BackingField;
        }
        set
        {
          this._alternateServerReceived_BackingField = value;
        }
      }

      public bool? connCheckMessageIntegrityFailed
      {
        get
        {
          return this._connCheckMessageIntegrityFailed_BackingField;
        }
        set
        {
          this._connCheckMessageIntegrityFailed_BackingField = value;
        }
      }

      public bool? connCheckOtherError
      {
        get
        {
          return this._connCheckOtherError_BackingField;
        }
        set
        {
          this._connCheckOtherError_BackingField = value;
        }
      }

      public bool? fipsAllocationFailure
      {
        get
        {
          return this._fipsAllocationFailure_BackingField;
        }
        set
        {
          this._fipsAllocationFailure_BackingField = value;
        }
      }

      public bool? multipleRelayServersAttempted
      {
        get
        {
          return this._multipleRelayServersAttempted_BackingField;
        }
        set
        {
          this._multipleRelayServersAttempted_BackingField = value;
        }
      }

      public bool? noRelayServersConfigured
      {
        get
        {
          return this._noRelayServersConfigured_BackingField;
        }
        set
        {
          this._noRelayServersConfigured_BackingField = value;
        }
      }

      public bool? portRangeExhausted
      {
        get
        {
          return this._portRangeExhausted_BackingField;
        }
        set
        {
          this._portRangeExhausted_BackingField = value;
        }
      }

      public bool? pseudoTLSFailure
      {
        get
        {
          return this._pseudoTLSFailure_BackingField;
        }
        set
        {
          this._pseudoTLSFailure_BackingField = value;
        }
      }

      public bool? tcpNatConnectivityFailed
      {
        get
        {
          return this._tcpNatConnectivityFailed_BackingField;
        }
        set
        {
          this._tcpNatConnectivityFailed_BackingField = value;
        }
      }

      public bool? tcpRelayConnectivityFailed
      {
        get
        {
          return this._tcpRelayConnectivityFailed_BackingField;
        }
        set
        {
          this._tcpRelayConnectivityFailed_BackingField = value;
        }
      }

      public bool? turnAuthUnknownUsernameError
      {
        get
        {
          return this._turnAuthUnknownUsernameError_BackingField;
        }
        set
        {
          this._turnAuthUnknownUsernameError_BackingField = value;
        }
      }

      public bool? turnTcpAllocateFailed
      {
        get
        {
          return this._turnTcpAllocateFailed_BackingField;
        }
        set
        {
          this._turnTcpAllocateFailed_BackingField = value;
        }
      }

      public bool? turnTcpSendFailed
      {
        get
        {
          return this._turnTcpSendFailed_BackingField;
        }
        set
        {
          this._turnTcpSendFailed_BackingField = value;
        }
      }

      public bool? turnTcpTimedOut
      {
        get
        {
          return this._turnTcpTimedOut_BackingField;
        }
        set
        {
          this._turnTcpTimedOut_BackingField = value;
        }
      }

      public bool? turnTurnTcpConnectivityFailed
      {
        get
        {
          return this._turnTurnTcpConnectivityFailed_BackingField;
        }
        set
        {
          this._turnTurnTcpConnectivityFailed_BackingField = value;
        }
      }

      public bool? turnUdpAllocateFailed
      {
        get
        {
          return this._turnUdpAllocateFailed_BackingField;
        }
        set
        {
          this._turnUdpAllocateFailed_BackingField = value;
        }
      }

      public bool? turnUdpSendFailed
      {
        get
        {
          return this._turnUdpSendFailed_BackingField;
        }
        set
        {
          this._turnUdpSendFailed_BackingField = value;
        }
      }

      public bool? udpLocalConnectivityFailed
      {
        get
        {
          return this._udpLocalConnectivityFailed_BackingField;
        }
        set
        {
          this._udpLocalConnectivityFailed_BackingField = value;
        }
      }

      public bool? udpNatConnectivityFailed
      {
        get
        {
          return this._udpNatConnectivityFailed_BackingField;
        }
        set
        {
          this._udpNatConnectivityFailed_BackingField = value;
        }
      }

      public bool? udpRelayConnectivityFailed
      {
        get
        {
          return this._udpRelayConnectivityFailed_BackingField;
        }
        set
        {
          this._udpRelayConnectivityFailed_BackingField = value;
        }
      }

      public bool? useCandidateChecksFailed
      {
        get
        {
          return this._useCandidateChecksFailed_BackingField;
        }
        set
        {
          this._useCandidateChecksFailed_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSJitter : IObject
    {
      private double? _interArrival_BackingField;
      private double? _interArrivalMax_BackingField;
      private double? _interArrivalSD_BackingField;

      public double? interArrival
      {
        get
        {
          return this._interArrival_BackingField;
        }
        set
        {
          this._interArrival_BackingField = value;
        }
      }

      public double? interArrivalMax
      {
        get
        {
          return this._interArrivalMax_BackingField;
        }
        set
        {
          this._interArrivalMax_BackingField = value;
        }
      }

      public double? interArrivalSD
      {
        get
        {
          return this._interArrivalSD_BackingField;
        }
        set
        {
          this._interArrivalSD_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSLocalClientEventBase : dom.RTCStats
    {
      private double? _networkBandwidthLowEventRatio_BackingField;
      private double? _networkReceiveQualityEventRatio_BackingField;

      public double? networkBandwidthLowEventRatio
      {
        get
        {
          return this._networkBandwidthLowEventRatio_BackingField;
        }
        set
        {
          this._networkBandwidthLowEventRatio_BackingField = value;
        }
      }

      public double? networkReceiveQualityEventRatio
      {
        get
        {
          return this._networkReceiveQualityEventRatio_BackingField;
        }
        set
        {
          this._networkReceiveQualityEventRatio_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSNetwork : dom.RTCStats
    {
      private dom.MSDelay _delay_BackingField;
      private dom.MSJitter _jitter_BackingField;
      private dom.MSPacketLoss _packetLoss_BackingField;
      private dom.MSUtilization _utilization_BackingField;

      public dom.MSDelay delay
      {
        get
        {
          return this._delay_BackingField;
        }
        set
        {
          this._delay_BackingField = value;
        }
      }

      public dom.MSJitter jitter
      {
        get
        {
          return this._jitter_BackingField;
        }
        set
        {
          this._jitter_BackingField = value;
        }
      }

      public dom.MSPacketLoss packetLoss
      {
        get
        {
          return this._packetLoss_BackingField;
        }
        set
        {
          this._packetLoss_BackingField = value;
        }
      }

      public dom.MSUtilization utilization
      {
        get
        {
          return this._utilization_BackingField;
        }
        set
        {
          this._utilization_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSNetworkConnectivityInfo : IObject
    {
      private double? _linkspeed_BackingField;
      private string _networkConnectionDetails_BackingField;
      private bool? _vpn_BackingField;

      public double? linkspeed
      {
        get
        {
          return this._linkspeed_BackingField;
        }
        set
        {
          this._linkspeed_BackingField = value;
        }
      }

      public string networkConnectionDetails
      {
        get
        {
          return this._networkConnectionDetails_BackingField;
        }
        set
        {
          this._networkConnectionDetails_BackingField = value;
        }
      }

      public bool? vpn
      {
        get
        {
          return this._vpn_BackingField;
        }
        set
        {
          this._vpn_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSNetworkInterfaceType : IObject
    {
      private bool? _interfaceTypeEthernet_BackingField;
      private bool? _interfaceTypePPP_BackingField;
      private bool? _interfaceTypeTunnel_BackingField;
      private bool? _interfaceTypeWWAN_BackingField;
      private bool? _interfaceTypeWireless_BackingField;

      public bool? interfaceTypeEthernet
      {
        get
        {
          return this._interfaceTypeEthernet_BackingField;
        }
        set
        {
          this._interfaceTypeEthernet_BackingField = value;
        }
      }

      public bool? interfaceTypePPP
      {
        get
        {
          return this._interfaceTypePPP_BackingField;
        }
        set
        {
          this._interfaceTypePPP_BackingField = value;
        }
      }

      public bool? interfaceTypeTunnel
      {
        get
        {
          return this._interfaceTypeTunnel_BackingField;
        }
        set
        {
          this._interfaceTypeTunnel_BackingField = value;
        }
      }

      public bool? interfaceTypeWWAN
      {
        get
        {
          return this._interfaceTypeWWAN_BackingField;
        }
        set
        {
          this._interfaceTypeWWAN_BackingField = value;
        }
      }

      public bool? interfaceTypeWireless
      {
        get
        {
          return this._interfaceTypeWireless_BackingField;
        }
        set
        {
          this._interfaceTypeWireless_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSOutboundNetwork : dom.MSNetwork
    {
      private double? _appliedBandwidthLimit_BackingField;

      public double? appliedBandwidthLimit
      {
        get
        {
          return this._appliedBandwidthLimit_BackingField;
        }
        set
        {
          this._appliedBandwidthLimit_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSPacketLoss : IObject
    {
      private double? _lossRate_BackingField;
      private double? _lossRateMax_BackingField;

      public double? lossRate
      {
        get
        {
          return this._lossRate_BackingField;
        }
        set
        {
          this._lossRate_BackingField = value;
        }
      }

      public double? lossRateMax
      {
        get
        {
          return this._lossRateMax_BackingField;
        }
        set
        {
          this._lossRateMax_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSPayloadBase : dom.RTCStats
    {
      private string _payloadDescription_BackingField;

      public string payloadDescription
      {
        get
        {
          return this._payloadDescription_BackingField;
        }
        set
        {
          this._payloadDescription_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSPortRange : IObject
    {
      private double? _max_BackingField;
      private double? _min_BackingField;

      public double? max
      {
        get
        {
          return this._max_BackingField;
        }
        set
        {
          this._max_BackingField = value;
        }
      }

      public double? min
      {
        get
        {
          return this._min_BackingField;
        }
        set
        {
          this._min_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSRelayAddress : IObject
    {
      private double? _port_BackingField;
      private string _relayAddress_BackingField;

      public double? port
      {
        get
        {
          return this._port_BackingField;
        }
        set
        {
          this._port_BackingField = value;
        }
      }

      public string relayAddress
      {
        get
        {
          return this._relayAddress_BackingField;
        }
        set
        {
          this._relayAddress_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSSignatureParameters : IObject
    {
      private string _userPrompt_BackingField;

      public string userPrompt
      {
        get
        {
          return this._userPrompt_BackingField;
        }
        set
        {
          this._userPrompt_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSTransportDiagnosticsStats : dom.RTCStats
    {
      private double? _allocationTimeInMs_BackingField;
      private string _baseAddress_BackingField;
      private dom.MSNetworkInterfaceType _baseInterface_BackingField;
      private dom.RTCIceRole _iceRole_BackingField;
      private dom.MSIceWarningFlags _iceWarningFlags_BackingField;
      private dom.MSNetworkInterfaceType _interfaces_BackingField;
      private dom.MSIceAddrType _localAddrType_BackingField;
      private string _localAddress_BackingField;
      private dom.MSNetworkInterfaceType _localInterface_BackingField;
      private string _localMR_BackingField;
      private double? _localMRTCPPort_BackingField;
      private string _localSite_BackingField;
      private string _msRtcEngineVersion_BackingField;
      private string _networkName_BackingField;
      private double? _numConsentReqReceived_BackingField;
      private double? _numConsentReqSent_BackingField;
      private double? _numConsentRespReceived_BackingField;
      private double? _numConsentRespSent_BackingField;
      private double? _portRangeMax_BackingField;
      private double? _portRangeMin_BackingField;
      private dom.RTCIceProtocol _protocol_BackingField;
      private dom.MSIceAddrType _remoteAddrType_BackingField;
      private string _remoteAddress_BackingField;
      private string _remoteMR_BackingField;
      private double? _remoteMRTCPPort_BackingField;
      private string _remoteSite_BackingField;
      private bool? _rtpRtcpMux_BackingField;
      private double? _stunVer_BackingField;

      public double? allocationTimeInMs
      {
        get
        {
          return this._allocationTimeInMs_BackingField;
        }
        set
        {
          this._allocationTimeInMs_BackingField = value;
        }
      }

      public string baseAddress
      {
        get
        {
          return this._baseAddress_BackingField;
        }
        set
        {
          this._baseAddress_BackingField = value;
        }
      }

      public dom.MSNetworkInterfaceType baseInterface
      {
        get
        {
          return this._baseInterface_BackingField;
        }
        set
        {
          this._baseInterface_BackingField = value;
        }
      }

      public dom.RTCIceRole iceRole
      {
        get
        {
          return this._iceRole_BackingField;
        }
        set
        {
          this._iceRole_BackingField = value;
        }
      }

      public dom.MSIceWarningFlags iceWarningFlags
      {
        get
        {
          return this._iceWarningFlags_BackingField;
        }
        set
        {
          this._iceWarningFlags_BackingField = value;
        }
      }

      public dom.MSNetworkInterfaceType interfaces
      {
        get
        {
          return this._interfaces_BackingField;
        }
        set
        {
          this._interfaces_BackingField = value;
        }
      }

      public dom.MSIceAddrType localAddrType
      {
        get
        {
          return this._localAddrType_BackingField;
        }
        set
        {
          this._localAddrType_BackingField = value;
        }
      }

      public string localAddress
      {
        get
        {
          return this._localAddress_BackingField;
        }
        set
        {
          this._localAddress_BackingField = value;
        }
      }

      public dom.MSNetworkInterfaceType localInterface
      {
        get
        {
          return this._localInterface_BackingField;
        }
        set
        {
          this._localInterface_BackingField = value;
        }
      }

      public string localMR
      {
        get
        {
          return this._localMR_BackingField;
        }
        set
        {
          this._localMR_BackingField = value;
        }
      }

      public double? localMRTCPPort
      {
        get
        {
          return this._localMRTCPPort_BackingField;
        }
        set
        {
          this._localMRTCPPort_BackingField = value;
        }
      }

      public string localSite
      {
        get
        {
          return this._localSite_BackingField;
        }
        set
        {
          this._localSite_BackingField = value;
        }
      }

      public string msRtcEngineVersion
      {
        get
        {
          return this._msRtcEngineVersion_BackingField;
        }
        set
        {
          this._msRtcEngineVersion_BackingField = value;
        }
      }

      public string networkName
      {
        get
        {
          return this._networkName_BackingField;
        }
        set
        {
          this._networkName_BackingField = value;
        }
      }

      public double? numConsentReqReceived
      {
        get
        {
          return this._numConsentReqReceived_BackingField;
        }
        set
        {
          this._numConsentReqReceived_BackingField = value;
        }
      }

      public double? numConsentReqSent
      {
        get
        {
          return this._numConsentReqSent_BackingField;
        }
        set
        {
          this._numConsentReqSent_BackingField = value;
        }
      }

      public double? numConsentRespReceived
      {
        get
        {
          return this._numConsentRespReceived_BackingField;
        }
        set
        {
          this._numConsentRespReceived_BackingField = value;
        }
      }

      public double? numConsentRespSent
      {
        get
        {
          return this._numConsentRespSent_BackingField;
        }
        set
        {
          this._numConsentRespSent_BackingField = value;
        }
      }

      public double? portRangeMax
      {
        get
        {
          return this._portRangeMax_BackingField;
        }
        set
        {
          this._portRangeMax_BackingField = value;
        }
      }

      public double? portRangeMin
      {
        get
        {
          return this._portRangeMin_BackingField;
        }
        set
        {
          this._portRangeMin_BackingField = value;
        }
      }

      public dom.RTCIceProtocol protocol
      {
        get
        {
          return this._protocol_BackingField;
        }
        set
        {
          this._protocol_BackingField = value;
        }
      }

      public dom.MSIceAddrType remoteAddrType
      {
        get
        {
          return this._remoteAddrType_BackingField;
        }
        set
        {
          this._remoteAddrType_BackingField = value;
        }
      }

      public string remoteAddress
      {
        get
        {
          return this._remoteAddress_BackingField;
        }
        set
        {
          this._remoteAddress_BackingField = value;
        }
      }

      public string remoteMR
      {
        get
        {
          return this._remoteMR_BackingField;
        }
        set
        {
          this._remoteMR_BackingField = value;
        }
      }

      public double? remoteMRTCPPort
      {
        get
        {
          return this._remoteMRTCPPort_BackingField;
        }
        set
        {
          this._remoteMRTCPPort_BackingField = value;
        }
      }

      public string remoteSite
      {
        get
        {
          return this._remoteSite_BackingField;
        }
        set
        {
          this._remoteSite_BackingField = value;
        }
      }

      public bool? rtpRtcpMux
      {
        get
        {
          return this._rtpRtcpMux_BackingField;
        }
        set
        {
          this._rtpRtcpMux_BackingField = value;
        }
      }

      public double? stunVer
      {
        get
        {
          return this._stunVer_BackingField;
        }
        set
        {
          this._stunVer_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSUtilization : IObject
    {
      private double? _bandwidthEstimation_BackingField;
      private double? _bandwidthEstimationAvg_BackingField;
      private double? _bandwidthEstimationMax_BackingField;
      private double? _bandwidthEstimationMin_BackingField;
      private double? _bandwidthEstimationStdDev_BackingField;
      private double? _packets_BackingField;

      public double? bandwidthEstimation
      {
        get
        {
          return this._bandwidthEstimation_BackingField;
        }
        set
        {
          this._bandwidthEstimation_BackingField = value;
        }
      }

      public double? bandwidthEstimationAvg
      {
        get
        {
          return this._bandwidthEstimationAvg_BackingField;
        }
        set
        {
          this._bandwidthEstimationAvg_BackingField = value;
        }
      }

      public double? bandwidthEstimationMax
      {
        get
        {
          return this._bandwidthEstimationMax_BackingField;
        }
        set
        {
          this._bandwidthEstimationMax_BackingField = value;
        }
      }

      public double? bandwidthEstimationMin
      {
        get
        {
          return this._bandwidthEstimationMin_BackingField;
        }
        set
        {
          this._bandwidthEstimationMin_BackingField = value;
        }
      }

      public double? bandwidthEstimationStdDev
      {
        get
        {
          return this._bandwidthEstimationStdDev_BackingField;
        }
        set
        {
          this._bandwidthEstimationStdDev_BackingField = value;
        }
      }

      public double? packets
      {
        get
        {
          return this._packets_BackingField;
        }
        set
        {
          this._packets_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSVideoPayload : dom.MSPayloadBase
    {
      private double? _durationSeconds_BackingField;
      private string _resolution_BackingField;
      private double? _videoBitRateAvg_BackingField;
      private double? _videoBitRateMax_BackingField;
      private double? _videoFrameRateAvg_BackingField;
      private double? _videoPacketLossRate_BackingField;

      public double? durationSeconds
      {
        get
        {
          return this._durationSeconds_BackingField;
        }
        set
        {
          this._durationSeconds_BackingField = value;
        }
      }

      public string resolution
      {
        get
        {
          return this._resolution_BackingField;
        }
        set
        {
          this._resolution_BackingField = value;
        }
      }

      public double? videoBitRateAvg
      {
        get
        {
          return this._videoBitRateAvg_BackingField;
        }
        set
        {
          this._videoBitRateAvg_BackingField = value;
        }
      }

      public double? videoBitRateMax
      {
        get
        {
          return this._videoBitRateMax_BackingField;
        }
        set
        {
          this._videoBitRateMax_BackingField = value;
        }
      }

      public double? videoFrameRateAvg
      {
        get
        {
          return this._videoFrameRateAvg_BackingField;
        }
        set
        {
          this._videoFrameRateAvg_BackingField = value;
        }
      }

      public double? videoPacketLossRate
      {
        get
        {
          return this._videoPacketLossRate_BackingField;
        }
        set
        {
          this._videoPacketLossRate_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSVideoRecvPayload : dom.MSVideoPayload
    {
      private double? _lowBitRateCallPercent_BackingField;
      private double? _lowFrameRateCallPercent_BackingField;
      private double? _recvBitRateAverage_BackingField;
      private double? _recvBitRateMaximum_BackingField;
      private string _recvCodecType_BackingField;
      private double? _recvFpsHarmonicAverage_BackingField;
      private double? _recvFrameRateAverage_BackingField;
      private double? _recvNumResSwitches_BackingField;
      private double? _recvReorderBufferMaxSuccessfullyOrderedExtent_BackingField;
      private double? _recvReorderBufferMaxSuccessfullyOrderedLateTime_BackingField;
      private double? _recvReorderBufferPacketsDroppedDueToBufferExhaustion_BackingField;
      private double? _recvReorderBufferPacketsDroppedDueToTimeout_BackingField;
      private double? _recvReorderBufferReorderedPackets_BackingField;
      private double? _recvResolutionHeight_BackingField;
      private double? _recvResolutionWidth_BackingField;
      private double? _recvVideoStreamsMax_BackingField;
      private double? _recvVideoStreamsMin_BackingField;
      private double? _recvVideoStreamsMode_BackingField;
      private double? _reorderBufferTotalPackets_BackingField;
      private double? _videoFrameLossRate_BackingField;
      private double? _videoPostFECPLR_BackingField;
      private dom.MSVideoResolutionDistribution _videoResolutions_BackingField;

      public double? lowBitRateCallPercent
      {
        get
        {
          return this._lowBitRateCallPercent_BackingField;
        }
        set
        {
          this._lowBitRateCallPercent_BackingField = value;
        }
      }

      public double? lowFrameRateCallPercent
      {
        get
        {
          return this._lowFrameRateCallPercent_BackingField;
        }
        set
        {
          this._lowFrameRateCallPercent_BackingField = value;
        }
      }

      public double? recvBitRateAverage
      {
        get
        {
          return this._recvBitRateAverage_BackingField;
        }
        set
        {
          this._recvBitRateAverage_BackingField = value;
        }
      }

      public double? recvBitRateMaximum
      {
        get
        {
          return this._recvBitRateMaximum_BackingField;
        }
        set
        {
          this._recvBitRateMaximum_BackingField = value;
        }
      }

      public string recvCodecType
      {
        get
        {
          return this._recvCodecType_BackingField;
        }
        set
        {
          this._recvCodecType_BackingField = value;
        }
      }

      public double? recvFpsHarmonicAverage
      {
        get
        {
          return this._recvFpsHarmonicAverage_BackingField;
        }
        set
        {
          this._recvFpsHarmonicAverage_BackingField = value;
        }
      }

      public double? recvFrameRateAverage
      {
        get
        {
          return this._recvFrameRateAverage_BackingField;
        }
        set
        {
          this._recvFrameRateAverage_BackingField = value;
        }
      }

      public double? recvNumResSwitches
      {
        get
        {
          return this._recvNumResSwitches_BackingField;
        }
        set
        {
          this._recvNumResSwitches_BackingField = value;
        }
      }

      public double? recvReorderBufferMaxSuccessfullyOrderedExtent
      {
        get
        {
          return this._recvReorderBufferMaxSuccessfullyOrderedExtent_BackingField;
        }
        set
        {
          this._recvReorderBufferMaxSuccessfullyOrderedExtent_BackingField = value;
        }
      }

      public double? recvReorderBufferMaxSuccessfullyOrderedLateTime
      {
        get
        {
          return this._recvReorderBufferMaxSuccessfullyOrderedLateTime_BackingField;
        }
        set
        {
          this._recvReorderBufferMaxSuccessfullyOrderedLateTime_BackingField = value;
        }
      }

      public double? recvReorderBufferPacketsDroppedDueToBufferExhaustion
      {
        get
        {
          return this._recvReorderBufferPacketsDroppedDueToBufferExhaustion_BackingField;
        }
        set
        {
          this._recvReorderBufferPacketsDroppedDueToBufferExhaustion_BackingField = value;
        }
      }

      public double? recvReorderBufferPacketsDroppedDueToTimeout
      {
        get
        {
          return this._recvReorderBufferPacketsDroppedDueToTimeout_BackingField;
        }
        set
        {
          this._recvReorderBufferPacketsDroppedDueToTimeout_BackingField = value;
        }
      }

      public double? recvReorderBufferReorderedPackets
      {
        get
        {
          return this._recvReorderBufferReorderedPackets_BackingField;
        }
        set
        {
          this._recvReorderBufferReorderedPackets_BackingField = value;
        }
      }

      public double? recvResolutionHeight
      {
        get
        {
          return this._recvResolutionHeight_BackingField;
        }
        set
        {
          this._recvResolutionHeight_BackingField = value;
        }
      }

      public double? recvResolutionWidth
      {
        get
        {
          return this._recvResolutionWidth_BackingField;
        }
        set
        {
          this._recvResolutionWidth_BackingField = value;
        }
      }

      public double? recvVideoStreamsMax
      {
        get
        {
          return this._recvVideoStreamsMax_BackingField;
        }
        set
        {
          this._recvVideoStreamsMax_BackingField = value;
        }
      }

      public double? recvVideoStreamsMin
      {
        get
        {
          return this._recvVideoStreamsMin_BackingField;
        }
        set
        {
          this._recvVideoStreamsMin_BackingField = value;
        }
      }

      public double? recvVideoStreamsMode
      {
        get
        {
          return this._recvVideoStreamsMode_BackingField;
        }
        set
        {
          this._recvVideoStreamsMode_BackingField = value;
        }
      }

      public double? reorderBufferTotalPackets
      {
        get
        {
          return this._reorderBufferTotalPackets_BackingField;
        }
        set
        {
          this._reorderBufferTotalPackets_BackingField = value;
        }
      }

      public double? videoFrameLossRate
      {
        get
        {
          return this._videoFrameLossRate_BackingField;
        }
        set
        {
          this._videoFrameLossRate_BackingField = value;
        }
      }

      public double? videoPostFECPLR
      {
        get
        {
          return this._videoPostFECPLR_BackingField;
        }
        set
        {
          this._videoPostFECPLR_BackingField = value;
        }
      }

      public dom.MSVideoResolutionDistribution videoResolutions
      {
        get
        {
          return this._videoResolutions_BackingField;
        }
        set
        {
          this._videoResolutions_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSVideoResolutionDistribution : IObject
    {
      private double? _cifQuality_BackingField;
      private double? _h1080Quality_BackingField;
      private double? _h1440Quality_BackingField;
      private double? _h2160Quality_BackingField;
      private double? _h720Quality_BackingField;
      private double? _vgaQuality_BackingField;

      public double? cifQuality
      {
        get
        {
          return this._cifQuality_BackingField;
        }
        set
        {
          this._cifQuality_BackingField = value;
        }
      }

      public double? h1080Quality
      {
        get
        {
          return this._h1080Quality_BackingField;
        }
        set
        {
          this._h1080Quality_BackingField = value;
        }
      }

      public double? h1440Quality
      {
        get
        {
          return this._h1440Quality_BackingField;
        }
        set
        {
          this._h1440Quality_BackingField = value;
        }
      }

      public double? h2160Quality
      {
        get
        {
          return this._h2160Quality_BackingField;
        }
        set
        {
          this._h2160Quality_BackingField = value;
        }
      }

      public double? h720Quality
      {
        get
        {
          return this._h720Quality_BackingField;
        }
        set
        {
          this._h720Quality_BackingField = value;
        }
      }

      public double? vgaQuality
      {
        get
        {
          return this._vgaQuality_BackingField;
        }
        set
        {
          this._vgaQuality_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSVideoSendPayload : dom.MSVideoPayload
    {
      private double? _sendBitRateAverage_BackingField;
      private double? _sendBitRateMaximum_BackingField;
      private double? _sendFrameRateAverage_BackingField;
      private double? _sendResolutionHeight_BackingField;
      private double? _sendResolutionWidth_BackingField;
      private double? _sendVideoStreamsMax_BackingField;

      public double? sendBitRateAverage
      {
        get
        {
          return this._sendBitRateAverage_BackingField;
        }
        set
        {
          this._sendBitRateAverage_BackingField = value;
        }
      }

      public double? sendBitRateMaximum
      {
        get
        {
          return this._sendBitRateMaximum_BackingField;
        }
        set
        {
          this._sendBitRateMaximum_BackingField = value;
        }
      }

      public double? sendFrameRateAverage
      {
        get
        {
          return this._sendFrameRateAverage_BackingField;
        }
        set
        {
          this._sendFrameRateAverage_BackingField = value;
        }
      }

      public double? sendResolutionHeight
      {
        get
        {
          return this._sendResolutionHeight_BackingField;
        }
        set
        {
          this._sendResolutionHeight_BackingField = value;
        }
      }

      public double? sendResolutionWidth
      {
        get
        {
          return this._sendResolutionWidth_BackingField;
        }
        set
        {
          this._sendResolutionWidth_BackingField = value;
        }
      }

      public double? sendVideoStreamsMax
      {
        get
        {
          return this._sendVideoStreamsMax_BackingField;
        }
        set
        {
          this._sendVideoStreamsMax_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaElementAudioSourceOptions : IObject
    {
      private dom.HTMLMediaElement _mediaElement_BackingField;

      public dom.HTMLMediaElement mediaElement
      {
        get
        {
          return this._mediaElement_BackingField;
        }
        set
        {
          this._mediaElement_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaEncryptedEventInit : dom.EventInit
    {
      private es5.ArrayBuffer _initData_BackingField;
      private string _initDataType_BackingField;

      public es5.ArrayBuffer initData
      {
        get
        {
          return this._initData_BackingField;
        }
        set
        {
          this._initData_BackingField = value;
        }
      }

      public string initDataType
      {
        get
        {
          return this._initDataType_BackingField;
        }
        set
        {
          this._initDataType_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaKeyMessageEventInit : dom.EventInit
    {
      private es5.ArrayBuffer _message_BackingField;
      private dom.MediaKeyMessageType _messageType_BackingField;

      public es5.ArrayBuffer message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      public dom.MediaKeyMessageType messageType
      {
        get
        {
          return this._messageType_BackingField;
        }
        set
        {
          this._messageType_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaKeySystemConfiguration : IObject
    {
      private dom.MediaKeySystemMediaCapability[] _audioCapabilities_BackingField;
      private dom.MediaKeysRequirement _distinctiveIdentifier_BackingField;
      private string[] _initDataTypes_BackingField;
      private dom.MediaKeysRequirement _persistentState_BackingField;
      private dom.MediaKeySystemMediaCapability[] _videoCapabilities_BackingField;

      public dom.MediaKeySystemMediaCapability[] audioCapabilities
      {
        get
        {
          return this._audioCapabilities_BackingField;
        }
        set
        {
          this._audioCapabilities_BackingField = value;
        }
      }

      public dom.MediaKeysRequirement distinctiveIdentifier
      {
        get
        {
          return this._distinctiveIdentifier_BackingField;
        }
        set
        {
          this._distinctiveIdentifier_BackingField = value;
        }
      }

      public string[] initDataTypes
      {
        get
        {
          return this._initDataTypes_BackingField;
        }
        set
        {
          this._initDataTypes_BackingField = value;
        }
      }

      public dom.MediaKeysRequirement persistentState
      {
        get
        {
          return this._persistentState_BackingField;
        }
        set
        {
          this._persistentState_BackingField = value;
        }
      }

      public dom.MediaKeySystemMediaCapability[] videoCapabilities
      {
        get
        {
          return this._videoCapabilities_BackingField;
        }
        set
        {
          this._videoCapabilities_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaKeySystemMediaCapability : IObject
    {
      private string _contentType_BackingField;
      private string _robustness_BackingField;

      public string contentType
      {
        get
        {
          return this._contentType_BackingField;
        }
        set
        {
          this._contentType_BackingField = value;
        }
      }

      public string robustness
      {
        get
        {
          return this._robustness_BackingField;
        }
        set
        {
          this._robustness_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaStreamConstraints : IObject
    {
      private Union<bool, dom.MediaTrackConstraints> _audio_BackingField;
      private Union<bool, dom.MediaTrackConstraints> _video_BackingField;

      public Union<bool, dom.MediaTrackConstraints> audio
      {
        get
        {
          return this._audio_BackingField;
        }
        set
        {
          this._audio_BackingField = value;
        }
      }

      public Union<bool, dom.MediaTrackConstraints> video
      {
        get
        {
          return this._video_BackingField;
        }
        set
        {
          this._video_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaStreamErrorEventInit : dom.EventInit
    {
      private dom.MediaStreamError _error_BackingField;

      public dom.MediaStreamError error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaStreamEventInit : dom.EventInit
    {
      private dom.MediaStream _stream_BackingField;

      public dom.MediaStream stream
      {
        get
        {
          return this._stream_BackingField;
        }
        set
        {
          this._stream_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaStreamTrackEventInit : dom.EventInit
    {
      private dom.MediaStreamTrack _track_BackingField;

      public dom.MediaStreamTrack track
      {
        get
        {
          return this._track_BackingField;
        }
        set
        {
          this._track_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaTrackCapabilities : IObject
    {
      private Union<double, dom.DoubleRange> _aspectRatio_BackingField;
      private string _deviceId_BackingField;
      private bool[] _echoCancellation_BackingField;
      private string _facingMode_BackingField;
      private Union<double, dom.DoubleRange> _frameRate_BackingField;
      private string _groupId_BackingField;
      private Union<double, dom.LongRange> _height_BackingField;
      private Union<double, dom.LongRange> _sampleRate_BackingField;
      private Union<double, dom.LongRange> _sampleSize_BackingField;
      private Union<double, dom.DoubleRange> _volume_BackingField;
      private Union<double, dom.LongRange> _width_BackingField;

      public Union<double, dom.DoubleRange> aspectRatio
      {
        get
        {
          return this._aspectRatio_BackingField;
        }
        set
        {
          this._aspectRatio_BackingField = value;
        }
      }

      public string deviceId
      {
        get
        {
          return this._deviceId_BackingField;
        }
        set
        {
          this._deviceId_BackingField = value;
        }
      }

      public bool[] echoCancellation
      {
        get
        {
          return this._echoCancellation_BackingField;
        }
        set
        {
          this._echoCancellation_BackingField = value;
        }
      }

      public string facingMode
      {
        get
        {
          return this._facingMode_BackingField;
        }
        set
        {
          this._facingMode_BackingField = value;
        }
      }

      public Union<double, dom.DoubleRange> frameRate
      {
        get
        {
          return this._frameRate_BackingField;
        }
        set
        {
          this._frameRate_BackingField = value;
        }
      }

      public string groupId
      {
        get
        {
          return this._groupId_BackingField;
        }
        set
        {
          this._groupId_BackingField = value;
        }
      }

      public Union<double, dom.LongRange> height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public Union<double, dom.LongRange> sampleRate
      {
        get
        {
          return this._sampleRate_BackingField;
        }
        set
        {
          this._sampleRate_BackingField = value;
        }
      }

      public Union<double, dom.LongRange> sampleSize
      {
        get
        {
          return this._sampleSize_BackingField;
        }
        set
        {
          this._sampleSize_BackingField = value;
        }
      }

      public Union<double, dom.DoubleRange> volume
      {
        get
        {
          return this._volume_BackingField;
        }
        set
        {
          this._volume_BackingField = value;
        }
      }

      public Union<double, dom.LongRange> width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaTrackConstraintSet : IObject
    {
      private Union<double, dom.ConstrainDoubleRange> _aspectRatio_BackingField;
      private Union<double, dom.ConstrainLongRange> _channelCount_BackingField;
      private Union<string, string[], dom.ConstrainDOMStringParameters> _deviceId_BackingField;
      private Union<string, string[], dom.ConstrainDOMStringParameters> _displaySurface_BackingField;
      private Union<bool, dom.ConstrainBooleanParameters> _echoCancellation_BackingField;
      private Union<string, string[], dom.ConstrainDOMStringParameters> _facingMode_BackingField;
      private Union<double, dom.ConstrainDoubleRange> _frameRate_BackingField;
      private Union<string, string[], dom.ConstrainDOMStringParameters> _groupId_BackingField;
      private Union<double, dom.ConstrainLongRange> _height_BackingField;
      private Union<double, dom.ConstrainDoubleRange> _latency_BackingField;
      private Union<bool, dom.ConstrainBooleanParameters> _logicalSurface_BackingField;
      private Union<double, dom.ConstrainLongRange> _sampleRate_BackingField;
      private Union<double, dom.ConstrainLongRange> _sampleSize_BackingField;
      private Union<double, dom.ConstrainDoubleRange> _volume_BackingField;
      private Union<double, dom.ConstrainLongRange> _width_BackingField;

      public Union<double, dom.ConstrainDoubleRange> aspectRatio
      {
        get
        {
          return this._aspectRatio_BackingField;
        }
        set
        {
          this._aspectRatio_BackingField = value;
        }
      }

      public Union<double, dom.ConstrainLongRange> channelCount
      {
        get
        {
          return this._channelCount_BackingField;
        }
        set
        {
          this._channelCount_BackingField = value;
        }
      }

      public Union<string, string[], dom.ConstrainDOMStringParameters> deviceId
      {
        get
        {
          return this._deviceId_BackingField;
        }
        set
        {
          this._deviceId_BackingField = value;
        }
      }

      public Union<string, string[], dom.ConstrainDOMStringParameters> displaySurface
      {
        get
        {
          return this._displaySurface_BackingField;
        }
        set
        {
          this._displaySurface_BackingField = value;
        }
      }

      public Union<bool, dom.ConstrainBooleanParameters> echoCancellation
      {
        get
        {
          return this._echoCancellation_BackingField;
        }
        set
        {
          this._echoCancellation_BackingField = value;
        }
      }

      public Union<string, string[], dom.ConstrainDOMStringParameters> facingMode
      {
        get
        {
          return this._facingMode_BackingField;
        }
        set
        {
          this._facingMode_BackingField = value;
        }
      }

      public Union<double, dom.ConstrainDoubleRange> frameRate
      {
        get
        {
          return this._frameRate_BackingField;
        }
        set
        {
          this._frameRate_BackingField = value;
        }
      }

      public Union<string, string[], dom.ConstrainDOMStringParameters> groupId
      {
        get
        {
          return this._groupId_BackingField;
        }
        set
        {
          this._groupId_BackingField = value;
        }
      }

      public Union<double, dom.ConstrainLongRange> height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public Union<double, dom.ConstrainDoubleRange> latency
      {
        get
        {
          return this._latency_BackingField;
        }
        set
        {
          this._latency_BackingField = value;
        }
      }

      public Union<bool, dom.ConstrainBooleanParameters> logicalSurface
      {
        get
        {
          return this._logicalSurface_BackingField;
        }
        set
        {
          this._logicalSurface_BackingField = value;
        }
      }

      public Union<double, dom.ConstrainLongRange> sampleRate
      {
        get
        {
          return this._sampleRate_BackingField;
        }
        set
        {
          this._sampleRate_BackingField = value;
        }
      }

      public Union<double, dom.ConstrainLongRange> sampleSize
      {
        get
        {
          return this._sampleSize_BackingField;
        }
        set
        {
          this._sampleSize_BackingField = value;
        }
      }

      public Union<double, dom.ConstrainDoubleRange> volume
      {
        get
        {
          return this._volume_BackingField;
        }
        set
        {
          this._volume_BackingField = value;
        }
      }

      public Union<double, dom.ConstrainLongRange> width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaTrackConstraints : dom.MediaTrackConstraintSet
    {
      private dom.MediaTrackConstraintSet[] _advanced_BackingField;

      public dom.MediaTrackConstraintSet[] advanced
      {
        get
        {
          return this._advanced_BackingField;
        }
        set
        {
          this._advanced_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaTrackSettings : IObject
    {
      private double? _aspectRatio_BackingField;
      private string _deviceId_BackingField;
      private bool? _echoCancellation_BackingField;
      private string _facingMode_BackingField;
      private double? _frameRate_BackingField;
      private string _groupId_BackingField;
      private double? _height_BackingField;
      private double? _sampleRate_BackingField;
      private double? _sampleSize_BackingField;
      private double? _volume_BackingField;
      private double? _width_BackingField;

      public double? aspectRatio
      {
        get
        {
          return this._aspectRatio_BackingField;
        }
        set
        {
          this._aspectRatio_BackingField = value;
        }
      }

      public string deviceId
      {
        get
        {
          return this._deviceId_BackingField;
        }
        set
        {
          this._deviceId_BackingField = value;
        }
      }

      public bool? echoCancellation
      {
        get
        {
          return this._echoCancellation_BackingField;
        }
        set
        {
          this._echoCancellation_BackingField = value;
        }
      }

      public string facingMode
      {
        get
        {
          return this._facingMode_BackingField;
        }
        set
        {
          this._facingMode_BackingField = value;
        }
      }

      public double? frameRate
      {
        get
        {
          return this._frameRate_BackingField;
        }
        set
        {
          this._frameRate_BackingField = value;
        }
      }

      public string groupId
      {
        get
        {
          return this._groupId_BackingField;
        }
        set
        {
          this._groupId_BackingField = value;
        }
      }

      public double? height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public double? sampleRate
      {
        get
        {
          return this._sampleRate_BackingField;
        }
        set
        {
          this._sampleRate_BackingField = value;
        }
      }

      public double? sampleSize
      {
        get
        {
          return this._sampleSize_BackingField;
        }
        set
        {
          this._sampleSize_BackingField = value;
        }
      }

      public double? volume
      {
        get
        {
          return this._volume_BackingField;
        }
        set
        {
          this._volume_BackingField = value;
        }
      }

      public double? width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaTrackSupportedConstraints : IObject
    {
      private bool? _aspectRatio_BackingField;
      private bool? _deviceId_BackingField;
      private bool? _echoCancellation_BackingField;
      private bool? _facingMode_BackingField;
      private bool? _frameRate_BackingField;
      private bool? _groupId_BackingField;
      private bool? _height_BackingField;
      private bool? _sampleRate_BackingField;
      private bool? _sampleSize_BackingField;
      private bool? _volume_BackingField;
      private bool? _width_BackingField;

      public bool? aspectRatio
      {
        get
        {
          return this._aspectRatio_BackingField;
        }
        set
        {
          this._aspectRatio_BackingField = value;
        }
      }

      public bool? deviceId
      {
        get
        {
          return this._deviceId_BackingField;
        }
        set
        {
          this._deviceId_BackingField = value;
        }
      }

      public bool? echoCancellation
      {
        get
        {
          return this._echoCancellation_BackingField;
        }
        set
        {
          this._echoCancellation_BackingField = value;
        }
      }

      public bool? facingMode
      {
        get
        {
          return this._facingMode_BackingField;
        }
        set
        {
          this._facingMode_BackingField = value;
        }
      }

      public bool? frameRate
      {
        get
        {
          return this._frameRate_BackingField;
        }
        set
        {
          this._frameRate_BackingField = value;
        }
      }

      public bool? groupId
      {
        get
        {
          return this._groupId_BackingField;
        }
        set
        {
          this._groupId_BackingField = value;
        }
      }

      public bool? height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public bool? sampleRate
      {
        get
        {
          return this._sampleRate_BackingField;
        }
        set
        {
          this._sampleRate_BackingField = value;
        }
      }

      public bool? sampleSize
      {
        get
        {
          return this._sampleSize_BackingField;
        }
        set
        {
          this._sampleSize_BackingField = value;
        }
      }

      public bool? volume
      {
        get
        {
          return this._volume_BackingField;
        }
        set
        {
          this._volume_BackingField = value;
        }
      }

      public bool? width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MessageEventInit : dom.EventInit
    {
      private string _channel_BackingField;
      private object _data_BackingField;
      private string _lastEventId_BackingField;
      private string _origin_BackingField;
      private dom.MessagePort[] _ports_BackingField;
      private dom.Window _source_BackingField;

      public string channel
      {
        get
        {
          return this._channel_BackingField;
        }
        set
        {
          this._channel_BackingField = value;
        }
      }

      public object data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public string lastEventId
      {
        get
        {
          return this._lastEventId_BackingField;
        }
        set
        {
          this._lastEventId_BackingField = value;
        }
      }

      public string origin
      {
        get
        {
          return this._origin_BackingField;
        }
        set
        {
          this._origin_BackingField = value;
        }
      }

      public dom.MessagePort[] ports
      {
        get
        {
          return this._ports_BackingField;
        }
        set
        {
          this._ports_BackingField = value;
        }
      }

      public dom.Window source
      {
        get
        {
          return this._source_BackingField;
        }
        set
        {
          this._source_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MouseEventInit : dom.EventModifierInit
    {
      private short? _button_BackingField;
      private ushort? _buttons_BackingField;
      private int? _clientX_BackingField;
      private int? _clientY_BackingField;
      private dom.EventTarget _relatedTarget_BackingField;
      private int? _screenX_BackingField;
      private int? _screenY_BackingField;

      public short? button
      {
        get
        {
          return this._button_BackingField;
        }
        set
        {
          this._button_BackingField = value;
        }
      }

      public ushort? buttons
      {
        get
        {
          return this._buttons_BackingField;
        }
        set
        {
          this._buttons_BackingField = value;
        }
      }

      public int? clientX
      {
        get
        {
          return this._clientX_BackingField;
        }
        set
        {
          this._clientX_BackingField = value;
        }
      }

      public int? clientY
      {
        get
        {
          return this._clientY_BackingField;
        }
        set
        {
          this._clientY_BackingField = value;
        }
      }

      public dom.EventTarget relatedTarget
      {
        get
        {
          return this._relatedTarget_BackingField;
        }
        set
        {
          this._relatedTarget_BackingField = value;
        }
      }

      public int? screenX
      {
        get
        {
          return this._screenX_BackingField;
        }
        set
        {
          this._screenX_BackingField = value;
        }
      }

      public int? screenY
      {
        get
        {
          return this._screenY_BackingField;
        }
        set
        {
          this._screenY_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MsZoomToOptions : IObject
    {
      private string _animate_BackingField;
      private double? _contentX_BackingField;
      private double? _contentY_BackingField;
      private double? _scaleFactor_BackingField;
      private string _viewportX_BackingField;
      private string _viewportY_BackingField;

      public string animate
      {
        get
        {
          return this._animate_BackingField;
        }
        set
        {
          this._animate_BackingField = value;
        }
      }

      public double? contentX
      {
        get
        {
          return this._contentX_BackingField;
        }
        set
        {
          this._contentX_BackingField = value;
        }
      }

      public double? contentY
      {
        get
        {
          return this._contentY_BackingField;
        }
        set
        {
          this._contentY_BackingField = value;
        }
      }

      public double? scaleFactor
      {
        get
        {
          return this._scaleFactor_BackingField;
        }
        set
        {
          this._scaleFactor_BackingField = value;
        }
      }

      public string viewportX
      {
        get
        {
          return this._viewportX_BackingField;
        }
        set
        {
          this._viewportX_BackingField = value;
        }
      }

      public string viewportY
      {
        get
        {
          return this._viewportY_BackingField;
        }
        set
        {
          this._viewportY_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MutationObserverInit : IObject
    {
      private string[] _attributeFilter_BackingField;
      private bool? _attributeOldValue_BackingField;
      private bool? _attributes_BackingField;
      private bool? _characterData_BackingField;
      private bool? _characterDataOldValue_BackingField;
      private bool? _childList_BackingField;
      private bool? _subtree_BackingField;

      public string[] attributeFilter
      {
        get
        {
          return this._attributeFilter_BackingField;
        }
        set
        {
          this._attributeFilter_BackingField = value;
        }
      }

      public bool? attributeOldValue
      {
        get
        {
          return this._attributeOldValue_BackingField;
        }
        set
        {
          this._attributeOldValue_BackingField = value;
        }
      }

      public bool? attributes
      {
        get
        {
          return this._attributes_BackingField;
        }
        set
        {
          this._attributes_BackingField = value;
        }
      }

      public bool? characterData
      {
        get
        {
          return this._characterData_BackingField;
        }
        set
        {
          this._characterData_BackingField = value;
        }
      }

      public bool? characterDataOldValue
      {
        get
        {
          return this._characterDataOldValue_BackingField;
        }
        set
        {
          this._characterDataOldValue_BackingField = value;
        }
      }

      public bool? childList
      {
        get
        {
          return this._childList_BackingField;
        }
        set
        {
          this._childList_BackingField = value;
        }
      }

      public bool? subtree
      {
        get
        {
          return this._subtree_BackingField;
        }
        set
        {
          this._subtree_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class NotificationEventInit : dom.ExtendableEventInit
    {
      private string _action_BackingField;
      private dom.Notification _notification_BackingField;

      public string action
      {
        get
        {
          return this._action_BackingField;
        }
        set
        {
          this._action_BackingField = value;
        }
      }

      public dom.Notification notification
      {
        get
        {
          return this._notification_BackingField;
        }
        set
        {
          this._notification_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class NotificationOptions : IObject
    {
      private string _body_BackingField;
      private object _data_BackingField;
      private dom.NotificationDirection _dir_BackingField;
      private string _icon_BackingField;
      private string _lang_BackingField;
      private string _tag_BackingField;

      public string body
      {
        get
        {
          return this._body_BackingField;
        }
        set
        {
          this._body_BackingField = value;
        }
      }

      public object data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public dom.NotificationDirection dir
      {
        get
        {
          return this._dir_BackingField;
        }
        set
        {
          this._dir_BackingField = value;
        }
      }

      public string icon
      {
        get
        {
          return this._icon_BackingField;
        }
        set
        {
          this._icon_BackingField = value;
        }
      }

      public string lang
      {
        get
        {
          return this._lang_BackingField;
        }
        set
        {
          this._lang_BackingField = value;
        }
      }

      public string tag
      {
        get
        {
          return this._tag_BackingField;
        }
        set
        {
          this._tag_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ObjectURLOptions : IObject
    {
      private bool? _oneTimeOnly_BackingField;

      public bool? oneTimeOnly
      {
        get
        {
          return this._oneTimeOnly_BackingField;
        }
        set
        {
          this._oneTimeOnly_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class OfflineAudioCompletionEventInit : dom.EventInit
    {
      private dom.AudioBuffer _renderedBuffer_BackingField;

      public dom.AudioBuffer renderedBuffer
      {
        get
        {
          return this._renderedBuffer_BackingField;
        }
        set
        {
          this._renderedBuffer_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class OscillatorOptions : dom.AudioNodeOptions
    {
      private double? _detune_BackingField;
      private double? _frequency_BackingField;
      private dom.PeriodicWave _periodicWave_BackingField;
      private dom.OscillatorType _type_BackingField;

      public double? detune
      {
        get
        {
          return this._detune_BackingField;
        }
        set
        {
          this._detune_BackingField = value;
        }
      }

      public double? frequency
      {
        get
        {
          return this._frequency_BackingField;
        }
        set
        {
          this._frequency_BackingField = value;
        }
      }

      public dom.PeriodicWave periodicWave
      {
        get
        {
          return this._periodicWave_BackingField;
        }
        set
        {
          this._periodicWave_BackingField = value;
        }
      }

      public dom.OscillatorType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PannerOptions : dom.AudioNodeOptions
    {
      private double? _coneInnerAngle_BackingField;
      private double? _coneOuterAngle_BackingField;
      private double? _coneOuterGain_BackingField;
      private dom.DistanceModelType _distanceModel_BackingField;
      private double? _maxDistance_BackingField;
      private double? _orientationX_BackingField;
      private double? _orientationY_BackingField;
      private double? _orientationZ_BackingField;
      private dom.PanningModelType _panningModel_BackingField;
      private double? _positionX_BackingField;
      private double? _positionY_BackingField;
      private double? _positionZ_BackingField;
      private double? _refDistance_BackingField;
      private double? _rolloffFactor_BackingField;

      public double? coneInnerAngle
      {
        get
        {
          return this._coneInnerAngle_BackingField;
        }
        set
        {
          this._coneInnerAngle_BackingField = value;
        }
      }

      public double? coneOuterAngle
      {
        get
        {
          return this._coneOuterAngle_BackingField;
        }
        set
        {
          this._coneOuterAngle_BackingField = value;
        }
      }

      public double? coneOuterGain
      {
        get
        {
          return this._coneOuterGain_BackingField;
        }
        set
        {
          this._coneOuterGain_BackingField = value;
        }
      }

      public dom.DistanceModelType distanceModel
      {
        get
        {
          return this._distanceModel_BackingField;
        }
        set
        {
          this._distanceModel_BackingField = value;
        }
      }

      public double? maxDistance
      {
        get
        {
          return this._maxDistance_BackingField;
        }
        set
        {
          this._maxDistance_BackingField = value;
        }
      }

      public double? orientationX
      {
        get
        {
          return this._orientationX_BackingField;
        }
        set
        {
          this._orientationX_BackingField = value;
        }
      }

      public double? orientationY
      {
        get
        {
          return this._orientationY_BackingField;
        }
        set
        {
          this._orientationY_BackingField = value;
        }
      }

      public double? orientationZ
      {
        get
        {
          return this._orientationZ_BackingField;
        }
        set
        {
          this._orientationZ_BackingField = value;
        }
      }

      public dom.PanningModelType panningModel
      {
        get
        {
          return this._panningModel_BackingField;
        }
        set
        {
          this._panningModel_BackingField = value;
        }
      }

      public double? positionX
      {
        get
        {
          return this._positionX_BackingField;
        }
        set
        {
          this._positionX_BackingField = value;
        }
      }

      public double? positionY
      {
        get
        {
          return this._positionY_BackingField;
        }
        set
        {
          this._positionY_BackingField = value;
        }
      }

      public double? positionZ
      {
        get
        {
          return this._positionZ_BackingField;
        }
        set
        {
          this._positionZ_BackingField = value;
        }
      }

      public double? refDistance
      {
        get
        {
          return this._refDistance_BackingField;
        }
        set
        {
          this._refDistance_BackingField = value;
        }
      }

      public double? rolloffFactor
      {
        get
        {
          return this._rolloffFactor_BackingField;
        }
        set
        {
          this._rolloffFactor_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentCurrencyAmount : IObject
    {
      private string _currency_BackingField;
      private string _currencySystem_BackingField;
      private string _value_BackingField;

      public string currency
      {
        get
        {
          return this._currency_BackingField;
        }
        set
        {
          this._currency_BackingField = value;
        }
      }

      public string currencySystem
      {
        get
        {
          return this._currencySystem_BackingField;
        }
        set
        {
          this._currencySystem_BackingField = value;
        }
      }

      public string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentDetailsBase : IObject
    {
      private dom.PaymentItem[] _displayItems_BackingField;
      private dom.PaymentDetailsModifier[] _modifiers_BackingField;
      private dom.PaymentShippingOption[] _shippingOptions_BackingField;

      public dom.PaymentItem[] displayItems
      {
        get
        {
          return this._displayItems_BackingField;
        }
        set
        {
          this._displayItems_BackingField = value;
        }
      }

      public dom.PaymentDetailsModifier[] modifiers
      {
        get
        {
          return this._modifiers_BackingField;
        }
        set
        {
          this._modifiers_BackingField = value;
        }
      }

      public dom.PaymentShippingOption[] shippingOptions
      {
        get
        {
          return this._shippingOptions_BackingField;
        }
        set
        {
          this._shippingOptions_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentDetailsInit : dom.PaymentDetailsBase
    {
      private string _id_BackingField;
      private dom.PaymentItem _total_BackingField;

      public string id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public dom.PaymentItem total
      {
        get
        {
          return this._total_BackingField;
        }
        set
        {
          this._total_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentDetailsModifier : IObject
    {
      private dom.PaymentItem[] _additionalDisplayItems_BackingField;
      private object _data_BackingField;
      private Union<string, string[]> _supportedMethods_BackingField;
      private dom.PaymentItem _total_BackingField;

      public dom.PaymentItem[] additionalDisplayItems
      {
        get
        {
          return this._additionalDisplayItems_BackingField;
        }
        set
        {
          this._additionalDisplayItems_BackingField = value;
        }
      }

      public object data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public Union<string, string[]> supportedMethods
      {
        get
        {
          return this._supportedMethods_BackingField;
        }
        set
        {
          this._supportedMethods_BackingField = value;
        }
      }

      public dom.PaymentItem total
      {
        get
        {
          return this._total_BackingField;
        }
        set
        {
          this._total_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentDetailsUpdate : dom.PaymentDetailsBase
    {
      private string _error_BackingField;
      private dom.PaymentItem _total_BackingField;

      public string error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.PaymentItem total
      {
        get
        {
          return this._total_BackingField;
        }
        set
        {
          this._total_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentItem : IObject
    {
      private dom.PaymentCurrencyAmount _amount_BackingField;
      private string _label_BackingField;
      private bool? _pending_BackingField;

      public dom.PaymentCurrencyAmount amount
      {
        get
        {
          return this._amount_BackingField;
        }
        set
        {
          this._amount_BackingField = value;
        }
      }

      public string label
      {
        get
        {
          return this._label_BackingField;
        }
        set
        {
          this._label_BackingField = value;
        }
      }

      public bool? pending
      {
        get
        {
          return this._pending_BackingField;
        }
        set
        {
          this._pending_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentMethodData : IObject
    {
      private object _data_BackingField;
      private Union<string, string[]> _supportedMethods_BackingField;

      public object data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public Union<string, string[]> supportedMethods
      {
        get
        {
          return this._supportedMethods_BackingField;
        }
        set
        {
          this._supportedMethods_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentOptions : IObject
    {
      private bool? _requestPayerEmail_BackingField;
      private bool? _requestPayerName_BackingField;
      private bool? _requestPayerPhone_BackingField;
      private bool? _requestShipping_BackingField;
      private string _shippingType_BackingField;

      public bool? requestPayerEmail
      {
        get
        {
          return this._requestPayerEmail_BackingField;
        }
        set
        {
          this._requestPayerEmail_BackingField = value;
        }
      }

      public bool? requestPayerName
      {
        get
        {
          return this._requestPayerName_BackingField;
        }
        set
        {
          this._requestPayerName_BackingField = value;
        }
      }

      public bool? requestPayerPhone
      {
        get
        {
          return this._requestPayerPhone_BackingField;
        }
        set
        {
          this._requestPayerPhone_BackingField = value;
        }
      }

      public bool? requestShipping
      {
        get
        {
          return this._requestShipping_BackingField;
        }
        set
        {
          this._requestShipping_BackingField = value;
        }
      }

      public string shippingType
      {
        get
        {
          return this._shippingType_BackingField;
        }
        set
        {
          this._shippingType_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentRequestUpdateEventInit : dom.EventInit
    {
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentShippingOption : IObject
    {
      private dom.PaymentCurrencyAmount _amount_BackingField;
      private string _id_BackingField;
      private string _label_BackingField;
      private bool? _selected_BackingField;

      public dom.PaymentCurrencyAmount amount
      {
        get
        {
          return this._amount_BackingField;
        }
        set
        {
          this._amount_BackingField = value;
        }
      }

      public string id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public string label
      {
        get
        {
          return this._label_BackingField;
        }
        set
        {
          this._label_BackingField = value;
        }
      }

      public bool? selected
      {
        get
        {
          return this._selected_BackingField;
        }
        set
        {
          this._selected_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class Pbkdf2Params : dom.Algorithm
    {
      private Union<string, dom.Algorithm> _hash_BackingField;
      private double _iterations_BackingField;
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> _salt_BackingField;

      public Union<string, dom.Algorithm> hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public double iterations
      {
        get
        {
          return this._iterations_BackingField;
        }
        set
        {
          this._iterations_BackingField = value;
        }
      }

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> salt
      {
        get
        {
          return this._salt_BackingField;
        }
        set
        {
          this._salt_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PeriodicWaveConstraints : IObject
    {
      private bool? _disableNormalization_BackingField;

      public bool? disableNormalization
      {
        get
        {
          return this._disableNormalization_BackingField;
        }
        set
        {
          this._disableNormalization_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PeriodicWaveOptions : dom.PeriodicWaveConstraints
    {
      private double[] _imag_BackingField;
      private double[] _real_BackingField;

      public double[] imag
      {
        get
        {
          return this._imag_BackingField;
        }
        set
        {
          this._imag_BackingField = value;
        }
      }

      public double[] real
      {
        get
        {
          return this._real_BackingField;
        }
        set
        {
          this._real_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PointerEventInit : dom.MouseEventInit
    {
      private double? _height_BackingField;
      private bool? _isPrimary_BackingField;
      private double? _pointerId_BackingField;
      private string _pointerType_BackingField;
      private double? _pressure_BackingField;
      private double? _tiltX_BackingField;
      private double? _tiltY_BackingField;
      private double? _width_BackingField;

      public double? height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public bool? isPrimary
      {
        get
        {
          return this._isPrimary_BackingField;
        }
        set
        {
          this._isPrimary_BackingField = value;
        }
      }

      public double? pointerId
      {
        get
        {
          return this._pointerId_BackingField;
        }
        set
        {
          this._pointerId_BackingField = value;
        }
      }

      public string pointerType
      {
        get
        {
          return this._pointerType_BackingField;
        }
        set
        {
          this._pointerType_BackingField = value;
        }
      }

      public double? pressure
      {
        get
        {
          return this._pressure_BackingField;
        }
        set
        {
          this._pressure_BackingField = value;
        }
      }

      public double? tiltX
      {
        get
        {
          return this._tiltX_BackingField;
        }
        set
        {
          this._tiltX_BackingField = value;
        }
      }

      public double? tiltY
      {
        get
        {
          return this._tiltY_BackingField;
        }
        set
        {
          this._tiltY_BackingField = value;
        }
      }

      public double? width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PopStateEventInit : dom.EventInit
    {
      private object _state_BackingField;

      public object state
      {
        get
        {
          return this._state_BackingField;
        }
        set
        {
          this._state_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PositionOptions : IObject
    {
      private bool? _enableHighAccuracy_BackingField;
      private double? _maximumAge_BackingField;
      private double? _timeout_BackingField;

      public bool? enableHighAccuracy
      {
        get
        {
          return this._enableHighAccuracy_BackingField;
        }
        set
        {
          this._enableHighAccuracy_BackingField = value;
        }
      }

      public double? maximumAge
      {
        get
        {
          return this._maximumAge_BackingField;
        }
        set
        {
          this._maximumAge_BackingField = value;
        }
      }

      public double? timeout
      {
        get
        {
          return this._timeout_BackingField;
        }
        set
        {
          this._timeout_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ProgressEventInit : dom.EventInit
    {
      private bool? _lengthComputable_BackingField;
      private ulong? _loaded_BackingField;
      private ulong? _total_BackingField;

      public bool? lengthComputable
      {
        get
        {
          return this._lengthComputable_BackingField;
        }
        set
        {
          this._lengthComputable_BackingField = value;
        }
      }

      public ulong? loaded
      {
        get
        {
          return this._loaded_BackingField;
        }
        set
        {
          this._loaded_BackingField = value;
        }
      }

      public ulong? total
      {
        get
        {
          return this._total_BackingField;
        }
        set
        {
          this._total_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PushEventInit : dom.ExtendableEventInit
    {
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, string, Null> _data_BackingField;

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, string, Null> data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PushSubscriptionChangeInit : dom.ExtendableEventInit
    {
      private dom.PushSubscription _newSubscription_BackingField;
      private dom.PushSubscription _oldSubscription_BackingField;

      public dom.PushSubscription newSubscription
      {
        get
        {
          return this._newSubscription_BackingField;
        }
        set
        {
          this._newSubscription_BackingField = value;
        }
      }

      public dom.PushSubscription oldSubscription
      {
        get
        {
          return this._oldSubscription_BackingField;
        }
        set
        {
          this._oldSubscription_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PushSubscriptionOptionsInit : IObject
    {
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, string, Null> _applicationServerKey_BackingField;
      private bool? _userVisibleOnly_BackingField;

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, string, Null> applicationServerKey
      {
        get
        {
          return this._applicationServerKey_BackingField;
        }
        set
        {
          this._applicationServerKey_BackingField = value;
        }
      }

      public bool? userVisibleOnly
      {
        get
        {
          return this._userVisibleOnly_BackingField;
        }
        set
        {
          this._userVisibleOnly_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class QueuingStrategy : IObject
    {
      private double? _highWaterMark_BackingField;
      private dom.WritableStreamChunkCallback _size_BackingField;

      public double? highWaterMark
      {
        get
        {
          return this._highWaterMark_BackingField;
        }
        set
        {
          this._highWaterMark_BackingField = value;
        }
      }

      public dom.WritableStreamChunkCallback size
      {
        get
        {
          return this._size_BackingField;
        }
        set
        {
          this._size_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCConfiguration : IObject
    {
      private dom.RTCBundlePolicy _bundlePolicy_BackingField;
      private dom.RTCIceServer[] _iceServers_BackingField;
      private dom.RTCIceTransportPolicy _iceTransportPolicy_BackingField;
      private string _peerIdentity_BackingField;

      public dom.RTCBundlePolicy bundlePolicy
      {
        get
        {
          return this._bundlePolicy_BackingField;
        }
        set
        {
          this._bundlePolicy_BackingField = value;
        }
      }

      public dom.RTCIceServer[] iceServers
      {
        get
        {
          return this._iceServers_BackingField;
        }
        set
        {
          this._iceServers_BackingField = value;
        }
      }

      public dom.RTCIceTransportPolicy iceTransportPolicy
      {
        get
        {
          return this._iceTransportPolicy_BackingField;
        }
        set
        {
          this._iceTransportPolicy_BackingField = value;
        }
      }

      public string peerIdentity
      {
        get
        {
          return this._peerIdentity_BackingField;
        }
        set
        {
          this._peerIdentity_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCDTMFToneChangeEventInit : dom.EventInit
    {
      private string _tone_BackingField;

      public string tone
      {
        get
        {
          return this._tone_BackingField;
        }
        set
        {
          this._tone_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCDtlsFingerprint : IObject
    {
      private string _algorithm_BackingField;
      private string _value_BackingField;

      public string algorithm
      {
        get
        {
          return this._algorithm_BackingField;
        }
        set
        {
          this._algorithm_BackingField = value;
        }
      }

      public string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCDtlsParameters : IObject
    {
      private dom.RTCDtlsFingerprint[] _fingerprints_BackingField;
      private dom.RTCDtlsRole _role_BackingField;

      public dom.RTCDtlsFingerprint[] fingerprints
      {
        get
        {
          return this._fingerprints_BackingField;
        }
        set
        {
          this._fingerprints_BackingField = value;
        }
      }

      public dom.RTCDtlsRole role
      {
        get
        {
          return this._role_BackingField;
        }
        set
        {
          this._role_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceCandidateAttributes : dom.RTCStats
    {
      private string _addressSourceUrl_BackingField;
      private dom.RTCStatsIceCandidateType _candidateType_BackingField;
      private string _ipAddress_BackingField;
      private double? _portNumber_BackingField;
      private double? _priority_BackingField;
      private string _transport_BackingField;

      public string addressSourceUrl
      {
        get
        {
          return this._addressSourceUrl_BackingField;
        }
        set
        {
          this._addressSourceUrl_BackingField = value;
        }
      }

      public dom.RTCStatsIceCandidateType candidateType
      {
        get
        {
          return this._candidateType_BackingField;
        }
        set
        {
          this._candidateType_BackingField = value;
        }
      }

      public string ipAddress
      {
        get
        {
          return this._ipAddress_BackingField;
        }
        set
        {
          this._ipAddress_BackingField = value;
        }
      }

      public double? portNumber
      {
        get
        {
          return this._portNumber_BackingField;
        }
        set
        {
          this._portNumber_BackingField = value;
        }
      }

      public double? priority
      {
        get
        {
          return this._priority_BackingField;
        }
        set
        {
          this._priority_BackingField = value;
        }
      }

      public string transport
      {
        get
        {
          return this._transport_BackingField;
        }
        set
        {
          this._transport_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceCandidateComplete : IObject
    {
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceCandidateDictionary : IObject
    {
      private string _foundation_BackingField;
      private string _ip_BackingField;
      private string _msMTurnSessionId_BackingField;
      private double? _port_BackingField;
      private double? _priority_BackingField;
      private dom.RTCIceProtocol _protocol_BackingField;
      private string _relatedAddress_BackingField;
      private double? _relatedPort_BackingField;
      private dom.RTCIceTcpCandidateType _tcpType_BackingField;
      private dom.RTCIceCandidateType _type_BackingField;

      public string foundation
      {
        get
        {
          return this._foundation_BackingField;
        }
        set
        {
          this._foundation_BackingField = value;
        }
      }

      public string ip
      {
        get
        {
          return this._ip_BackingField;
        }
        set
        {
          this._ip_BackingField = value;
        }
      }

      public string msMTurnSessionId
      {
        get
        {
          return this._msMTurnSessionId_BackingField;
        }
        set
        {
          this._msMTurnSessionId_BackingField = value;
        }
      }

      public double? port
      {
        get
        {
          return this._port_BackingField;
        }
        set
        {
          this._port_BackingField = value;
        }
      }

      public double? priority
      {
        get
        {
          return this._priority_BackingField;
        }
        set
        {
          this._priority_BackingField = value;
        }
      }

      public dom.RTCIceProtocol protocol
      {
        get
        {
          return this._protocol_BackingField;
        }
        set
        {
          this._protocol_BackingField = value;
        }
      }

      public string relatedAddress
      {
        get
        {
          return this._relatedAddress_BackingField;
        }
        set
        {
          this._relatedAddress_BackingField = value;
        }
      }

      public double? relatedPort
      {
        get
        {
          return this._relatedPort_BackingField;
        }
        set
        {
          this._relatedPort_BackingField = value;
        }
      }

      public dom.RTCIceTcpCandidateType tcpType
      {
        get
        {
          return this._tcpType_BackingField;
        }
        set
        {
          this._tcpType_BackingField = value;
        }
      }

      public dom.RTCIceCandidateType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceCandidateInit : IObject
    {
      private string _candidate_BackingField;
      private double? _sdpMLineIndex_BackingField;
      private string _sdpMid_BackingField;

      public string candidate
      {
        get
        {
          return this._candidate_BackingField;
        }
        set
        {
          this._candidate_BackingField = value;
        }
      }

      public double? sdpMLineIndex
      {
        get
        {
          return this._sdpMLineIndex_BackingField;
        }
        set
        {
          this._sdpMLineIndex_BackingField = value;
        }
      }

      public string sdpMid
      {
        get
        {
          return this._sdpMid_BackingField;
        }
        set
        {
          this._sdpMid_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceCandidatePair : IObject
    {
      private dom.RTCIceCandidateDictionary _local_BackingField;
      private dom.RTCIceCandidateDictionary _remote_BackingField;

      public dom.RTCIceCandidateDictionary local
      {
        get
        {
          return this._local_BackingField;
        }
        set
        {
          this._local_BackingField = value;
        }
      }

      public dom.RTCIceCandidateDictionary remote
      {
        get
        {
          return this._remote_BackingField;
        }
        set
        {
          this._remote_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceCandidatePairStats : dom.RTCStats
    {
      private double? _availableIncomingBitrate_BackingField;
      private double? _availableOutgoingBitrate_BackingField;
      private double? _bytesReceived_BackingField;
      private double? _bytesSent_BackingField;
      private string _localCandidateId_BackingField;
      private bool? _nominated_BackingField;
      private double? _priority_BackingField;
      private bool? _readable_BackingField;
      private string _remoteCandidateId_BackingField;
      private double? _roundTripTime_BackingField;
      private dom.RTCStatsIceCandidatePairState _state_BackingField;
      private string _transportId_BackingField;
      private bool? _writable_BackingField;

      public double? availableIncomingBitrate
      {
        get
        {
          return this._availableIncomingBitrate_BackingField;
        }
        set
        {
          this._availableIncomingBitrate_BackingField = value;
        }
      }

      public double? availableOutgoingBitrate
      {
        get
        {
          return this._availableOutgoingBitrate_BackingField;
        }
        set
        {
          this._availableOutgoingBitrate_BackingField = value;
        }
      }

      public double? bytesReceived
      {
        get
        {
          return this._bytesReceived_BackingField;
        }
        set
        {
          this._bytesReceived_BackingField = value;
        }
      }

      public double? bytesSent
      {
        get
        {
          return this._bytesSent_BackingField;
        }
        set
        {
          this._bytesSent_BackingField = value;
        }
      }

      public string localCandidateId
      {
        get
        {
          return this._localCandidateId_BackingField;
        }
        set
        {
          this._localCandidateId_BackingField = value;
        }
      }

      public bool? nominated
      {
        get
        {
          return this._nominated_BackingField;
        }
        set
        {
          this._nominated_BackingField = value;
        }
      }

      public double? priority
      {
        get
        {
          return this._priority_BackingField;
        }
        set
        {
          this._priority_BackingField = value;
        }
      }

      public bool? readable
      {
        get
        {
          return this._readable_BackingField;
        }
        set
        {
          this._readable_BackingField = value;
        }
      }

      public string remoteCandidateId
      {
        get
        {
          return this._remoteCandidateId_BackingField;
        }
        set
        {
          this._remoteCandidateId_BackingField = value;
        }
      }

      public double? roundTripTime
      {
        get
        {
          return this._roundTripTime_BackingField;
        }
        set
        {
          this._roundTripTime_BackingField = value;
        }
      }

      public dom.RTCStatsIceCandidatePairState state
      {
        get
        {
          return this._state_BackingField;
        }
        set
        {
          this._state_BackingField = value;
        }
      }

      public string transportId
      {
        get
        {
          return this._transportId_BackingField;
        }
        set
        {
          this._transportId_BackingField = value;
        }
      }

      public bool? writable
      {
        get
        {
          return this._writable_BackingField;
        }
        set
        {
          this._writable_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceGatherOptions : IObject
    {
      private dom.RTCIceGatherPolicy _gatherPolicy_BackingField;
      private dom.RTCIceServer[] _iceservers_BackingField;
      private dom.MSPortRange _portRange_BackingField;

      public dom.RTCIceGatherPolicy gatherPolicy
      {
        get
        {
          return this._gatherPolicy_BackingField;
        }
        set
        {
          this._gatherPolicy_BackingField = value;
        }
      }

      public dom.RTCIceServer[] iceservers
      {
        get
        {
          return this._iceservers_BackingField;
        }
        set
        {
          this._iceservers_BackingField = value;
        }
      }

      public dom.MSPortRange portRange
      {
        get
        {
          return this._portRange_BackingField;
        }
        set
        {
          this._portRange_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceParameters : IObject
    {
      private bool? _iceLite_BackingField;
      private string _password_BackingField;
      private string _usernameFragment_BackingField;

      public bool? iceLite
      {
        get
        {
          return this._iceLite_BackingField;
        }
        set
        {
          this._iceLite_BackingField = value;
        }
      }

      public string password
      {
        get
        {
          return this._password_BackingField;
        }
        set
        {
          this._password_BackingField = value;
        }
      }

      public string usernameFragment
      {
        get
        {
          return this._usernameFragment_BackingField;
        }
        set
        {
          this._usernameFragment_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceServer : IObject
    {
      private string _credential_BackingField;
      private object _urls_BackingField;
      private string _username_BackingField;

      public string credential
      {
        get
        {
          return this._credential_BackingField;
        }
        set
        {
          this._credential_BackingField = value;
        }
      }

      public object urls
      {
        get
        {
          return this._urls_BackingField;
        }
        set
        {
          this._urls_BackingField = value;
        }
      }

      public string username
      {
        get
        {
          return this._username_BackingField;
        }
        set
        {
          this._username_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCInboundRTPStreamStats : dom.RTCRTPStreamStats
    {
      private double? _bytesReceived_BackingField;
      private double? _fractionLost_BackingField;
      private double? _jitter_BackingField;
      private double? _packetsLost_BackingField;
      private double? _packetsReceived_BackingField;

      public double? bytesReceived
      {
        get
        {
          return this._bytesReceived_BackingField;
        }
        set
        {
          this._bytesReceived_BackingField = value;
        }
      }

      public double? fractionLost
      {
        get
        {
          return this._fractionLost_BackingField;
        }
        set
        {
          this._fractionLost_BackingField = value;
        }
      }

      public double? jitter
      {
        get
        {
          return this._jitter_BackingField;
        }
        set
        {
          this._jitter_BackingField = value;
        }
      }

      public double? packetsLost
      {
        get
        {
          return this._packetsLost_BackingField;
        }
        set
        {
          this._packetsLost_BackingField = value;
        }
      }

      public double? packetsReceived
      {
        get
        {
          return this._packetsReceived_BackingField;
        }
        set
        {
          this._packetsReceived_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCMediaStreamTrackStats : dom.RTCStats
    {
      private double? _audioLevel_BackingField;
      private double? _echoReturnLoss_BackingField;
      private double? _echoReturnLossEnhancement_BackingField;
      private double? _frameHeight_BackingField;
      private double? _frameWidth_BackingField;
      private double? _framesCorrupted_BackingField;
      private double? _framesDecoded_BackingField;
      private double? _framesDropped_BackingField;
      private double? _framesPerSecond_BackingField;
      private double? _framesReceived_BackingField;
      private double? _framesSent_BackingField;
      private bool? _remoteSource_BackingField;
      private string[] _ssrcIds_BackingField;
      private string _trackIdentifier_BackingField;

      public double? audioLevel
      {
        get
        {
          return this._audioLevel_BackingField;
        }
        set
        {
          this._audioLevel_BackingField = value;
        }
      }

      public double? echoReturnLoss
      {
        get
        {
          return this._echoReturnLoss_BackingField;
        }
        set
        {
          this._echoReturnLoss_BackingField = value;
        }
      }

      public double? echoReturnLossEnhancement
      {
        get
        {
          return this._echoReturnLossEnhancement_BackingField;
        }
        set
        {
          this._echoReturnLossEnhancement_BackingField = value;
        }
      }

      public double? frameHeight
      {
        get
        {
          return this._frameHeight_BackingField;
        }
        set
        {
          this._frameHeight_BackingField = value;
        }
      }

      public double? frameWidth
      {
        get
        {
          return this._frameWidth_BackingField;
        }
        set
        {
          this._frameWidth_BackingField = value;
        }
      }

      public double? framesCorrupted
      {
        get
        {
          return this._framesCorrupted_BackingField;
        }
        set
        {
          this._framesCorrupted_BackingField = value;
        }
      }

      public double? framesDecoded
      {
        get
        {
          return this._framesDecoded_BackingField;
        }
        set
        {
          this._framesDecoded_BackingField = value;
        }
      }

      public double? framesDropped
      {
        get
        {
          return this._framesDropped_BackingField;
        }
        set
        {
          this._framesDropped_BackingField = value;
        }
      }

      public double? framesPerSecond
      {
        get
        {
          return this._framesPerSecond_BackingField;
        }
        set
        {
          this._framesPerSecond_BackingField = value;
        }
      }

      public double? framesReceived
      {
        get
        {
          return this._framesReceived_BackingField;
        }
        set
        {
          this._framesReceived_BackingField = value;
        }
      }

      public double? framesSent
      {
        get
        {
          return this._framesSent_BackingField;
        }
        set
        {
          this._framesSent_BackingField = value;
        }
      }

      public bool? remoteSource
      {
        get
        {
          return this._remoteSource_BackingField;
        }
        set
        {
          this._remoteSource_BackingField = value;
        }
      }

      public string[] ssrcIds
      {
        get
        {
          return this._ssrcIds_BackingField;
        }
        set
        {
          this._ssrcIds_BackingField = value;
        }
      }

      public string trackIdentifier
      {
        get
        {
          return this._trackIdentifier_BackingField;
        }
        set
        {
          this._trackIdentifier_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCOfferOptions : IObject
    {
      private bool? _iceRestart_BackingField;
      private double? _offerToReceiveAudio_BackingField;
      private double? _offerToReceiveVideo_BackingField;
      private bool? _voiceActivityDetection_BackingField;

      public bool? iceRestart
      {
        get
        {
          return this._iceRestart_BackingField;
        }
        set
        {
          this._iceRestart_BackingField = value;
        }
      }

      public double? offerToReceiveAudio
      {
        get
        {
          return this._offerToReceiveAudio_BackingField;
        }
        set
        {
          this._offerToReceiveAudio_BackingField = value;
        }
      }

      public double? offerToReceiveVideo
      {
        get
        {
          return this._offerToReceiveVideo_BackingField;
        }
        set
        {
          this._offerToReceiveVideo_BackingField = value;
        }
      }

      public bool? voiceActivityDetection
      {
        get
        {
          return this._voiceActivityDetection_BackingField;
        }
        set
        {
          this._voiceActivityDetection_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCOutboundRTPStreamStats : dom.RTCRTPStreamStats
    {
      private double? _bytesSent_BackingField;
      private double? _packetsSent_BackingField;
      private double? _roundTripTime_BackingField;
      private double? _targetBitrate_BackingField;

      public double? bytesSent
      {
        get
        {
          return this._bytesSent_BackingField;
        }
        set
        {
          this._bytesSent_BackingField = value;
        }
      }

      public double? packetsSent
      {
        get
        {
          return this._packetsSent_BackingField;
        }
        set
        {
          this._packetsSent_BackingField = value;
        }
      }

      public double? roundTripTime
      {
        get
        {
          return this._roundTripTime_BackingField;
        }
        set
        {
          this._roundTripTime_BackingField = value;
        }
      }

      public double? targetBitrate
      {
        get
        {
          return this._targetBitrate_BackingField;
        }
        set
        {
          this._targetBitrate_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCPeerConnectionIceEventInit : dom.EventInit
    {
      private dom.RTCIceCandidate _candidate_BackingField;

      public dom.RTCIceCandidate candidate
      {
        get
        {
          return this._candidate_BackingField;
        }
        set
        {
          this._candidate_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRTPStreamStats : dom.RTCStats
    {
      private string _associateStatsId_BackingField;
      private string _codecId_BackingField;
      private double? _firCount_BackingField;
      private bool? _isRemote_BackingField;
      private string _mediaTrackId_BackingField;
      private string _mediaType_BackingField;
      private double? _nackCount_BackingField;
      private double? _pliCount_BackingField;
      private double? _sliCount_BackingField;
      private string _ssrc_BackingField;
      private string _transportId_BackingField;

      public string associateStatsId
      {
        get
        {
          return this._associateStatsId_BackingField;
        }
        set
        {
          this._associateStatsId_BackingField = value;
        }
      }

      public string codecId
      {
        get
        {
          return this._codecId_BackingField;
        }
        set
        {
          this._codecId_BackingField = value;
        }
      }

      public double? firCount
      {
        get
        {
          return this._firCount_BackingField;
        }
        set
        {
          this._firCount_BackingField = value;
        }
      }

      public bool? isRemote
      {
        get
        {
          return this._isRemote_BackingField;
        }
        set
        {
          this._isRemote_BackingField = value;
        }
      }

      public string mediaTrackId
      {
        get
        {
          return this._mediaTrackId_BackingField;
        }
        set
        {
          this._mediaTrackId_BackingField = value;
        }
      }

      public string mediaType
      {
        get
        {
          return this._mediaType_BackingField;
        }
        set
        {
          this._mediaType_BackingField = value;
        }
      }

      public double? nackCount
      {
        get
        {
          return this._nackCount_BackingField;
        }
        set
        {
          this._nackCount_BackingField = value;
        }
      }

      public double? pliCount
      {
        get
        {
          return this._pliCount_BackingField;
        }
        set
        {
          this._pliCount_BackingField = value;
        }
      }

      public double? sliCount
      {
        get
        {
          return this._sliCount_BackingField;
        }
        set
        {
          this._sliCount_BackingField = value;
        }
      }

      public string ssrc
      {
        get
        {
          return this._ssrc_BackingField;
        }
        set
        {
          this._ssrc_BackingField = value;
        }
      }

      public string transportId
      {
        get
        {
          return this._transportId_BackingField;
        }
        set
        {
          this._transportId_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtcpFeedback : IObject
    {
      private string _parameter_BackingField;
      private string _type_BackingField;

      public string parameter
      {
        get
        {
          return this._parameter_BackingField;
        }
        set
        {
          this._parameter_BackingField = value;
        }
      }

      public string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtcpParameters : IObject
    {
      private string _cname_BackingField;
      private bool? _mux_BackingField;
      private bool? _reducedSize_BackingField;
      private double? _ssrc_BackingField;

      public string cname
      {
        get
        {
          return this._cname_BackingField;
        }
        set
        {
          this._cname_BackingField = value;
        }
      }

      public bool? mux
      {
        get
        {
          return this._mux_BackingField;
        }
        set
        {
          this._mux_BackingField = value;
        }
      }

      public bool? reducedSize
      {
        get
        {
          return this._reducedSize_BackingField;
        }
        set
        {
          this._reducedSize_BackingField = value;
        }
      }

      public double? ssrc
      {
        get
        {
          return this._ssrc_BackingField;
        }
        set
        {
          this._ssrc_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpCapabilities : IObject
    {
      private dom.RTCRtpCodecCapability[] _codecs_BackingField;
      private string[] _fecMechanisms_BackingField;
      private dom.RTCRtpHeaderExtension[] _headerExtensions_BackingField;

      public dom.RTCRtpCodecCapability[] codecs
      {
        get
        {
          return this._codecs_BackingField;
        }
        set
        {
          this._codecs_BackingField = value;
        }
      }

      public string[] fecMechanisms
      {
        get
        {
          return this._fecMechanisms_BackingField;
        }
        set
        {
          this._fecMechanisms_BackingField = value;
        }
      }

      public dom.RTCRtpHeaderExtension[] headerExtensions
      {
        get
        {
          return this._headerExtensions_BackingField;
        }
        set
        {
          this._headerExtensions_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpCodecCapability : IObject
    {
      private double? _clockRate_BackingField;
      private string _kind_BackingField;
      private double? _maxSpatialLayers_BackingField;
      private double? _maxTemporalLayers_BackingField;
      private double? _maxptime_BackingField;
      private string _name_BackingField;
      private double? _numChannels_BackingField;
      private object _options_BackingField;
      private object _parameters_BackingField;
      private double? _preferredPayloadType_BackingField;
      private double? _ptime_BackingField;
      private dom.RTCRtcpFeedback[] _rtcpFeedback_BackingField;
      private bool? _svcMultiStreamSupport_BackingField;

      public double? clockRate
      {
        get
        {
          return this._clockRate_BackingField;
        }
        set
        {
          this._clockRate_BackingField = value;
        }
      }

      public string kind
      {
        get
        {
          return this._kind_BackingField;
        }
        set
        {
          this._kind_BackingField = value;
        }
      }

      public double? maxSpatialLayers
      {
        get
        {
          return this._maxSpatialLayers_BackingField;
        }
        set
        {
          this._maxSpatialLayers_BackingField = value;
        }
      }

      public double? maxTemporalLayers
      {
        get
        {
          return this._maxTemporalLayers_BackingField;
        }
        set
        {
          this._maxTemporalLayers_BackingField = value;
        }
      }

      public double? maxptime
      {
        get
        {
          return this._maxptime_BackingField;
        }
        set
        {
          this._maxptime_BackingField = value;
        }
      }

      public string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public double? numChannels
      {
        get
        {
          return this._numChannels_BackingField;
        }
        set
        {
          this._numChannels_BackingField = value;
        }
      }

      public object options
      {
        get
        {
          return this._options_BackingField;
        }
        set
        {
          this._options_BackingField = value;
        }
      }

      public object parameters
      {
        get
        {
          return this._parameters_BackingField;
        }
        set
        {
          this._parameters_BackingField = value;
        }
      }

      public double? preferredPayloadType
      {
        get
        {
          return this._preferredPayloadType_BackingField;
        }
        set
        {
          this._preferredPayloadType_BackingField = value;
        }
      }

      public double? ptime
      {
        get
        {
          return this._ptime_BackingField;
        }
        set
        {
          this._ptime_BackingField = value;
        }
      }

      public dom.RTCRtcpFeedback[] rtcpFeedback
      {
        get
        {
          return this._rtcpFeedback_BackingField;
        }
        set
        {
          this._rtcpFeedback_BackingField = value;
        }
      }

      public bool? svcMultiStreamSupport
      {
        get
        {
          return this._svcMultiStreamSupport_BackingField;
        }
        set
        {
          this._svcMultiStreamSupport_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpCodecParameters : IObject
    {
      private double? _clockRate_BackingField;
      private double? _maxptime_BackingField;
      private string _name_BackingField;
      private double? _numChannels_BackingField;
      private object _parameters_BackingField;
      private double? _payloadType_BackingField;
      private double? _ptime_BackingField;
      private dom.RTCRtcpFeedback[] _rtcpFeedback_BackingField;

      public double? clockRate
      {
        get
        {
          return this._clockRate_BackingField;
        }
        set
        {
          this._clockRate_BackingField = value;
        }
      }

      public double? maxptime
      {
        get
        {
          return this._maxptime_BackingField;
        }
        set
        {
          this._maxptime_BackingField = value;
        }
      }

      public string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public double? numChannels
      {
        get
        {
          return this._numChannels_BackingField;
        }
        set
        {
          this._numChannels_BackingField = value;
        }
      }

      public object parameters
      {
        get
        {
          return this._parameters_BackingField;
        }
        set
        {
          this._parameters_BackingField = value;
        }
      }

      public double? payloadType
      {
        get
        {
          return this._payloadType_BackingField;
        }
        set
        {
          this._payloadType_BackingField = value;
        }
      }

      public double? ptime
      {
        get
        {
          return this._ptime_BackingField;
        }
        set
        {
          this._ptime_BackingField = value;
        }
      }

      public dom.RTCRtcpFeedback[] rtcpFeedback
      {
        get
        {
          return this._rtcpFeedback_BackingField;
        }
        set
        {
          this._rtcpFeedback_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpContributingSource : IObject
    {
      private double? _audioLevel_BackingField;
      private double? _csrc_BackingField;
      private double? _timestamp_BackingField;

      public double? audioLevel
      {
        get
        {
          return this._audioLevel_BackingField;
        }
        set
        {
          this._audioLevel_BackingField = value;
        }
      }

      public double? csrc
      {
        get
        {
          return this._csrc_BackingField;
        }
        set
        {
          this._csrc_BackingField = value;
        }
      }

      public double? timestamp
      {
        get
        {
          return this._timestamp_BackingField;
        }
        set
        {
          this._timestamp_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpEncodingParameters : IObject
    {
      private bool? _active_BackingField;
      private double? _codecPayloadType_BackingField;
      private string[] _dependencyEncodingIds_BackingField;
      private string _encodingId_BackingField;
      private dom.RTCRtpFecParameters _fec_BackingField;
      private double? _framerateScale_BackingField;
      private double? _maxBitrate_BackingField;
      private double? _maxFramerate_BackingField;
      private double? _minQuality_BackingField;
      private double? _priority_BackingField;
      private double? _resolutionScale_BackingField;
      private dom.RTCRtpRtxParameters _rtx_BackingField;
      private double? _ssrc_BackingField;
      private dom.RTCSsrcRange _ssrcRange_BackingField;

      public bool? active
      {
        get
        {
          return this._active_BackingField;
        }
        set
        {
          this._active_BackingField = value;
        }
      }

      public double? codecPayloadType
      {
        get
        {
          return this._codecPayloadType_BackingField;
        }
        set
        {
          this._codecPayloadType_BackingField = value;
        }
      }

      public string[] dependencyEncodingIds
      {
        get
        {
          return this._dependencyEncodingIds_BackingField;
        }
        set
        {
          this._dependencyEncodingIds_BackingField = value;
        }
      }

      public string encodingId
      {
        get
        {
          return this._encodingId_BackingField;
        }
        set
        {
          this._encodingId_BackingField = value;
        }
      }

      public dom.RTCRtpFecParameters fec
      {
        get
        {
          return this._fec_BackingField;
        }
        set
        {
          this._fec_BackingField = value;
        }
      }

      public double? framerateScale
      {
        get
        {
          return this._framerateScale_BackingField;
        }
        set
        {
          this._framerateScale_BackingField = value;
        }
      }

      public double? maxBitrate
      {
        get
        {
          return this._maxBitrate_BackingField;
        }
        set
        {
          this._maxBitrate_BackingField = value;
        }
      }

      public double? maxFramerate
      {
        get
        {
          return this._maxFramerate_BackingField;
        }
        set
        {
          this._maxFramerate_BackingField = value;
        }
      }

      public double? minQuality
      {
        get
        {
          return this._minQuality_BackingField;
        }
        set
        {
          this._minQuality_BackingField = value;
        }
      }

      public double? priority
      {
        get
        {
          return this._priority_BackingField;
        }
        set
        {
          this._priority_BackingField = value;
        }
      }

      public double? resolutionScale
      {
        get
        {
          return this._resolutionScale_BackingField;
        }
        set
        {
          this._resolutionScale_BackingField = value;
        }
      }

      public dom.RTCRtpRtxParameters rtx
      {
        get
        {
          return this._rtx_BackingField;
        }
        set
        {
          this._rtx_BackingField = value;
        }
      }

      public double? ssrc
      {
        get
        {
          return this._ssrc_BackingField;
        }
        set
        {
          this._ssrc_BackingField = value;
        }
      }

      public dom.RTCSsrcRange ssrcRange
      {
        get
        {
          return this._ssrcRange_BackingField;
        }
        set
        {
          this._ssrcRange_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpFecParameters : IObject
    {
      private string _mechanism_BackingField;
      private double? _ssrc_BackingField;

      public string mechanism
      {
        get
        {
          return this._mechanism_BackingField;
        }
        set
        {
          this._mechanism_BackingField = value;
        }
      }

      public double? ssrc
      {
        get
        {
          return this._ssrc_BackingField;
        }
        set
        {
          this._ssrc_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpHeaderExtension : IObject
    {
      private string _kind_BackingField;
      private bool? _preferredEncrypt_BackingField;
      private double? _preferredId_BackingField;
      private string _uri_BackingField;

      public string kind
      {
        get
        {
          return this._kind_BackingField;
        }
        set
        {
          this._kind_BackingField = value;
        }
      }

      public bool? preferredEncrypt
      {
        get
        {
          return this._preferredEncrypt_BackingField;
        }
        set
        {
          this._preferredEncrypt_BackingField = value;
        }
      }

      public double? preferredId
      {
        get
        {
          return this._preferredId_BackingField;
        }
        set
        {
          this._preferredId_BackingField = value;
        }
      }

      public string uri
      {
        get
        {
          return this._uri_BackingField;
        }
        set
        {
          this._uri_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpHeaderExtensionParameters : IObject
    {
      private bool? _encrypt_BackingField;
      private double? _id_BackingField;
      private string _uri_BackingField;

      public bool? encrypt
      {
        get
        {
          return this._encrypt_BackingField;
        }
        set
        {
          this._encrypt_BackingField = value;
        }
      }

      public double? id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public string uri
      {
        get
        {
          return this._uri_BackingField;
        }
        set
        {
          this._uri_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpParameters : IObject
    {
      private dom.RTCRtpCodecParameters[] _codecs_BackingField;
      private dom.RTCDegradationPreference _degradationPreference_BackingField;
      private dom.RTCRtpEncodingParameters[] _encodings_BackingField;
      private dom.RTCRtpHeaderExtensionParameters[] _headerExtensions_BackingField;
      private string _muxId_BackingField;
      private dom.RTCRtcpParameters _rtcp_BackingField;

      public dom.RTCRtpCodecParameters[] codecs
      {
        get
        {
          return this._codecs_BackingField;
        }
        set
        {
          this._codecs_BackingField = value;
        }
      }

      public dom.RTCDegradationPreference degradationPreference
      {
        get
        {
          return this._degradationPreference_BackingField;
        }
        set
        {
          this._degradationPreference_BackingField = value;
        }
      }

      public dom.RTCRtpEncodingParameters[] encodings
      {
        get
        {
          return this._encodings_BackingField;
        }
        set
        {
          this._encodings_BackingField = value;
        }
      }

      public dom.RTCRtpHeaderExtensionParameters[] headerExtensions
      {
        get
        {
          return this._headerExtensions_BackingField;
        }
        set
        {
          this._headerExtensions_BackingField = value;
        }
      }

      public string muxId
      {
        get
        {
          return this._muxId_BackingField;
        }
        set
        {
          this._muxId_BackingField = value;
        }
      }

      public dom.RTCRtcpParameters rtcp
      {
        get
        {
          return this._rtcp_BackingField;
        }
        set
        {
          this._rtcp_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpRtxParameters : IObject
    {
      private double? _ssrc_BackingField;

      public double? ssrc
      {
        get
        {
          return this._ssrc_BackingField;
        }
        set
        {
          this._ssrc_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpUnhandled : IObject
    {
      private string _muxId_BackingField;
      private double? _payloadType_BackingField;
      private double? _ssrc_BackingField;

      public string muxId
      {
        get
        {
          return this._muxId_BackingField;
        }
        set
        {
          this._muxId_BackingField = value;
        }
      }

      public double? payloadType
      {
        get
        {
          return this._payloadType_BackingField;
        }
        set
        {
          this._payloadType_BackingField = value;
        }
      }

      public double? ssrc
      {
        get
        {
          return this._ssrc_BackingField;
        }
        set
        {
          this._ssrc_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCSessionDescriptionInit : IObject
    {
      private string _sdp_BackingField;
      private dom.RTCSdpType _type_BackingField;

      public string sdp
      {
        get
        {
          return this._sdp_BackingField;
        }
        set
        {
          this._sdp_BackingField = value;
        }
      }

      public dom.RTCSdpType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCSrtpKeyParam : IObject
    {
      private string _keyMethod_BackingField;
      private string _keySalt_BackingField;
      private string _lifetime_BackingField;
      private double? _mkiLength_BackingField;
      private double? _mkiValue_BackingField;

      public string keyMethod
      {
        get
        {
          return this._keyMethod_BackingField;
        }
        set
        {
          this._keyMethod_BackingField = value;
        }
      }

      public string keySalt
      {
        get
        {
          return this._keySalt_BackingField;
        }
        set
        {
          this._keySalt_BackingField = value;
        }
      }

      public string lifetime
      {
        get
        {
          return this._lifetime_BackingField;
        }
        set
        {
          this._lifetime_BackingField = value;
        }
      }

      public double? mkiLength
      {
        get
        {
          return this._mkiLength_BackingField;
        }
        set
        {
          this._mkiLength_BackingField = value;
        }
      }

      public double? mkiValue
      {
        get
        {
          return this._mkiValue_BackingField;
        }
        set
        {
          this._mkiValue_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCSrtpSdesParameters : IObject
    {
      private string _cryptoSuite_BackingField;
      private dom.RTCSrtpKeyParam[] _keyParams_BackingField;
      private string[] _sessionParams_BackingField;
      private double? _tag_BackingField;

      public string cryptoSuite
      {
        get
        {
          return this._cryptoSuite_BackingField;
        }
        set
        {
          this._cryptoSuite_BackingField = value;
        }
      }

      public dom.RTCSrtpKeyParam[] keyParams
      {
        get
        {
          return this._keyParams_BackingField;
        }
        set
        {
          this._keyParams_BackingField = value;
        }
      }

      public string[] sessionParams
      {
        get
        {
          return this._sessionParams_BackingField;
        }
        set
        {
          this._sessionParams_BackingField = value;
        }
      }

      public double? tag
      {
        get
        {
          return this._tag_BackingField;
        }
        set
        {
          this._tag_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCSsrcRange : IObject
    {
      private double? _max_BackingField;
      private double? _min_BackingField;

      public double? max
      {
        get
        {
          return this._max_BackingField;
        }
        set
        {
          this._max_BackingField = value;
        }
      }

      public double? min
      {
        get
        {
          return this._min_BackingField;
        }
        set
        {
          this._min_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCStats : IObject
    {
      private string _id_BackingField;
      private dom.MSStatsType _msType_BackingField;
      private double? _timestamp_BackingField;
      private dom.RTCStatsType _type_BackingField;

      public string id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public dom.MSStatsType msType
      {
        get
        {
          return this._msType_BackingField;
        }
        set
        {
          this._msType_BackingField = value;
        }
      }

      public double? timestamp
      {
        get
        {
          return this._timestamp_BackingField;
        }
        set
        {
          this._timestamp_BackingField = value;
        }
      }

      public dom.RTCStatsType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCStatsReport : IObject
    {
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCTransportStats : dom.RTCStats
    {
      private bool? _activeConnection_BackingField;
      private double? _bytesReceived_BackingField;
      private double? _bytesSent_BackingField;
      private string _localCertificateId_BackingField;
      private string _remoteCertificateId_BackingField;
      private string _rtcpTransportStatsId_BackingField;
      private string _selectedCandidatePairId_BackingField;

      public bool? activeConnection
      {
        get
        {
          return this._activeConnection_BackingField;
        }
        set
        {
          this._activeConnection_BackingField = value;
        }
      }

      public double? bytesReceived
      {
        get
        {
          return this._bytesReceived_BackingField;
        }
        set
        {
          this._bytesReceived_BackingField = value;
        }
      }

      public double? bytesSent
      {
        get
        {
          return this._bytesSent_BackingField;
        }
        set
        {
          this._bytesSent_BackingField = value;
        }
      }

      public string localCertificateId
      {
        get
        {
          return this._localCertificateId_BackingField;
        }
        set
        {
          this._localCertificateId_BackingField = value;
        }
      }

      public string remoteCertificateId
      {
        get
        {
          return this._remoteCertificateId_BackingField;
        }
        set
        {
          this._remoteCertificateId_BackingField = value;
        }
      }

      public string rtcpTransportStatsId
      {
        get
        {
          return this._rtcpTransportStatsId_BackingField;
        }
        set
        {
          this._rtcpTransportStatsId_BackingField = value;
        }
      }

      public string selectedCandidatePairId
      {
        get
        {
          return this._selectedCandidatePairId_BackingField;
        }
        set
        {
          this._selectedCandidatePairId_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RegistrationOptions : IObject
    {
      private string _scope_BackingField;

      public string scope
      {
        get
        {
          return this._scope_BackingField;
        }
        set
        {
          this._scope_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RequestInit : IObject
    {
      private Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> _body_BackingField;
      private dom.RequestCache _cache_BackingField;
      private dom.RequestCredentials _credentials_BackingField;
      private dom.HeadersInit _headers_BackingField;
      private string _integrity_BackingField;
      private bool? _keepalive_BackingField;
      private string _method_BackingField;
      private dom.RequestMode _mode_BackingField;
      private dom.RequestRedirect _redirect_BackingField;
      private string _referrer_BackingField;
      private dom.ReferrerPolicy _referrerPolicy_BackingField;
      private dom.AbortSignal _signal_BackingField;
      private object _window_BackingField;

      public Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body
      {
        get
        {
          return this._body_BackingField;
        }
        set
        {
          this._body_BackingField = value;
        }
      }

      public dom.RequestCache cache
      {
        get
        {
          return this._cache_BackingField;
        }
        set
        {
          this._cache_BackingField = value;
        }
      }

      public dom.RequestCredentials credentials
      {
        get
        {
          return this._credentials_BackingField;
        }
        set
        {
          this._credentials_BackingField = value;
        }
      }

      public dom.HeadersInit headers
      {
        get
        {
          return this._headers_BackingField;
        }
        set
        {
          this._headers_BackingField = value;
        }
      }

      public string integrity
      {
        get
        {
          return this._integrity_BackingField;
        }
        set
        {
          this._integrity_BackingField = value;
        }
      }

      public bool? keepalive
      {
        get
        {
          return this._keepalive_BackingField;
        }
        set
        {
          this._keepalive_BackingField = value;
        }
      }

      public string method
      {
        get
        {
          return this._method_BackingField;
        }
        set
        {
          this._method_BackingField = value;
        }
      }

      public dom.RequestMode mode
      {
        get
        {
          return this._mode_BackingField;
        }
        set
        {
          this._mode_BackingField = value;
        }
      }

      public dom.RequestRedirect redirect
      {
        get
        {
          return this._redirect_BackingField;
        }
        set
        {
          this._redirect_BackingField = value;
        }
      }

      public string referrer
      {
        get
        {
          return this._referrer_BackingField;
        }
        set
        {
          this._referrer_BackingField = value;
        }
      }

      public dom.ReferrerPolicy referrerPolicy
      {
        get
        {
          return this._referrerPolicy_BackingField;
        }
        set
        {
          this._referrerPolicy_BackingField = value;
        }
      }

      public dom.AbortSignal signal
      {
        get
        {
          return this._signal_BackingField;
        }
        set
        {
          this._signal_BackingField = value;
        }
      }

      public object window
      {
        get
        {
          return this._window_BackingField;
        }
        set
        {
          this._window_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ResponseInit : IObject
    {
      private dom.HeadersInit _headers_BackingField;
      private ushort? _status_BackingField;
      private string _statusText_BackingField;

      public dom.HeadersInit headers
      {
        get
        {
          return this._headers_BackingField;
        }
        set
        {
          this._headers_BackingField = value;
        }
      }

      public ushort? status
      {
        get
        {
          return this._status_BackingField;
        }
        set
        {
          this._status_BackingField = value;
        }
      }

      public string statusText
      {
        get
        {
          return this._statusText_BackingField;
        }
        set
        {
          this._statusText_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RsaHashedImportParams : dom.Algorithm
    {
      private Union<string, dom.Algorithm> _hash_BackingField;

      public Union<string, dom.Algorithm> hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RsaHashedKeyAlgorithm : dom.RsaKeyAlgorithm
    {
      private dom.KeyAlgorithm _hash_BackingField;

      public dom.KeyAlgorithm hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RsaHashedKeyGenParams : dom.RsaKeyGenParams
    {
      private Union<string, dom.Algorithm> _hash_BackingField;

      public Union<string, dom.Algorithm> hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RsaKeyAlgorithm : dom.KeyAlgorithm
    {
      private double _modulusLength_BackingField;
      private es5.Uint8Array _publicExponent_BackingField;

      public double modulusLength
      {
        get
        {
          return this._modulusLength_BackingField;
        }
        set
        {
          this._modulusLength_BackingField = value;
        }
      }

      public es5.Uint8Array publicExponent
      {
        get
        {
          return this._publicExponent_BackingField;
        }
        set
        {
          this._publicExponent_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RsaKeyGenParams : dom.Algorithm
    {
      private double _modulusLength_BackingField;
      private es5.Uint8Array _publicExponent_BackingField;

      public double modulusLength
      {
        get
        {
          return this._modulusLength_BackingField;
        }
        set
        {
          this._modulusLength_BackingField = value;
        }
      }

      public es5.Uint8Array publicExponent
      {
        get
        {
          return this._publicExponent_BackingField;
        }
        set
        {
          this._publicExponent_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RsaOaepParams : dom.Algorithm
    {
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> _label_BackingField;

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> label
      {
        get
        {
          return this._label_BackingField;
        }
        set
        {
          this._label_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RsaOtherPrimesInfo : IObject
    {
      private string _d_BackingField;
      private string _r_BackingField;
      private string _t_BackingField;

      public string d
      {
        get
        {
          return this._d_BackingField;
        }
        set
        {
          this._d_BackingField = value;
        }
      }

      public string r
      {
        get
        {
          return this._r_BackingField;
        }
        set
        {
          this._r_BackingField = value;
        }
      }

      public string t
      {
        get
        {
          return this._t_BackingField;
        }
        set
        {
          this._t_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RsaPssParams : dom.Algorithm
    {
      private double _saltLength_BackingField;

      public double saltLength
      {
        get
        {
          return this._saltLength_BackingField;
        }
        set
        {
          this._saltLength_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ScopedCredentialDescriptor : IObject
    {
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> _id_BackingField;
      private dom.Transport[] _transports_BackingField;
      private dom.ScopedCredentialType _type_BackingField;

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public dom.Transport[] transports
      {
        get
        {
          return this._transports_BackingField;
        }
        set
        {
          this._transports_BackingField = value;
        }
      }

      public dom.ScopedCredentialType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ScopedCredentialOptions : IObject
    {
      private dom.ScopedCredentialDescriptor[] _excludeList_BackingField;
      private dom.WebAuthnExtensions _extensions_BackingField;
      private string _rpId_BackingField;
      private double? _timeoutSeconds_BackingField;

      public dom.ScopedCredentialDescriptor[] excludeList
      {
        get
        {
          return this._excludeList_BackingField;
        }
        set
        {
          this._excludeList_BackingField = value;
        }
      }

      public dom.WebAuthnExtensions extensions
      {
        get
        {
          return this._extensions_BackingField;
        }
        set
        {
          this._extensions_BackingField = value;
        }
      }

      public string rpId
      {
        get
        {
          return this._rpId_BackingField;
        }
        set
        {
          this._rpId_BackingField = value;
        }
      }

      public double? timeoutSeconds
      {
        get
        {
          return this._timeoutSeconds_BackingField;
        }
        set
        {
          this._timeoutSeconds_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ScopedCredentialParameters : IObject
    {
      private Union<string, dom.Algorithm> _algorithm_BackingField;
      private dom.ScopedCredentialType _type_BackingField;

      public Union<string, dom.Algorithm> algorithm
      {
        get
        {
          return this._algorithm_BackingField;
        }
        set
        {
          this._algorithm_BackingField = value;
        }
      }

      public dom.ScopedCredentialType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class SecurityPolicyViolationEventInit : dom.EventInit
    {
      private string _blockedURI_BackingField;
      private double? _columnNumber_BackingField;
      private string _documentURI_BackingField;
      private string _effectiveDirective_BackingField;
      private double? _lineNumber_BackingField;
      private string _originalPolicy_BackingField;
      private string _referrer_BackingField;
      private string _sourceFile_BackingField;
      private double? _statusCode_BackingField;
      private string _violatedDirective_BackingField;

      public string blockedURI
      {
        get
        {
          return this._blockedURI_BackingField;
        }
        set
        {
          this._blockedURI_BackingField = value;
        }
      }

      public double? columnNumber
      {
        get
        {
          return this._columnNumber_BackingField;
        }
        set
        {
          this._columnNumber_BackingField = value;
        }
      }

      public string documentURI
      {
        get
        {
          return this._documentURI_BackingField;
        }
        set
        {
          this._documentURI_BackingField = value;
        }
      }

      public string effectiveDirective
      {
        get
        {
          return this._effectiveDirective_BackingField;
        }
        set
        {
          this._effectiveDirective_BackingField = value;
        }
      }

      public double? lineNumber
      {
        get
        {
          return this._lineNumber_BackingField;
        }
        set
        {
          this._lineNumber_BackingField = value;
        }
      }

      public string originalPolicy
      {
        get
        {
          return this._originalPolicy_BackingField;
        }
        set
        {
          this._originalPolicy_BackingField = value;
        }
      }

      public string referrer
      {
        get
        {
          return this._referrer_BackingField;
        }
        set
        {
          this._referrer_BackingField = value;
        }
      }

      public string sourceFile
      {
        get
        {
          return this._sourceFile_BackingField;
        }
        set
        {
          this._sourceFile_BackingField = value;
        }
      }

      public double? statusCode
      {
        get
        {
          return this._statusCode_BackingField;
        }
        set
        {
          this._statusCode_BackingField = value;
        }
      }

      public string violatedDirective
      {
        get
        {
          return this._violatedDirective_BackingField;
        }
        set
        {
          this._violatedDirective_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ServiceWorkerMessageEventInit : dom.EventInit
    {
      private object _data_BackingField;
      private string _lastEventId_BackingField;
      private string _origin_BackingField;
      private dom.MessagePort[] _ports_BackingField;
      private Union<dom.ServiceWorker, dom.MessagePort, Null> _source_BackingField;

      public object data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public string lastEventId
      {
        get
        {
          return this._lastEventId_BackingField;
        }
        set
        {
          this._lastEventId_BackingField = value;
        }
      }

      public string origin
      {
        get
        {
          return this._origin_BackingField;
        }
        set
        {
          this._origin_BackingField = value;
        }
      }

      public dom.MessagePort[] ports
      {
        get
        {
          return this._ports_BackingField;
        }
        set
        {
          this._ports_BackingField = value;
        }
      }

      public Union<dom.ServiceWorker, dom.MessagePort, Null> source
      {
        get
        {
          return this._source_BackingField;
        }
        set
        {
          this._source_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class SpeechSynthesisEventInit : dom.EventInit
    {
      private double? _charIndex_BackingField;
      private double? _charLength_BackingField;
      private double? _elapsedTime_BackingField;
      private string _name_BackingField;
      private dom.SpeechSynthesisUtterance _utterance_BackingField;

      public double? charIndex
      {
        get
        {
          return this._charIndex_BackingField;
        }
        set
        {
          this._charIndex_BackingField = value;
        }
      }

      public double? charLength
      {
        get
        {
          return this._charLength_BackingField;
        }
        set
        {
          this._charLength_BackingField = value;
        }
      }

      public double? elapsedTime
      {
        get
        {
          return this._elapsedTime_BackingField;
        }
        set
        {
          this._elapsedTime_BackingField = value;
        }
      }

      public string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public dom.SpeechSynthesisUtterance utterance
      {
        get
        {
          return this._utterance_BackingField;
        }
        set
        {
          this._utterance_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class StereoPannerOptions : dom.AudioNodeOptions
    {
      private double? _pan_BackingField;

      public double? pan
      {
        get
        {
          return this._pan_BackingField;
        }
        set
        {
          this._pan_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class StoreExceptionsInformation : dom.ExceptionInformation
    {
      private string _detailURI_BackingField;
      private string _explanationString_BackingField;
      private string _siteName_BackingField;

      public string detailURI
      {
        get
        {
          return this._detailURI_BackingField;
        }
        set
        {
          this._detailURI_BackingField = value;
        }
      }

      public string explanationString
      {
        get
        {
          return this._explanationString_BackingField;
        }
        set
        {
          this._explanationString_BackingField = value;
        }
      }

      public string siteName
      {
        get
        {
          return this._siteName_BackingField;
        }
        set
        {
          this._siteName_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class StoreSiteSpecificExceptionsInformation : dom.StoreExceptionsInformation
    {
      private string[] _arrayOfDomainStrings_BackingField;

      public string[] arrayOfDomainStrings
      {
        get
        {
          return this._arrayOfDomainStrings_BackingField;
        }
        set
        {
          this._arrayOfDomainStrings_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class SyncEventInit : dom.ExtendableEventInit
    {
      private bool? _lastChance_BackingField;
      private string _tag_BackingField;

      public bool? lastChance
      {
        get
        {
          return this._lastChance_BackingField;
        }
        set
        {
          this._lastChance_BackingField = value;
        }
      }

      public string tag
      {
        get
        {
          return this._tag_BackingField;
        }
        set
        {
          this._tag_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class TextDecodeOptions : IObject
    {
      private bool? _stream_BackingField;

      public bool? stream
      {
        get
        {
          return this._stream_BackingField;
        }
        set
        {
          this._stream_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class TextDecoderOptions : IObject
    {
      private bool? _fatal_BackingField;
      private bool? _ignoreBOM_BackingField;

      public bool? fatal
      {
        get
        {
          return this._fatal_BackingField;
        }
        set
        {
          this._fatal_BackingField = value;
        }
      }

      public bool? ignoreBOM
      {
        get
        {
          return this._ignoreBOM_BackingField;
        }
        set
        {
          this._ignoreBOM_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class TrackEventInit : dom.EventInit
    {
      private Union<dom.VideoTrack, dom.AudioTrack, dom.TextTrack, Null> _track_BackingField;

      public Union<dom.VideoTrack, dom.AudioTrack, dom.TextTrack, Null> track
      {
        get
        {
          return this._track_BackingField;
        }
        set
        {
          this._track_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class TransitionEventInit : dom.EventInit
    {
      private double? _elapsedTime_BackingField;
      private string _propertyName_BackingField;

      public double? elapsedTime
      {
        get
        {
          return this._elapsedTime_BackingField;
        }
        set
        {
          this._elapsedTime_BackingField = value;
        }
      }

      public string propertyName
      {
        get
        {
          return this._propertyName_BackingField;
        }
        set
        {
          this._propertyName_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class UIEventInit : dom.EventInit
    {
      private int? _detail_BackingField;
      private dom.Window _view_BackingField;

      public int? detail
      {
        get
        {
          return this._detail_BackingField;
        }
        set
        {
          this._detail_BackingField = value;
        }
      }

      public dom.Window view
      {
        get
        {
          return this._view_BackingField;
        }
        set
        {
          this._view_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class UnderlyingSink : IObject
    {
      private dom.WritableStreamErrorCallback _abort_BackingField;
      private dom.WritableStreamDefaultControllerCallback _close_BackingField;
      private dom.WritableStreamDefaultControllerCallback _start_BackingField;
      private dom.WritableStreamChunkCallback _write_BackingField;

      public dom.WritableStreamErrorCallback abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      public dom.WritableStreamDefaultControllerCallback close
      {
        get
        {
          return this._close_BackingField;
        }
        set
        {
          this._close_BackingField = value;
        }
      }

      public dom.WritableStreamDefaultControllerCallback start
      {
        get
        {
          return this._start_BackingField;
        }
        set
        {
          this._start_BackingField = value;
        }
      }

      public dom.WritableStreamChunkCallback write
      {
        get
        {
          return this._write_BackingField;
        }
        set
        {
          this._write_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class VRDisplayEventInit : dom.EventInit
    {
      private dom.VRDisplay _display_BackingField;
      private dom.VRDisplayEventReason _reason_BackingField;

      public dom.VRDisplay display
      {
        get
        {
          return this._display_BackingField;
        }
        set
        {
          this._display_BackingField = value;
        }
      }

      public dom.VRDisplayEventReason reason
      {
        get
        {
          return this._reason_BackingField;
        }
        set
        {
          this._reason_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class VRLayer : IObject
    {
      private double[] _leftBounds_BackingField;
      private double[] _rightBounds_BackingField;
      private dom.HTMLCanvasElement _source_BackingField;

      public double[] leftBounds
      {
        get
        {
          return this._leftBounds_BackingField;
        }
        set
        {
          this._leftBounds_BackingField = value;
        }
      }

      public double[] rightBounds
      {
        get
        {
          return this._rightBounds_BackingField;
        }
        set
        {
          this._rightBounds_BackingField = value;
        }
      }

      public dom.HTMLCanvasElement source
      {
        get
        {
          return this._source_BackingField;
        }
        set
        {
          this._source_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class VRStageParameters : IObject
    {
      private es5.Float32Array _sittingToStandingTransform_BackingField;
      private double? _sizeX_BackingField;
      private double? _sizeY_BackingField;

      public es5.Float32Array sittingToStandingTransform
      {
        get
        {
          return this._sittingToStandingTransform_BackingField;
        }
        set
        {
          this._sittingToStandingTransform_BackingField = value;
        }
      }

      public double? sizeX
      {
        get
        {
          return this._sizeX_BackingField;
        }
        set
        {
          this._sizeX_BackingField = value;
        }
      }

      public double? sizeY
      {
        get
        {
          return this._sizeY_BackingField;
        }
        set
        {
          this._sizeY_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WaveShaperOptions : dom.AudioNodeOptions
    {
      private double[] _curve_BackingField;
      private dom.OverSampleType _oversample_BackingField;

      public double[] curve
      {
        get
        {
          return this._curve_BackingField;
        }
        set
        {
          this._curve_BackingField = value;
        }
      }

      public dom.OverSampleType oversample
      {
        get
        {
          return this._oversample_BackingField;
        }
        set
        {
          this._oversample_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WebAuthnExtensions : IObject
    {
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WebGLContextAttributes : IObject
    {
      private bool? _alpha_BackingField;
      private bool? _antialias_BackingField;
      private bool? _depth_BackingField;
      private bool? _failIfMajorPerformanceCaveat_BackingField;
      private bool? _premultipliedAlpha_BackingField;
      private bool? _preserveDrawingBuffer_BackingField;
      private bool? _stencil_BackingField;

      public bool? alpha
      {
        get
        {
          return this._alpha_BackingField;
        }
        set
        {
          this._alpha_BackingField = value;
        }
      }

      public bool? antialias
      {
        get
        {
          return this._antialias_BackingField;
        }
        set
        {
          this._antialias_BackingField = value;
        }
      }

      public bool? depth
      {
        get
        {
          return this._depth_BackingField;
        }
        set
        {
          this._depth_BackingField = value;
        }
      }

      public bool? failIfMajorPerformanceCaveat
      {
        get
        {
          return this._failIfMajorPerformanceCaveat_BackingField;
        }
        set
        {
          this._failIfMajorPerformanceCaveat_BackingField = value;
        }
      }

      public bool? premultipliedAlpha
      {
        get
        {
          return this._premultipliedAlpha_BackingField;
        }
        set
        {
          this._premultipliedAlpha_BackingField = value;
        }
      }

      public bool? preserveDrawingBuffer
      {
        get
        {
          return this._preserveDrawingBuffer_BackingField;
        }
        set
        {
          this._preserveDrawingBuffer_BackingField = value;
        }
      }

      public bool? stencil
      {
        get
        {
          return this._stencil_BackingField;
        }
        set
        {
          this._stencil_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WebGLContextEventInit : dom.EventInit
    {
      private string _statusMessage_BackingField;

      public string statusMessage
      {
        get
        {
          return this._statusMessage_BackingField;
        }
        set
        {
          this._statusMessage_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WheelEventInit : dom.MouseEventInit
    {
      private uint? _deltaMode_BackingField;
      private double? _deltaX_BackingField;
      private double? _deltaY_BackingField;
      private double? _deltaZ_BackingField;

      public uint? deltaMode
      {
        get
        {
          return this._deltaMode_BackingField;
        }
        set
        {
          this._deltaMode_BackingField = value;
        }
      }

      public double? deltaX
      {
        get
        {
          return this._deltaX_BackingField;
        }
        set
        {
          this._deltaX_BackingField = value;
        }
      }

      public double? deltaY
      {
        get
        {
          return this._deltaY_BackingField;
        }
        set
        {
          this._deltaY_BackingField = value;
        }
      }

      public double? deltaZ
      {
        get
        {
          return this._deltaZ_BackingField;
        }
        set
        {
          this._deltaZ_BackingField = value;
        }
      }
    }

    public delegate void EventListener(dom.Event evt);

    [CombinedClass]
    [FormerInterface]
    public class ANGLE_instanced_arrays : IObject
    {
      private static dom.ANGLE_instanced_arrays _prototype_BackingField;
      private static readonly double _VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE_Static_BackingField;
      private readonly double _VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE_BackingField;

      public static dom.ANGLE_instanced_arrays prototype
      {
        get
        {
          return dom.ANGLE_instanced_arrays._prototype_BackingField;
        }
        set
        {
          dom.ANGLE_instanced_arrays._prototype_BackingField = value;
        }
      }

      [Name("VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")]
      public static double VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE_Static
      {
        get
        {
          return dom.ANGLE_instanced_arrays._VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE_Static_BackingField;
        }
      }

      public virtual extern void drawArraysInstancedANGLE(
        double mode,
        double first,
        double count,
        double primcount);

      public virtual extern void drawElementsInstancedANGLE(
        double mode,
        double count,
        double type,
        double offset,
        double primcount);

      public virtual extern void vertexAttribDivisorANGLE(double index, double divisor);

      public virtual double VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE
      {
        get
        {
          return this._VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class AbortController : IObject
    {
      private static dom.AbortController _prototype_BackingField;
      private readonly dom.AbortSignal _signal_BackingField;

      public static dom.AbortController prototype
      {
        get
        {
          return dom.AbortController._prototype_BackingField;
        }
        set
        {
          dom.AbortController._prototype_BackingField = value;
        }
      }

      public virtual dom.AbortSignal signal
      {
        get
        {
          return this._signal_BackingField;
        }
      }

      public virtual extern void abort();
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AbortSignalEventMap : IObject
    {
      private dom.ProgressEvent _abort_BackingField;

      public dom.ProgressEvent abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"abort\"")]
        public static readonly KeyOf<dom.AbortSignalEventMap> abort;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class AbortSignal : dom.EventTarget
    {
      private static dom.AbortSignal _prototype_BackingField;
      private readonly bool _aborted_BackingField;
      private dom.AbortSignal.onabortFn _onabort_BackingField;

      public static dom.AbortSignal prototype
      {
        get
        {
          return dom.AbortSignal._prototype_BackingField;
        }
        set
        {
          dom.AbortSignal._prototype_BackingField = value;
        }
      }

      public virtual bool aborted
      {
        get
        {
          return this._aborted_BackingField;
        }
      }

      public virtual dom.AbortSignal.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbortSignal.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbortSignal.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbortSignal.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbortSignal.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbortSignal.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbortSignal.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbortSignal.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbortSignal.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onabortFn(dom.ProgressEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AbstractWorkerEventMap : IObject
    {
      private dom.ErrorEvent _error_BackingField;

      public dom.ErrorEvent error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"error\"")]
        public static readonly KeyOf<dom.AbstractWorkerEventMap> error;
      }
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class AbstractWorker : dom.AbstractWorker.Interface, IObject
    {
      private dom.AbstractWorker.onerrorFn _onerror_BackingField;

      public virtual dom.AbstractWorker.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void addEventListener(string type, dom.EventListener listener);

      public abstract void addEventListener(string type, dom.EventListenerObject listener);

      public abstract void addEventListener(string type, Action<dom.Event> listener);

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(string type, dom.EventListener listener, bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void removeEventListener(string type, dom.EventListener listener);

      public abstract void removeEventListener(string type, dom.EventListenerObject listener);

      public abstract void removeEventListener(string type, Action<dom.Event> listener);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      [IgnoreCast]
      [Name("AbstractWorker")]
      public interface Interface : IObject
      {
        dom.AbstractWorker.onerrorFn onerror { get; set; }

        [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(K type, dom.AbstractWorker.addEventListenerFn<K> listener);

        [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.AbstractWorker.addEventListenerFn<K> listener,
          Union<bool, dom.AddEventListenerOptions> options);

        [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.AbstractWorker.addEventListenerFn<K> listener,
          bool options);

        [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.AbstractWorker.addEventListenerFn<K> listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void addEventListener(string type, dom.EventListener listener);

        void addEventListener(string type, dom.EventListenerObject listener);

        void addEventListener(string type, Action<dom.Event> listener);

        void addEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<bool, dom.AddEventListenerOptions> options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListener listener, bool options);

        void addEventListener(
          string type,
          dom.EventListener listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListenerObject listener, bool options);

        void addEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.AddEventListenerOptions options);

        void addEventListener(
          string type,
          Action<dom.Event> listener,
          Union<bool, dom.AddEventListenerOptions> options);

        void addEventListener(string type, Action<dom.Event> listener, bool options);

        void addEventListener(
          string type,
          Action<dom.Event> listener,
          dom.AddEventListenerOptions options);

        [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.AbstractWorker.removeEventListenerFn<K> listener);

        [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.AbstractWorker.removeEventListenerFn<K> listener,
          Union<bool, dom.EventListenerOptions> options);

        [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.AbstractWorker.removeEventListenerFn<K> listener,
          bool options);

        [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.AbstractWorker.removeEventListenerFn<K> listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void removeEventListener(string type, dom.EventListener listener);

        void removeEventListener(string type, dom.EventListenerObject listener);

        void removeEventListener(string type, Action<dom.Event> listener);

        void removeEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<bool, dom.EventListenerOptions> options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListener listener, bool options);

        void removeEventListener(
          string type,
          dom.EventListener listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListenerObject listener, bool options);

        void removeEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.EventListenerOptions options);

        void removeEventListener(
          string type,
          Action<dom.Event> listener,
          Union<bool, dom.EventListenerOptions> options);

        void removeEventListener(string type, Action<dom.Event> listener, bool options);

        void removeEventListener(
          string type,
          Action<dom.Event> listener,
          dom.EventListenerOptions options);
      }

      [Generated]
      public delegate void onerrorFn(dom.ErrorEvent ev);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void addEventListenerFn<K>(object ev);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AesCfbParams : dom.Algorithm
    {
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> _iv_BackingField;

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> iv
      {
        get
        {
          return this._iv_BackingField;
        }
        set
        {
          this._iv_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AesCmacParams : dom.Algorithm
    {
      private double _length_BackingField;

      public double length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class AnalyserNode : dom.AudioNode
    {
      private static dom.AnalyserNode _prototype_BackingField;
      private double _fftSize_BackingField;
      private readonly double _frequencyBinCount_BackingField;
      private double _maxDecibels_BackingField;
      private double _minDecibels_BackingField;
      private double _smoothingTimeConstant_BackingField;

      public static dom.AnalyserNode prototype
      {
        get
        {
          return dom.AnalyserNode._prototype_BackingField;
        }
        set
        {
          dom.AnalyserNode._prototype_BackingField = value;
        }
      }

      public virtual double fftSize
      {
        get
        {
          return this._fftSize_BackingField;
        }
        set
        {
          this._fftSize_BackingField = value;
        }
      }

      public virtual double frequencyBinCount
      {
        get
        {
          return this._frequencyBinCount_BackingField;
        }
      }

      public virtual double maxDecibels
      {
        get
        {
          return this._maxDecibels_BackingField;
        }
        set
        {
          this._maxDecibels_BackingField = value;
        }
      }

      public virtual double minDecibels
      {
        get
        {
          return this._minDecibels_BackingField;
        }
        set
        {
          this._minDecibels_BackingField = value;
        }
      }

      public virtual double smoothingTimeConstant
      {
        get
        {
          return this._smoothingTimeConstant_BackingField;
        }
        set
        {
          this._smoothingTimeConstant_BackingField = value;
        }
      }

      public virtual extern void getByteFrequencyData(es5.Uint8Array array);

      public virtual extern void getByteTimeDomainData(es5.Uint8Array array);

      public virtual extern void getFloatFrequencyData(es5.Float32Array array);

      public virtual extern void getFloatTimeDomainData(es5.Float32Array array);
    }

    [CombinedClass]
    [FormerInterface]
    public class Animation : IObject
    {
      private static dom.Animation _prototype_BackingField;
      private double? _currentTime_BackingField;
      private dom.AnimationEffectReadOnly _effect_BackingField;
      private readonly es5.Promise<dom.Animation> _finished_BackingField;
      private string _id_BackingField;
      private readonly bool _pending_BackingField;
      private readonly dom.Literals.Options.playState _playState_BackingField;
      private double _playbackRate_BackingField;
      private readonly es5.Promise<dom.Animation> _ready_BackingField;
      private double _startTime_BackingField;
      private dom.AnimationTimeline _timeline_BackingField;
      private dom.Animation.oncancelFn _oncancel_BackingField;
      private dom.Animation.onfinishFn _onfinish_BackingField;

      public extern Animation();

      public extern Animation(dom.AnimationEffectReadOnly effect);

      public extern Animation(dom.AnimationEffectReadOnly effect, dom.AnimationTimeline timeline);

      public static dom.Animation prototype
      {
        get
        {
          return dom.Animation._prototype_BackingField;
        }
        set
        {
          dom.Animation._prototype_BackingField = value;
        }
      }

      public virtual double? currentTime
      {
        get
        {
          return this._currentTime_BackingField;
        }
        set
        {
          this._currentTime_BackingField = value;
        }
      }

      public virtual dom.AnimationEffectReadOnly effect
      {
        get
        {
          return this._effect_BackingField;
        }
        set
        {
          this._effect_BackingField = value;
        }
      }

      public virtual es5.Promise<dom.Animation> finished
      {
        get
        {
          return this._finished_BackingField;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public virtual bool pending
      {
        get
        {
          return this._pending_BackingField;
        }
      }

      public virtual dom.Literals.Options.playState playState
      {
        get
        {
          return this._playState_BackingField;
        }
      }

      public virtual double playbackRate
      {
        get
        {
          return this._playbackRate_BackingField;
        }
        set
        {
          this._playbackRate_BackingField = value;
        }
      }

      public virtual es5.Promise<dom.Animation> ready
      {
        get
        {
          return this._ready_BackingField;
        }
      }

      public virtual double startTime
      {
        get
        {
          return this._startTime_BackingField;
        }
        set
        {
          this._startTime_BackingField = value;
        }
      }

      public virtual dom.AnimationTimeline timeline
      {
        get
        {
          return this._timeline_BackingField;
        }
        set
        {
          this._timeline_BackingField = value;
        }
      }

      public virtual extern void cancel();

      public virtual extern void finish();

      public virtual dom.Animation.oncancelFn oncancel
      {
        get
        {
          return this._oncancel_BackingField;
        }
        set
        {
          this._oncancel_BackingField = value;
        }
      }

      public virtual dom.Animation.onfinishFn onfinish
      {
        get
        {
          return this._onfinish_BackingField;
        }
        set
        {
          this._onfinish_BackingField = value;
        }
      }

      public virtual extern void pause();

      public virtual extern void play();

      public virtual extern void reverse();

      [Generated]
      public delegate void oncancelFn(dom.AnimationPlaybackEvent ev);

      [Generated]
      public delegate void onfinishFn(dom.AnimationPlaybackEvent ev);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class AnimationEffectReadOnly : IObject
    {
      public abstract double timing { get; }

      public abstract dom.ComputedTimingProperties getComputedTiming();
    }

    [CombinedClass]
    [FormerInterface]
    public class AnimationEvent : dom.Event
    {
      private static dom.AnimationEvent _prototype_BackingField;
      private readonly string _animationName_BackingField;
      private readonly double _elapsedTime_BackingField;

      public extern AnimationEvent(string typeArg);

      public extern AnimationEvent(string typeArg, dom.AnimationEventInit eventInitDict);

      public static dom.AnimationEvent prototype
      {
        get
        {
          return dom.AnimationEvent._prototype_BackingField;
        }
        set
        {
          dom.AnimationEvent._prototype_BackingField = value;
        }
      }

      public virtual string animationName
      {
        get
        {
          return this._animationName_BackingField;
        }
      }

      public virtual double elapsedTime
      {
        get
        {
          return this._elapsedTime_BackingField;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public class AnimationKeyFrame : IObject
    {
      private Union<string, string[]> _easing_BackingField;
      private Union<double, Null, double?[]> _offset_BackingField;

      public virtual Union<string, string[]> easing
      {
        get
        {
          return this._easing_BackingField;
        }
        set
        {
          this._easing_BackingField = value;
        }
      }

      public virtual Union<double, Null, double?[]> offset
      {
        get
        {
          return this._offset_BackingField;
        }
        set
        {
          this._offset_BackingField = value;
        }
      }

      public virtual extern Union<string, double, double[], string[], Null, double?[], Undefined> this[
        string index] { get; set; }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AnimationOptions : IObject
    {
      private double? _delay_BackingField;
      private dom.Literals.Options.direction _direction_BackingField;
      private double? _duration_BackingField;
      private string _easing_BackingField;
      private double? _endDelay_BackingField;
      private dom.Literals.Options.fill _fill_BackingField;
      private string _id_BackingField;
      private double? _iterationStart_BackingField;
      private double? _iterations_BackingField;

      public double? delay
      {
        get
        {
          return this._delay_BackingField;
        }
        set
        {
          this._delay_BackingField = value;
        }
      }

      public dom.Literals.Options.direction direction
      {
        get
        {
          return this._direction_BackingField;
        }
        set
        {
          this._direction_BackingField = value;
        }
      }

      public double? duration
      {
        get
        {
          return this._duration_BackingField;
        }
        set
        {
          this._duration_BackingField = value;
        }
      }

      public string easing
      {
        get
        {
          return this._easing_BackingField;
        }
        set
        {
          this._easing_BackingField = value;
        }
      }

      public double? endDelay
      {
        get
        {
          return this._endDelay_BackingField;
        }
        set
        {
          this._endDelay_BackingField = value;
        }
      }

      public dom.Literals.Options.fill fill
      {
        get
        {
          return this._fill_BackingField;
        }
        set
        {
          this._fill_BackingField = value;
        }
      }

      public string id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public double? iterationStart
      {
        get
        {
          return this._iterationStart_BackingField;
        }
        set
        {
          this._iterationStart_BackingField = value;
        }
      }

      public double? iterations
      {
        get
        {
          return this._iterations_BackingField;
        }
        set
        {
          this._iterations_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class AnimationPlaybackEvent : dom.Event
    {
      private static dom.AnimationPlaybackEvent _prototype_BackingField;
      private readonly double? _currentTime_BackingField;
      private readonly double? _timelineTime_BackingField;

      public extern AnimationPlaybackEvent(string type);

      public extern AnimationPlaybackEvent(
        string type,
        dom.AnimationPlaybackEventInit eventInitDict);

      public static dom.AnimationPlaybackEvent prototype
      {
        get
        {
          return dom.AnimationPlaybackEvent._prototype_BackingField;
        }
        set
        {
          dom.AnimationPlaybackEvent._prototype_BackingField = value;
        }
      }

      public virtual double? currentTime
      {
        get
        {
          return this._currentTime_BackingField;
        }
      }

      public virtual double? timelineTime
      {
        get
        {
          return this._timelineTime_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AnimationPlaybackEventInit : dom.EventInit
    {
      private double? _currentTime_BackingField;
      private double? _timelineTime_BackingField;

      public double? currentTime
      {
        get
        {
          return this._currentTime_BackingField;
        }
        set
        {
          this._currentTime_BackingField = value;
        }
      }

      public double? timelineTime
      {
        get
        {
          return this._timelineTime_BackingField;
        }
        set
        {
          this._timelineTime_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AnimationTimeline : IObject
    {
      private readonly double? _currentTime_BackingField;

      public double? currentTime
      {
        get
        {
          return this._currentTime_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ApplicationCacheEventMap : IObject
    {
      private dom.Event _cached_BackingField;
      private dom.Event _checking_BackingField;
      private dom.Event _downloading_BackingField;
      private dom.Event _error_BackingField;
      private dom.Event _noupdate_BackingField;
      private dom.Event _obsolete_BackingField;
      private dom.ProgressEvent _progress_BackingField;
      private dom.Event _updateready_BackingField;

      public dom.Event cached
      {
        get
        {
          return this._cached_BackingField;
        }
        set
        {
          this._cached_BackingField = value;
        }
      }

      public dom.Event checking
      {
        get
        {
          return this._checking_BackingField;
        }
        set
        {
          this._checking_BackingField = value;
        }
      }

      public dom.Event downloading
      {
        get
        {
          return this._downloading_BackingField;
        }
        set
        {
          this._downloading_BackingField = value;
        }
      }

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.Event noupdate
      {
        get
        {
          return this._noupdate_BackingField;
        }
        set
        {
          this._noupdate_BackingField = value;
        }
      }

      public dom.Event obsolete
      {
        get
        {
          return this._obsolete_BackingField;
        }
        set
        {
          this._obsolete_BackingField = value;
        }
      }

      public dom.ProgressEvent progress
      {
        get
        {
          return this._progress_BackingField;
        }
        set
        {
          this._progress_BackingField = value;
        }
      }

      public dom.Event updateready
      {
        get
        {
          return this._updateready_BackingField;
        }
        set
        {
          this._updateready_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"cached\"")]
        public static readonly KeyOf<dom.ApplicationCacheEventMap> cached;
        [Template("\"checking\"")]
        public static readonly KeyOf<dom.ApplicationCacheEventMap> checking;
        [Template("\"downloading\"")]
        public static readonly KeyOf<dom.ApplicationCacheEventMap> downloading;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.ApplicationCacheEventMap> error;
        [Template("\"noupdate\"")]
        public static readonly KeyOf<dom.ApplicationCacheEventMap> noupdate;
        [Template("\"obsolete\"")]
        public static readonly KeyOf<dom.ApplicationCacheEventMap> obsolete;
        [Template("\"progress\"")]
        public static readonly KeyOf<dom.ApplicationCacheEventMap> progress;
        [Template("\"updateready\"")]
        public static readonly KeyOf<dom.ApplicationCacheEventMap> updateready;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ApplicationCache : dom.EventTarget
    {
      private static dom.ApplicationCache _prototype_BackingField;
      private static readonly ushort _CHECKING_Static_BackingField;
      private static readonly ushort _DOWNLOADING_Static_BackingField;
      private static readonly ushort _IDLE_Static_BackingField;
      private static readonly ushort _OBSOLETE_Static_BackingField;
      private static readonly ushort _UNCACHED_Static_BackingField;
      private static readonly ushort _UPDATEREADY_Static_BackingField;
      private dom.ApplicationCache.oncachedFn _oncached_BackingField;
      private dom.ApplicationCache.oncachedFn _onchecking_BackingField;
      private dom.ApplicationCache.oncachedFn _ondownloading_BackingField;
      private dom.ApplicationCache.oncachedFn _onerror_BackingField;
      private dom.ApplicationCache.oncachedFn _onnoupdate_BackingField;
      private dom.ApplicationCache.oncachedFn _onobsolete_BackingField;
      private dom.ApplicationCache.onprogressFn _onprogress_BackingField;
      private dom.ApplicationCache.oncachedFn _onupdateready_BackingField;
      private readonly ushort _status_BackingField;
      private readonly ushort _CHECKING_BackingField;
      private readonly ushort _DOWNLOADING_BackingField;
      private readonly ushort _IDLE_BackingField;
      private readonly ushort _OBSOLETE_BackingField;
      private readonly ushort _UNCACHED_BackingField;
      private readonly ushort _UPDATEREADY_BackingField;

      public static dom.ApplicationCache prototype
      {
        get
        {
          return dom.ApplicationCache._prototype_BackingField;
        }
        set
        {
          dom.ApplicationCache._prototype_BackingField = value;
        }
      }

      [Name("CHECKING")]
      public static ushort CHECKING_Static
      {
        get
        {
          return dom.ApplicationCache._CHECKING_Static_BackingField;
        }
      }

      [Name("DOWNLOADING")]
      public static ushort DOWNLOADING_Static
      {
        get
        {
          return dom.ApplicationCache._DOWNLOADING_Static_BackingField;
        }
      }

      [Name("IDLE")]
      public static ushort IDLE_Static
      {
        get
        {
          return dom.ApplicationCache._IDLE_Static_BackingField;
        }
      }

      [Name("OBSOLETE")]
      public static ushort OBSOLETE_Static
      {
        get
        {
          return dom.ApplicationCache._OBSOLETE_Static_BackingField;
        }
      }

      [Name("UNCACHED")]
      public static ushort UNCACHED_Static
      {
        get
        {
          return dom.ApplicationCache._UNCACHED_Static_BackingField;
        }
      }

      [Name("UPDATEREADY")]
      public static ushort UPDATEREADY_Static
      {
        get
        {
          return dom.ApplicationCache._UPDATEREADY_Static_BackingField;
        }
      }

      public virtual dom.ApplicationCache.oncachedFn oncached
      {
        get
        {
          return this._oncached_BackingField;
        }
        set
        {
          this._oncached_BackingField = value;
        }
      }

      public virtual dom.ApplicationCache.oncachedFn onchecking
      {
        get
        {
          return this._onchecking_BackingField;
        }
        set
        {
          this._onchecking_BackingField = value;
        }
      }

      public virtual dom.ApplicationCache.oncachedFn ondownloading
      {
        get
        {
          return this._ondownloading_BackingField;
        }
        set
        {
          this._ondownloading_BackingField = value;
        }
      }

      public virtual dom.ApplicationCache.oncachedFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.ApplicationCache.oncachedFn onnoupdate
      {
        get
        {
          return this._onnoupdate_BackingField;
        }
        set
        {
          this._onnoupdate_BackingField = value;
        }
      }

      public virtual dom.ApplicationCache.oncachedFn onobsolete
      {
        get
        {
          return this._onobsolete_BackingField;
        }
        set
        {
          this._onobsolete_BackingField = value;
        }
      }

      public virtual dom.ApplicationCache.onprogressFn onprogress
      {
        get
        {
          return this._onprogress_BackingField;
        }
        set
        {
          this._onprogress_BackingField = value;
        }
      }

      public virtual dom.ApplicationCache.oncachedFn onupdateready
      {
        get
        {
          return this._onupdateready_BackingField;
        }
        set
        {
          this._onupdateready_BackingField = value;
        }
      }

      public virtual ushort status
      {
        get
        {
          return this._status_BackingField;
        }
      }

      public virtual extern void abort();

      public virtual extern void swapCache();

      public virtual extern void update();

      public virtual ushort CHECKING
      {
        get
        {
          return this._CHECKING_BackingField;
        }
      }

      public virtual ushort DOWNLOADING
      {
        get
        {
          return this._DOWNLOADING_BackingField;
        }
      }

      public virtual ushort IDLE
      {
        get
        {
          return this._IDLE_BackingField;
        }
      }

      public virtual ushort OBSOLETE
      {
        get
        {
          return this._OBSOLETE_BackingField;
        }
      }

      public virtual ushort UNCACHED
      {
        get
        {
          return this._UNCACHED_BackingField;
        }
      }

      public virtual ushort UPDATEREADY
      {
        get
        {
          return this._UPDATEREADY_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ApplicationCache.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ApplicationCache.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ApplicationCache.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ApplicationCache.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ApplicationCache.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ApplicationCache.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ApplicationCache.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ApplicationCache.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void oncachedFn(dom.Event ev);

      [Generated]
      public delegate void onprogressFn(dom.ProgressEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AssignedNodesOptions : IObject
    {
      private bool? _flatten_BackingField;

      public bool? flatten
      {
        get
        {
          return this._flatten_BackingField;
        }
        set
        {
          this._flatten_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Attr : dom.Node
    {
      private static dom.Attr _prototype_BackingField;
      private readonly string _name_BackingField;
      private readonly dom.Element _ownerElement_BackingField;
      private readonly string _prefix_BackingField;
      private readonly bool _specified_BackingField;
      private string _value_BackingField;

      public static dom.Attr prototype
      {
        get
        {
          return dom.Attr._prototype_BackingField;
        }
        set
        {
          dom.Attr._prototype_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual dom.Element ownerElement
      {
        get
        {
          return this._ownerElement_BackingField;
        }
      }

      public virtual string prefix
      {
        get
        {
          return this._prefix_BackingField;
        }
      }

      public virtual bool specified
      {
        get
        {
          return this._specified_BackingField;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioBuffer : IObject
    {
      private static dom.AudioBuffer _prototype_BackingField;
      private readonly double _duration_BackingField;
      private readonly double _length_BackingField;
      private readonly double _numberOfChannels_BackingField;
      private readonly double _sampleRate_BackingField;

      public static dom.AudioBuffer prototype
      {
        get
        {
          return dom.AudioBuffer._prototype_BackingField;
        }
        set
        {
          dom.AudioBuffer._prototype_BackingField = value;
        }
      }

      public virtual double duration
      {
        get
        {
          return this._duration_BackingField;
        }
      }

      public virtual double length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual double numberOfChannels
      {
        get
        {
          return this._numberOfChannels_BackingField;
        }
      }

      public virtual double sampleRate
      {
        get
        {
          return this._sampleRate_BackingField;
        }
      }

      public virtual extern void copyFromChannel(es5.Float32Array destination, double channelNumber);

      public virtual extern void copyFromChannel(
        es5.Float32Array destination,
        double channelNumber,
        double startInChannel);

      public virtual extern void copyToChannel(es5.Float32Array source, double channelNumber);

      public virtual extern void copyToChannel(
        es5.Float32Array source,
        double channelNumber,
        double startInChannel);

      public virtual extern es5.Float32Array getChannelData(double channel);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioBufferSourceNodeEventMap : IObject
    {
      private dom.Event _ended_BackingField;

      public dom.Event ended
      {
        get
        {
          return this._ended_BackingField;
        }
        set
        {
          this._ended_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"ended\"")]
        public static readonly KeyOf<dom.AudioBufferSourceNodeEventMap> ended;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioBufferSourceNode : dom.AudioNode
    {
      private static dom.AudioBufferSourceNode _prototype_BackingField;
      private dom.AudioBuffer _buffer_BackingField;
      private readonly dom.AudioParam _detune_BackingField;
      private bool _loop_BackingField;
      private double _loopEnd_BackingField;
      private double _loopStart_BackingField;
      private dom.AudioBufferSourceNode.onendedFn _onended_BackingField;
      private readonly dom.AudioParam _playbackRate_BackingField;

      public static dom.AudioBufferSourceNode prototype
      {
        get
        {
          return dom.AudioBufferSourceNode._prototype_BackingField;
        }
        set
        {
          dom.AudioBufferSourceNode._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioBuffer buffer
      {
        get
        {
          return this._buffer_BackingField;
        }
        set
        {
          this._buffer_BackingField = value;
        }
      }

      public virtual dom.AudioParam detune
      {
        get
        {
          return this._detune_BackingField;
        }
      }

      public virtual bool loop
      {
        get
        {
          return this._loop_BackingField;
        }
        set
        {
          this._loop_BackingField = value;
        }
      }

      public virtual double loopEnd
      {
        get
        {
          return this._loopEnd_BackingField;
        }
        set
        {
          this._loopEnd_BackingField = value;
        }
      }

      public virtual double loopStart
      {
        get
        {
          return this._loopStart_BackingField;
        }
        set
        {
          this._loopStart_BackingField = value;
        }
      }

      public virtual dom.AudioBufferSourceNode.onendedFn onended
      {
        get
        {
          return this._onended_BackingField;
        }
        set
        {
          this._onended_BackingField = value;
        }
      }

      public virtual dom.AudioParam playbackRate
      {
        get
        {
          return this._playbackRate_BackingField;
        }
      }

      public virtual extern void start();

      public virtual extern void start(double when);

      public virtual extern void start(double when, double offset);

      public virtual extern void start(double when, double offset, double duration);

      public virtual extern void stop();

      public virtual extern void stop(double when);

      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AudioBufferSourceNode.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AudioBufferSourceNode.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AudioBufferSourceNode.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AudioBufferSourceNode.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AudioBufferSourceNode.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AudioBufferSourceNode.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AudioBufferSourceNode.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AudioBufferSourceNode.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onendedFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioContextEventMap : IObject
    {
      private dom.Event _statechange_BackingField;

      public dom.Event statechange
      {
        get
        {
          return this._statechange_BackingField;
        }
        set
        {
          this._statechange_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"statechange\"")]
        public static readonly KeyOf<dom.AudioContextEventMap> statechange;
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class AudioContextBase : dom.EventTarget
    {
      private dom.AudioContextBase.onstatechangeFn _onstatechange_BackingField;

      public abstract double currentTime { get; }

      public abstract dom.AudioDestinationNode destination { get; }

      public abstract dom.AudioListener listener { get; }

      public virtual dom.AudioContextBase.onstatechangeFn onstatechange
      {
        get
        {
          return this._onstatechange_BackingField;
        }
        set
        {
          this._onstatechange_BackingField = value;
        }
      }

      public abstract double sampleRate { get; }

      public abstract dom.AudioContextState state { get; }

      public abstract es5.Promise<H5.Primitive.Void> close();

      public abstract dom.AnalyserNode createAnalyser();

      public abstract dom.BiquadFilterNode createBiquadFilter();

      public abstract dom.AudioBuffer createBuffer(
        double numberOfChannels,
        double length,
        double sampleRate);

      public abstract dom.AudioBufferSourceNode createBufferSource();

      public abstract dom.ChannelMergerNode createChannelMerger();

      public abstract dom.ChannelMergerNode createChannelMerger(double numberOfInputs);

      public abstract dom.ChannelSplitterNode createChannelSplitter();

      public abstract dom.ChannelSplitterNode createChannelSplitter(double numberOfOutputs);

      public abstract dom.ConvolverNode createConvolver();

      public abstract dom.DelayNode createDelay();

      public abstract dom.DelayNode createDelay(double maxDelayTime);

      public abstract dom.DynamicsCompressorNode createDynamicsCompressor();

      public abstract dom.GainNode createGain();

      public abstract dom.IIRFilterNode createIIRFilter(double[] feedforward, double[] feedback);

      public abstract dom.MediaElementAudioSourceNode createMediaElementSource(
        dom.HTMLMediaElement mediaElement);

      public abstract dom.MediaStreamAudioSourceNode createMediaStreamSource(
        dom.MediaStream mediaStream);

      public abstract dom.OscillatorNode createOscillator();

      public abstract dom.PannerNode createPanner();

      public abstract dom.PeriodicWave createPeriodicWave(
        es5.Float32Array real,
        es5.Float32Array imag);

      public abstract dom.PeriodicWave createPeriodicWave(
        es5.Float32Array real,
        es5.Float32Array imag,
        dom.PeriodicWaveConstraints constraints);

      public abstract dom.ScriptProcessorNode createScriptProcessor();

      public abstract dom.ScriptProcessorNode createScriptProcessor(double bufferSize);

      public abstract dom.ScriptProcessorNode createScriptProcessor(
        double bufferSize,
        double numberOfInputChannels);

      public abstract dom.ScriptProcessorNode createScriptProcessor(
        double bufferSize,
        double numberOfInputChannels,
        double numberOfOutputChannels);

      public abstract dom.StereoPannerNode createStereoPanner();

      public abstract dom.WaveShaperNode createWaveShaper();

      public abstract es5.Promise<dom.AudioBuffer> decodeAudioData(es5.ArrayBuffer audioData);

      public abstract es5.Promise<dom.AudioBuffer> decodeAudioData(
        es5.ArrayBuffer audioData,
        dom.DecodeSuccessCallback successCallback);

      public abstract es5.Promise<dom.AudioBuffer> decodeAudioData(
        es5.ArrayBuffer audioData,
        dom.DecodeSuccessCallback successCallback,
        dom.DecodeErrorCallback errorCallback);

      public abstract es5.Promise<H5.Primitive.Void> resume();

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(string type, Action<dom.Event> listener);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(string type, Action<dom.Event> listener);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onstatechangeFn(dom.Event ev);

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void addEventListenerFn<K>(object ev);

      [Where("K", typeof (KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioContext : dom.AudioContextBase
    {
      private static dom.AudioContext _prototype_BackingField;

      public static dom.AudioContext prototype
      {
        get
        {
          return dom.AudioContext._prototype_BackingField;
        }
        set
        {
          dom.AudioContext._prototype_BackingField = value;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> suspend();

      public override extern double currentTime { get; }

      public override extern dom.AudioDestinationNode destination { get; }

      public override extern dom.AudioListener listener { get; }

      public override extern double sampleRate { get; }

      public override extern dom.AudioContextState state { get; }

      public override extern es5.Promise<H5.Primitive.Void> close();

      public override extern dom.AnalyserNode createAnalyser();

      public override extern dom.BiquadFilterNode createBiquadFilter();

      public override extern dom.AudioBuffer createBuffer(
        double numberOfChannels,
        double length,
        double sampleRate);

      public override extern dom.AudioBufferSourceNode createBufferSource();

      public override extern dom.ChannelMergerNode createChannelMerger();

      public override extern dom.ChannelMergerNode createChannelMerger(double numberOfInputs);

      public override extern dom.ChannelSplitterNode createChannelSplitter();

      public override extern dom.ChannelSplitterNode createChannelSplitter(double numberOfOutputs);

      public override extern dom.ConvolverNode createConvolver();

      public override extern dom.DelayNode createDelay();

      public override extern dom.DelayNode createDelay(double maxDelayTime);

      public override extern dom.DynamicsCompressorNode createDynamicsCompressor();

      public override extern dom.GainNode createGain();

      public override extern dom.IIRFilterNode createIIRFilter(
        double[] feedforward,
        double[] feedback);

      public override extern dom.MediaElementAudioSourceNode createMediaElementSource(
        dom.HTMLMediaElement mediaElement);

      public override extern dom.MediaStreamAudioSourceNode createMediaStreamSource(
        dom.MediaStream mediaStream);

      public override extern dom.OscillatorNode createOscillator();

      public override extern dom.PannerNode createPanner();

      public override extern dom.PeriodicWave createPeriodicWave(
        es5.Float32Array real,
        es5.Float32Array imag);

      public override extern dom.PeriodicWave createPeriodicWave(
        es5.Float32Array real,
        es5.Float32Array imag,
        dom.PeriodicWaveConstraints constraints);

      public override extern dom.ScriptProcessorNode createScriptProcessor();

      public override extern dom.ScriptProcessorNode createScriptProcessor(double bufferSize);

      public override extern dom.ScriptProcessorNode createScriptProcessor(
        double bufferSize,
        double numberOfInputChannels);

      public override extern dom.ScriptProcessorNode createScriptProcessor(
        double bufferSize,
        double numberOfInputChannels,
        double numberOfOutputChannels);

      public override extern dom.StereoPannerNode createStereoPanner();

      public override extern dom.WaveShaperNode createWaveShaper();

      public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
        es5.ArrayBuffer audioData);

      public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
        es5.ArrayBuffer audioData,
        dom.DecodeSuccessCallback successCallback);

      public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
        es5.ArrayBuffer audioData,
        dom.DecodeSuccessCallback successCallback,
        dom.DecodeErrorCallback errorCallback);

      public override extern es5.Promise<H5.Primitive.Void> resume();

      public override extern void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener);

      public override extern void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener,
        bool options);

      public override extern void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      public override extern void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener);

      public override extern void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener,
        bool options);

      public override extern void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(string type, Action<dom.Event> listener);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioDestinationNode : dom.AudioNode
    {
      private static dom.AudioDestinationNode _prototype_BackingField;
      private readonly double _maxChannelCount_BackingField;

      public static dom.AudioDestinationNode prototype
      {
        get
        {
          return dom.AudioDestinationNode._prototype_BackingField;
        }
        set
        {
          dom.AudioDestinationNode._prototype_BackingField = value;
        }
      }

      public virtual double maxChannelCount
      {
        get
        {
          return this._maxChannelCount_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioListener : IObject
    {
      private static dom.AudioListener _prototype_BackingField;
      private double _dopplerFactor_BackingField;
      private double _speedOfSound_BackingField;

      public static dom.AudioListener prototype
      {
        get
        {
          return dom.AudioListener._prototype_BackingField;
        }
        set
        {
          dom.AudioListener._prototype_BackingField = value;
        }
      }

      public virtual double dopplerFactor
      {
        get
        {
          return this._dopplerFactor_BackingField;
        }
        set
        {
          this._dopplerFactor_BackingField = value;
        }
      }

      public virtual double speedOfSound
      {
        get
        {
          return this._speedOfSound_BackingField;
        }
        set
        {
          this._speedOfSound_BackingField = value;
        }
      }

      public virtual extern void setOrientation(
        double x,
        double y,
        double z,
        double xUp,
        double yUp,
        double zUp);

      public virtual extern void setPosition(double x, double y, double z);

      public virtual extern void setVelocity(double x, double y, double z);
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioNode : dom.EventTarget
    {
      private static dom.AudioNode _prototype_BackingField;
      private double _channelCount_BackingField;
      private dom.ChannelCountMode _channelCountMode_BackingField;
      private dom.ChannelInterpretation _channelInterpretation_BackingField;
      private readonly dom.AudioContext _context_BackingField;
      private readonly double _numberOfInputs_BackingField;
      private readonly double _numberOfOutputs_BackingField;

      public static dom.AudioNode prototype
      {
        get
        {
          return dom.AudioNode._prototype_BackingField;
        }
        set
        {
          dom.AudioNode._prototype_BackingField = value;
        }
      }

      public virtual double channelCount
      {
        get
        {
          return this._channelCount_BackingField;
        }
        set
        {
          this._channelCount_BackingField = value;
        }
      }

      public virtual dom.ChannelCountMode channelCountMode
      {
        get
        {
          return this._channelCountMode_BackingField;
        }
        set
        {
          this._channelCountMode_BackingField = value;
        }
      }

      public virtual dom.ChannelInterpretation channelInterpretation
      {
        get
        {
          return this._channelInterpretation_BackingField;
        }
        set
        {
          this._channelInterpretation_BackingField = value;
        }
      }

      public virtual dom.AudioContext context
      {
        get
        {
          return this._context_BackingField;
        }
      }

      public virtual double numberOfInputs
      {
        get
        {
          return this._numberOfInputs_BackingField;
        }
      }

      public virtual double numberOfOutputs
      {
        get
        {
          return this._numberOfOutputs_BackingField;
        }
      }

      public virtual extern dom.AudioNode connect(dom.AudioNode destination);

      public virtual extern dom.AudioNode connect(dom.AudioNode destination, double output);

      public virtual extern dom.AudioNode connect(
        dom.AudioNode destination,
        double output,
        double input);

      public virtual extern void connect(dom.AudioParam destination);

      public virtual extern void connect(dom.AudioParam destination, double output);

      public virtual extern void disconnect();

      public virtual extern void disconnect(double output);

      public virtual extern void disconnect(dom.AudioNode destination);

      public virtual extern void disconnect(dom.AudioNode destination, double output);

      public virtual extern void disconnect(dom.AudioNode destination, double output, double input);

      public virtual extern void disconnect(dom.AudioParam destination);

      public virtual extern void disconnect(dom.AudioParam destination, double output);
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioParam : IObject
    {
      private static dom.AudioParam _prototype_BackingField;
      private readonly double _defaultValue_BackingField;
      private double _value_BackingField;

      public static dom.AudioParam prototype
      {
        get
        {
          return dom.AudioParam._prototype_BackingField;
        }
        set
        {
          dom.AudioParam._prototype_BackingField = value;
        }
      }

      public virtual double defaultValue
      {
        get
        {
          return this._defaultValue_BackingField;
        }
      }

      public virtual double value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      public virtual extern dom.AudioParam cancelScheduledValues(double cancelTime);

      public virtual extern dom.AudioParam exponentialRampToValueAtTime(
        double value,
        double endTime);

      public virtual extern dom.AudioParam linearRampToValueAtTime(double value, double endTime);

      public virtual extern dom.AudioParam setTargetAtTime(
        double target,
        double startTime,
        double timeConstant);

      public virtual extern dom.AudioParam setValueAtTime(double value, double startTime);

      public virtual extern dom.AudioParam setValueCurveAtTime(
        double[] values,
        double startTime,
        double duration);
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioProcessingEvent : dom.Event
    {
      private static dom.AudioProcessingEvent _prototype_BackingField;
      private readonly dom.AudioBuffer _inputBuffer_BackingField;
      private readonly dom.AudioBuffer _outputBuffer_BackingField;
      private readonly double _playbackTime_BackingField;

      public static dom.AudioProcessingEvent prototype
      {
        get
        {
          return dom.AudioProcessingEvent._prototype_BackingField;
        }
        set
        {
          dom.AudioProcessingEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioBuffer inputBuffer
      {
        get
        {
          return this._inputBuffer_BackingField;
        }
      }

      public virtual dom.AudioBuffer outputBuffer
      {
        get
        {
          return this._outputBuffer_BackingField;
        }
      }

      public virtual double playbackTime
      {
        get
        {
          return this._playbackTime_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioTrack : IObject
    {
      private static dom.AudioTrack _prototype_BackingField;
      private bool _enabled_BackingField;
      private readonly string _id_BackingField;
      private string _kind_BackingField;
      private readonly string _label_BackingField;
      private string _language_BackingField;
      private readonly dom.SourceBuffer _sourceBuffer_BackingField;

      public static dom.AudioTrack prototype
      {
        get
        {
          return dom.AudioTrack._prototype_BackingField;
        }
        set
        {
          dom.AudioTrack._prototype_BackingField = value;
        }
      }

      public virtual bool enabled
      {
        get
        {
          return this._enabled_BackingField;
        }
        set
        {
          this._enabled_BackingField = value;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual string kind
      {
        get
        {
          return this._kind_BackingField;
        }
        set
        {
          this._kind_BackingField = value;
        }
      }

      public virtual string label
      {
        get
        {
          return this._label_BackingField;
        }
      }

      public virtual string language
      {
        get
        {
          return this._language_BackingField;
        }
        set
        {
          this._language_BackingField = value;
        }
      }

      public virtual dom.SourceBuffer sourceBuffer
      {
        get
        {
          return this._sourceBuffer_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class AudioTrackListEventMap : IObject
    {
      private dom.TrackEvent _addtrack_BackingField;
      private dom.Event _change_BackingField;
      private dom.TrackEvent _removetrack_BackingField;

      public dom.TrackEvent addtrack
      {
        get
        {
          return this._addtrack_BackingField;
        }
        set
        {
          this._addtrack_BackingField = value;
        }
      }

      public dom.Event change
      {
        get
        {
          return this._change_BackingField;
        }
        set
        {
          this._change_BackingField = value;
        }
      }

      public dom.TrackEvent removetrack
      {
        get
        {
          return this._removetrack_BackingField;
        }
        set
        {
          this._removetrack_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"addtrack\"")]
        public static readonly KeyOf<dom.AudioTrackListEventMap> addtrack;
        [Template("\"change\"")]
        public static readonly KeyOf<dom.AudioTrackListEventMap> change;
        [Template("\"removetrack\"")]
        public static readonly KeyOf<dom.AudioTrackListEventMap> removetrack;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class AudioTrackList : dom.EventTarget
    {
      private static dom.AudioTrackList _prototype_BackingField;
      private readonly uint _length_BackingField;
      private dom.AudioTrackList.onaddtrackFn _onaddtrack_BackingField;
      private dom.AudioTrackList.onchangeFn _onchange_BackingField;
      private dom.AudioTrackList.onaddtrackFn _onremovetrack_BackingField;

      public static dom.AudioTrackList prototype
      {
        get
        {
          return dom.AudioTrackList._prototype_BackingField;
        }
        set
        {
          dom.AudioTrackList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual dom.AudioTrackList.onaddtrackFn onaddtrack
      {
        get
        {
          return this._onaddtrack_BackingField;
        }
        set
        {
          this._onaddtrack_BackingField = value;
        }
      }

      public virtual dom.AudioTrackList.onchangeFn onchange
      {
        get
        {
          return this._onchange_BackingField;
        }
        set
        {
          this._onchange_BackingField = value;
        }
      }

      public virtual dom.AudioTrackList.onaddtrackFn onremovetrack
      {
        get
        {
          return this._onremovetrack_BackingField;
        }
        set
        {
          this._onremovetrack_BackingField = value;
        }
      }

      public virtual extern dom.AudioTrack getTrackById(string id);

      public virtual extern dom.AudioTrack item(double index);

      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AudioTrackList.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AudioTrackList.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AudioTrackList.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AudioTrackList.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AudioTrackList.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AudioTrackList.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AudioTrackList.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AudioTrackList.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual extern dom.AudioTrack this[uint index] { get; set; }

      [Generated]
      public delegate void onaddtrackFn(dom.TrackEvent ev);

      [Generated]
      public delegate void onchangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class BarProp : IObject
    {
      private static dom.BarProp _prototype_BackingField;
      private readonly bool _visible_BackingField;

      public static dom.BarProp prototype
      {
        get
        {
          return dom.BarProp._prototype_BackingField;
        }
        set
        {
          dom.BarProp._prototype_BackingField = value;
        }
      }

      public virtual bool visible
      {
        get
        {
          return this._visible_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class BeforeUnloadEvent : dom.Event
    {
      private static dom.BeforeUnloadEvent _prototype_BackingField;
      private object _returnValue_BackingField;

      public static dom.BeforeUnloadEvent prototype
      {
        get
        {
          return dom.BeforeUnloadEvent._prototype_BackingField;
        }
        set
        {
          dom.BeforeUnloadEvent._prototype_BackingField = value;
        }
      }

      public virtual object returnValue
      {
        get
        {
          return this._returnValue_BackingField;
        }
        set
        {
          this._returnValue_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class BhxBrowser : IObject
    {
      private static dom.BhxBrowser _prototype_BackingField;
      private readonly dom.DOMException _lastError_BackingField;

      public static dom.BhxBrowser prototype
      {
        get
        {
          return dom.BhxBrowser._prototype_BackingField;
        }
        set
        {
          dom.BhxBrowser._prototype_BackingField = value;
        }
      }

      public virtual dom.DOMException lastError
      {
        get
        {
          return this._lastError_BackingField;
        }
      }

      public virtual extern bool checkMatchesGlobExpression(string pattern, string value);

      public virtual extern bool checkMatchesUriExpression(string pattern, string value);

      public virtual extern void clearLastError();

      public virtual extern double currentWindowId();

      public virtual extern void fireExtensionApiTelemetry(
        string functionName,
        bool isSucceeded,
        bool isSupported,
        string errorString);

      public virtual extern void genericFunction(double functionId, object destination);

      public virtual extern void genericFunction(
        double functionId,
        object destination,
        string parameters);

      public virtual extern void genericFunction(
        double functionId,
        object destination,
        string parameters,
        double callbackId);

      public virtual extern string genericSynchronousFunction(double functionId);

      public virtual extern string genericSynchronousFunction(double functionId, string parameters);

      public virtual extern string getExtensionId();

      public virtual extern object getThisAddress();

      public virtual extern void registerGenericFunctionCallbackHandler(es5.Function callbackHandler);

      public virtual extern void registerGenericFunctionCallbackHandler(Action callbackHandler);

      public virtual extern void registerGenericFunctionCallbackHandler(Func<object> callbackHandler);

      public virtual extern void registerGenericListenerHandler(es5.Function eventHandler);

      public virtual extern void registerGenericListenerHandler(Action eventHandler);

      public virtual extern void registerGenericListenerHandler(Func<object> eventHandler);

      public virtual extern void setLastError(string parameters);

      public virtual extern void webPlatformGenericFunction(object destination);

      public virtual extern void webPlatformGenericFunction(object destination, string parameters);

      public virtual extern void webPlatformGenericFunction(
        object destination,
        string parameters,
        double callbackId);
    }

    [CombinedClass]
    [FormerInterface]
    public class BiquadFilterNode : dom.AudioNode
    {
      private static dom.BiquadFilterNode _prototype_BackingField;
      private readonly dom.AudioParam _Q_BackingField;
      private readonly dom.AudioParam _detune_BackingField;
      private readonly dom.AudioParam _frequency_BackingField;
      private readonly dom.AudioParam _gain_BackingField;
      private dom.BiquadFilterType _type_BackingField;

      public static dom.BiquadFilterNode prototype
      {
        get
        {
          return dom.BiquadFilterNode._prototype_BackingField;
        }
        set
        {
          dom.BiquadFilterNode._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioParam Q
      {
        get
        {
          return this._Q_BackingField;
        }
      }

      public virtual dom.AudioParam detune
      {
        get
        {
          return this._detune_BackingField;
        }
      }

      public virtual dom.AudioParam frequency
      {
        get
        {
          return this._frequency_BackingField;
        }
      }

      public virtual dom.AudioParam gain
      {
        get
        {
          return this._gain_BackingField;
        }
      }

      public virtual dom.BiquadFilterType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      public virtual extern void getFrequencyResponse(
        es5.Float32Array frequencyHz,
        es5.Float32Array magResponse,
        es5.Float32Array phaseResponse);
    }

    [CombinedClass]
    [FormerInterface]
    public class Blob : IObject
    {
      private static dom.Blob _prototype_BackingField;
      private readonly ulong _size_BackingField;
      private readonly string _type_BackingField;

      public extern Blob();

      public extern Blob(object[] blobParts);

      public extern Blob(object[] blobParts, dom.BlobPropertyBag options);

      public static dom.Blob prototype
      {
        get
        {
          return dom.Blob._prototype_BackingField;
        }
        set
        {
          dom.Blob._prototype_BackingField = value;
        }
      }

      public virtual ulong size
      {
        get
        {
          return this._size_BackingField;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual extern void msClose();

      public virtual extern object msDetachStream();

      public virtual extern dom.Blob slice();

      public virtual extern dom.Blob slice(long start);

      public virtual extern dom.Blob slice(long start, long end);

      public virtual extern dom.Blob slice(long start, long end, string contentType);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class BlobPropertyBag : IObject
    {
      private string _endings_BackingField;
      private string _type_BackingField;

      public string endings
      {
        get
        {
          return this._endings_BackingField;
        }
        set
        {
          this._endings_BackingField = value;
        }
      }

      public string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class Body : IObject
    {
      public abstract bool bodyUsed { get; }

      public abstract es5.Promise<es5.ArrayBuffer> arrayBuffer();

      public abstract es5.Promise<dom.Blob> blob();

      public abstract es5.Promise<dom.FormData> formData();

      public abstract es5.Promise<object> json();

      public abstract es5.Promise<string> text();
    }

    [CombinedClass]
    [FormerInterface]
    public class BroadcastChannel : dom.EventTarget
    {
      private static dom.BroadcastChannel _prototype_BackingField;
      private readonly string _name_BackingField;
      private dom.BroadcastChannel.onmessageFn _onmessage_BackingField;
      private dom.BroadcastChannel.onmessageerrorFn _onmessageerror_BackingField;

      public extern BroadcastChannel(string name);

      public static dom.BroadcastChannel prototype
      {
        get
        {
          return dom.BroadcastChannel._prototype_BackingField;
        }
        set
        {
          dom.BroadcastChannel._prototype_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual dom.BroadcastChannel.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual dom.BroadcastChannel.onmessageerrorFn onmessageerror
      {
        get
        {
          return this._onmessageerror_BackingField;
        }
        set
        {
          this._onmessageerror_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.BroadcastChannel.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.BroadcastChannel.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.BroadcastChannel.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.BroadcastChannel.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void close();

      public virtual extern void postMessage(object message);

      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.BroadcastChannel.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.BroadcastChannel.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.BroadcastChannel.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.BroadcastChannel.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onmessageFn(dom.MessageEvent ev);

      [Generated]
      public delegate void onmessageerrorFn(dom.MessageEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class BroadcastChannelEventMap : IObject
    {
      private dom.MessageEvent _message_BackingField;
      private dom.MessageEvent _messageerror_BackingField;

      public dom.MessageEvent message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      public dom.MessageEvent messageerror
      {
        get
        {
          return this._messageerror_BackingField;
        }
        set
        {
          this._messageerror_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"message\"")]
        public static readonly KeyOf<dom.BroadcastChannelEventMap> message;
        [Template("\"messageerror\"")]
        public static readonly KeyOf<dom.BroadcastChannelEventMap> messageerror;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ByteLengthQueuingStrategy : IObject
    {
      private static dom.ByteLengthQueuingStrategy _prototype_BackingField;
      private double _highWaterMark_BackingField;

      public extern ByteLengthQueuingStrategy(dom.QueuingStrategy strategy);

      public static dom.ByteLengthQueuingStrategy prototype
      {
        get
        {
          return dom.ByteLengthQueuingStrategy._prototype_BackingField;
        }
        set
        {
          dom.ByteLengthQueuingStrategy._prototype_BackingField = value;
        }
      }

      public virtual double highWaterMark
      {
        get
        {
          return this._highWaterMark_BackingField;
        }
        set
        {
          this._highWaterMark_BackingField = value;
        }
      }

      public virtual extern double size();

      public virtual extern double size(object chunk);
    }

    [CombinedClass]
    [FormerInterface]
    public class CDATASection : dom.Text
    {
      private static dom.CDATASection _prototype_BackingField;

      public static dom.CDATASection prototype
      {
        get
        {
          return dom.CDATASection._prototype_BackingField;
        }
        set
        {
          dom.CDATASection._prototype_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class CSS : IObject
    {
      public abstract string escape(string value);

      public abstract bool supports(string property);

      public abstract bool supports(string property, string value);
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSConditionRule : dom.CSSGroupingRule
    {
      private static dom.CSSConditionRule _prototype_BackingField;
      private string _conditionText_BackingField;

      public static dom.CSSConditionRule prototype
      {
        get
        {
          return dom.CSSConditionRule._prototype_BackingField;
        }
        set
        {
          dom.CSSConditionRule._prototype_BackingField = value;
        }
      }

      public virtual string conditionText
      {
        get
        {
          return this._conditionText_BackingField;
        }
        set
        {
          this._conditionText_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSFontFaceRule : dom.CSSRule
    {
      private static dom.CSSFontFaceRule _prototype_BackingField;
      private readonly dom.CSSStyleDeclaration _style_BackingField;

      public static dom.CSSFontFaceRule prototype
      {
        get
        {
          return dom.CSSFontFaceRule._prototype_BackingField;
        }
        set
        {
          dom.CSSFontFaceRule._prototype_BackingField = value;
        }
      }

      public virtual dom.CSSStyleDeclaration style
      {
        get
        {
          return this._style_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSGroupingRule : dom.CSSRule
    {
      private static dom.CSSGroupingRule _prototype_BackingField;
      private readonly dom.CSSRuleList _cssRules_BackingField;

      public static dom.CSSGroupingRule prototype
      {
        get
        {
          return dom.CSSGroupingRule._prototype_BackingField;
        }
        set
        {
          dom.CSSGroupingRule._prototype_BackingField = value;
        }
      }

      public virtual dom.CSSRuleList cssRules
      {
        get
        {
          return this._cssRules_BackingField;
        }
      }

      public virtual extern void deleteRule(uint index);

      public virtual extern uint insertRule(string rule, uint index);
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSImportRule : dom.CSSRule
    {
      private static dom.CSSImportRule _prototype_BackingField;
      private readonly string _href_BackingField;
      private readonly dom.MediaList _media_BackingField;
      private readonly dom.CSSStyleSheet _styleSheet_BackingField;

      public static dom.CSSImportRule prototype
      {
        get
        {
          return dom.CSSImportRule._prototype_BackingField;
        }
        set
        {
          dom.CSSImportRule._prototype_BackingField = value;
        }
      }

      public virtual string href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      public virtual dom.MediaList media
      {
        get
        {
          return this._media_BackingField;
        }
      }

      public virtual dom.CSSStyleSheet styleSheet
      {
        get
        {
          return this._styleSheet_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSKeyframeRule : dom.CSSRule
    {
      private static dom.CSSKeyframeRule _prototype_BackingField;
      private string _keyText_BackingField;
      private readonly dom.CSSStyleDeclaration _style_BackingField;

      public static dom.CSSKeyframeRule prototype
      {
        get
        {
          return dom.CSSKeyframeRule._prototype_BackingField;
        }
        set
        {
          dom.CSSKeyframeRule._prototype_BackingField = value;
        }
      }

      public virtual string keyText
      {
        get
        {
          return this._keyText_BackingField;
        }
        set
        {
          this._keyText_BackingField = value;
        }
      }

      public virtual dom.CSSStyleDeclaration style
      {
        get
        {
          return this._style_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSKeyframesRule : dom.CSSRule
    {
      private static dom.CSSKeyframesRule _prototype_BackingField;
      private readonly dom.CSSRuleList _cssRules_BackingField;
      private string _name_BackingField;

      public static dom.CSSKeyframesRule prototype
      {
        get
        {
          return dom.CSSKeyframesRule._prototype_BackingField;
        }
        set
        {
          dom.CSSKeyframesRule._prototype_BackingField = value;
        }
      }

      public virtual dom.CSSRuleList cssRules
      {
        get
        {
          return this._cssRules_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual extern void appendRule(string rule);

      public virtual extern void deleteRule(string rule);

      public virtual extern dom.CSSKeyframeRule findRule(string rule);
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSMediaRule : dom.CSSConditionRule
    {
      private static dom.CSSMediaRule _prototype_BackingField;
      private readonly dom.MediaList _media_BackingField;

      public static dom.CSSMediaRule prototype
      {
        get
        {
          return dom.CSSMediaRule._prototype_BackingField;
        }
        set
        {
          dom.CSSMediaRule._prototype_BackingField = value;
        }
      }

      public virtual dom.MediaList media
      {
        get
        {
          return this._media_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSNamespaceRule : dom.CSSRule
    {
      private static dom.CSSNamespaceRule _prototype_BackingField;
      private readonly string _namespaceURI_BackingField;
      private readonly string _prefix_BackingField;

      public static dom.CSSNamespaceRule prototype
      {
        get
        {
          return dom.CSSNamespaceRule._prototype_BackingField;
        }
        set
        {
          dom.CSSNamespaceRule._prototype_BackingField = value;
        }
      }

      public virtual string namespaceURI
      {
        get
        {
          return this._namespaceURI_BackingField;
        }
      }

      public virtual string prefix
      {
        get
        {
          return this._prefix_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSPageRule : dom.CSSRule
    {
      private static dom.CSSPageRule _prototype_BackingField;
      private readonly string _pseudoClass_BackingField;
      private readonly string _selector_BackingField;
      private string _selectorText_BackingField;
      private readonly dom.CSSStyleDeclaration _style_BackingField;

      public static dom.CSSPageRule prototype
      {
        get
        {
          return dom.CSSPageRule._prototype_BackingField;
        }
        set
        {
          dom.CSSPageRule._prototype_BackingField = value;
        }
      }

      public virtual string pseudoClass
      {
        get
        {
          return this._pseudoClass_BackingField;
        }
      }

      public virtual string selector
      {
        get
        {
          return this._selector_BackingField;
        }
      }

      public virtual string selectorText
      {
        get
        {
          return this._selectorText_BackingField;
        }
        set
        {
          this._selectorText_BackingField = value;
        }
      }

      public virtual dom.CSSStyleDeclaration style
      {
        get
        {
          return this._style_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSRule : IObject
    {
      private static dom.CSSRule _prototype_BackingField;
      private static readonly ushort _CHARSET_RULE_Static_BackingField;
      private static readonly ushort _FONT_FACE_RULE_Static_BackingField;
      private static readonly ushort _IMPORT_RULE_Static_BackingField;
      private static readonly double _KEYFRAMES_RULE_Static_BackingField;
      private static readonly double _KEYFRAME_RULE_Static_BackingField;
      private static readonly ushort _MEDIA_RULE_Static_BackingField;
      private static readonly ushort _NAMESPACE_RULE_Static_BackingField;
      private static readonly ushort _PAGE_RULE_Static_BackingField;
      private static readonly ushort _STYLE_RULE_Static_BackingField;
      private static readonly double _SUPPORTS_RULE_Static_BackingField;
      private static readonly double _UNKNOWN_RULE_Static_BackingField;
      private static readonly double _VIEWPORT_RULE_Static_BackingField;
      private string _cssText_BackingField;
      private readonly dom.CSSRule _parentRule_BackingField;
      private readonly dom.CSSStyleSheet _parentStyleSheet_BackingField;
      private readonly ushort _type_BackingField;
      private readonly ushort _CHARSET_RULE_BackingField;
      private readonly ushort _FONT_FACE_RULE_BackingField;
      private readonly ushort _IMPORT_RULE_BackingField;
      private readonly double _KEYFRAMES_RULE_BackingField;
      private readonly double _KEYFRAME_RULE_BackingField;
      private readonly ushort _MEDIA_RULE_BackingField;
      private readonly ushort _NAMESPACE_RULE_BackingField;
      private readonly ushort _PAGE_RULE_BackingField;
      private readonly ushort _STYLE_RULE_BackingField;
      private readonly double _SUPPORTS_RULE_BackingField;
      private readonly double _UNKNOWN_RULE_BackingField;
      private readonly double _VIEWPORT_RULE_BackingField;

      public static dom.CSSRule prototype
      {
        get
        {
          return dom.CSSRule._prototype_BackingField;
        }
        set
        {
          dom.CSSRule._prototype_BackingField = value;
        }
      }

      [Name("CHARSET_RULE")]
      public static ushort CHARSET_RULE_Static
      {
        get
        {
          return dom.CSSRule._CHARSET_RULE_Static_BackingField;
        }
      }

      [Name("FONT_FACE_RULE")]
      public static ushort FONT_FACE_RULE_Static
      {
        get
        {
          return dom.CSSRule._FONT_FACE_RULE_Static_BackingField;
        }
      }

      [Name("IMPORT_RULE")]
      public static ushort IMPORT_RULE_Static
      {
        get
        {
          return dom.CSSRule._IMPORT_RULE_Static_BackingField;
        }
      }

      [Name("KEYFRAMES_RULE")]
      public static double KEYFRAMES_RULE_Static
      {
        get
        {
          return dom.CSSRule._KEYFRAMES_RULE_Static_BackingField;
        }
      }

      [Name("KEYFRAME_RULE")]
      public static double KEYFRAME_RULE_Static
      {
        get
        {
          return dom.CSSRule._KEYFRAME_RULE_Static_BackingField;
        }
      }

      [Name("MEDIA_RULE")]
      public static ushort MEDIA_RULE_Static
      {
        get
        {
          return dom.CSSRule._MEDIA_RULE_Static_BackingField;
        }
      }

      [Name("NAMESPACE_RULE")]
      public static ushort NAMESPACE_RULE_Static
      {
        get
        {
          return dom.CSSRule._NAMESPACE_RULE_Static_BackingField;
        }
      }

      [Name("PAGE_RULE")]
      public static ushort PAGE_RULE_Static
      {
        get
        {
          return dom.CSSRule._PAGE_RULE_Static_BackingField;
        }
      }

      [Name("STYLE_RULE")]
      public static ushort STYLE_RULE_Static
      {
        get
        {
          return dom.CSSRule._STYLE_RULE_Static_BackingField;
        }
      }

      [Name("SUPPORTS_RULE")]
      public static double SUPPORTS_RULE_Static
      {
        get
        {
          return dom.CSSRule._SUPPORTS_RULE_Static_BackingField;
        }
      }

      [Name("UNKNOWN_RULE")]
      public static double UNKNOWN_RULE_Static
      {
        get
        {
          return dom.CSSRule._UNKNOWN_RULE_Static_BackingField;
        }
      }

      [Name("VIEWPORT_RULE")]
      public static double VIEWPORT_RULE_Static
      {
        get
        {
          return dom.CSSRule._VIEWPORT_RULE_Static_BackingField;
        }
      }

      public virtual string cssText
      {
        get
        {
          return this._cssText_BackingField;
        }
        set
        {
          this._cssText_BackingField = value;
        }
      }

      public virtual dom.CSSRule parentRule
      {
        get
        {
          return this._parentRule_BackingField;
        }
      }

      public virtual dom.CSSStyleSheet parentStyleSheet
      {
        get
        {
          return this._parentStyleSheet_BackingField;
        }
      }

      public virtual ushort type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual ushort CHARSET_RULE
      {
        get
        {
          return this._CHARSET_RULE_BackingField;
        }
      }

      public virtual ushort FONT_FACE_RULE
      {
        get
        {
          return this._FONT_FACE_RULE_BackingField;
        }
      }

      public virtual ushort IMPORT_RULE
      {
        get
        {
          return this._IMPORT_RULE_BackingField;
        }
      }

      public virtual double KEYFRAMES_RULE
      {
        get
        {
          return this._KEYFRAMES_RULE_BackingField;
        }
      }

      public virtual double KEYFRAME_RULE
      {
        get
        {
          return this._KEYFRAME_RULE_BackingField;
        }
      }

      public virtual ushort MEDIA_RULE
      {
        get
        {
          return this._MEDIA_RULE_BackingField;
        }
      }

      public virtual ushort NAMESPACE_RULE
      {
        get
        {
          return this._NAMESPACE_RULE_BackingField;
        }
      }

      public virtual ushort PAGE_RULE
      {
        get
        {
          return this._PAGE_RULE_BackingField;
        }
      }

      public virtual ushort STYLE_RULE
      {
        get
        {
          return this._STYLE_RULE_BackingField;
        }
      }

      public virtual double SUPPORTS_RULE
      {
        get
        {
          return this._SUPPORTS_RULE_BackingField;
        }
      }

      public virtual double UNKNOWN_RULE
      {
        get
        {
          return this._UNKNOWN_RULE_BackingField;
        }
      }

      public virtual double VIEWPORT_RULE
      {
        get
        {
          return this._VIEWPORT_RULE_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSRuleList : IEnumerable<dom.CSSRule>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.CSSRuleList _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.CSSRuleList prototype
      {
        get
        {
          return dom.CSSRuleList._prototype_BackingField;
        }
        set
        {
          dom.CSSRuleList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.CSSRule item(uint index);

      public virtual extern dom.CSSRule this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.CSSRule> IEnumerable<dom.CSSRule>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSStyleDeclaration : IObject
    {
      private static dom.CSSStyleDeclaration _prototype_BackingField;
      private string _alignContent_BackingField;
      private string _alignItems_BackingField;
      private string _alignSelf_BackingField;
      private string _alignmentBaseline_BackingField;
      private string _animation_BackingField;
      private string _animationDelay_BackingField;
      private string _animationDirection_BackingField;
      private string _animationDuration_BackingField;
      private string _animationFillMode_BackingField;
      private string _animationIterationCount_BackingField;
      private string _animationName_BackingField;
      private string _animationPlayState_BackingField;
      private string _animationTimingFunction_BackingField;
      private string _backfaceVisibility_BackingField;
      private string _background_BackingField;
      private string _backgroundAttachment_BackingField;
      private string _backgroundClip_BackingField;
      private string _backgroundColor_BackingField;
      private string _backgroundImage_BackingField;
      private string _backgroundOrigin_BackingField;
      private string _backgroundPosition_BackingField;
      private string _backgroundPositionX_BackingField;
      private string _backgroundPositionY_BackingField;
      private string _backgroundRepeat_BackingField;
      private string _backgroundSize_BackingField;
      private string _baselineShift_BackingField;
      private string _border_BackingField;
      private string _borderBottom_BackingField;
      private string _borderBottomColor_BackingField;
      private string _borderBottomLeftRadius_BackingField;
      private string _borderBottomRightRadius_BackingField;
      private string _borderBottomStyle_BackingField;
      private string _borderBottomWidth_BackingField;
      private string _borderCollapse_BackingField;
      private string _borderColor_BackingField;
      private string _borderImage_BackingField;
      private string _borderImageOutset_BackingField;
      private string _borderImageRepeat_BackingField;
      private string _borderImageSlice_BackingField;
      private string _borderImageSource_BackingField;
      private string _borderImageWidth_BackingField;
      private string _borderLeft_BackingField;
      private string _borderLeftColor_BackingField;
      private string _borderLeftStyle_BackingField;
      private string _borderLeftWidth_BackingField;
      private string _borderRadius_BackingField;
      private string _borderRight_BackingField;
      private string _borderRightColor_BackingField;
      private string _borderRightStyle_BackingField;
      private string _borderRightWidth_BackingField;
      private string _borderSpacing_BackingField;
      private string _borderStyle_BackingField;
      private string _borderTop_BackingField;
      private string _borderTopColor_BackingField;
      private string _borderTopLeftRadius_BackingField;
      private string _borderTopRightRadius_BackingField;
      private string _borderTopStyle_BackingField;
      private string _borderTopWidth_BackingField;
      private string _borderWidth_BackingField;
      private string _bottom_BackingField;
      private string _boxShadow_BackingField;
      private string _boxSizing_BackingField;
      private string _breakAfter_BackingField;
      private string _breakBefore_BackingField;
      private string _breakInside_BackingField;
      private string _captionSide_BackingField;
      private string _clear_BackingField;
      private string _clip_BackingField;
      private string _clipPath_BackingField;
      private string _clipRule_BackingField;
      private string _color_BackingField;
      private string _colorInterpolationFilters_BackingField;
      private object _columnCount_BackingField;
      private string _columnFill_BackingField;
      private object _columnGap_BackingField;
      private string _columnRule_BackingField;
      private object _columnRuleColor_BackingField;
      private string _columnRuleStyle_BackingField;
      private object _columnRuleWidth_BackingField;
      private string _columnSpan_BackingField;
      private object _columnWidth_BackingField;
      private string _columns_BackingField;
      private string _content_BackingField;
      private string _counterIncrement_BackingField;
      private string _counterReset_BackingField;
      private string _cssFloat_BackingField;
      private string _cssText_BackingField;
      private string _cursor_BackingField;
      private string _direction_BackingField;
      private string _display_BackingField;
      private string _dominantBaseline_BackingField;
      private string _emptyCells_BackingField;
      private string _enableBackground_BackingField;
      private string _fill_BackingField;
      private string _fillOpacity_BackingField;
      private string _fillRule_BackingField;
      private string _filter_BackingField;
      private string _flex_BackingField;
      private string _flexBasis_BackingField;
      private string _flexDirection_BackingField;
      private string _flexFlow_BackingField;
      private string _flexGrow_BackingField;
      private string _flexShrink_BackingField;
      private string _flexWrap_BackingField;
      private string _floodColor_BackingField;
      private string _floodOpacity_BackingField;
      private string _font_BackingField;
      private string _fontFamily_BackingField;
      private string _fontFeatureSettings_BackingField;
      private string _fontSize_BackingField;
      private string _fontSizeAdjust_BackingField;
      private string _fontStretch_BackingField;
      private string _fontStyle_BackingField;
      private string _fontVariant_BackingField;
      private string _fontWeight_BackingField;
      private string _gap_BackingField;
      private string _glyphOrientationHorizontal_BackingField;
      private string _glyphOrientationVertical_BackingField;
      private string _grid_BackingField;
      private string _gridArea_BackingField;
      private string _gridAutoColumns_BackingField;
      private string _gridAutoFlow_BackingField;
      private string _gridAutoRows_BackingField;
      private string _gridColumn_BackingField;
      private string _gridColumnEnd_BackingField;
      private string _gridColumnGap_BackingField;
      private string _gridColumnStart_BackingField;
      private string _gridGap_BackingField;
      private string _gridRow_BackingField;
      private string _gridRowEnd_BackingField;
      private string _gridRowGap_BackingField;
      private string _gridRowStart_BackingField;
      private string _gridTemplate_BackingField;
      private string _gridTemplateAreas_BackingField;
      private string _gridTemplateColumns_BackingField;
      private string _gridTemplateRows_BackingField;
      private string _height_BackingField;
      private string _imeMode_BackingField;
      private string _justifyContent_BackingField;
      private string _justifyItems_BackingField;
      private string _justifySelf_BackingField;
      private string _kerning_BackingField;
      private string _layoutGrid_BackingField;
      private string _layoutGridChar_BackingField;
      private string _layoutGridLine_BackingField;
      private string _layoutGridMode_BackingField;
      private string _layoutGridType_BackingField;
      private string _left_BackingField;
      private readonly uint _length_BackingField;
      private string _letterSpacing_BackingField;
      private string _lightingColor_BackingField;
      private string _lineBreak_BackingField;
      private string _lineHeight_BackingField;
      private string _listStyle_BackingField;
      private string _listStyleImage_BackingField;
      private string _listStylePosition_BackingField;
      private string _listStyleType_BackingField;
      private string _margin_BackingField;
      private string _marginBottom_BackingField;
      private string _marginLeft_BackingField;
      private string _marginRight_BackingField;
      private string _marginTop_BackingField;
      private string _marker_BackingField;
      private string _markerEnd_BackingField;
      private string _markerMid_BackingField;
      private string _markerStart_BackingField;
      private string _mask_BackingField;
      private string _maskImage_BackingField;
      private string _maxHeight_BackingField;
      private string _maxWidth_BackingField;
      private string _minHeight_BackingField;
      private string _minWidth_BackingField;
      private string _msContentZoomChaining_BackingField;
      private string _msContentZoomLimit_BackingField;
      private object _msContentZoomLimitMax_BackingField;
      private object _msContentZoomLimitMin_BackingField;
      private string _msContentZoomSnap_BackingField;
      private string _msContentZoomSnapPoints_BackingField;
      private string _msContentZoomSnapType_BackingField;
      private string _msContentZooming_BackingField;
      private string _msFlowFrom_BackingField;
      private string _msFlowInto_BackingField;
      private string _msFontFeatureSettings_BackingField;
      private object _msGridColumn_BackingField;
      private string _msGridColumnAlign_BackingField;
      private object _msGridColumnSpan_BackingField;
      private string _msGridColumns_BackingField;
      private object _msGridRow_BackingField;
      private string _msGridRowAlign_BackingField;
      private object _msGridRowSpan_BackingField;
      private string _msGridRows_BackingField;
      private string _msHighContrastAdjust_BackingField;
      private string _msHyphenateLimitChars_BackingField;
      private object _msHyphenateLimitLines_BackingField;
      private object _msHyphenateLimitZone_BackingField;
      private string _msHyphens_BackingField;
      private string _msImeAlign_BackingField;
      private string _msOverflowStyle_BackingField;
      private string _msScrollChaining_BackingField;
      private string _msScrollLimit_BackingField;
      private object _msScrollLimitXMax_BackingField;
      private object _msScrollLimitXMin_BackingField;
      private object _msScrollLimitYMax_BackingField;
      private object _msScrollLimitYMin_BackingField;
      private string _msScrollRails_BackingField;
      private string _msScrollSnapPointsX_BackingField;
      private string _msScrollSnapPointsY_BackingField;
      private string _msScrollSnapType_BackingField;
      private string _msScrollSnapX_BackingField;
      private string _msScrollSnapY_BackingField;
      private string _msScrollTranslation_BackingField;
      private string _msTextCombineHorizontal_BackingField;
      private object _msTextSizeAdjust_BackingField;
      private string _msTouchAction_BackingField;
      private string _msTouchSelect_BackingField;
      private string _msUserSelect_BackingField;
      private string _msWrapFlow_BackingField;
      private object _msWrapMargin_BackingField;
      private string _msWrapThrough_BackingField;
      private string _objectFit_BackingField;
      private string _objectPosition_BackingField;
      private string _opacity_BackingField;
      private string _order_BackingField;
      private string _orphans_BackingField;
      private string _outline_BackingField;
      private string _outlineColor_BackingField;
      private string _outlineOffset_BackingField;
      private string _outlineStyle_BackingField;
      private string _outlineWidth_BackingField;
      private string _overflow_BackingField;
      private string _overflowX_BackingField;
      private string _overflowY_BackingField;
      private string _padding_BackingField;
      private string _paddingBottom_BackingField;
      private string _paddingLeft_BackingField;
      private string _paddingRight_BackingField;
      private string _paddingTop_BackingField;
      private string _pageBreakAfter_BackingField;
      private string _pageBreakBefore_BackingField;
      private string _pageBreakInside_BackingField;
      private readonly dom.CSSRule _parentRule_BackingField;
      private string _penAction_BackingField;
      private string _perspective_BackingField;
      private string _perspectiveOrigin_BackingField;
      private string _pointerEvents_BackingField;
      private string _position_BackingField;
      private string _quotes_BackingField;
      private string _resize_BackingField;
      private string _right_BackingField;
      private string _rotate_BackingField;
      private string _rowGap_BackingField;
      private string _rubyAlign_BackingField;
      private string _rubyOverhang_BackingField;
      private string _rubyPosition_BackingField;
      private string _scale_BackingField;
      private string _stopColor_BackingField;
      private string _stopOpacity_BackingField;
      private string _stroke_BackingField;
      private string _strokeDasharray_BackingField;
      private string _strokeDashoffset_BackingField;
      private string _strokeLinecap_BackingField;
      private string _strokeLinejoin_BackingField;
      private string _strokeMiterlimit_BackingField;
      private string _strokeOpacity_BackingField;
      private string _strokeWidth_BackingField;
      private string _tableLayout_BackingField;
      private string _textAlign_BackingField;
      private string _textAlignLast_BackingField;
      private string _textAnchor_BackingField;
      private string _textCombineUpright_BackingField;
      private string _textDecoration_BackingField;
      private string _textIndent_BackingField;
      private string _textJustify_BackingField;
      private string _textKashida_BackingField;
      private string _textKashidaSpace_BackingField;
      private string _textOverflow_BackingField;
      private string _textShadow_BackingField;
      private string _textTransform_BackingField;
      private string _textUnderlinePosition_BackingField;
      private string _top_BackingField;
      private string _touchAction_BackingField;
      private string _transform_BackingField;
      private string _transformOrigin_BackingField;
      private string _transformStyle_BackingField;
      private string _transition_BackingField;
      private string _transitionDelay_BackingField;
      private string _transitionDuration_BackingField;
      private string _transitionProperty_BackingField;
      private string _transitionTimingFunction_BackingField;
      private string _translate_BackingField;
      private string _unicodeBidi_BackingField;
      private string _userSelect_BackingField;
      private string _verticalAlign_BackingField;
      private string _visibility_BackingField;
      private string _webkitAlignContent_BackingField;
      private string _webkitAlignItems_BackingField;
      private string _webkitAlignSelf_BackingField;
      private string _webkitAnimation_BackingField;
      private string _webkitAnimationDelay_BackingField;
      private string _webkitAnimationDirection_BackingField;
      private string _webkitAnimationDuration_BackingField;
      private string _webkitAnimationFillMode_BackingField;
      private string _webkitAnimationIterationCount_BackingField;
      private string _webkitAnimationName_BackingField;
      private string _webkitAnimationPlayState_BackingField;
      private string _webkitAnimationTimingFunction_BackingField;
      private string _webkitAppearance_BackingField;
      private string _webkitBackfaceVisibility_BackingField;
      private string _webkitBackgroundClip_BackingField;
      private string _webkitBackgroundOrigin_BackingField;
      private string _webkitBackgroundSize_BackingField;
      private string _webkitBorderBottomLeftRadius_BackingField;
      private string _webkitBorderBottomRightRadius_BackingField;
      private string _webkitBorderImage_BackingField;
      private string _webkitBorderRadius_BackingField;
      private string _webkitBorderTopLeftRadius_BackingField;
      private string _webkitBorderTopRightRadius_BackingField;
      private string _webkitBoxAlign_BackingField;
      private string _webkitBoxDirection_BackingField;
      private string _webkitBoxFlex_BackingField;
      private string _webkitBoxOrdinalGroup_BackingField;
      private string _webkitBoxOrient_BackingField;
      private string _webkitBoxPack_BackingField;
      private string _webkitBoxSizing_BackingField;
      private string _webkitColumnBreakAfter_BackingField;
      private string _webkitColumnBreakBefore_BackingField;
      private string _webkitColumnBreakInside_BackingField;
      private object _webkitColumnCount_BackingField;
      private object _webkitColumnGap_BackingField;
      private string _webkitColumnRule_BackingField;
      private object _webkitColumnRuleColor_BackingField;
      private string _webkitColumnRuleStyle_BackingField;
      private object _webkitColumnRuleWidth_BackingField;
      private string _webkitColumnSpan_BackingField;
      private object _webkitColumnWidth_BackingField;
      private string _webkitColumns_BackingField;
      private string _webkitFilter_BackingField;
      private string _webkitFlex_BackingField;
      private string _webkitFlexBasis_BackingField;
      private string _webkitFlexDirection_BackingField;
      private string _webkitFlexFlow_BackingField;
      private string _webkitFlexGrow_BackingField;
      private string _webkitFlexShrink_BackingField;
      private string _webkitFlexWrap_BackingField;
      private string _webkitJustifyContent_BackingField;
      private string _webkitOrder_BackingField;
      private string _webkitPerspective_BackingField;
      private string _webkitPerspectiveOrigin_BackingField;
      private string _webkitTapHighlightColor_BackingField;
      private string _webkitTextFillColor_BackingField;
      private object _webkitTextSizeAdjust_BackingField;
      private string _webkitTextStroke_BackingField;
      private string _webkitTextStrokeColor_BackingField;
      private string _webkitTextStrokeWidth_BackingField;
      private string _webkitTransform_BackingField;
      private string _webkitTransformOrigin_BackingField;
      private string _webkitTransformStyle_BackingField;
      private string _webkitTransition_BackingField;
      private string _webkitTransitionDelay_BackingField;
      private string _webkitTransitionDuration_BackingField;
      private string _webkitTransitionProperty_BackingField;
      private string _webkitTransitionTimingFunction_BackingField;
      private string _webkitUserModify_BackingField;
      private string _webkitUserSelect_BackingField;
      private string _webkitWritingMode_BackingField;
      private string _whiteSpace_BackingField;
      private string _widows_BackingField;
      private string _width_BackingField;
      private string _wordBreak_BackingField;
      private string _wordSpacing_BackingField;
      private string _wordWrap_BackingField;
      private string _writingMode_BackingField;
      private string _zIndex_BackingField;
      private string _zoom_BackingField;

      public static dom.CSSStyleDeclaration prototype
      {
        get
        {
          return dom.CSSStyleDeclaration._prototype_BackingField;
        }
        set
        {
          dom.CSSStyleDeclaration._prototype_BackingField = value;
        }
      }

      public virtual string alignContent
      {
        get
        {
          return this._alignContent_BackingField;
        }
        set
        {
          this._alignContent_BackingField = value;
        }
      }

      public virtual string alignItems
      {
        get
        {
          return this._alignItems_BackingField;
        }
        set
        {
          this._alignItems_BackingField = value;
        }
      }

      public virtual string alignSelf
      {
        get
        {
          return this._alignSelf_BackingField;
        }
        set
        {
          this._alignSelf_BackingField = value;
        }
      }

      public virtual string alignmentBaseline
      {
        get
        {
          return this._alignmentBaseline_BackingField;
        }
        set
        {
          this._alignmentBaseline_BackingField = value;
        }
      }

      public virtual string animation
      {
        get
        {
          return this._animation_BackingField;
        }
        set
        {
          this._animation_BackingField = value;
        }
      }

      public virtual string animationDelay
      {
        get
        {
          return this._animationDelay_BackingField;
        }
        set
        {
          this._animationDelay_BackingField = value;
        }
      }

      public virtual string animationDirection
      {
        get
        {
          return this._animationDirection_BackingField;
        }
        set
        {
          this._animationDirection_BackingField = value;
        }
      }

      public virtual string animationDuration
      {
        get
        {
          return this._animationDuration_BackingField;
        }
        set
        {
          this._animationDuration_BackingField = value;
        }
      }

      public virtual string animationFillMode
      {
        get
        {
          return this._animationFillMode_BackingField;
        }
        set
        {
          this._animationFillMode_BackingField = value;
        }
      }

      public virtual string animationIterationCount
      {
        get
        {
          return this._animationIterationCount_BackingField;
        }
        set
        {
          this._animationIterationCount_BackingField = value;
        }
      }

      public virtual string animationName
      {
        get
        {
          return this._animationName_BackingField;
        }
        set
        {
          this._animationName_BackingField = value;
        }
      }

      public virtual string animationPlayState
      {
        get
        {
          return this._animationPlayState_BackingField;
        }
        set
        {
          this._animationPlayState_BackingField = value;
        }
      }

      public virtual string animationTimingFunction
      {
        get
        {
          return this._animationTimingFunction_BackingField;
        }
        set
        {
          this._animationTimingFunction_BackingField = value;
        }
      }

      public virtual string backfaceVisibility
      {
        get
        {
          return this._backfaceVisibility_BackingField;
        }
        set
        {
          this._backfaceVisibility_BackingField = value;
        }
      }

      public virtual string background
      {
        get
        {
          return this._background_BackingField;
        }
        set
        {
          this._background_BackingField = value;
        }
      }

      public virtual string backgroundAttachment
      {
        get
        {
          return this._backgroundAttachment_BackingField;
        }
        set
        {
          this._backgroundAttachment_BackingField = value;
        }
      }

      public virtual string backgroundClip
      {
        get
        {
          return this._backgroundClip_BackingField;
        }
        set
        {
          this._backgroundClip_BackingField = value;
        }
      }

      public virtual string backgroundColor
      {
        get
        {
          return this._backgroundColor_BackingField;
        }
        set
        {
          this._backgroundColor_BackingField = value;
        }
      }

      public virtual string backgroundImage
      {
        get
        {
          return this._backgroundImage_BackingField;
        }
        set
        {
          this._backgroundImage_BackingField = value;
        }
      }

      public virtual string backgroundOrigin
      {
        get
        {
          return this._backgroundOrigin_BackingField;
        }
        set
        {
          this._backgroundOrigin_BackingField = value;
        }
      }

      public virtual string backgroundPosition
      {
        get
        {
          return this._backgroundPosition_BackingField;
        }
        set
        {
          this._backgroundPosition_BackingField = value;
        }
      }

      public virtual string backgroundPositionX
      {
        get
        {
          return this._backgroundPositionX_BackingField;
        }
        set
        {
          this._backgroundPositionX_BackingField = value;
        }
      }

      public virtual string backgroundPositionY
      {
        get
        {
          return this._backgroundPositionY_BackingField;
        }
        set
        {
          this._backgroundPositionY_BackingField = value;
        }
      }

      public virtual string backgroundRepeat
      {
        get
        {
          return this._backgroundRepeat_BackingField;
        }
        set
        {
          this._backgroundRepeat_BackingField = value;
        }
      }

      public virtual string backgroundSize
      {
        get
        {
          return this._backgroundSize_BackingField;
        }
        set
        {
          this._backgroundSize_BackingField = value;
        }
      }

      public virtual string baselineShift
      {
        get
        {
          return this._baselineShift_BackingField;
        }
        set
        {
          this._baselineShift_BackingField = value;
        }
      }

      public virtual string border
      {
        get
        {
          return this._border_BackingField;
        }
        set
        {
          this._border_BackingField = value;
        }
      }

      public virtual string borderBottom
      {
        get
        {
          return this._borderBottom_BackingField;
        }
        set
        {
          this._borderBottom_BackingField = value;
        }
      }

      public virtual string borderBottomColor
      {
        get
        {
          return this._borderBottomColor_BackingField;
        }
        set
        {
          this._borderBottomColor_BackingField = value;
        }
      }

      public virtual string borderBottomLeftRadius
      {
        get
        {
          return this._borderBottomLeftRadius_BackingField;
        }
        set
        {
          this._borderBottomLeftRadius_BackingField = value;
        }
      }

      public virtual string borderBottomRightRadius
      {
        get
        {
          return this._borderBottomRightRadius_BackingField;
        }
        set
        {
          this._borderBottomRightRadius_BackingField = value;
        }
      }

      public virtual string borderBottomStyle
      {
        get
        {
          return this._borderBottomStyle_BackingField;
        }
        set
        {
          this._borderBottomStyle_BackingField = value;
        }
      }

      public virtual string borderBottomWidth
      {
        get
        {
          return this._borderBottomWidth_BackingField;
        }
        set
        {
          this._borderBottomWidth_BackingField = value;
        }
      }

      public virtual string borderCollapse
      {
        get
        {
          return this._borderCollapse_BackingField;
        }
        set
        {
          this._borderCollapse_BackingField = value;
        }
      }

      public virtual string borderColor
      {
        get
        {
          return this._borderColor_BackingField;
        }
        set
        {
          this._borderColor_BackingField = value;
        }
      }

      public virtual string borderImage
      {
        get
        {
          return this._borderImage_BackingField;
        }
        set
        {
          this._borderImage_BackingField = value;
        }
      }

      public virtual string borderImageOutset
      {
        get
        {
          return this._borderImageOutset_BackingField;
        }
        set
        {
          this._borderImageOutset_BackingField = value;
        }
      }

      public virtual string borderImageRepeat
      {
        get
        {
          return this._borderImageRepeat_BackingField;
        }
        set
        {
          this._borderImageRepeat_BackingField = value;
        }
      }

      public virtual string borderImageSlice
      {
        get
        {
          return this._borderImageSlice_BackingField;
        }
        set
        {
          this._borderImageSlice_BackingField = value;
        }
      }

      public virtual string borderImageSource
      {
        get
        {
          return this._borderImageSource_BackingField;
        }
        set
        {
          this._borderImageSource_BackingField = value;
        }
      }

      public virtual string borderImageWidth
      {
        get
        {
          return this._borderImageWidth_BackingField;
        }
        set
        {
          this._borderImageWidth_BackingField = value;
        }
      }

      public virtual string borderLeft
      {
        get
        {
          return this._borderLeft_BackingField;
        }
        set
        {
          this._borderLeft_BackingField = value;
        }
      }

      public virtual string borderLeftColor
      {
        get
        {
          return this._borderLeftColor_BackingField;
        }
        set
        {
          this._borderLeftColor_BackingField = value;
        }
      }

      public virtual string borderLeftStyle
      {
        get
        {
          return this._borderLeftStyle_BackingField;
        }
        set
        {
          this._borderLeftStyle_BackingField = value;
        }
      }

      public virtual string borderLeftWidth
      {
        get
        {
          return this._borderLeftWidth_BackingField;
        }
        set
        {
          this._borderLeftWidth_BackingField = value;
        }
      }

      public virtual string borderRadius
      {
        get
        {
          return this._borderRadius_BackingField;
        }
        set
        {
          this._borderRadius_BackingField = value;
        }
      }

      public virtual string borderRight
      {
        get
        {
          return this._borderRight_BackingField;
        }
        set
        {
          this._borderRight_BackingField = value;
        }
      }

      public virtual string borderRightColor
      {
        get
        {
          return this._borderRightColor_BackingField;
        }
        set
        {
          this._borderRightColor_BackingField = value;
        }
      }

      public virtual string borderRightStyle
      {
        get
        {
          return this._borderRightStyle_BackingField;
        }
        set
        {
          this._borderRightStyle_BackingField = value;
        }
      }

      public virtual string borderRightWidth
      {
        get
        {
          return this._borderRightWidth_BackingField;
        }
        set
        {
          this._borderRightWidth_BackingField = value;
        }
      }

      public virtual string borderSpacing
      {
        get
        {
          return this._borderSpacing_BackingField;
        }
        set
        {
          this._borderSpacing_BackingField = value;
        }
      }

      public virtual string borderStyle
      {
        get
        {
          return this._borderStyle_BackingField;
        }
        set
        {
          this._borderStyle_BackingField = value;
        }
      }

      public virtual string borderTop
      {
        get
        {
          return this._borderTop_BackingField;
        }
        set
        {
          this._borderTop_BackingField = value;
        }
      }

      public virtual string borderTopColor
      {
        get
        {
          return this._borderTopColor_BackingField;
        }
        set
        {
          this._borderTopColor_BackingField = value;
        }
      }

      public virtual string borderTopLeftRadius
      {
        get
        {
          return this._borderTopLeftRadius_BackingField;
        }
        set
        {
          this._borderTopLeftRadius_BackingField = value;
        }
      }

      public virtual string borderTopRightRadius
      {
        get
        {
          return this._borderTopRightRadius_BackingField;
        }
        set
        {
          this._borderTopRightRadius_BackingField = value;
        }
      }

      public virtual string borderTopStyle
      {
        get
        {
          return this._borderTopStyle_BackingField;
        }
        set
        {
          this._borderTopStyle_BackingField = value;
        }
      }

      public virtual string borderTopWidth
      {
        get
        {
          return this._borderTopWidth_BackingField;
        }
        set
        {
          this._borderTopWidth_BackingField = value;
        }
      }

      public virtual string borderWidth
      {
        get
        {
          return this._borderWidth_BackingField;
        }
        set
        {
          this._borderWidth_BackingField = value;
        }
      }

      public virtual string bottom
      {
        get
        {
          return this._bottom_BackingField;
        }
        set
        {
          this._bottom_BackingField = value;
        }
      }

      public virtual string boxShadow
      {
        get
        {
          return this._boxShadow_BackingField;
        }
        set
        {
          this._boxShadow_BackingField = value;
        }
      }

      public virtual string boxSizing
      {
        get
        {
          return this._boxSizing_BackingField;
        }
        set
        {
          this._boxSizing_BackingField = value;
        }
      }

      public virtual string breakAfter
      {
        get
        {
          return this._breakAfter_BackingField;
        }
        set
        {
          this._breakAfter_BackingField = value;
        }
      }

      public virtual string breakBefore
      {
        get
        {
          return this._breakBefore_BackingField;
        }
        set
        {
          this._breakBefore_BackingField = value;
        }
      }

      public virtual string breakInside
      {
        get
        {
          return this._breakInside_BackingField;
        }
        set
        {
          this._breakInside_BackingField = value;
        }
      }

      public virtual string captionSide
      {
        get
        {
          return this._captionSide_BackingField;
        }
        set
        {
          this._captionSide_BackingField = value;
        }
      }

      public virtual string clear
      {
        get
        {
          return this._clear_BackingField;
        }
        set
        {
          this._clear_BackingField = value;
        }
      }

      public virtual string clip
      {
        get
        {
          return this._clip_BackingField;
        }
        set
        {
          this._clip_BackingField = value;
        }
      }

      public virtual string clipPath
      {
        get
        {
          return this._clipPath_BackingField;
        }
        set
        {
          this._clipPath_BackingField = value;
        }
      }

      public virtual string clipRule
      {
        get
        {
          return this._clipRule_BackingField;
        }
        set
        {
          this._clipRule_BackingField = value;
        }
      }

      public virtual string color
      {
        get
        {
          return this._color_BackingField;
        }
        set
        {
          this._color_BackingField = value;
        }
      }

      public virtual string colorInterpolationFilters
      {
        get
        {
          return this._colorInterpolationFilters_BackingField;
        }
        set
        {
          this._colorInterpolationFilters_BackingField = value;
        }
      }

      public virtual object columnCount
      {
        get
        {
          return this._columnCount_BackingField;
        }
        set
        {
          this._columnCount_BackingField = value;
        }
      }

      public virtual string columnFill
      {
        get
        {
          return this._columnFill_BackingField;
        }
        set
        {
          this._columnFill_BackingField = value;
        }
      }

      public virtual object columnGap
      {
        get
        {
          return this._columnGap_BackingField;
        }
        set
        {
          this._columnGap_BackingField = value;
        }
      }

      public virtual string columnRule
      {
        get
        {
          return this._columnRule_BackingField;
        }
        set
        {
          this._columnRule_BackingField = value;
        }
      }

      public virtual object columnRuleColor
      {
        get
        {
          return this._columnRuleColor_BackingField;
        }
        set
        {
          this._columnRuleColor_BackingField = value;
        }
      }

      public virtual string columnRuleStyle
      {
        get
        {
          return this._columnRuleStyle_BackingField;
        }
        set
        {
          this._columnRuleStyle_BackingField = value;
        }
      }

      public virtual object columnRuleWidth
      {
        get
        {
          return this._columnRuleWidth_BackingField;
        }
        set
        {
          this._columnRuleWidth_BackingField = value;
        }
      }

      public virtual string columnSpan
      {
        get
        {
          return this._columnSpan_BackingField;
        }
        set
        {
          this._columnSpan_BackingField = value;
        }
      }

      public virtual object columnWidth
      {
        get
        {
          return this._columnWidth_BackingField;
        }
        set
        {
          this._columnWidth_BackingField = value;
        }
      }

      public virtual string columns
      {
        get
        {
          return this._columns_BackingField;
        }
        set
        {
          this._columns_BackingField = value;
        }
      }

      public virtual string content
      {
        get
        {
          return this._content_BackingField;
        }
        set
        {
          this._content_BackingField = value;
        }
      }

      public virtual string counterIncrement
      {
        get
        {
          return this._counterIncrement_BackingField;
        }
        set
        {
          this._counterIncrement_BackingField = value;
        }
      }

      public virtual string counterReset
      {
        get
        {
          return this._counterReset_BackingField;
        }
        set
        {
          this._counterReset_BackingField = value;
        }
      }

      public virtual string cssFloat
      {
        get
        {
          return this._cssFloat_BackingField;
        }
        set
        {
          this._cssFloat_BackingField = value;
        }
      }

      public virtual string cssText
      {
        get
        {
          return this._cssText_BackingField;
        }
        set
        {
          this._cssText_BackingField = value;
        }
      }

      public virtual string cursor
      {
        get
        {
          return this._cursor_BackingField;
        }
        set
        {
          this._cursor_BackingField = value;
        }
      }

      public virtual string direction
      {
        get
        {
          return this._direction_BackingField;
        }
        set
        {
          this._direction_BackingField = value;
        }
      }

      public virtual string display
      {
        get
        {
          return this._display_BackingField;
        }
        set
        {
          this._display_BackingField = value;
        }
      }

      public virtual string dominantBaseline
      {
        get
        {
          return this._dominantBaseline_BackingField;
        }
        set
        {
          this._dominantBaseline_BackingField = value;
        }
      }

      public virtual string emptyCells
      {
        get
        {
          return this._emptyCells_BackingField;
        }
        set
        {
          this._emptyCells_BackingField = value;
        }
      }

      public virtual string enableBackground
      {
        get
        {
          return this._enableBackground_BackingField;
        }
        set
        {
          this._enableBackground_BackingField = value;
        }
      }

      public virtual string fill
      {
        get
        {
          return this._fill_BackingField;
        }
        set
        {
          this._fill_BackingField = value;
        }
      }

      public virtual string fillOpacity
      {
        get
        {
          return this._fillOpacity_BackingField;
        }
        set
        {
          this._fillOpacity_BackingField = value;
        }
      }

      public virtual string fillRule
      {
        get
        {
          return this._fillRule_BackingField;
        }
        set
        {
          this._fillRule_BackingField = value;
        }
      }

      public virtual string filter
      {
        get
        {
          return this._filter_BackingField;
        }
        set
        {
          this._filter_BackingField = value;
        }
      }

      public virtual string flex
      {
        get
        {
          return this._flex_BackingField;
        }
        set
        {
          this._flex_BackingField = value;
        }
      }

      public virtual string flexBasis
      {
        get
        {
          return this._flexBasis_BackingField;
        }
        set
        {
          this._flexBasis_BackingField = value;
        }
      }

      public virtual string flexDirection
      {
        get
        {
          return this._flexDirection_BackingField;
        }
        set
        {
          this._flexDirection_BackingField = value;
        }
      }

      public virtual string flexFlow
      {
        get
        {
          return this._flexFlow_BackingField;
        }
        set
        {
          this._flexFlow_BackingField = value;
        }
      }

      public virtual string flexGrow
      {
        get
        {
          return this._flexGrow_BackingField;
        }
        set
        {
          this._flexGrow_BackingField = value;
        }
      }

      public virtual string flexShrink
      {
        get
        {
          return this._flexShrink_BackingField;
        }
        set
        {
          this._flexShrink_BackingField = value;
        }
      }

      public virtual string flexWrap
      {
        get
        {
          return this._flexWrap_BackingField;
        }
        set
        {
          this._flexWrap_BackingField = value;
        }
      }

      public virtual string floodColor
      {
        get
        {
          return this._floodColor_BackingField;
        }
        set
        {
          this._floodColor_BackingField = value;
        }
      }

      public virtual string floodOpacity
      {
        get
        {
          return this._floodOpacity_BackingField;
        }
        set
        {
          this._floodOpacity_BackingField = value;
        }
      }

      public virtual string font
      {
        get
        {
          return this._font_BackingField;
        }
        set
        {
          this._font_BackingField = value;
        }
      }

      public virtual string fontFamily
      {
        get
        {
          return this._fontFamily_BackingField;
        }
        set
        {
          this._fontFamily_BackingField = value;
        }
      }

      public virtual string fontFeatureSettings
      {
        get
        {
          return this._fontFeatureSettings_BackingField;
        }
        set
        {
          this._fontFeatureSettings_BackingField = value;
        }
      }

      public virtual string fontSize
      {
        get
        {
          return this._fontSize_BackingField;
        }
        set
        {
          this._fontSize_BackingField = value;
        }
      }

      public virtual string fontSizeAdjust
      {
        get
        {
          return this._fontSizeAdjust_BackingField;
        }
        set
        {
          this._fontSizeAdjust_BackingField = value;
        }
      }

      public virtual string fontStretch
      {
        get
        {
          return this._fontStretch_BackingField;
        }
        set
        {
          this._fontStretch_BackingField = value;
        }
      }

      public virtual string fontStyle
      {
        get
        {
          return this._fontStyle_BackingField;
        }
        set
        {
          this._fontStyle_BackingField = value;
        }
      }

      public virtual string fontVariant
      {
        get
        {
          return this._fontVariant_BackingField;
        }
        set
        {
          this._fontVariant_BackingField = value;
        }
      }

      public virtual string fontWeight
      {
        get
        {
          return this._fontWeight_BackingField;
        }
        set
        {
          this._fontWeight_BackingField = value;
        }
      }

      public virtual string gap
      {
        get
        {
          return this._gap_BackingField;
        }
        set
        {
          this._gap_BackingField = value;
        }
      }

      public virtual string glyphOrientationHorizontal
      {
        get
        {
          return this._glyphOrientationHorizontal_BackingField;
        }
        set
        {
          this._glyphOrientationHorizontal_BackingField = value;
        }
      }

      public virtual string glyphOrientationVertical
      {
        get
        {
          return this._glyphOrientationVertical_BackingField;
        }
        set
        {
          this._glyphOrientationVertical_BackingField = value;
        }
      }

      public virtual string grid
      {
        get
        {
          return this._grid_BackingField;
        }
        set
        {
          this._grid_BackingField = value;
        }
      }

      public virtual string gridArea
      {
        get
        {
          return this._gridArea_BackingField;
        }
        set
        {
          this._gridArea_BackingField = value;
        }
      }

      public virtual string gridAutoColumns
      {
        get
        {
          return this._gridAutoColumns_BackingField;
        }
        set
        {
          this._gridAutoColumns_BackingField = value;
        }
      }

      public virtual string gridAutoFlow
      {
        get
        {
          return this._gridAutoFlow_BackingField;
        }
        set
        {
          this._gridAutoFlow_BackingField = value;
        }
      }

      public virtual string gridAutoRows
      {
        get
        {
          return this._gridAutoRows_BackingField;
        }
        set
        {
          this._gridAutoRows_BackingField = value;
        }
      }

      public virtual string gridColumn
      {
        get
        {
          return this._gridColumn_BackingField;
        }
        set
        {
          this._gridColumn_BackingField = value;
        }
      }

      public virtual string gridColumnEnd
      {
        get
        {
          return this._gridColumnEnd_BackingField;
        }
        set
        {
          this._gridColumnEnd_BackingField = value;
        }
      }

      public virtual string gridColumnGap
      {
        get
        {
          return this._gridColumnGap_BackingField;
        }
        set
        {
          this._gridColumnGap_BackingField = value;
        }
      }

      public virtual string gridColumnStart
      {
        get
        {
          return this._gridColumnStart_BackingField;
        }
        set
        {
          this._gridColumnStart_BackingField = value;
        }
      }

      public virtual string gridGap
      {
        get
        {
          return this._gridGap_BackingField;
        }
        set
        {
          this._gridGap_BackingField = value;
        }
      }

      public virtual string gridRow
      {
        get
        {
          return this._gridRow_BackingField;
        }
        set
        {
          this._gridRow_BackingField = value;
        }
      }

      public virtual string gridRowEnd
      {
        get
        {
          return this._gridRowEnd_BackingField;
        }
        set
        {
          this._gridRowEnd_BackingField = value;
        }
      }

      public virtual string gridRowGap
      {
        get
        {
          return this._gridRowGap_BackingField;
        }
        set
        {
          this._gridRowGap_BackingField = value;
        }
      }

      public virtual string gridRowStart
      {
        get
        {
          return this._gridRowStart_BackingField;
        }
        set
        {
          this._gridRowStart_BackingField = value;
        }
      }

      public virtual string gridTemplate
      {
        get
        {
          return this._gridTemplate_BackingField;
        }
        set
        {
          this._gridTemplate_BackingField = value;
        }
      }

      public virtual string gridTemplateAreas
      {
        get
        {
          return this._gridTemplateAreas_BackingField;
        }
        set
        {
          this._gridTemplateAreas_BackingField = value;
        }
      }

      public virtual string gridTemplateColumns
      {
        get
        {
          return this._gridTemplateColumns_BackingField;
        }
        set
        {
          this._gridTemplateColumns_BackingField = value;
        }
      }

      public virtual string gridTemplateRows
      {
        get
        {
          return this._gridTemplateRows_BackingField;
        }
        set
        {
          this._gridTemplateRows_BackingField = value;
        }
      }

      public virtual string height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual string imeMode
      {
        get
        {
          return this._imeMode_BackingField;
        }
        set
        {
          this._imeMode_BackingField = value;
        }
      }

      public virtual string justifyContent
      {
        get
        {
          return this._justifyContent_BackingField;
        }
        set
        {
          this._justifyContent_BackingField = value;
        }
      }

      public virtual string justifyItems
      {
        get
        {
          return this._justifyItems_BackingField;
        }
        set
        {
          this._justifyItems_BackingField = value;
        }
      }

      public virtual string justifySelf
      {
        get
        {
          return this._justifySelf_BackingField;
        }
        set
        {
          this._justifySelf_BackingField = value;
        }
      }

      public virtual string kerning
      {
        get
        {
          return this._kerning_BackingField;
        }
        set
        {
          this._kerning_BackingField = value;
        }
      }

      public virtual string layoutGrid
      {
        get
        {
          return this._layoutGrid_BackingField;
        }
        set
        {
          this._layoutGrid_BackingField = value;
        }
      }

      public virtual string layoutGridChar
      {
        get
        {
          return this._layoutGridChar_BackingField;
        }
        set
        {
          this._layoutGridChar_BackingField = value;
        }
      }

      public virtual string layoutGridLine
      {
        get
        {
          return this._layoutGridLine_BackingField;
        }
        set
        {
          this._layoutGridLine_BackingField = value;
        }
      }

      public virtual string layoutGridMode
      {
        get
        {
          return this._layoutGridMode_BackingField;
        }
        set
        {
          this._layoutGridMode_BackingField = value;
        }
      }

      public virtual string layoutGridType
      {
        get
        {
          return this._layoutGridType_BackingField;
        }
        set
        {
          this._layoutGridType_BackingField = value;
        }
      }

      public virtual string left
      {
        get
        {
          return this._left_BackingField;
        }
        set
        {
          this._left_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual string letterSpacing
      {
        get
        {
          return this._letterSpacing_BackingField;
        }
        set
        {
          this._letterSpacing_BackingField = value;
        }
      }

      public virtual string lightingColor
      {
        get
        {
          return this._lightingColor_BackingField;
        }
        set
        {
          this._lightingColor_BackingField = value;
        }
      }

      public virtual string lineBreak
      {
        get
        {
          return this._lineBreak_BackingField;
        }
        set
        {
          this._lineBreak_BackingField = value;
        }
      }

      public virtual string lineHeight
      {
        get
        {
          return this._lineHeight_BackingField;
        }
        set
        {
          this._lineHeight_BackingField = value;
        }
      }

      public virtual string listStyle
      {
        get
        {
          return this._listStyle_BackingField;
        }
        set
        {
          this._listStyle_BackingField = value;
        }
      }

      public virtual string listStyleImage
      {
        get
        {
          return this._listStyleImage_BackingField;
        }
        set
        {
          this._listStyleImage_BackingField = value;
        }
      }

      public virtual string listStylePosition
      {
        get
        {
          return this._listStylePosition_BackingField;
        }
        set
        {
          this._listStylePosition_BackingField = value;
        }
      }

      public virtual string listStyleType
      {
        get
        {
          return this._listStyleType_BackingField;
        }
        set
        {
          this._listStyleType_BackingField = value;
        }
      }

      public virtual string margin
      {
        get
        {
          return this._margin_BackingField;
        }
        set
        {
          this._margin_BackingField = value;
        }
      }

      public virtual string marginBottom
      {
        get
        {
          return this._marginBottom_BackingField;
        }
        set
        {
          this._marginBottom_BackingField = value;
        }
      }

      public virtual string marginLeft
      {
        get
        {
          return this._marginLeft_BackingField;
        }
        set
        {
          this._marginLeft_BackingField = value;
        }
      }

      public virtual string marginRight
      {
        get
        {
          return this._marginRight_BackingField;
        }
        set
        {
          this._marginRight_BackingField = value;
        }
      }

      public virtual string marginTop
      {
        get
        {
          return this._marginTop_BackingField;
        }
        set
        {
          this._marginTop_BackingField = value;
        }
      }

      public virtual string marker
      {
        get
        {
          return this._marker_BackingField;
        }
        set
        {
          this._marker_BackingField = value;
        }
      }

      public virtual string markerEnd
      {
        get
        {
          return this._markerEnd_BackingField;
        }
        set
        {
          this._markerEnd_BackingField = value;
        }
      }

      public virtual string markerMid
      {
        get
        {
          return this._markerMid_BackingField;
        }
        set
        {
          this._markerMid_BackingField = value;
        }
      }

      public virtual string markerStart
      {
        get
        {
          return this._markerStart_BackingField;
        }
        set
        {
          this._markerStart_BackingField = value;
        }
      }

      public virtual string mask
      {
        get
        {
          return this._mask_BackingField;
        }
        set
        {
          this._mask_BackingField = value;
        }
      }

      public virtual string maskImage
      {
        get
        {
          return this._maskImage_BackingField;
        }
        set
        {
          this._maskImage_BackingField = value;
        }
      }

      public virtual string maxHeight
      {
        get
        {
          return this._maxHeight_BackingField;
        }
        set
        {
          this._maxHeight_BackingField = value;
        }
      }

      public virtual string maxWidth
      {
        get
        {
          return this._maxWidth_BackingField;
        }
        set
        {
          this._maxWidth_BackingField = value;
        }
      }

      public virtual string minHeight
      {
        get
        {
          return this._minHeight_BackingField;
        }
        set
        {
          this._minHeight_BackingField = value;
        }
      }

      public virtual string minWidth
      {
        get
        {
          return this._minWidth_BackingField;
        }
        set
        {
          this._minWidth_BackingField = value;
        }
      }

      public virtual string msContentZoomChaining
      {
        get
        {
          return this._msContentZoomChaining_BackingField;
        }
        set
        {
          this._msContentZoomChaining_BackingField = value;
        }
      }

      public virtual string msContentZoomLimit
      {
        get
        {
          return this._msContentZoomLimit_BackingField;
        }
        set
        {
          this._msContentZoomLimit_BackingField = value;
        }
      }

      public virtual object msContentZoomLimitMax
      {
        get
        {
          return this._msContentZoomLimitMax_BackingField;
        }
        set
        {
          this._msContentZoomLimitMax_BackingField = value;
        }
      }

      public virtual object msContentZoomLimitMin
      {
        get
        {
          return this._msContentZoomLimitMin_BackingField;
        }
        set
        {
          this._msContentZoomLimitMin_BackingField = value;
        }
      }

      public virtual string msContentZoomSnap
      {
        get
        {
          return this._msContentZoomSnap_BackingField;
        }
        set
        {
          this._msContentZoomSnap_BackingField = value;
        }
      }

      public virtual string msContentZoomSnapPoints
      {
        get
        {
          return this._msContentZoomSnapPoints_BackingField;
        }
        set
        {
          this._msContentZoomSnapPoints_BackingField = value;
        }
      }

      public virtual string msContentZoomSnapType
      {
        get
        {
          return this._msContentZoomSnapType_BackingField;
        }
        set
        {
          this._msContentZoomSnapType_BackingField = value;
        }
      }

      public virtual string msContentZooming
      {
        get
        {
          return this._msContentZooming_BackingField;
        }
        set
        {
          this._msContentZooming_BackingField = value;
        }
      }

      public virtual string msFlowFrom
      {
        get
        {
          return this._msFlowFrom_BackingField;
        }
        set
        {
          this._msFlowFrom_BackingField = value;
        }
      }

      public virtual string msFlowInto
      {
        get
        {
          return this._msFlowInto_BackingField;
        }
        set
        {
          this._msFlowInto_BackingField = value;
        }
      }

      public virtual string msFontFeatureSettings
      {
        get
        {
          return this._msFontFeatureSettings_BackingField;
        }
        set
        {
          this._msFontFeatureSettings_BackingField = value;
        }
      }

      public virtual object msGridColumn
      {
        get
        {
          return this._msGridColumn_BackingField;
        }
        set
        {
          this._msGridColumn_BackingField = value;
        }
      }

      public virtual string msGridColumnAlign
      {
        get
        {
          return this._msGridColumnAlign_BackingField;
        }
        set
        {
          this._msGridColumnAlign_BackingField = value;
        }
      }

      public virtual object msGridColumnSpan
      {
        get
        {
          return this._msGridColumnSpan_BackingField;
        }
        set
        {
          this._msGridColumnSpan_BackingField = value;
        }
      }

      public virtual string msGridColumns
      {
        get
        {
          return this._msGridColumns_BackingField;
        }
        set
        {
          this._msGridColumns_BackingField = value;
        }
      }

      public virtual object msGridRow
      {
        get
        {
          return this._msGridRow_BackingField;
        }
        set
        {
          this._msGridRow_BackingField = value;
        }
      }

      public virtual string msGridRowAlign
      {
        get
        {
          return this._msGridRowAlign_BackingField;
        }
        set
        {
          this._msGridRowAlign_BackingField = value;
        }
      }

      public virtual object msGridRowSpan
      {
        get
        {
          return this._msGridRowSpan_BackingField;
        }
        set
        {
          this._msGridRowSpan_BackingField = value;
        }
      }

      public virtual string msGridRows
      {
        get
        {
          return this._msGridRows_BackingField;
        }
        set
        {
          this._msGridRows_BackingField = value;
        }
      }

      public virtual string msHighContrastAdjust
      {
        get
        {
          return this._msHighContrastAdjust_BackingField;
        }
        set
        {
          this._msHighContrastAdjust_BackingField = value;
        }
      }

      public virtual string msHyphenateLimitChars
      {
        get
        {
          return this._msHyphenateLimitChars_BackingField;
        }
        set
        {
          this._msHyphenateLimitChars_BackingField = value;
        }
      }

      public virtual object msHyphenateLimitLines
      {
        get
        {
          return this._msHyphenateLimitLines_BackingField;
        }
        set
        {
          this._msHyphenateLimitLines_BackingField = value;
        }
      }

      public virtual object msHyphenateLimitZone
      {
        get
        {
          return this._msHyphenateLimitZone_BackingField;
        }
        set
        {
          this._msHyphenateLimitZone_BackingField = value;
        }
      }

      public virtual string msHyphens
      {
        get
        {
          return this._msHyphens_BackingField;
        }
        set
        {
          this._msHyphens_BackingField = value;
        }
      }

      public virtual string msImeAlign
      {
        get
        {
          return this._msImeAlign_BackingField;
        }
        set
        {
          this._msImeAlign_BackingField = value;
        }
      }

      public virtual string msOverflowStyle
      {
        get
        {
          return this._msOverflowStyle_BackingField;
        }
        set
        {
          this._msOverflowStyle_BackingField = value;
        }
      }

      public virtual string msScrollChaining
      {
        get
        {
          return this._msScrollChaining_BackingField;
        }
        set
        {
          this._msScrollChaining_BackingField = value;
        }
      }

      public virtual string msScrollLimit
      {
        get
        {
          return this._msScrollLimit_BackingField;
        }
        set
        {
          this._msScrollLimit_BackingField = value;
        }
      }

      public virtual object msScrollLimitXMax
      {
        get
        {
          return this._msScrollLimitXMax_BackingField;
        }
        set
        {
          this._msScrollLimitXMax_BackingField = value;
        }
      }

      public virtual object msScrollLimitXMin
      {
        get
        {
          return this._msScrollLimitXMin_BackingField;
        }
        set
        {
          this._msScrollLimitXMin_BackingField = value;
        }
      }

      public virtual object msScrollLimitYMax
      {
        get
        {
          return this._msScrollLimitYMax_BackingField;
        }
        set
        {
          this._msScrollLimitYMax_BackingField = value;
        }
      }

      public virtual object msScrollLimitYMin
      {
        get
        {
          return this._msScrollLimitYMin_BackingField;
        }
        set
        {
          this._msScrollLimitYMin_BackingField = value;
        }
      }

      public virtual string msScrollRails
      {
        get
        {
          return this._msScrollRails_BackingField;
        }
        set
        {
          this._msScrollRails_BackingField = value;
        }
      }

      public virtual string msScrollSnapPointsX
      {
        get
        {
          return this._msScrollSnapPointsX_BackingField;
        }
        set
        {
          this._msScrollSnapPointsX_BackingField = value;
        }
      }

      public virtual string msScrollSnapPointsY
      {
        get
        {
          return this._msScrollSnapPointsY_BackingField;
        }
        set
        {
          this._msScrollSnapPointsY_BackingField = value;
        }
      }

      public virtual string msScrollSnapType
      {
        get
        {
          return this._msScrollSnapType_BackingField;
        }
        set
        {
          this._msScrollSnapType_BackingField = value;
        }
      }

      public virtual string msScrollSnapX
      {
        get
        {
          return this._msScrollSnapX_BackingField;
        }
        set
        {
          this._msScrollSnapX_BackingField = value;
        }
      }

      public virtual string msScrollSnapY
      {
        get
        {
          return this._msScrollSnapY_BackingField;
        }
        set
        {
          this._msScrollSnapY_BackingField = value;
        }
      }

      public virtual string msScrollTranslation
      {
        get
        {
          return this._msScrollTranslation_BackingField;
        }
        set
        {
          this._msScrollTranslation_BackingField = value;
        }
      }

      public virtual string msTextCombineHorizontal
      {
        get
        {
          return this._msTextCombineHorizontal_BackingField;
        }
        set
        {
          this._msTextCombineHorizontal_BackingField = value;
        }
      }

      public virtual object msTextSizeAdjust
      {
        get
        {
          return this._msTextSizeAdjust_BackingField;
        }
        set
        {
          this._msTextSizeAdjust_BackingField = value;
        }
      }

      public virtual string msTouchAction
      {
        get
        {
          return this._msTouchAction_BackingField;
        }
        set
        {
          this._msTouchAction_BackingField = value;
        }
      }

      public virtual string msTouchSelect
      {
        get
        {
          return this._msTouchSelect_BackingField;
        }
        set
        {
          this._msTouchSelect_BackingField = value;
        }
      }

      public virtual string msUserSelect
      {
        get
        {
          return this._msUserSelect_BackingField;
        }
        set
        {
          this._msUserSelect_BackingField = value;
        }
      }

      public virtual string msWrapFlow
      {
        get
        {
          return this._msWrapFlow_BackingField;
        }
        set
        {
          this._msWrapFlow_BackingField = value;
        }
      }

      public virtual object msWrapMargin
      {
        get
        {
          return this._msWrapMargin_BackingField;
        }
        set
        {
          this._msWrapMargin_BackingField = value;
        }
      }

      public virtual string msWrapThrough
      {
        get
        {
          return this._msWrapThrough_BackingField;
        }
        set
        {
          this._msWrapThrough_BackingField = value;
        }
      }

      public virtual string objectFit
      {
        get
        {
          return this._objectFit_BackingField;
        }
        set
        {
          this._objectFit_BackingField = value;
        }
      }

      public virtual string objectPosition
      {
        get
        {
          return this._objectPosition_BackingField;
        }
        set
        {
          this._objectPosition_BackingField = value;
        }
      }

      public virtual string opacity
      {
        get
        {
          return this._opacity_BackingField;
        }
        set
        {
          this._opacity_BackingField = value;
        }
      }

      public virtual string order
      {
        get
        {
          return this._order_BackingField;
        }
        set
        {
          this._order_BackingField = value;
        }
      }

      public virtual string orphans
      {
        get
        {
          return this._orphans_BackingField;
        }
        set
        {
          this._orphans_BackingField = value;
        }
      }

      public virtual string outline
      {
        get
        {
          return this._outline_BackingField;
        }
        set
        {
          this._outline_BackingField = value;
        }
      }

      public virtual string outlineColor
      {
        get
        {
          return this._outlineColor_BackingField;
        }
        set
        {
          this._outlineColor_BackingField = value;
        }
      }

      public virtual string outlineOffset
      {
        get
        {
          return this._outlineOffset_BackingField;
        }
        set
        {
          this._outlineOffset_BackingField = value;
        }
      }

      public virtual string outlineStyle
      {
        get
        {
          return this._outlineStyle_BackingField;
        }
        set
        {
          this._outlineStyle_BackingField = value;
        }
      }

      public virtual string outlineWidth
      {
        get
        {
          return this._outlineWidth_BackingField;
        }
        set
        {
          this._outlineWidth_BackingField = value;
        }
      }

      public virtual string overflow
      {
        get
        {
          return this._overflow_BackingField;
        }
        set
        {
          this._overflow_BackingField = value;
        }
      }

      public virtual string overflowX
      {
        get
        {
          return this._overflowX_BackingField;
        }
        set
        {
          this._overflowX_BackingField = value;
        }
      }

      public virtual string overflowY
      {
        get
        {
          return this._overflowY_BackingField;
        }
        set
        {
          this._overflowY_BackingField = value;
        }
      }

      public virtual string padding
      {
        get
        {
          return this._padding_BackingField;
        }
        set
        {
          this._padding_BackingField = value;
        }
      }

      public virtual string paddingBottom
      {
        get
        {
          return this._paddingBottom_BackingField;
        }
        set
        {
          this._paddingBottom_BackingField = value;
        }
      }

      public virtual string paddingLeft
      {
        get
        {
          return this._paddingLeft_BackingField;
        }
        set
        {
          this._paddingLeft_BackingField = value;
        }
      }

      public virtual string paddingRight
      {
        get
        {
          return this._paddingRight_BackingField;
        }
        set
        {
          this._paddingRight_BackingField = value;
        }
      }

      public virtual string paddingTop
      {
        get
        {
          return this._paddingTop_BackingField;
        }
        set
        {
          this._paddingTop_BackingField = value;
        }
      }

      public virtual string pageBreakAfter
      {
        get
        {
          return this._pageBreakAfter_BackingField;
        }
        set
        {
          this._pageBreakAfter_BackingField = value;
        }
      }

      public virtual string pageBreakBefore
      {
        get
        {
          return this._pageBreakBefore_BackingField;
        }
        set
        {
          this._pageBreakBefore_BackingField = value;
        }
      }

      public virtual string pageBreakInside
      {
        get
        {
          return this._pageBreakInside_BackingField;
        }
        set
        {
          this._pageBreakInside_BackingField = value;
        }
      }

      public virtual dom.CSSRule parentRule
      {
        get
        {
          return this._parentRule_BackingField;
        }
      }

      public virtual string penAction
      {
        get
        {
          return this._penAction_BackingField;
        }
        set
        {
          this._penAction_BackingField = value;
        }
      }

      public virtual string perspective
      {
        get
        {
          return this._perspective_BackingField;
        }
        set
        {
          this._perspective_BackingField = value;
        }
      }

      public virtual string perspectiveOrigin
      {
        get
        {
          return this._perspectiveOrigin_BackingField;
        }
        set
        {
          this._perspectiveOrigin_BackingField = value;
        }
      }

      public virtual string pointerEvents
      {
        get
        {
          return this._pointerEvents_BackingField;
        }
        set
        {
          this._pointerEvents_BackingField = value;
        }
      }

      public virtual string position
      {
        get
        {
          return this._position_BackingField;
        }
        set
        {
          this._position_BackingField = value;
        }
      }

      public virtual string quotes
      {
        get
        {
          return this._quotes_BackingField;
        }
        set
        {
          this._quotes_BackingField = value;
        }
      }

      public virtual string resize
      {
        get
        {
          return this._resize_BackingField;
        }
        set
        {
          this._resize_BackingField = value;
        }
      }

      public virtual string right
      {
        get
        {
          return this._right_BackingField;
        }
        set
        {
          this._right_BackingField = value;
        }
      }

      public virtual string rotate
      {
        get
        {
          return this._rotate_BackingField;
        }
        set
        {
          this._rotate_BackingField = value;
        }
      }

      public virtual string rowGap
      {
        get
        {
          return this._rowGap_BackingField;
        }
        set
        {
          this._rowGap_BackingField = value;
        }
      }

      public virtual string rubyAlign
      {
        get
        {
          return this._rubyAlign_BackingField;
        }
        set
        {
          this._rubyAlign_BackingField = value;
        }
      }

      public virtual string rubyOverhang
      {
        get
        {
          return this._rubyOverhang_BackingField;
        }
        set
        {
          this._rubyOverhang_BackingField = value;
        }
      }

      public virtual string rubyPosition
      {
        get
        {
          return this._rubyPosition_BackingField;
        }
        set
        {
          this._rubyPosition_BackingField = value;
        }
      }

      public virtual string scale
      {
        get
        {
          return this._scale_BackingField;
        }
        set
        {
          this._scale_BackingField = value;
        }
      }

      public virtual string stopColor
      {
        get
        {
          return this._stopColor_BackingField;
        }
        set
        {
          this._stopColor_BackingField = value;
        }
      }

      public virtual string stopOpacity
      {
        get
        {
          return this._stopOpacity_BackingField;
        }
        set
        {
          this._stopOpacity_BackingField = value;
        }
      }

      public virtual string stroke
      {
        get
        {
          return this._stroke_BackingField;
        }
        set
        {
          this._stroke_BackingField = value;
        }
      }

      public virtual string strokeDasharray
      {
        get
        {
          return this._strokeDasharray_BackingField;
        }
        set
        {
          this._strokeDasharray_BackingField = value;
        }
      }

      public virtual string strokeDashoffset
      {
        get
        {
          return this._strokeDashoffset_BackingField;
        }
        set
        {
          this._strokeDashoffset_BackingField = value;
        }
      }

      public virtual string strokeLinecap
      {
        get
        {
          return this._strokeLinecap_BackingField;
        }
        set
        {
          this._strokeLinecap_BackingField = value;
        }
      }

      public virtual string strokeLinejoin
      {
        get
        {
          return this._strokeLinejoin_BackingField;
        }
        set
        {
          this._strokeLinejoin_BackingField = value;
        }
      }

      public virtual string strokeMiterlimit
      {
        get
        {
          return this._strokeMiterlimit_BackingField;
        }
        set
        {
          this._strokeMiterlimit_BackingField = value;
        }
      }

      public virtual string strokeOpacity
      {
        get
        {
          return this._strokeOpacity_BackingField;
        }
        set
        {
          this._strokeOpacity_BackingField = value;
        }
      }

      public virtual string strokeWidth
      {
        get
        {
          return this._strokeWidth_BackingField;
        }
        set
        {
          this._strokeWidth_BackingField = value;
        }
      }

      public virtual string tableLayout
      {
        get
        {
          return this._tableLayout_BackingField;
        }
        set
        {
          this._tableLayout_BackingField = value;
        }
      }

      public virtual string textAlign
      {
        get
        {
          return this._textAlign_BackingField;
        }
        set
        {
          this._textAlign_BackingField = value;
        }
      }

      public virtual string textAlignLast
      {
        get
        {
          return this._textAlignLast_BackingField;
        }
        set
        {
          this._textAlignLast_BackingField = value;
        }
      }

      public virtual string textAnchor
      {
        get
        {
          return this._textAnchor_BackingField;
        }
        set
        {
          this._textAnchor_BackingField = value;
        }
      }

      public virtual string textCombineUpright
      {
        get
        {
          return this._textCombineUpright_BackingField;
        }
        set
        {
          this._textCombineUpright_BackingField = value;
        }
      }

      public virtual string textDecoration
      {
        get
        {
          return this._textDecoration_BackingField;
        }
        set
        {
          this._textDecoration_BackingField = value;
        }
      }

      public virtual string textIndent
      {
        get
        {
          return this._textIndent_BackingField;
        }
        set
        {
          this._textIndent_BackingField = value;
        }
      }

      public virtual string textJustify
      {
        get
        {
          return this._textJustify_BackingField;
        }
        set
        {
          this._textJustify_BackingField = value;
        }
      }

      public virtual string textKashida
      {
        get
        {
          return this._textKashida_BackingField;
        }
        set
        {
          this._textKashida_BackingField = value;
        }
      }

      public virtual string textKashidaSpace
      {
        get
        {
          return this._textKashidaSpace_BackingField;
        }
        set
        {
          this._textKashidaSpace_BackingField = value;
        }
      }

      public virtual string textOverflow
      {
        get
        {
          return this._textOverflow_BackingField;
        }
        set
        {
          this._textOverflow_BackingField = value;
        }
      }

      public virtual string textShadow
      {
        get
        {
          return this._textShadow_BackingField;
        }
        set
        {
          this._textShadow_BackingField = value;
        }
      }

      public virtual string textTransform
      {
        get
        {
          return this._textTransform_BackingField;
        }
        set
        {
          this._textTransform_BackingField = value;
        }
      }

      public virtual string textUnderlinePosition
      {
        get
        {
          return this._textUnderlinePosition_BackingField;
        }
        set
        {
          this._textUnderlinePosition_BackingField = value;
        }
      }

      public virtual string top
      {
        get
        {
          return this._top_BackingField;
        }
        set
        {
          this._top_BackingField = value;
        }
      }

      public virtual string touchAction
      {
        get
        {
          return this._touchAction_BackingField;
        }
        set
        {
          this._touchAction_BackingField = value;
        }
      }

      public virtual string transform
      {
        get
        {
          return this._transform_BackingField;
        }
        set
        {
          this._transform_BackingField = value;
        }
      }

      public virtual string transformOrigin
      {
        get
        {
          return this._transformOrigin_BackingField;
        }
        set
        {
          this._transformOrigin_BackingField = value;
        }
      }

      public virtual string transformStyle
      {
        get
        {
          return this._transformStyle_BackingField;
        }
        set
        {
          this._transformStyle_BackingField = value;
        }
      }

      public virtual string transition
      {
        get
        {
          return this._transition_BackingField;
        }
        set
        {
          this._transition_BackingField = value;
        }
      }

      public virtual string transitionDelay
      {
        get
        {
          return this._transitionDelay_BackingField;
        }
        set
        {
          this._transitionDelay_BackingField = value;
        }
      }

      public virtual string transitionDuration
      {
        get
        {
          return this._transitionDuration_BackingField;
        }
        set
        {
          this._transitionDuration_BackingField = value;
        }
      }

      public virtual string transitionProperty
      {
        get
        {
          return this._transitionProperty_BackingField;
        }
        set
        {
          this._transitionProperty_BackingField = value;
        }
      }

      public virtual string transitionTimingFunction
      {
        get
        {
          return this._transitionTimingFunction_BackingField;
        }
        set
        {
          this._transitionTimingFunction_BackingField = value;
        }
      }

      public virtual string translate
      {
        get
        {
          return this._translate_BackingField;
        }
        set
        {
          this._translate_BackingField = value;
        }
      }

      public virtual string unicodeBidi
      {
        get
        {
          return this._unicodeBidi_BackingField;
        }
        set
        {
          this._unicodeBidi_BackingField = value;
        }
      }

      public virtual string userSelect
      {
        get
        {
          return this._userSelect_BackingField;
        }
        set
        {
          this._userSelect_BackingField = value;
        }
      }

      public virtual string verticalAlign
      {
        get
        {
          return this._verticalAlign_BackingField;
        }
        set
        {
          this._verticalAlign_BackingField = value;
        }
      }

      public virtual string visibility
      {
        get
        {
          return this._visibility_BackingField;
        }
        set
        {
          this._visibility_BackingField = value;
        }
      }

      public virtual string webkitAlignContent
      {
        get
        {
          return this._webkitAlignContent_BackingField;
        }
        set
        {
          this._webkitAlignContent_BackingField = value;
        }
      }

      public virtual string webkitAlignItems
      {
        get
        {
          return this._webkitAlignItems_BackingField;
        }
        set
        {
          this._webkitAlignItems_BackingField = value;
        }
      }

      public virtual string webkitAlignSelf
      {
        get
        {
          return this._webkitAlignSelf_BackingField;
        }
        set
        {
          this._webkitAlignSelf_BackingField = value;
        }
      }

      public virtual string webkitAnimation
      {
        get
        {
          return this._webkitAnimation_BackingField;
        }
        set
        {
          this._webkitAnimation_BackingField = value;
        }
      }

      public virtual string webkitAnimationDelay
      {
        get
        {
          return this._webkitAnimationDelay_BackingField;
        }
        set
        {
          this._webkitAnimationDelay_BackingField = value;
        }
      }

      public virtual string webkitAnimationDirection
      {
        get
        {
          return this._webkitAnimationDirection_BackingField;
        }
        set
        {
          this._webkitAnimationDirection_BackingField = value;
        }
      }

      public virtual string webkitAnimationDuration
      {
        get
        {
          return this._webkitAnimationDuration_BackingField;
        }
        set
        {
          this._webkitAnimationDuration_BackingField = value;
        }
      }

      public virtual string webkitAnimationFillMode
      {
        get
        {
          return this._webkitAnimationFillMode_BackingField;
        }
        set
        {
          this._webkitAnimationFillMode_BackingField = value;
        }
      }

      public virtual string webkitAnimationIterationCount
      {
        get
        {
          return this._webkitAnimationIterationCount_BackingField;
        }
        set
        {
          this._webkitAnimationIterationCount_BackingField = value;
        }
      }

      public virtual string webkitAnimationName
      {
        get
        {
          return this._webkitAnimationName_BackingField;
        }
        set
        {
          this._webkitAnimationName_BackingField = value;
        }
      }

      public virtual string webkitAnimationPlayState
      {
        get
        {
          return this._webkitAnimationPlayState_BackingField;
        }
        set
        {
          this._webkitAnimationPlayState_BackingField = value;
        }
      }

      public virtual string webkitAnimationTimingFunction
      {
        get
        {
          return this._webkitAnimationTimingFunction_BackingField;
        }
        set
        {
          this._webkitAnimationTimingFunction_BackingField = value;
        }
      }

      public virtual string webkitAppearance
      {
        get
        {
          return this._webkitAppearance_BackingField;
        }
        set
        {
          this._webkitAppearance_BackingField = value;
        }
      }

      public virtual string webkitBackfaceVisibility
      {
        get
        {
          return this._webkitBackfaceVisibility_BackingField;
        }
        set
        {
          this._webkitBackfaceVisibility_BackingField = value;
        }
      }

      public virtual string webkitBackgroundClip
      {
        get
        {
          return this._webkitBackgroundClip_BackingField;
        }
        set
        {
          this._webkitBackgroundClip_BackingField = value;
        }
      }

      public virtual string webkitBackgroundOrigin
      {
        get
        {
          return this._webkitBackgroundOrigin_BackingField;
        }
        set
        {
          this._webkitBackgroundOrigin_BackingField = value;
        }
      }

      public virtual string webkitBackgroundSize
      {
        get
        {
          return this._webkitBackgroundSize_BackingField;
        }
        set
        {
          this._webkitBackgroundSize_BackingField = value;
        }
      }

      public virtual string webkitBorderBottomLeftRadius
      {
        get
        {
          return this._webkitBorderBottomLeftRadius_BackingField;
        }
        set
        {
          this._webkitBorderBottomLeftRadius_BackingField = value;
        }
      }

      public virtual string webkitBorderBottomRightRadius
      {
        get
        {
          return this._webkitBorderBottomRightRadius_BackingField;
        }
        set
        {
          this._webkitBorderBottomRightRadius_BackingField = value;
        }
      }

      public virtual string webkitBorderImage
      {
        get
        {
          return this._webkitBorderImage_BackingField;
        }
        set
        {
          this._webkitBorderImage_BackingField = value;
        }
      }

      public virtual string webkitBorderRadius
      {
        get
        {
          return this._webkitBorderRadius_BackingField;
        }
        set
        {
          this._webkitBorderRadius_BackingField = value;
        }
      }

      public virtual string webkitBorderTopLeftRadius
      {
        get
        {
          return this._webkitBorderTopLeftRadius_BackingField;
        }
        set
        {
          this._webkitBorderTopLeftRadius_BackingField = value;
        }
      }

      public virtual string webkitBorderTopRightRadius
      {
        get
        {
          return this._webkitBorderTopRightRadius_BackingField;
        }
        set
        {
          this._webkitBorderTopRightRadius_BackingField = value;
        }
      }

      public virtual string webkitBoxAlign
      {
        get
        {
          return this._webkitBoxAlign_BackingField;
        }
        set
        {
          this._webkitBoxAlign_BackingField = value;
        }
      }

      public virtual string webkitBoxDirection
      {
        get
        {
          return this._webkitBoxDirection_BackingField;
        }
        set
        {
          this._webkitBoxDirection_BackingField = value;
        }
      }

      public virtual string webkitBoxFlex
      {
        get
        {
          return this._webkitBoxFlex_BackingField;
        }
        set
        {
          this._webkitBoxFlex_BackingField = value;
        }
      }

      public virtual string webkitBoxOrdinalGroup
      {
        get
        {
          return this._webkitBoxOrdinalGroup_BackingField;
        }
        set
        {
          this._webkitBoxOrdinalGroup_BackingField = value;
        }
      }

      public virtual string webkitBoxOrient
      {
        get
        {
          return this._webkitBoxOrient_BackingField;
        }
        set
        {
          this._webkitBoxOrient_BackingField = value;
        }
      }

      public virtual string webkitBoxPack
      {
        get
        {
          return this._webkitBoxPack_BackingField;
        }
        set
        {
          this._webkitBoxPack_BackingField = value;
        }
      }

      public virtual string webkitBoxSizing
      {
        get
        {
          return this._webkitBoxSizing_BackingField;
        }
        set
        {
          this._webkitBoxSizing_BackingField = value;
        }
      }

      public virtual string webkitColumnBreakAfter
      {
        get
        {
          return this._webkitColumnBreakAfter_BackingField;
        }
        set
        {
          this._webkitColumnBreakAfter_BackingField = value;
        }
      }

      public virtual string webkitColumnBreakBefore
      {
        get
        {
          return this._webkitColumnBreakBefore_BackingField;
        }
        set
        {
          this._webkitColumnBreakBefore_BackingField = value;
        }
      }

      public virtual string webkitColumnBreakInside
      {
        get
        {
          return this._webkitColumnBreakInside_BackingField;
        }
        set
        {
          this._webkitColumnBreakInside_BackingField = value;
        }
      }

      public virtual object webkitColumnCount
      {
        get
        {
          return this._webkitColumnCount_BackingField;
        }
        set
        {
          this._webkitColumnCount_BackingField = value;
        }
      }

      public virtual object webkitColumnGap
      {
        get
        {
          return this._webkitColumnGap_BackingField;
        }
        set
        {
          this._webkitColumnGap_BackingField = value;
        }
      }

      public virtual string webkitColumnRule
      {
        get
        {
          return this._webkitColumnRule_BackingField;
        }
        set
        {
          this._webkitColumnRule_BackingField = value;
        }
      }

      public virtual object webkitColumnRuleColor
      {
        get
        {
          return this._webkitColumnRuleColor_BackingField;
        }
        set
        {
          this._webkitColumnRuleColor_BackingField = value;
        }
      }

      public virtual string webkitColumnRuleStyle
      {
        get
        {
          return this._webkitColumnRuleStyle_BackingField;
        }
        set
        {
          this._webkitColumnRuleStyle_BackingField = value;
        }
      }

      public virtual object webkitColumnRuleWidth
      {
        get
        {
          return this._webkitColumnRuleWidth_BackingField;
        }
        set
        {
          this._webkitColumnRuleWidth_BackingField = value;
        }
      }

      public virtual string webkitColumnSpan
      {
        get
        {
          return this._webkitColumnSpan_BackingField;
        }
        set
        {
          this._webkitColumnSpan_BackingField = value;
        }
      }

      public virtual object webkitColumnWidth
      {
        get
        {
          return this._webkitColumnWidth_BackingField;
        }
        set
        {
          this._webkitColumnWidth_BackingField = value;
        }
      }

      public virtual string webkitColumns
      {
        get
        {
          return this._webkitColumns_BackingField;
        }
        set
        {
          this._webkitColumns_BackingField = value;
        }
      }

      public virtual string webkitFilter
      {
        get
        {
          return this._webkitFilter_BackingField;
        }
        set
        {
          this._webkitFilter_BackingField = value;
        }
      }

      public virtual string webkitFlex
      {
        get
        {
          return this._webkitFlex_BackingField;
        }
        set
        {
          this._webkitFlex_BackingField = value;
        }
      }

      public virtual string webkitFlexBasis
      {
        get
        {
          return this._webkitFlexBasis_BackingField;
        }
        set
        {
          this._webkitFlexBasis_BackingField = value;
        }
      }

      public virtual string webkitFlexDirection
      {
        get
        {
          return this._webkitFlexDirection_BackingField;
        }
        set
        {
          this._webkitFlexDirection_BackingField = value;
        }
      }

      public virtual string webkitFlexFlow
      {
        get
        {
          return this._webkitFlexFlow_BackingField;
        }
        set
        {
          this._webkitFlexFlow_BackingField = value;
        }
      }

      public virtual string webkitFlexGrow
      {
        get
        {
          return this._webkitFlexGrow_BackingField;
        }
        set
        {
          this._webkitFlexGrow_BackingField = value;
        }
      }

      public virtual string webkitFlexShrink
      {
        get
        {
          return this._webkitFlexShrink_BackingField;
        }
        set
        {
          this._webkitFlexShrink_BackingField = value;
        }
      }

      public virtual string webkitFlexWrap
      {
        get
        {
          return this._webkitFlexWrap_BackingField;
        }
        set
        {
          this._webkitFlexWrap_BackingField = value;
        }
      }

      public virtual string webkitJustifyContent
      {
        get
        {
          return this._webkitJustifyContent_BackingField;
        }
        set
        {
          this._webkitJustifyContent_BackingField = value;
        }
      }

      public virtual string webkitOrder
      {
        get
        {
          return this._webkitOrder_BackingField;
        }
        set
        {
          this._webkitOrder_BackingField = value;
        }
      }

      public virtual string webkitPerspective
      {
        get
        {
          return this._webkitPerspective_BackingField;
        }
        set
        {
          this._webkitPerspective_BackingField = value;
        }
      }

      public virtual string webkitPerspectiveOrigin
      {
        get
        {
          return this._webkitPerspectiveOrigin_BackingField;
        }
        set
        {
          this._webkitPerspectiveOrigin_BackingField = value;
        }
      }

      public virtual string webkitTapHighlightColor
      {
        get
        {
          return this._webkitTapHighlightColor_BackingField;
        }
        set
        {
          this._webkitTapHighlightColor_BackingField = value;
        }
      }

      public virtual string webkitTextFillColor
      {
        get
        {
          return this._webkitTextFillColor_BackingField;
        }
        set
        {
          this._webkitTextFillColor_BackingField = value;
        }
      }

      public virtual object webkitTextSizeAdjust
      {
        get
        {
          return this._webkitTextSizeAdjust_BackingField;
        }
        set
        {
          this._webkitTextSizeAdjust_BackingField = value;
        }
      }

      public virtual string webkitTextStroke
      {
        get
        {
          return this._webkitTextStroke_BackingField;
        }
        set
        {
          this._webkitTextStroke_BackingField = value;
        }
      }

      public virtual string webkitTextStrokeColor
      {
        get
        {
          return this._webkitTextStrokeColor_BackingField;
        }
        set
        {
          this._webkitTextStrokeColor_BackingField = value;
        }
      }

      public virtual string webkitTextStrokeWidth
      {
        get
        {
          return this._webkitTextStrokeWidth_BackingField;
        }
        set
        {
          this._webkitTextStrokeWidth_BackingField = value;
        }
      }

      public virtual string webkitTransform
      {
        get
        {
          return this._webkitTransform_BackingField;
        }
        set
        {
          this._webkitTransform_BackingField = value;
        }
      }

      public virtual string webkitTransformOrigin
      {
        get
        {
          return this._webkitTransformOrigin_BackingField;
        }
        set
        {
          this._webkitTransformOrigin_BackingField = value;
        }
      }

      public virtual string webkitTransformStyle
      {
        get
        {
          return this._webkitTransformStyle_BackingField;
        }
        set
        {
          this._webkitTransformStyle_BackingField = value;
        }
      }

      public virtual string webkitTransition
      {
        get
        {
          return this._webkitTransition_BackingField;
        }
        set
        {
          this._webkitTransition_BackingField = value;
        }
      }

      public virtual string webkitTransitionDelay
      {
        get
        {
          return this._webkitTransitionDelay_BackingField;
        }
        set
        {
          this._webkitTransitionDelay_BackingField = value;
        }
      }

      public virtual string webkitTransitionDuration
      {
        get
        {
          return this._webkitTransitionDuration_BackingField;
        }
        set
        {
          this._webkitTransitionDuration_BackingField = value;
        }
      }

      public virtual string webkitTransitionProperty
      {
        get
        {
          return this._webkitTransitionProperty_BackingField;
        }
        set
        {
          this._webkitTransitionProperty_BackingField = value;
        }
      }

      public virtual string webkitTransitionTimingFunction
      {
        get
        {
          return this._webkitTransitionTimingFunction_BackingField;
        }
        set
        {
          this._webkitTransitionTimingFunction_BackingField = value;
        }
      }

      public virtual string webkitUserModify
      {
        get
        {
          return this._webkitUserModify_BackingField;
        }
        set
        {
          this._webkitUserModify_BackingField = value;
        }
      }

      public virtual string webkitUserSelect
      {
        get
        {
          return this._webkitUserSelect_BackingField;
        }
        set
        {
          this._webkitUserSelect_BackingField = value;
        }
      }

      public virtual string webkitWritingMode
      {
        get
        {
          return this._webkitWritingMode_BackingField;
        }
        set
        {
          this._webkitWritingMode_BackingField = value;
        }
      }

      public virtual string whiteSpace
      {
        get
        {
          return this._whiteSpace_BackingField;
        }
        set
        {
          this._whiteSpace_BackingField = value;
        }
      }

      public virtual string widows
      {
        get
        {
          return this._widows_BackingField;
        }
        set
        {
          this._widows_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public virtual string wordBreak
      {
        get
        {
          return this._wordBreak_BackingField;
        }
        set
        {
          this._wordBreak_BackingField = value;
        }
      }

      public virtual string wordSpacing
      {
        get
        {
          return this._wordSpacing_BackingField;
        }
        set
        {
          this._wordSpacing_BackingField = value;
        }
      }

      public virtual string wordWrap
      {
        get
        {
          return this._wordWrap_BackingField;
        }
        set
        {
          this._wordWrap_BackingField = value;
        }
      }

      public virtual string writingMode
      {
        get
        {
          return this._writingMode_BackingField;
        }
        set
        {
          this._writingMode_BackingField = value;
        }
      }

      public virtual string zIndex
      {
        get
        {
          return this._zIndex_BackingField;
        }
        set
        {
          this._zIndex_BackingField = value;
        }
      }

      public virtual string zoom
      {
        get
        {
          return this._zoom_BackingField;
        }
        set
        {
          this._zoom_BackingField = value;
        }
      }

      public virtual extern string getPropertyPriority(string propertyName);

      public virtual extern string getPropertyValue(string propertyName);

      public virtual extern string item(uint index);

      public virtual extern string removeProperty(string propertyName);

      public virtual extern void setProperty(string propertyName, string value);

      public virtual extern void setProperty(string propertyName, string value, string priority);

      public virtual extern string this[uint index] { get; set; }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSStyleRule : dom.CSSRule
    {
      private static dom.CSSStyleRule _prototype_BackingField;
      private string _selectorText_BackingField;
      private readonly dom.CSSStyleDeclaration _style_BackingField;

      public static dom.CSSStyleRule prototype
      {
        get
        {
          return dom.CSSStyleRule._prototype_BackingField;
        }
        set
        {
          dom.CSSStyleRule._prototype_BackingField = value;
        }
      }

      public virtual string selectorText
      {
        get
        {
          return this._selectorText_BackingField;
        }
        set
        {
          this._selectorText_BackingField = value;
        }
      }

      public virtual dom.CSSStyleDeclaration style
      {
        get
        {
          return this._style_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSStyleSheet : dom.StyleSheet
    {
      private static dom.CSSStyleSheet _prototype_BackingField;
      private readonly dom.CSSRuleList _cssRules_BackingField;
      private string _cssText_BackingField;
      private readonly string _id_BackingField;
      private readonly dom.StyleSheetList _imports_BackingField;
      private readonly bool _isAlternate_BackingField;
      private readonly bool _isPrefAlternate_BackingField;
      private readonly dom.CSSRule _ownerRule_BackingField;
      private readonly dom.Element _owningElement_BackingField;
      private readonly object _pages_BackingField;
      private readonly bool _readOnly_BackingField;
      private readonly dom.CSSRuleList _rules_BackingField;

      public static dom.CSSStyleSheet prototype
      {
        get
        {
          return dom.CSSStyleSheet._prototype_BackingField;
        }
        set
        {
          dom.CSSStyleSheet._prototype_BackingField = value;
        }
      }

      public virtual dom.CSSRuleList cssRules
      {
        get
        {
          return this._cssRules_BackingField;
        }
      }

      public virtual string cssText
      {
        get
        {
          return this._cssText_BackingField;
        }
        set
        {
          this._cssText_BackingField = value;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual dom.StyleSheetList imports
      {
        get
        {
          return this._imports_BackingField;
        }
      }

      public virtual bool isAlternate
      {
        get
        {
          return this._isAlternate_BackingField;
        }
      }

      public virtual bool isPrefAlternate
      {
        get
        {
          return this._isPrefAlternate_BackingField;
        }
      }

      public virtual dom.CSSRule ownerRule
      {
        get
        {
          return this._ownerRule_BackingField;
        }
      }

      public virtual dom.Element owningElement
      {
        get
        {
          return this._owningElement_BackingField;
        }
      }

      public virtual object pages
      {
        get
        {
          return this._pages_BackingField;
        }
      }

      public virtual bool readOnly
      {
        get
        {
          return this._readOnly_BackingField;
        }
      }

      public virtual dom.CSSRuleList rules
      {
        get
        {
          return this._rules_BackingField;
        }
      }

      public virtual extern double addImport(string bstrURL);

      public virtual extern double addImport(string bstrURL, double lIndex);

      public virtual extern double addPageRule(string bstrSelector, string bstrStyle);

      public virtual extern double addPageRule(
        string bstrSelector,
        string bstrStyle,
        double lIndex);

      public virtual extern double addRule(string bstrSelector);

      public virtual extern double addRule(string bstrSelector, string bstrStyle);

      public virtual extern double addRule(string bstrSelector, string bstrStyle, double lIndex);

      public virtual extern void deleteRule();

      public virtual extern void deleteRule(uint index);

      public virtual extern uint insertRule(string rule);

      public virtual extern uint insertRule(string rule, uint index);

      public virtual extern void removeImport(double lIndex);

      public virtual extern void removeRule(double lIndex);
    }

    [CombinedClass]
    [FormerInterface]
    public class CSSSupportsRule : dom.CSSConditionRule
    {
      private static dom.CSSSupportsRule _prototype_BackingField;

      public static dom.CSSSupportsRule prototype
      {
        get
        {
          return dom.CSSSupportsRule._prototype_BackingField;
        }
        set
        {
          dom.CSSSupportsRule._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Cache : IObject
    {
      private static dom.Cache _prototype_BackingField;

      public static dom.Cache prototype
      {
        get
        {
          return dom.Cache._prototype_BackingField;
        }
        set
        {
          dom.Cache._prototype_BackingField = value;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> add(
        Union<dom.Request, string> request);

      public virtual extern es5.Promise<H5.Primitive.Void> add(dom.Request request);

      public virtual extern es5.Promise<H5.Primitive.Void> add(string request);

      public virtual extern es5.Promise<H5.Primitive.Void> addAll(
        Union<dom.Request, string>[] requests);

      public virtual extern es5.Promise<H5.Primitive.Void> addAll(dom.Request[] requests);

      public virtual extern es5.Promise<H5.Primitive.Void> addAll(string[] requests);

      public virtual extern es5.Promise<bool> delete(Union<dom.Request, string> request);

      public virtual extern es5.Promise<bool> delete(dom.Request request);

      public virtual extern es5.Promise<bool> delete(string request);

      public virtual extern es5.Promise<bool> delete(
        Union<dom.Request, string> request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<bool> delete(
        dom.Request request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<bool> delete(
        string request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Request[]> keys();

      public virtual extern es5.Promise<dom.Request[]> keys(Union<dom.Request, string> request);

      public virtual extern es5.Promise<dom.Request[]> keys(dom.Request request);

      public virtual extern es5.Promise<dom.Request[]> keys(string request);

      public virtual extern es5.Promise<dom.Request[]> keys(
        Union<dom.Request, string> request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Request[]> keys(
        dom.Request request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Request[]> keys(
        string request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Response> match(Union<dom.Request, string> request);

      public virtual extern es5.Promise<dom.Response> match(dom.Request request);

      public virtual extern es5.Promise<dom.Response> match(string request);

      public virtual extern es5.Promise<dom.Response> match(
        Union<dom.Request, string> request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Response> match(
        dom.Request request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Response> match(
        string request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Response[]> matchAll();

      public virtual extern es5.Promise<dom.Response[]> matchAll(
        Union<dom.Request, string> request);

      public virtual extern es5.Promise<dom.Response[]> matchAll(dom.Request request);

      public virtual extern es5.Promise<dom.Response[]> matchAll(string request);

      public virtual extern es5.Promise<dom.Response[]> matchAll(
        Union<dom.Request, string> request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Response[]> matchAll(
        dom.Request request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Response[]> matchAll(
        string request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<H5.Primitive.Void> put(
        Union<dom.Request, string> request,
        dom.Response response);

      public virtual extern es5.Promise<H5.Primitive.Void> put(
        dom.Request request,
        dom.Response response);

      public virtual extern es5.Promise<H5.Primitive.Void> put(
        string request,
        dom.Response response);
    }

    [CombinedClass]
    [FormerInterface]
    public class CacheStorage : IObject
    {
      private static dom.CacheStorage _prototype_BackingField;

      public static dom.CacheStorage prototype
      {
        get
        {
          return dom.CacheStorage._prototype_BackingField;
        }
        set
        {
          dom.CacheStorage._prototype_BackingField = value;
        }
      }

      public virtual extern es5.Promise<bool> delete(string cacheName);

      public virtual extern es5.Promise<bool> has(string cacheName);

      public virtual extern es5.Promise<string[]> keys();

      public virtual extern es5.Promise<object> match(Union<dom.Request, string> request);

      public virtual extern es5.Promise<object> match(dom.Request request);

      public virtual extern es5.Promise<object> match(string request);

      public virtual extern es5.Promise<object> match(
        Union<dom.Request, string> request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<object> match(
        dom.Request request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<object> match(
        string request,
        dom.CacheQueryOptions options);

      public virtual extern es5.Promise<dom.Cache> open(string cacheName);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public class Canvas2DContextAttributes : IObject
    {
      private bool? _alpha_BackingField;
      private bool? _storage_BackingField;
      private bool? _willReadFrequently_BackingField;

      public virtual bool? alpha
      {
        get
        {
          return this._alpha_BackingField;
        }
        set
        {
          this._alpha_BackingField = value;
        }
      }

      public virtual bool? storage
      {
        get
        {
          return this._storage_BackingField;
        }
        set
        {
          this._storage_BackingField = value;
        }
      }

      public virtual bool? willReadFrequently
      {
        get
        {
          return this._willReadFrequently_BackingField;
        }
        set
        {
          this._willReadFrequently_BackingField = value;
        }
      }

      public virtual extern Union<bool, string, Undefined> this[string attribute] { get; set; }
    }

    [CombinedClass]
    [FormerInterface]
    public class CanvasGradient : IObject
    {
      private static dom.CanvasGradient _prototype_BackingField;

      public static dom.CanvasGradient prototype
      {
        get
        {
          return dom.CanvasGradient._prototype_BackingField;
        }
        set
        {
          dom.CanvasGradient._prototype_BackingField = value;
        }
      }

      public virtual extern void addColorStop(double offset, string color);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class CanvasPathMethods : IObject
    {
      public abstract void arc(
        double x,
        double y,
        double radius,
        double startAngle,
        double endAngle);

      public abstract void arc(
        double x,
        double y,
        double radius,
        double startAngle,
        double endAngle,
        bool anticlockwise);

      public abstract void arcTo(double x1, double y1, double x2, double y2, double radius);

      public abstract void arcTo(
        double x1,
        double y1,
        double x2,
        double y2,
        double radiusX,
        double radiusY,
        double rotation);

      public abstract void bezierCurveTo(
        double cp1x,
        double cp1y,
        double cp2x,
        double cp2y,
        double x,
        double y);

      public abstract void closePath();

      public abstract void ellipse(
        double x,
        double y,
        double radiusX,
        double radiusY,
        double rotation,
        double startAngle,
        double endAngle);

      public abstract void ellipse(
        double x,
        double y,
        double radiusX,
        double radiusY,
        double rotation,
        double startAngle,
        double endAngle,
        bool anticlockwise);

      public abstract void lineTo(double x, double y);

      public abstract void moveTo(double x, double y);

      public abstract void quadraticCurveTo(double cpx, double cpy, double x, double y);

      public abstract void rect(double x, double y, double w, double h);
    }

    [CombinedClass]
    [FormerInterface]
    public class CanvasPattern : IObject
    {
      private static dom.CanvasPattern _prototype_BackingField;

      public static dom.CanvasPattern prototype
      {
        get
        {
          return dom.CanvasPattern._prototype_BackingField;
        }
        set
        {
          dom.CanvasPattern._prototype_BackingField = value;
        }
      }

      public virtual extern void setTransform(dom.SVGMatrix matrix);
    }

    [CombinedClass]
    [FormerInterface]
    public class CanvasRenderingContext2D : dom.CanvasPathMethods
    {
      private static dom.CanvasRenderingContext2D _prototype_BackingField;
      private readonly dom.HTMLCanvasElement _canvas_BackingField;
      private Union<string, dom.CanvasGradient, dom.CanvasPattern> _fillStyle_BackingField;
      private string _font_BackingField;
      private double _globalAlpha_BackingField;
      private string _globalCompositeOperation_BackingField;
      private bool _imageSmoothingEnabled_BackingField;
      private string _lineCap_BackingField;
      private double _lineDashOffset_BackingField;
      private string _lineJoin_BackingField;
      private double _lineWidth_BackingField;
      private double _miterLimit_BackingField;
      private bool _mozImageSmoothingEnabled_BackingField;
      private dom.CanvasFillRule _msFillRule_BackingField;
      private bool _oImageSmoothingEnabled_BackingField;
      private double _shadowBlur_BackingField;
      private string _shadowColor_BackingField;
      private double _shadowOffsetX_BackingField;
      private double _shadowOffsetY_BackingField;
      private Union<string, dom.CanvasGradient, dom.CanvasPattern> _strokeStyle_BackingField;
      private string _textAlign_BackingField;
      private string _textBaseline_BackingField;
      private bool _webkitImageSmoothingEnabled_BackingField;

      public static dom.CanvasRenderingContext2D prototype
      {
        get
        {
          return dom.CanvasRenderingContext2D._prototype_BackingField;
        }
        set
        {
          dom.CanvasRenderingContext2D._prototype_BackingField = value;
        }
      }

      public virtual dom.HTMLCanvasElement canvas
      {
        get
        {
          return this._canvas_BackingField;
        }
      }

      public virtual Union<string, dom.CanvasGradient, dom.CanvasPattern> fillStyle
      {
        get
        {
          return this._fillStyle_BackingField;
        }
        set
        {
          this._fillStyle_BackingField = value;
        }
      }

      public virtual string font
      {
        get
        {
          return this._font_BackingField;
        }
        set
        {
          this._font_BackingField = value;
        }
      }

      public virtual double globalAlpha
      {
        get
        {
          return this._globalAlpha_BackingField;
        }
        set
        {
          this._globalAlpha_BackingField = value;
        }
      }

      public virtual string globalCompositeOperation
      {
        get
        {
          return this._globalCompositeOperation_BackingField;
        }
        set
        {
          this._globalCompositeOperation_BackingField = value;
        }
      }

      public virtual bool imageSmoothingEnabled
      {
        get
        {
          return this._imageSmoothingEnabled_BackingField;
        }
        set
        {
          this._imageSmoothingEnabled_BackingField = value;
        }
      }

      public virtual string lineCap
      {
        get
        {
          return this._lineCap_BackingField;
        }
        set
        {
          this._lineCap_BackingField = value;
        }
      }

      public virtual double lineDashOffset
      {
        get
        {
          return this._lineDashOffset_BackingField;
        }
        set
        {
          this._lineDashOffset_BackingField = value;
        }
      }

      public virtual string lineJoin
      {
        get
        {
          return this._lineJoin_BackingField;
        }
        set
        {
          this._lineJoin_BackingField = value;
        }
      }

      public virtual double lineWidth
      {
        get
        {
          return this._lineWidth_BackingField;
        }
        set
        {
          this._lineWidth_BackingField = value;
        }
      }

      public virtual double miterLimit
      {
        get
        {
          return this._miterLimit_BackingField;
        }
        set
        {
          this._miterLimit_BackingField = value;
        }
      }

      public virtual bool mozImageSmoothingEnabled
      {
        get
        {
          return this._mozImageSmoothingEnabled_BackingField;
        }
        set
        {
          this._mozImageSmoothingEnabled_BackingField = value;
        }
      }

      public virtual dom.CanvasFillRule msFillRule
      {
        get
        {
          return this._msFillRule_BackingField;
        }
        set
        {
          this._msFillRule_BackingField = value;
        }
      }

      public virtual bool oImageSmoothingEnabled
      {
        get
        {
          return this._oImageSmoothingEnabled_BackingField;
        }
        set
        {
          this._oImageSmoothingEnabled_BackingField = value;
        }
      }

      public virtual double shadowBlur
      {
        get
        {
          return this._shadowBlur_BackingField;
        }
        set
        {
          this._shadowBlur_BackingField = value;
        }
      }

      public virtual string shadowColor
      {
        get
        {
          return this._shadowColor_BackingField;
        }
        set
        {
          this._shadowColor_BackingField = value;
        }
      }

      public virtual double shadowOffsetX
      {
        get
        {
          return this._shadowOffsetX_BackingField;
        }
        set
        {
          this._shadowOffsetX_BackingField = value;
        }
      }

      public virtual double shadowOffsetY
      {
        get
        {
          return this._shadowOffsetY_BackingField;
        }
        set
        {
          this._shadowOffsetY_BackingField = value;
        }
      }

      public virtual Union<string, dom.CanvasGradient, dom.CanvasPattern> strokeStyle
      {
        get
        {
          return this._strokeStyle_BackingField;
        }
        set
        {
          this._strokeStyle_BackingField = value;
        }
      }

      public virtual string textAlign
      {
        get
        {
          return this._textAlign_BackingField;
        }
        set
        {
          this._textAlign_BackingField = value;
        }
      }

      public virtual string textBaseline
      {
        get
        {
          return this._textBaseline_BackingField;
        }
        set
        {
          this._textBaseline_BackingField = value;
        }
      }

      public virtual bool webkitImageSmoothingEnabled
      {
        get
        {
          return this._webkitImageSmoothingEnabled_BackingField;
        }
        set
        {
          this._webkitImageSmoothingEnabled_BackingField = value;
        }
      }

      public virtual extern void beginPath();

      public virtual extern void clearRect(double x, double y, double w, double h);

      public virtual extern void clip();

      public virtual extern void clip(dom.CanvasFillRule fillRule);

      public virtual extern void clip(dom.Path2D path);

      public virtual extern void clip(dom.Path2D path, dom.CanvasFillRule fillRule);

      public virtual extern dom.ImageData createImageData(
        Union<double, dom.ImageData> imageDataOrSw);

      public virtual extern dom.ImageData createImageData(double imageDataOrSw);

      public virtual extern dom.ImageData createImageData(dom.ImageData imageDataOrSw);

      public virtual extern dom.ImageData createImageData(
        Union<double, dom.ImageData> imageDataOrSw,
        double sh);

      public virtual extern dom.ImageData createImageData(double imageDataOrSw, double sh);

      public virtual extern dom.ImageData createImageData(dom.ImageData imageDataOrSw, double sh);

      public virtual extern dom.CanvasGradient createLinearGradient(
        double x0,
        double y0,
        double x1,
        double y1);

      public virtual extern dom.CanvasPattern createPattern(
        Union<dom.HTMLImageElement, dom.HTMLCanvasElement, dom.HTMLVideoElement> image,
        string repetition);

      public virtual extern dom.CanvasPattern createPattern(
        dom.HTMLImageElement image,
        string repetition);

      public virtual extern dom.CanvasPattern createPattern(
        dom.HTMLCanvasElement image,
        string repetition);

      public virtual extern dom.CanvasPattern createPattern(
        dom.HTMLVideoElement image,
        string repetition);

      public virtual extern dom.CanvasGradient createRadialGradient(
        double x0,
        double y0,
        double r0,
        double x1,
        double y1,
        double r1);

      public virtual extern void drawFocusIfNeeded(dom.Element element);

      public virtual extern void drawFocusIfNeeded(dom.Path2D path, dom.Element element);

      public virtual extern void drawImage(
        Union<dom.HTMLImageElement, dom.HTMLCanvasElement, dom.HTMLVideoElement, dom.ImageBitmap> image,
        double dstX,
        double dstY);

      public virtual extern void drawImage(dom.HTMLImageElement image, double dstX, double dstY);

      public virtual extern void drawImage(dom.HTMLCanvasElement image, double dstX, double dstY);

      public virtual extern void drawImage(dom.HTMLVideoElement image, double dstX, double dstY);

      public virtual extern void drawImage(dom.ImageBitmap image, double dstX, double dstY);

      public virtual extern void drawImage(
        Union<dom.HTMLImageElement, dom.HTMLCanvasElement, dom.HTMLVideoElement, dom.ImageBitmap> image,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void drawImage(
        dom.HTMLImageElement image,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void drawImage(
        dom.HTMLCanvasElement image,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void drawImage(
        dom.HTMLVideoElement image,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void drawImage(
        dom.ImageBitmap image,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void drawImage(
        Union<dom.HTMLImageElement, dom.HTMLCanvasElement, dom.HTMLVideoElement, dom.ImageBitmap> image,
        double srcX,
        double srcY,
        double srcW,
        double srcH,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void drawImage(
        dom.HTMLImageElement image,
        double srcX,
        double srcY,
        double srcW,
        double srcH,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void drawImage(
        dom.HTMLCanvasElement image,
        double srcX,
        double srcY,
        double srcW,
        double srcH,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void drawImage(
        dom.HTMLVideoElement image,
        double srcX,
        double srcY,
        double srcW,
        double srcH,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void drawImage(
        dom.ImageBitmap image,
        double srcX,
        double srcY,
        double srcW,
        double srcH,
        double dstX,
        double dstY,
        double dstW,
        double dstH);

      public virtual extern void fill();

      public virtual extern void fill(dom.CanvasFillRule fillRule);

      public virtual extern void fill(dom.Path2D path);

      public virtual extern void fill(dom.Path2D path, dom.CanvasFillRule fillRule);

      public virtual extern void fillRect(double x, double y, double w, double h);

      public virtual extern void fillText(string text, double x, double y);

      public virtual extern void fillText(string text, double x, double y, double maxWidth);

      public virtual extern dom.ImageData getImageData(
        double sx,
        double sy,
        double sw,
        double sh);

      public virtual extern double[] getLineDash();

      public virtual extern bool isPointInPath(double x, double y);

      public virtual extern bool isPointInPath(double x, double y, dom.CanvasFillRule fillRule);

      public virtual extern bool isPointInPath(dom.Path2D path, double x, double y);

      public virtual extern bool isPointInPath(
        dom.Path2D path,
        double x,
        double y,
        dom.CanvasFillRule fillRule);

      public virtual extern bool isPointInStroke(double x, double y);

      public virtual extern bool isPointInStroke(double x, double y, dom.CanvasFillRule fillRule);

      public virtual extern bool isPointInStroke(dom.Path2D path, double x, double y);

      public virtual extern bool isPointInStroke(
        dom.Path2D path,
        double x,
        double y,
        dom.CanvasFillRule fillRule);

      public virtual extern dom.TextMetrics measureText(string text);

      public virtual extern void putImageData(dom.ImageData imagedata, double dx, double dy);

      public virtual extern void putImageData(
        dom.ImageData imagedata,
        double dx,
        double dy,
        double dirtyX);

      public virtual extern void putImageData(
        dom.ImageData imagedata,
        double dx,
        double dy,
        double dirtyX,
        double dirtyY);

      public virtual extern void putImageData(
        dom.ImageData imagedata,
        double dx,
        double dy,
        double dirtyX,
        double dirtyY,
        double dirtyWidth);

      public virtual extern void putImageData(
        dom.ImageData imagedata,
        double dx,
        double dy,
        double dirtyX,
        double dirtyY,
        double dirtyWidth,
        double dirtyHeight);

      public virtual extern void restore();

      public virtual extern void rotate(double angle);

      public virtual extern void save();

      public virtual extern void scale(double x, double y);

      public virtual extern void setLineDash(double[] segments);

      public virtual extern void setTransform(
        double m11,
        double m12,
        double m21,
        double m22,
        double dx,
        double dy);

      public virtual extern void stroke();

      public virtual extern void stroke(dom.Path2D path);

      public virtual extern void strokeRect(double x, double y, double w, double h);

      public virtual extern void strokeText(string text, double x, double y);

      public virtual extern void strokeText(string text, double x, double y, double maxWidth);

      public virtual extern void transform(
        double m11,
        double m12,
        double m21,
        double m22,
        double dx,
        double dy);

      public virtual extern void translate(double x, double y);

      public override extern void arc(
        double x,
        double y,
        double radius,
        double startAngle,
        double endAngle);

      public override extern void arc(
        double x,
        double y,
        double radius,
        double startAngle,
        double endAngle,
        bool anticlockwise);

      public override extern void arcTo(
        double x1,
        double y1,
        double x2,
        double y2,
        double radius);

      public override extern void arcTo(
        double x1,
        double y1,
        double x2,
        double y2,
        double radiusX,
        double radiusY,
        double rotation);

      public override extern void bezierCurveTo(
        double cp1x,
        double cp1y,
        double cp2x,
        double cp2y,
        double x,
        double y);

      public override extern void closePath();

      public override extern void ellipse(
        double x,
        double y,
        double radiusX,
        double radiusY,
        double rotation,
        double startAngle,
        double endAngle);

      public override extern void ellipse(
        double x,
        double y,
        double radiusX,
        double radiusY,
        double rotation,
        double startAngle,
        double endAngle,
        bool anticlockwise);

      public override extern void lineTo(double x, double y);

      public override extern void moveTo(double x, double y);

      public override extern void quadraticCurveTo(double cpx, double cpy, double x, double y);

      public override extern void rect(double x, double y, double w, double h);
    }

    [CombinedClass]
    [FormerInterface]
    public class ChannelMergerNode : dom.AudioNode
    {
      private static dom.ChannelMergerNode _prototype_BackingField;

      public static dom.ChannelMergerNode prototype
      {
        get
        {
          return dom.ChannelMergerNode._prototype_BackingField;
        }
        set
        {
          dom.ChannelMergerNode._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ChannelSplitterNode : dom.AudioNode
    {
      private static dom.ChannelSplitterNode _prototype_BackingField;

      public static dom.ChannelSplitterNode prototype
      {
        get
        {
          return dom.ChannelSplitterNode._prototype_BackingField;
        }
        set
        {
          dom.ChannelSplitterNode._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CharacterData : dom.Node, dom.ChildNode.Interface, IObject
    {
      private static dom.CharacterData _prototype_BackingField;
      private string _data_BackingField;
      private readonly uint _length_BackingField;

      public static dom.CharacterData prototype
      {
        get
        {
          return dom.CharacterData._prototype_BackingField;
        }
        set
        {
          dom.CharacterData._prototype_BackingField = value;
        }
      }

      public virtual string data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern void appendData(string arg);

      public virtual extern void deleteData(uint offset, uint count);

      public virtual extern void insertData(uint offset, string arg);

      public virtual extern void replaceData(uint offset, uint count, string arg);

      public virtual extern string substringData(uint offset, uint count);

      public virtual extern void remove();
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class ChildNode : dom.ChildNode.Interface, IObject
    {
      public abstract void remove();

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        void remove();
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ClientRect : IObject
    {
      private static dom.ClientRect _prototype_BackingField;
      private double _bottom_BackingField;
      private readonly double _height_BackingField;
      private double _left_BackingField;
      private double _right_BackingField;
      private double _top_BackingField;
      private readonly double _width_BackingField;

      public static dom.ClientRect prototype
      {
        get
        {
          return dom.ClientRect._prototype_BackingField;
        }
        set
        {
          dom.ClientRect._prototype_BackingField = value;
        }
      }

      public virtual double bottom
      {
        get
        {
          return this._bottom_BackingField;
        }
        set
        {
          this._bottom_BackingField = value;
        }
      }

      public virtual double height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual double left
      {
        get
        {
          return this._left_BackingField;
        }
        set
        {
          this._left_BackingField = value;
        }
      }

      public virtual double right
      {
        get
        {
          return this._right_BackingField;
        }
        set
        {
          this._right_BackingField = value;
        }
      }

      public virtual double top
      {
        get
        {
          return this._top_BackingField;
        }
        set
        {
          this._top_BackingField = value;
        }
      }

      public virtual double width
      {
        get
        {
          return this._width_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ClientRectList : IObject
    {
      private static dom.ClientRectList _prototype_BackingField;
      private readonly double _length_BackingField;

      public static dom.ClientRectList prototype
      {
        get
        {
          return dom.ClientRectList._prototype_BackingField;
        }
        set
        {
          dom.ClientRectList._prototype_BackingField = value;
        }
      }

      public virtual double length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.ClientRect item(double index);

      public virtual extern dom.ClientRect this[double index] { get; set; }
    }

    [CombinedClass]
    [FormerInterface]
    public class ClipboardEvent : dom.Event
    {
      private static dom.ClipboardEvent _prototype_BackingField;
      private readonly dom.DataTransfer _clipboardData_BackingField;

      public extern ClipboardEvent(string type);

      public extern ClipboardEvent(string type, dom.ClipboardEventInit eventInitDict);

      public static dom.ClipboardEvent prototype
      {
        get
        {
          return dom.ClipboardEvent._prototype_BackingField;
        }
        set
        {
          dom.ClipboardEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.DataTransfer clipboardData
      {
        get
        {
          return this._clipboardData_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ClipboardEventInit : dom.EventInit
    {
      private string _data_BackingField;
      private string _dataType_BackingField;

      public string data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public string dataType
      {
        get
        {
          return this._dataType_BackingField;
        }
        set
        {
          this._dataType_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CloseEvent : dom.Event
    {
      private static dom.CloseEvent _prototype_BackingField;
      private readonly ushort _code_BackingField;
      private readonly string _reason_BackingField;
      private readonly bool _wasClean_BackingField;

      public extern CloseEvent(string type);

      public extern CloseEvent(string type, dom.CloseEventInit eventInitDict);

      public static dom.CloseEvent prototype
      {
        get
        {
          return dom.CloseEvent._prototype_BackingField;
        }
        set
        {
          dom.CloseEvent._prototype_BackingField = value;
        }
      }

      public virtual ushort code
      {
        get
        {
          return this._code_BackingField;
        }
      }

      public virtual string reason
      {
        get
        {
          return this._reason_BackingField;
        }
      }

      public virtual bool wasClean
      {
        get
        {
          return this._wasClean_BackingField;
        }
      }

      public virtual extern void initCloseEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        bool wasCleanArg,
        double codeArg,
        string reasonArg);
    }

    [CombinedClass]
    [FormerInterface]
    public class Comment : dom.CharacterData
    {
      private static dom.Comment _prototype_BackingField;
      private string _text_BackingField;

      public extern Comment();

      public extern Comment(string data);

      public static dom.Comment prototype
      {
        get
        {
          return dom.Comment._prototype_BackingField;
        }
        set
        {
          dom.Comment._prototype_BackingField = value;
        }
      }

      public virtual string text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CompositionEvent : dom.UIEvent
    {
      private static dom.CompositionEvent _prototype_BackingField;
      private readonly string _data_BackingField;
      private readonly string _locale_BackingField;

      public extern CompositionEvent(string typeArg);

      public extern CompositionEvent(string typeArg, dom.CompositionEventInit eventInitDict);

      public static dom.CompositionEvent prototype
      {
        get
        {
          return dom.CompositionEvent._prototype_BackingField;
        }
        set
        {
          dom.CompositionEvent._prototype_BackingField = value;
        }
      }

      public virtual string data
      {
        get
        {
          return this._data_BackingField;
        }
      }

      public virtual string locale
      {
        get
        {
          return this._locale_BackingField;
        }
      }

      public virtual extern void initCompositionEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        string dataArg,
        string locale);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ComputedTimingProperties : IObject
    {
      private double _activeDuration_BackingField;
      private double? _currentIteration_BackingField;
      private double _endTime_BackingField;
      private double? _localTime_BackingField;
      private double? _progress_BackingField;

      public double activeDuration
      {
        get
        {
          return this._activeDuration_BackingField;
        }
        set
        {
          this._activeDuration_BackingField = value;
        }
      }

      public double? currentIteration
      {
        get
        {
          return this._currentIteration_BackingField;
        }
        set
        {
          this._currentIteration_BackingField = value;
        }
      }

      public double endTime
      {
        get
        {
          return this._endTime_BackingField;
        }
        set
        {
          this._endTime_BackingField = value;
        }
      }

      public double? localTime
      {
        get
        {
          return this._localTime_BackingField;
        }
        set
        {
          this._localTime_BackingField = value;
        }
      }

      public double? progress
      {
        get
        {
          return this._progress_BackingField;
        }
        set
        {
          this._progress_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ConcatParams : dom.Algorithm
    {
      private es5.Uint8Array _algorithmId_BackingField;
      private Union<string, dom.Algorithm> _hash_BackingField;
      private es5.Uint8Array _partyUInfo_BackingField;
      private es5.Uint8Array _partyVInfo_BackingField;
      private es5.Uint8Array _privateInfo_BackingField;
      private es5.Uint8Array _publicInfo_BackingField;

      public es5.Uint8Array algorithmId
      {
        get
        {
          return this._algorithmId_BackingField;
        }
        set
        {
          this._algorithmId_BackingField = value;
        }
      }

      public Union<string, dom.Algorithm> hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public es5.Uint8Array partyUInfo
      {
        get
        {
          return this._partyUInfo_BackingField;
        }
        set
        {
          this._partyUInfo_BackingField = value;
        }
      }

      public es5.Uint8Array partyVInfo
      {
        get
        {
          return this._partyVInfo_BackingField;
        }
        set
        {
          this._partyVInfo_BackingField = value;
        }
      }

      public es5.Uint8Array privateInfo
      {
        get
        {
          return this._privateInfo_BackingField;
        }
        set
        {
          this._privateInfo_BackingField = value;
        }
      }

      public es5.Uint8Array publicInfo
      {
        get
        {
          return this._publicInfo_BackingField;
        }
        set
        {
          this._publicInfo_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Console : IObject
    {
      private static dom.Console _prototype_BackingField;
      private object _memory_BackingField;

      public static dom.Console prototype
      {
        get
        {
          return dom.Console._prototype_BackingField;
        }
        set
        {
          dom.Console._prototype_BackingField = value;
        }
      }

      public virtual object memory
      {
        get
        {
          return this._memory_BackingField;
        }
        set
        {
          this._memory_BackingField = value;
        }
      }

      public virtual extern void assert();

      public virtual extern void assert(bool condition);

      [ExpandParams]
      public virtual extern void assert(bool condition, string message, params object[] data);

      public virtual extern void clear();

      public virtual extern void count();

      public virtual extern void count(string label);

      public virtual extern void debug();

      [ExpandParams]
      public virtual extern void debug(object message, params object[] optionalParams);

      public virtual extern void dir();

      [ExpandParams]
      public virtual extern void dir(object value, params object[] optionalParams);

      public virtual extern void dirxml(object value);

      public virtual extern void error();

      [ExpandParams]
      public virtual extern void error(object message, params object[] optionalParams);

      public virtual extern void exception();

      [ExpandParams]
      public virtual extern void exception(string message, params object[] optionalParams);

      public virtual extern void group();

      [ExpandParams]
      public virtual extern void group(string groupTitle, params object[] optionalParams);

      public virtual extern void groupCollapsed();

      [ExpandParams]
      public virtual extern void groupCollapsed(string groupTitle, params object[] optionalParams);

      public virtual extern void groupEnd();

      public virtual extern void info();

      [ExpandParams]
      public virtual extern void info(object message, params object[] optionalParams);

      public virtual extern void log();

      [ExpandParams]
      public virtual extern void log(object message, params object[] optionalParams);

      public virtual extern void markTimeline();

      public virtual extern void markTimeline(string label);

      public virtual extern bool msIsIndependentlyComposed(dom.Element element);

      public virtual extern void profile();

      public virtual extern void profile(string reportName);

      public virtual extern void profileEnd();

      public virtual extern void select(dom.Element element);

      [ExpandParams]
      public virtual extern void table(params object[] tabularData);

      public virtual extern void time();

      public virtual extern void time(string label);

      public virtual extern void timeEnd();

      public virtual extern void timeEnd(string label);

      public virtual extern void timeStamp();

      public virtual extern void timeStamp(string label);

      public virtual extern void timeline();

      public virtual extern void timeline(string label);

      public virtual extern void timelineEnd();

      public virtual extern void timelineEnd(string label);

      public virtual extern void trace();

      [ExpandParams]
      public virtual extern void trace(object message, params object[] optionalParams);

      public virtual extern void warn();

      [ExpandParams]
      public virtual extern void warn(object message, params object[] optionalParams);
    }

    [CombinedClass]
    [FormerInterface]
    public class ContentScriptGlobalScope : dom.EventTarget
    {
      private static dom.ContentScriptGlobalScope _prototype_BackingField;
      private readonly dom.ExtensionScriptApis _msContentScript_BackingField;
      private readonly dom.Window _window_BackingField;

      public static dom.ContentScriptGlobalScope prototype
      {
        get
        {
          return dom.ContentScriptGlobalScope._prototype_BackingField;
        }
        set
        {
          dom.ContentScriptGlobalScope._prototype_BackingField = value;
        }
      }

      public virtual dom.ExtensionScriptApis msContentScript
      {
        get
        {
          return this._msContentScript_BackingField;
        }
      }

      public virtual dom.Window window
      {
        get
        {
          return this._window_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ConvolverNode : dom.AudioNode
    {
      private static dom.ConvolverNode _prototype_BackingField;
      private dom.AudioBuffer _buffer_BackingField;
      private bool _normalize_BackingField;

      public static dom.ConvolverNode prototype
      {
        get
        {
          return dom.ConvolverNode._prototype_BackingField;
        }
        set
        {
          dom.ConvolverNode._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioBuffer buffer
      {
        get
        {
          return this._buffer_BackingField;
        }
        set
        {
          this._buffer_BackingField = value;
        }
      }

      public virtual bool normalize
      {
        get
        {
          return this._normalize_BackingField;
        }
        set
        {
          this._normalize_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Coordinates : IObject
    {
      private static dom.Coordinates _prototype_BackingField;
      private readonly double _accuracy_BackingField;
      private readonly double? _altitude_BackingField;
      private readonly double? _altitudeAccuracy_BackingField;
      private readonly double? _heading_BackingField;
      private readonly double _latitude_BackingField;
      private readonly double _longitude_BackingField;
      private readonly double? _speed_BackingField;

      public static dom.Coordinates prototype
      {
        get
        {
          return dom.Coordinates._prototype_BackingField;
        }
        set
        {
          dom.Coordinates._prototype_BackingField = value;
        }
      }

      public virtual double accuracy
      {
        get
        {
          return this._accuracy_BackingField;
        }
      }

      public virtual double? altitude
      {
        get
        {
          return this._altitude_BackingField;
        }
      }

      public virtual double? altitudeAccuracy
      {
        get
        {
          return this._altitudeAccuracy_BackingField;
        }
      }

      public virtual double? heading
      {
        get
        {
          return this._heading_BackingField;
        }
      }

      public virtual double latitude
      {
        get
        {
          return this._latitude_BackingField;
        }
      }

      public virtual double longitude
      {
        get
        {
          return this._longitude_BackingField;
        }
      }

      public virtual double? speed
      {
        get
        {
          return this._speed_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CountQueuingStrategy : IObject
    {
      private static dom.CountQueuingStrategy _prototype_BackingField;
      private double _highWaterMark_BackingField;

      public extern CountQueuingStrategy(dom.QueuingStrategy strategy);

      public static dom.CountQueuingStrategy prototype
      {
        get
        {
          return dom.CountQueuingStrategy._prototype_BackingField;
        }
        set
        {
          dom.CountQueuingStrategy._prototype_BackingField = value;
        }
      }

      public virtual double highWaterMark
      {
        get
        {
          return this._highWaterMark_BackingField;
        }
        set
        {
          this._highWaterMark_BackingField = value;
        }
      }

      public virtual extern double size();
    }

    [CombinedClass]
    [FormerInterface]
    public class Crypto : IObject
    {
      private static dom.Crypto _prototype_BackingField;
      private readonly dom.SubtleCrypto _subtle_BackingField;

      public static dom.Crypto prototype
      {
        get
        {
          return dom.Crypto._prototype_BackingField;
        }
        set
        {
          dom.Crypto._prototype_BackingField = value;
        }
      }

      public virtual dom.SubtleCrypto subtle
      {
        get
        {
          return this._subtle_BackingField;
        }
      }

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.Int8Array array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.Int16Array array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.Int32Array array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.Uint8Array array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.Uint16Array array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.Uint32Array array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.Uint8ClampedArray array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.Float32Array array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.Float64Array array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        es5.DataView array);

      public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
        Null array);
    }

    [CombinedClass]
    [FormerInterface]
    public class CryptoKey : IObject
    {
      private static dom.CryptoKey _prototype_BackingField;
      private readonly dom.KeyAlgorithm _algorithm_BackingField;
      private readonly bool _extractable_BackingField;
      private readonly string _type_BackingField;
      private readonly string[] _usages_BackingField;

      public static dom.CryptoKey prototype
      {
        get
        {
          return dom.CryptoKey._prototype_BackingField;
        }
        set
        {
          dom.CryptoKey._prototype_BackingField = value;
        }
      }

      public virtual dom.KeyAlgorithm algorithm
      {
        get
        {
          return this._algorithm_BackingField;
        }
      }

      public virtual bool extractable
      {
        get
        {
          return this._extractable_BackingField;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual string[] usages
      {
        get
        {
          return this._usages_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class CryptoKeyPair : IObject
    {
      private static dom.CryptoKeyPair _prototype_BackingField;
      private dom.CryptoKey _privateKey_BackingField;
      private dom.CryptoKey _publicKey_BackingField;

      public static dom.CryptoKeyPair prototype
      {
        get
        {
          return dom.CryptoKeyPair._prototype_BackingField;
        }
        set
        {
          dom.CryptoKeyPair._prototype_BackingField = value;
        }
      }

      public virtual dom.CryptoKey privateKey
      {
        get
        {
          return this._privateKey_BackingField;
        }
        set
        {
          this._privateKey_BackingField = value;
        }
      }

      public virtual dom.CryptoKey publicKey
      {
        get
        {
          return this._publicKey_BackingField;
        }
        set
        {
          this._publicKey_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class CustomElementRegistry : IObject
    {
      public abstract void define(string name, es5.Function constructor);

      public abstract void define(string name, Action constructor);

      public abstract void define(string name, Func<object> constructor);

      public abstract void define(
        string name,
        es5.Function constructor,
        dom.ElementDefinitionOptions options);

      public abstract void define(
        string name,
        Action constructor,
        dom.ElementDefinitionOptions options);

      public abstract void define(
        string name,
        Func<object> constructor,
        dom.ElementDefinitionOptions options);

      public abstract object get(string name);

      public abstract es5.PromiseLike<H5.Primitive.Void> whenDefined(string name);
    }

    [IgnoreCast]
    [IgnoreGeneric(AllowInTypeScript = true)]
    [GenericDefault("T", typeof (object))]
    [Virtual]
    [FormerInterface]
    public abstract class CustomEvent<T> : dom.Event
    {
      public extern CustomEvent(string typeArg);

      public abstract T detail { get; }

      public abstract void initCustomEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        T detailArg);
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMError : IObject
    {
      private static dom.DOMError _prototype_BackingField;
      private readonly string _name_BackingField;

      public static dom.DOMError prototype
      {
        get
        {
          return dom.DOMError._prototype_BackingField;
        }
        set
        {
          dom.DOMError._prototype_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual extern string toString();
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMException : IObject
    {
      private static dom.DOMException _prototype_BackingField;
      private static readonly double _ABORT_ERR_Static_BackingField;
      private static readonly double _DATA_CLONE_ERR_Static_BackingField;
      private static readonly double _DOMSTRING_SIZE_ERR_Static_BackingField;
      private static readonly double _HIERARCHY_REQUEST_ERR_Static_BackingField;
      private static readonly double _INDEX_SIZE_ERR_Static_BackingField;
      private static readonly double _INUSE_ATTRIBUTE_ERR_Static_BackingField;
      private static readonly double _INVALID_ACCESS_ERR_Static_BackingField;
      private static readonly double _INVALID_CHARACTER_ERR_Static_BackingField;
      private static readonly double _INVALID_MODIFICATION_ERR_Static_BackingField;
      private static readonly double _INVALID_NODE_TYPE_ERR_Static_BackingField;
      private static readonly double _INVALID_STATE_ERR_Static_BackingField;
      private static readonly double _NAMESPACE_ERR_Static_BackingField;
      private static readonly double _NETWORK_ERR_Static_BackingField;
      private static readonly double _NOT_FOUND_ERR_Static_BackingField;
      private static readonly double _NOT_SUPPORTED_ERR_Static_BackingField;
      private static readonly double _NO_DATA_ALLOWED_ERR_Static_BackingField;
      private static readonly double _NO_MODIFICATION_ALLOWED_ERR_Static_BackingField;
      private static readonly double _PARSE_ERR_Static_BackingField;
      private static readonly double _QUOTA_EXCEEDED_ERR_Static_BackingField;
      private static readonly double _SECURITY_ERR_Static_BackingField;
      private static readonly double _SERIALIZE_ERR_Static_BackingField;
      private static readonly double _SYNTAX_ERR_Static_BackingField;
      private static readonly double _TIMEOUT_ERR_Static_BackingField;
      private static readonly double _TYPE_MISMATCH_ERR_Static_BackingField;
      private static readonly double _URL_MISMATCH_ERR_Static_BackingField;
      private static readonly double _VALIDATION_ERR_Static_BackingField;
      private static readonly double _WRONG_DOCUMENT_ERR_Static_BackingField;
      private readonly double _code_BackingField;
      private readonly string _message_BackingField;
      private readonly string _name_BackingField;
      private readonly double _ABORT_ERR_BackingField;
      private readonly double _DATA_CLONE_ERR_BackingField;
      private readonly double _DOMSTRING_SIZE_ERR_BackingField;
      private readonly double _HIERARCHY_REQUEST_ERR_BackingField;
      private readonly double _INDEX_SIZE_ERR_BackingField;
      private readonly double _INUSE_ATTRIBUTE_ERR_BackingField;
      private readonly double _INVALID_ACCESS_ERR_BackingField;
      private readonly double _INVALID_CHARACTER_ERR_BackingField;
      private readonly double _INVALID_MODIFICATION_ERR_BackingField;
      private readonly double _INVALID_NODE_TYPE_ERR_BackingField;
      private readonly double _INVALID_STATE_ERR_BackingField;
      private readonly double _NAMESPACE_ERR_BackingField;
      private readonly double _NETWORK_ERR_BackingField;
      private readonly double _NOT_FOUND_ERR_BackingField;
      private readonly double _NOT_SUPPORTED_ERR_BackingField;
      private readonly double _NO_DATA_ALLOWED_ERR_BackingField;
      private readonly double _NO_MODIFICATION_ALLOWED_ERR_BackingField;
      private readonly double _PARSE_ERR_BackingField;
      private readonly double _QUOTA_EXCEEDED_ERR_BackingField;
      private readonly double _SECURITY_ERR_BackingField;
      private readonly double _SERIALIZE_ERR_BackingField;
      private readonly double _SYNTAX_ERR_BackingField;
      private readonly double _TIMEOUT_ERR_BackingField;
      private readonly double _TYPE_MISMATCH_ERR_BackingField;
      private readonly double _URL_MISMATCH_ERR_BackingField;
      private readonly double _VALIDATION_ERR_BackingField;
      private readonly double _WRONG_DOCUMENT_ERR_BackingField;

      public extern DOMException();

      public extern DOMException(string message);

      public extern DOMException(string message, string name);

      public static dom.DOMException prototype
      {
        get
        {
          return dom.DOMException._prototype_BackingField;
        }
        set
        {
          dom.DOMException._prototype_BackingField = value;
        }
      }

      [Name("ABORT_ERR")]
      public static double ABORT_ERR_Static
      {
        get
        {
          return dom.DOMException._ABORT_ERR_Static_BackingField;
        }
      }

      [Name("DATA_CLONE_ERR")]
      public static double DATA_CLONE_ERR_Static
      {
        get
        {
          return dom.DOMException._DATA_CLONE_ERR_Static_BackingField;
        }
      }

      [Name("DOMSTRING_SIZE_ERR")]
      public static double DOMSTRING_SIZE_ERR_Static
      {
        get
        {
          return dom.DOMException._DOMSTRING_SIZE_ERR_Static_BackingField;
        }
      }

      [Name("HIERARCHY_REQUEST_ERR")]
      public static double HIERARCHY_REQUEST_ERR_Static
      {
        get
        {
          return dom.DOMException._HIERARCHY_REQUEST_ERR_Static_BackingField;
        }
      }

      [Name("INDEX_SIZE_ERR")]
      public static double INDEX_SIZE_ERR_Static
      {
        get
        {
          return dom.DOMException._INDEX_SIZE_ERR_Static_BackingField;
        }
      }

      [Name("INUSE_ATTRIBUTE_ERR")]
      public static double INUSE_ATTRIBUTE_ERR_Static
      {
        get
        {
          return dom.DOMException._INUSE_ATTRIBUTE_ERR_Static_BackingField;
        }
      }

      [Name("INVALID_ACCESS_ERR")]
      public static double INVALID_ACCESS_ERR_Static
      {
        get
        {
          return dom.DOMException._INVALID_ACCESS_ERR_Static_BackingField;
        }
      }

      [Name("INVALID_CHARACTER_ERR")]
      public static double INVALID_CHARACTER_ERR_Static
      {
        get
        {
          return dom.DOMException._INVALID_CHARACTER_ERR_Static_BackingField;
        }
      }

      [Name("INVALID_MODIFICATION_ERR")]
      public static double INVALID_MODIFICATION_ERR_Static
      {
        get
        {
          return dom.DOMException._INVALID_MODIFICATION_ERR_Static_BackingField;
        }
      }

      [Name("INVALID_NODE_TYPE_ERR")]
      public static double INVALID_NODE_TYPE_ERR_Static
      {
        get
        {
          return dom.DOMException._INVALID_NODE_TYPE_ERR_Static_BackingField;
        }
      }

      [Name("INVALID_STATE_ERR")]
      public static double INVALID_STATE_ERR_Static
      {
        get
        {
          return dom.DOMException._INVALID_STATE_ERR_Static_BackingField;
        }
      }

      [Name("NAMESPACE_ERR")]
      public static double NAMESPACE_ERR_Static
      {
        get
        {
          return dom.DOMException._NAMESPACE_ERR_Static_BackingField;
        }
      }

      [Name("NETWORK_ERR")]
      public static double NETWORK_ERR_Static
      {
        get
        {
          return dom.DOMException._NETWORK_ERR_Static_BackingField;
        }
      }

      [Name("NOT_FOUND_ERR")]
      public static double NOT_FOUND_ERR_Static
      {
        get
        {
          return dom.DOMException._NOT_FOUND_ERR_Static_BackingField;
        }
      }

      [Name("NOT_SUPPORTED_ERR")]
      public static double NOT_SUPPORTED_ERR_Static
      {
        get
        {
          return dom.DOMException._NOT_SUPPORTED_ERR_Static_BackingField;
        }
      }

      [Name("NO_DATA_ALLOWED_ERR")]
      public static double NO_DATA_ALLOWED_ERR_Static
      {
        get
        {
          return dom.DOMException._NO_DATA_ALLOWED_ERR_Static_BackingField;
        }
      }

      [Name("NO_MODIFICATION_ALLOWED_ERR")]
      public static double NO_MODIFICATION_ALLOWED_ERR_Static
      {
        get
        {
          return dom.DOMException._NO_MODIFICATION_ALLOWED_ERR_Static_BackingField;
        }
      }

      [Name("PARSE_ERR")]
      public static double PARSE_ERR_Static
      {
        get
        {
          return dom.DOMException._PARSE_ERR_Static_BackingField;
        }
      }

      [Name("QUOTA_EXCEEDED_ERR")]
      public static double QUOTA_EXCEEDED_ERR_Static
      {
        get
        {
          return dom.DOMException._QUOTA_EXCEEDED_ERR_Static_BackingField;
        }
      }

      [Name("SECURITY_ERR")]
      public static double SECURITY_ERR_Static
      {
        get
        {
          return dom.DOMException._SECURITY_ERR_Static_BackingField;
        }
      }

      [Name("SERIALIZE_ERR")]
      public static double SERIALIZE_ERR_Static
      {
        get
        {
          return dom.DOMException._SERIALIZE_ERR_Static_BackingField;
        }
      }

      [Name("SYNTAX_ERR")]
      public static double SYNTAX_ERR_Static
      {
        get
        {
          return dom.DOMException._SYNTAX_ERR_Static_BackingField;
        }
      }

      [Name("TIMEOUT_ERR")]
      public static double TIMEOUT_ERR_Static
      {
        get
        {
          return dom.DOMException._TIMEOUT_ERR_Static_BackingField;
        }
      }

      [Name("TYPE_MISMATCH_ERR")]
      public static double TYPE_MISMATCH_ERR_Static
      {
        get
        {
          return dom.DOMException._TYPE_MISMATCH_ERR_Static_BackingField;
        }
      }

      [Name("URL_MISMATCH_ERR")]
      public static double URL_MISMATCH_ERR_Static
      {
        get
        {
          return dom.DOMException._URL_MISMATCH_ERR_Static_BackingField;
        }
      }

      [Name("VALIDATION_ERR")]
      public static double VALIDATION_ERR_Static
      {
        get
        {
          return dom.DOMException._VALIDATION_ERR_Static_BackingField;
        }
      }

      [Name("WRONG_DOCUMENT_ERR")]
      public static double WRONG_DOCUMENT_ERR_Static
      {
        get
        {
          return dom.DOMException._WRONG_DOCUMENT_ERR_Static_BackingField;
        }
      }

      public virtual double code
      {
        get
        {
          return this._code_BackingField;
        }
      }

      public virtual string message
      {
        get
        {
          return this._message_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual extern string toString();

      public virtual double ABORT_ERR
      {
        get
        {
          return this._ABORT_ERR_BackingField;
        }
      }

      public virtual double DATA_CLONE_ERR
      {
        get
        {
          return this._DATA_CLONE_ERR_BackingField;
        }
      }

      public virtual double DOMSTRING_SIZE_ERR
      {
        get
        {
          return this._DOMSTRING_SIZE_ERR_BackingField;
        }
      }

      public virtual double HIERARCHY_REQUEST_ERR
      {
        get
        {
          return this._HIERARCHY_REQUEST_ERR_BackingField;
        }
      }

      public virtual double INDEX_SIZE_ERR
      {
        get
        {
          return this._INDEX_SIZE_ERR_BackingField;
        }
      }

      public virtual double INUSE_ATTRIBUTE_ERR
      {
        get
        {
          return this._INUSE_ATTRIBUTE_ERR_BackingField;
        }
      }

      public virtual double INVALID_ACCESS_ERR
      {
        get
        {
          return this._INVALID_ACCESS_ERR_BackingField;
        }
      }

      public virtual double INVALID_CHARACTER_ERR
      {
        get
        {
          return this._INVALID_CHARACTER_ERR_BackingField;
        }
      }

      public virtual double INVALID_MODIFICATION_ERR
      {
        get
        {
          return this._INVALID_MODIFICATION_ERR_BackingField;
        }
      }

      public virtual double INVALID_NODE_TYPE_ERR
      {
        get
        {
          return this._INVALID_NODE_TYPE_ERR_BackingField;
        }
      }

      public virtual double INVALID_STATE_ERR
      {
        get
        {
          return this._INVALID_STATE_ERR_BackingField;
        }
      }

      public virtual double NAMESPACE_ERR
      {
        get
        {
          return this._NAMESPACE_ERR_BackingField;
        }
      }

      public virtual double NETWORK_ERR
      {
        get
        {
          return this._NETWORK_ERR_BackingField;
        }
      }

      public virtual double NOT_FOUND_ERR
      {
        get
        {
          return this._NOT_FOUND_ERR_BackingField;
        }
      }

      public virtual double NOT_SUPPORTED_ERR
      {
        get
        {
          return this._NOT_SUPPORTED_ERR_BackingField;
        }
      }

      public virtual double NO_DATA_ALLOWED_ERR
      {
        get
        {
          return this._NO_DATA_ALLOWED_ERR_BackingField;
        }
      }

      public virtual double NO_MODIFICATION_ALLOWED_ERR
      {
        get
        {
          return this._NO_MODIFICATION_ALLOWED_ERR_BackingField;
        }
      }

      public virtual double PARSE_ERR
      {
        get
        {
          return this._PARSE_ERR_BackingField;
        }
      }

      public virtual double QUOTA_EXCEEDED_ERR
      {
        get
        {
          return this._QUOTA_EXCEEDED_ERR_BackingField;
        }
      }

      public virtual double SECURITY_ERR
      {
        get
        {
          return this._SECURITY_ERR_BackingField;
        }
      }

      public virtual double SERIALIZE_ERR
      {
        get
        {
          return this._SERIALIZE_ERR_BackingField;
        }
      }

      public virtual double SYNTAX_ERR
      {
        get
        {
          return this._SYNTAX_ERR_BackingField;
        }
      }

      public virtual double TIMEOUT_ERR
      {
        get
        {
          return this._TIMEOUT_ERR_BackingField;
        }
      }

      public virtual double TYPE_MISMATCH_ERR
      {
        get
        {
          return this._TYPE_MISMATCH_ERR_BackingField;
        }
      }

      public virtual double URL_MISMATCH_ERR
      {
        get
        {
          return this._URL_MISMATCH_ERR_BackingField;
        }
      }

      public virtual double VALIDATION_ERR
      {
        get
        {
          return this._VALIDATION_ERR_BackingField;
        }
      }

      public virtual double WRONG_DOCUMENT_ERR
      {
        get
        {
          return this._WRONG_DOCUMENT_ERR_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMImplementation : IObject
    {
      private static dom.DOMImplementation _prototype_BackingField;

      public static dom.DOMImplementation prototype
      {
        get
        {
          return dom.DOMImplementation._prototype_BackingField;
        }
        set
        {
          dom.DOMImplementation._prototype_BackingField = value;
        }
      }

      public virtual extern dom.Document createDocument(
        string namespaceURI,
        string qualifiedName,
        dom.DocumentType doctype);

      public virtual extern dom.DocumentType createDocumentType(
        string qualifiedName,
        string publicId,
        string systemId);

      public virtual extern dom.Document createHTMLDocument();

      public virtual extern dom.Document createHTMLDocument(string title);

      public virtual extern bool hasFeature(string feature, string version);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class DOML2DeprecatedColorProperty : dom.DOML2DeprecatedColorProperty.Interface, IObject
    {
      private string _color_BackingField;

      public string color
      {
        get
        {
          return this._color_BackingField;
        }
        set
        {
          this._color_BackingField = value;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        string color { get; set; }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class DOML2DeprecatedSizeProperty : dom.DOML2DeprecatedSizeProperty.Interface, IObject
    {
      private double _size_BackingField;

      public double size
      {
        get
        {
          return this._size_BackingField;
        }
        set
        {
          this._size_BackingField = value;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        double size { get; set; }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMParser : IObject
    {
      private static dom.DOMParser _prototype_BackingField;

      public static dom.DOMParser prototype
      {
        get
        {
          return dom.DOMParser._prototype_BackingField;
        }
        set
        {
          dom.DOMParser._prototype_BackingField = value;
        }
      }

      public virtual extern dom.Document parseFromString(string source, string mimeType);
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMRect : dom.DOMRectReadOnly
    {
      private static dom.DOMRect _prototype_BackingField;
      private double _height_BackingField;
      private double _width_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public extern DOMRect();

      public extern DOMRect(double x);

      public extern DOMRect(double x, double y);

      public extern DOMRect(double x, double y, double width);

      public extern DOMRect(double x, double y, double width, double height);

      public static dom.DOMRect prototype
      {
        get
        {
          return dom.DOMRect._prototype_BackingField;
        }
        set
        {
          dom.DOMRect._prototype_BackingField = value;
        }
      }

      public static extern dom.DOMRect fromRect();

      public static extern dom.DOMRect fromRect(dom.DOMRectInit rectangle);

      public new virtual double height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public new virtual double width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public new virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public new virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class DOMRectList : IEnumerable<dom.DOMRect>, IEnumerable, IHighFiveClass, IObject
    {
      public abstract uint length { get; }

      public abstract dom.DOMRect item(uint index);

      public virtual extern dom.DOMRect this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.DOMRect> IEnumerable<dom.DOMRect>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMRectReadOnly : IObject
    {
      private static dom.DOMRectReadOnly _prototype_BackingField;
      private readonly double _bottom_BackingField;
      private readonly double _height_BackingField;
      private readonly double _left_BackingField;
      private readonly double _right_BackingField;
      private readonly double _top_BackingField;
      private readonly double _width_BackingField;
      private readonly double _x_BackingField;
      private readonly double _y_BackingField;

      public extern DOMRectReadOnly();

      public extern DOMRectReadOnly(double x);

      public extern DOMRectReadOnly(double x, double y);

      public extern DOMRectReadOnly(double x, double y, double width);

      public extern DOMRectReadOnly(double x, double y, double width, double height);

      public static dom.DOMRectReadOnly prototype
      {
        get
        {
          return dom.DOMRectReadOnly._prototype_BackingField;
        }
        set
        {
          dom.DOMRectReadOnly._prototype_BackingField = value;
        }
      }

      public static extern dom.DOMRectReadOnly fromRect();

      public static extern dom.DOMRectReadOnly fromRect(dom.DOMRectInit rectangle);

      public virtual double bottom
      {
        get
        {
          return this._bottom_BackingField;
        }
      }

      public virtual double height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual double left
      {
        get
        {
          return this._left_BackingField;
        }
      }

      public virtual double right
      {
        get
        {
          return this._right_BackingField;
        }
      }

      public virtual double top
      {
        get
        {
          return this._top_BackingField;
        }
      }

      public virtual double width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMSettableTokenList : dom.DOMTokenList
    {
      private static dom.DOMSettableTokenList _prototype_BackingField;
      private string _value_BackingField;

      public static dom.DOMSettableTokenList prototype
      {
        get
        {
          return dom.DOMSettableTokenList._prototype_BackingField;
        }
        set
        {
          dom.DOMSettableTokenList._prototype_BackingField = value;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMStringList : IEnumerable<string>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.DOMStringList _prototype_BackingField;
      private readonly double _length_BackingField;

      public static dom.DOMStringList prototype
      {
        get
        {
          return dom.DOMStringList._prototype_BackingField;
        }
        set
        {
          dom.DOMStringList._prototype_BackingField = value;
        }
      }

      public virtual double length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern bool contains(string str);

      public virtual extern string item(double index);

      public virtual extern string this[double index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<string> IEnumerable<string>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMStringMap : IObject
    {
      private static dom.DOMStringMap _prototype_BackingField;

      public static dom.DOMStringMap prototype
      {
        get
        {
          return dom.DOMStringMap._prototype_BackingField;
        }
        set
        {
          dom.DOMStringMap._prototype_BackingField = value;
        }
      }

      public virtual extern Union<string, Undefined> this[string name] { get; set; }
    }

    [CombinedClass]
    [FormerInterface]
    public class DOMTokenList : IEnumerable<string>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.DOMTokenList _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.DOMTokenList prototype
      {
        get
        {
          return dom.DOMTokenList._prototype_BackingField;
        }
        set
        {
          dom.DOMTokenList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      [ExpandParams]
      public virtual extern void add(params string[] tokens);

      public virtual extern bool contains(string token);

      public virtual extern string item(uint index);

      [ExpandParams]
      public virtual extern void remove(params string[] tokens);

      public virtual extern void replace(string oldToken, string newToken);

      public virtual extern string toString();

      public virtual extern bool toggle(string token);

      public virtual extern bool toggle(string token, bool force);

      public virtual extern string this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<string> IEnumerable<string>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class DataCue : dom.TextTrackCue
    {
      private static dom.DataCue _prototype_BackingField;
      private es5.ArrayBuffer _data_BackingField;

      public static dom.DataCue prototype
      {
        get
        {
          return dom.DataCue._prototype_BackingField;
        }
        set
        {
          dom.DataCue._prototype_BackingField = value;
        }
      }

      public virtual es5.ArrayBuffer data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.DataCue.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.DataCue.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.DataCue.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.DataCue.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.DataCue.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.DataCue.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.DataCue.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.DataCue.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class DataTransfer : IObject
    {
      private static dom.DataTransfer _prototype_BackingField;
      private string _dropEffect_BackingField;
      private string _effectAllowed_BackingField;
      private readonly dom.FileList _files_BackingField;
      private readonly dom.DataTransferItemList _items_BackingField;
      private readonly string[] _types_BackingField;

      public static dom.DataTransfer prototype
      {
        get
        {
          return dom.DataTransfer._prototype_BackingField;
        }
        set
        {
          dom.DataTransfer._prototype_BackingField = value;
        }
      }

      public virtual string dropEffect
      {
        get
        {
          return this._dropEffect_BackingField;
        }
        set
        {
          this._dropEffect_BackingField = value;
        }
      }

      public virtual string effectAllowed
      {
        get
        {
          return this._effectAllowed_BackingField;
        }
        set
        {
          this._effectAllowed_BackingField = value;
        }
      }

      public virtual dom.FileList files
      {
        get
        {
          return this._files_BackingField;
        }
      }

      public virtual dom.DataTransferItemList items
      {
        get
        {
          return this._items_BackingField;
        }
      }

      public virtual string[] types
      {
        get
        {
          return this._types_BackingField;
        }
      }

      public virtual extern bool clearData();

      public virtual extern bool clearData(string format);

      public virtual extern string getData(string format);

      public virtual extern bool setData(string format, string data);

      public virtual extern void setDragImage(dom.Element image, int x, int y);
    }

    [CombinedClass]
    [FormerInterface]
    public class DataTransferItem : IObject
    {
      private static dom.DataTransferItem _prototype_BackingField;
      private readonly string _kind_BackingField;
      private readonly string _type_BackingField;

      public static dom.DataTransferItem prototype
      {
        get
        {
          return dom.DataTransferItem._prototype_BackingField;
        }
        set
        {
          dom.DataTransferItem._prototype_BackingField = value;
        }
      }

      public virtual string kind
      {
        get
        {
          return this._kind_BackingField;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual extern dom.File getAsFile();

      public virtual extern void getAsString(dom.FunctionStringCallback _callback);

      public virtual extern object webkitGetAsEntry();
    }

    [CombinedClass]
    [FormerInterface]
    public class DataTransferItemList : IEnumerable<dom.DataTransferItem>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.DataTransferItemList _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.DataTransferItemList prototype
      {
        get
        {
          return dom.DataTransferItemList._prototype_BackingField;
        }
        set
        {
          dom.DataTransferItemList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.DataTransferItem add(dom.File data);

      public virtual extern dom.DataTransferItem add(string data, string type);

      public virtual extern void clear();

      public virtual extern dom.DataTransferItem item(double index);

      public virtual extern void remove(uint index);

      public virtual extern dom.DataTransferItem this[double name] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.DataTransferItem> IEnumerable<dom.DataTransferItem>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class DeferredPermissionRequest : IObject
    {
      private static dom.DeferredPermissionRequest _prototype_BackingField;
      private readonly double _id_BackingField;
      private readonly dom.MSWebViewPermissionType _type_BackingField;
      private readonly string _uri_BackingField;

      public static dom.DeferredPermissionRequest prototype
      {
        get
        {
          return dom.DeferredPermissionRequest._prototype_BackingField;
        }
        set
        {
          dom.DeferredPermissionRequest._prototype_BackingField = value;
        }
      }

      public virtual double id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual dom.MSWebViewPermissionType type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual string uri
      {
        get
        {
          return this._uri_BackingField;
        }
      }

      public virtual extern void allow();

      public virtual extern void deny();
    }

    [CombinedClass]
    [FormerInterface]
    public class DelayNode : dom.AudioNode
    {
      private static dom.DelayNode _prototype_BackingField;
      private readonly dom.AudioParam _delayTime_BackingField;

      public static dom.DelayNode prototype
      {
        get
        {
          return dom.DelayNode._prototype_BackingField;
        }
        set
        {
          dom.DelayNode._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioParam delayTime
      {
        get
        {
          return this._delayTime_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class DeviceAcceleration : IObject
    {
      private static dom.DeviceAcceleration _prototype_BackingField;
      private readonly double? _x_BackingField;
      private readonly double? _y_BackingField;
      private readonly double? _z_BackingField;

      public static dom.DeviceAcceleration prototype
      {
        get
        {
          return dom.DeviceAcceleration._prototype_BackingField;
        }
        set
        {
          dom.DeviceAcceleration._prototype_BackingField = value;
        }
      }

      public virtual double? x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual double? y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      public virtual double? z
      {
        get
        {
          return this._z_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class DeviceLightEvent : dom.Event
    {
      private static dom.DeviceLightEvent _prototype_BackingField;
      private readonly double _value_BackingField;

      public extern DeviceLightEvent(string typeArg);

      public extern DeviceLightEvent(string typeArg, dom.DeviceLightEventInit eventInitDict);

      public static dom.DeviceLightEvent prototype
      {
        get
        {
          return dom.DeviceLightEvent._prototype_BackingField;
        }
        set
        {
          dom.DeviceLightEvent._prototype_BackingField = value;
        }
      }

      public virtual double value
      {
        get
        {
          return this._value_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class DeviceMotionEvent : dom.Event
    {
      private static dom.DeviceMotionEvent _prototype_BackingField;
      private readonly dom.DeviceAcceleration _acceleration_BackingField;
      private readonly dom.DeviceAcceleration _accelerationIncludingGravity_BackingField;
      private readonly double? _interval_BackingField;
      private readonly dom.DeviceRotationRate _rotationRate_BackingField;

      public extern DeviceMotionEvent(string typeArg);

      public extern DeviceMotionEvent(string typeArg, dom.DeviceMotionEventInit eventInitDict);

      public static dom.DeviceMotionEvent prototype
      {
        get
        {
          return dom.DeviceMotionEvent._prototype_BackingField;
        }
        set
        {
          dom.DeviceMotionEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.DeviceAcceleration acceleration
      {
        get
        {
          return this._acceleration_BackingField;
        }
      }

      public virtual dom.DeviceAcceleration accelerationIncludingGravity
      {
        get
        {
          return this._accelerationIncludingGravity_BackingField;
        }
      }

      public virtual double? interval
      {
        get
        {
          return this._interval_BackingField;
        }
      }

      public virtual dom.DeviceRotationRate rotationRate
      {
        get
        {
          return this._rotationRate_BackingField;
        }
      }

      public virtual extern void initDeviceMotionEvent(
        string type,
        bool bubbles,
        bool cancelable,
        dom.DeviceAccelerationDict acceleration,
        dom.DeviceAccelerationDict accelerationIncludingGravity,
        dom.DeviceRotationRateDict rotationRate,
        double? interval);
    }

    [CombinedClass]
    [FormerInterface]
    public class DeviceOrientationEvent : dom.Event
    {
      private static dom.DeviceOrientationEvent _prototype_BackingField;
      private readonly bool _absolute_BackingField;
      private readonly double? _alpha_BackingField;
      private readonly double? _beta_BackingField;
      private readonly double? _gamma_BackingField;

      public extern DeviceOrientationEvent(string typeArg);

      public extern DeviceOrientationEvent(
        string typeArg,
        dom.DeviceOrientationEventInit eventInitDict);

      public static dom.DeviceOrientationEvent prototype
      {
        get
        {
          return dom.DeviceOrientationEvent._prototype_BackingField;
        }
        set
        {
          dom.DeviceOrientationEvent._prototype_BackingField = value;
        }
      }

      public virtual bool absolute
      {
        get
        {
          return this._absolute_BackingField;
        }
      }

      public virtual double? alpha
      {
        get
        {
          return this._alpha_BackingField;
        }
      }

      public virtual double? beta
      {
        get
        {
          return this._beta_BackingField;
        }
      }

      public virtual double? gamma
      {
        get
        {
          return this._gamma_BackingField;
        }
      }

      public virtual extern void initDeviceOrientationEvent(
        string type,
        bool bubbles,
        bool cancelable,
        double? alpha,
        double? beta,
        double? gamma,
        bool absolute);
    }

    [CombinedClass]
    [FormerInterface]
    public class DeviceRotationRate : IObject
    {
      private static dom.DeviceRotationRate _prototype_BackingField;
      private readonly double? _alpha_BackingField;
      private readonly double? _beta_BackingField;
      private readonly double? _gamma_BackingField;

      public static dom.DeviceRotationRate prototype
      {
        get
        {
          return dom.DeviceRotationRate._prototype_BackingField;
        }
        set
        {
          dom.DeviceRotationRate._prototype_BackingField = value;
        }
      }

      public virtual double? alpha
      {
        get
        {
          return this._alpha_BackingField;
        }
      }

      public virtual double? beta
      {
        get
        {
          return this._beta_BackingField;
        }
      }

      public virtual double? gamma
      {
        get
        {
          return this._gamma_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DhImportKeyParams : dom.Algorithm
    {
      private es5.Uint8Array _generator_BackingField;
      private es5.Uint8Array _prime_BackingField;

      public es5.Uint8Array generator
      {
        get
        {
          return this._generator_BackingField;
        }
        set
        {
          this._generator_BackingField = value;
        }
      }

      public es5.Uint8Array prime
      {
        get
        {
          return this._prime_BackingField;
        }
        set
        {
          this._prime_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DhKeyAlgorithm : dom.KeyAlgorithm
    {
      private es5.Uint8Array _generator_BackingField;
      private es5.Uint8Array _prime_BackingField;

      public es5.Uint8Array generator
      {
        get
        {
          return this._generator_BackingField;
        }
        set
        {
          this._generator_BackingField = value;
        }
      }

      public es5.Uint8Array prime
      {
        get
        {
          return this._prime_BackingField;
        }
        set
        {
          this._prime_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DhKeyDeriveParams : dom.Algorithm
    {
      private dom.CryptoKey _public_BackingField;

      [Name("public")]
      public dom.CryptoKey @public
      {
        get
        {
          return this._public_BackingField;
        }
        set
        {
          this._public_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DhKeyGenParams : dom.Algorithm
    {
      private es5.Uint8Array _generator_BackingField;
      private es5.Uint8Array _prime_BackingField;

      public es5.Uint8Array generator
      {
        get
        {
          return this._generator_BackingField;
        }
        set
        {
          this._generator_BackingField = value;
        }
      }

      public es5.Uint8Array prime
      {
        get
        {
          return this._prime_BackingField;
        }
        set
        {
          this._prime_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class DocumentEventMap : dom.GlobalEventHandlersEventMap
    {
      private dom.UIEvent _abort_BackingField;
      private dom.Event _activate_BackingField;
      private dom.Event _beforeactivate_BackingField;
      private dom.Event _beforedeactivate_BackingField;
      private dom.FocusEvent _blur_BackingField;
      private dom.Event _canplay_BackingField;
      private dom.Event _canplaythrough_BackingField;
      private dom.Event _change_BackingField;
      private dom.MouseEvent _click_BackingField;
      private dom.PointerEvent _contextmenu_BackingField;
      private dom.MouseEvent _dblclick_BackingField;
      private dom.Event _deactivate_BackingField;
      private dom.DragEvent _drag_BackingField;
      private dom.DragEvent _dragend_BackingField;
      private dom.DragEvent _dragenter_BackingField;
      private dom.DragEvent _dragleave_BackingField;
      private dom.DragEvent _dragover_BackingField;
      private dom.DragEvent _dragstart_BackingField;
      private dom.DragEvent _drop_BackingField;
      private dom.Event _durationchange_BackingField;
      private dom.Event _emptied_BackingField;
      private dom.Event _ended_BackingField;
      private dom.ErrorEvent _error_BackingField;
      private dom.FocusEvent _focus_BackingField;
      private dom.Event _fullscreenchange_BackingField;
      private dom.Event _fullscreenerror_BackingField;
      private dom.Event _input_BackingField;
      private dom.Event _invalid_BackingField;
      private dom.KeyboardEvent _keydown_BackingField;
      private dom.KeyboardEvent _keypress_BackingField;
      private dom.KeyboardEvent _keyup_BackingField;
      private dom.Event _load_BackingField;
      private dom.Event _loadeddata_BackingField;
      private dom.Event _loadedmetadata_BackingField;
      private dom.Event _loadstart_BackingField;
      private dom.MouseEvent _mousedown_BackingField;
      private dom.MouseEvent _mousemove_BackingField;
      private dom.MouseEvent _mouseout_BackingField;
      private dom.MouseEvent _mouseover_BackingField;
      private dom.MouseEvent _mouseup_BackingField;
      private dom.WheelEvent _mousewheel_BackingField;
      private dom.Event _MSContentZoom_BackingField;
      private dom.Event _MSGestureChange_BackingField;
      private dom.Event _MSGestureDoubleTap_BackingField;
      private dom.Event _MSGestureEnd_BackingField;
      private dom.Event _MSGestureHold_BackingField;
      private dom.Event _MSGestureStart_BackingField;
      private dom.Event _MSGestureTap_BackingField;
      private dom.Event _MSInertiaStart_BackingField;
      private dom.Event _MSManipulationStateChanged_BackingField;
      private dom.Event _MSPointerCancel_BackingField;
      private dom.Event _MSPointerDown_BackingField;
      private dom.Event _MSPointerEnter_BackingField;
      private dom.Event _MSPointerLeave_BackingField;
      private dom.Event _MSPointerMove_BackingField;
      private dom.Event _MSPointerOut_BackingField;
      private dom.Event _MSPointerOver_BackingField;
      private dom.Event _MSPointerUp_BackingField;
      private dom.Event _mssitemodejumplistitemremoved_BackingField;
      private dom.Event _msthumbnailclick_BackingField;
      private dom.Event _pause_BackingField;
      private dom.Event _play_BackingField;
      private dom.Event _playing_BackingField;
      private dom.Event _pointerlockchange_BackingField;
      private dom.Event _pointerlockerror_BackingField;
      private dom.ProgressEvent _progress_BackingField;
      private dom.Event _ratechange_BackingField;
      private dom.Event _readystatechange_BackingField;
      private dom.Event _reset_BackingField;
      private dom.UIEvent _scroll_BackingField;
      private dom.Event _seeked_BackingField;
      private dom.Event _seeking_BackingField;
      private dom.UIEvent _select_BackingField;
      private dom.Event _selectionchange_BackingField;
      private dom.Event _selectstart_BackingField;
      private dom.Event _stalled_BackingField;
      private dom.Event _stop_BackingField;
      private dom.Event _submit_BackingField;
      private dom.Event _suspend_BackingField;
      private dom.Event _timeupdate_BackingField;
      private dom.TouchEvent _touchcancel_BackingField;
      private dom.TouchEvent _touchend_BackingField;
      private dom.TouchEvent _touchmove_BackingField;
      private dom.TouchEvent _touchstart_BackingField;
      private dom.Event _volumechange_BackingField;
      private dom.Event _waiting_BackingField;
      private dom.Event _webkitfullscreenchange_BackingField;
      private dom.Event _webkitfullscreenerror_BackingField;

      public dom.UIEvent abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      public dom.Event activate
      {
        get
        {
          return this._activate_BackingField;
        }
        set
        {
          this._activate_BackingField = value;
        }
      }

      public dom.Event beforeactivate
      {
        get
        {
          return this._beforeactivate_BackingField;
        }
        set
        {
          this._beforeactivate_BackingField = value;
        }
      }

      public dom.Event beforedeactivate
      {
        get
        {
          return this._beforedeactivate_BackingField;
        }
        set
        {
          this._beforedeactivate_BackingField = value;
        }
      }

      public dom.FocusEvent blur
      {
        get
        {
          return this._blur_BackingField;
        }
        set
        {
          this._blur_BackingField = value;
        }
      }

      public dom.Event canplay
      {
        get
        {
          return this._canplay_BackingField;
        }
        set
        {
          this._canplay_BackingField = value;
        }
      }

      public dom.Event canplaythrough
      {
        get
        {
          return this._canplaythrough_BackingField;
        }
        set
        {
          this._canplaythrough_BackingField = value;
        }
      }

      public dom.Event change
      {
        get
        {
          return this._change_BackingField;
        }
        set
        {
          this._change_BackingField = value;
        }
      }

      public dom.MouseEvent click
      {
        get
        {
          return this._click_BackingField;
        }
        set
        {
          this._click_BackingField = value;
        }
      }

      public dom.PointerEvent contextmenu
      {
        get
        {
          return this._contextmenu_BackingField;
        }
        set
        {
          this._contextmenu_BackingField = value;
        }
      }

      public dom.MouseEvent dblclick
      {
        get
        {
          return this._dblclick_BackingField;
        }
        set
        {
          this._dblclick_BackingField = value;
        }
      }

      public dom.Event deactivate
      {
        get
        {
          return this._deactivate_BackingField;
        }
        set
        {
          this._deactivate_BackingField = value;
        }
      }

      public dom.DragEvent drag
      {
        get
        {
          return this._drag_BackingField;
        }
        set
        {
          this._drag_BackingField = value;
        }
      }

      public dom.DragEvent dragend
      {
        get
        {
          return this._dragend_BackingField;
        }
        set
        {
          this._dragend_BackingField = value;
        }
      }

      public dom.DragEvent dragenter
      {
        get
        {
          return this._dragenter_BackingField;
        }
        set
        {
          this._dragenter_BackingField = value;
        }
      }

      public dom.DragEvent dragleave
      {
        get
        {
          return this._dragleave_BackingField;
        }
        set
        {
          this._dragleave_BackingField = value;
        }
      }

      public dom.DragEvent dragover
      {
        get
        {
          return this._dragover_BackingField;
        }
        set
        {
          this._dragover_BackingField = value;
        }
      }

      public dom.DragEvent dragstart
      {
        get
        {
          return this._dragstart_BackingField;
        }
        set
        {
          this._dragstart_BackingField = value;
        }
      }

      public dom.DragEvent drop
      {
        get
        {
          return this._drop_BackingField;
        }
        set
        {
          this._drop_BackingField = value;
        }
      }

      public dom.Event durationchange
      {
        get
        {
          return this._durationchange_BackingField;
        }
        set
        {
          this._durationchange_BackingField = value;
        }
      }

      public dom.Event emptied
      {
        get
        {
          return this._emptied_BackingField;
        }
        set
        {
          this._emptied_BackingField = value;
        }
      }

      public dom.Event ended
      {
        get
        {
          return this._ended_BackingField;
        }
        set
        {
          this._ended_BackingField = value;
        }
      }

      public dom.ErrorEvent error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.FocusEvent focus
      {
        get
        {
          return this._focus_BackingField;
        }
        set
        {
          this._focus_BackingField = value;
        }
      }

      public dom.Event fullscreenchange
      {
        get
        {
          return this._fullscreenchange_BackingField;
        }
        set
        {
          this._fullscreenchange_BackingField = value;
        }
      }

      public dom.Event fullscreenerror
      {
        get
        {
          return this._fullscreenerror_BackingField;
        }
        set
        {
          this._fullscreenerror_BackingField = value;
        }
      }

      public dom.Event input
      {
        get
        {
          return this._input_BackingField;
        }
        set
        {
          this._input_BackingField = value;
        }
      }

      public dom.Event invalid
      {
        get
        {
          return this._invalid_BackingField;
        }
        set
        {
          this._invalid_BackingField = value;
        }
      }

      public dom.KeyboardEvent keydown
      {
        get
        {
          return this._keydown_BackingField;
        }
        set
        {
          this._keydown_BackingField = value;
        }
      }

      public dom.KeyboardEvent keypress
      {
        get
        {
          return this._keypress_BackingField;
        }
        set
        {
          this._keypress_BackingField = value;
        }
      }

      public dom.KeyboardEvent keyup
      {
        get
        {
          return this._keyup_BackingField;
        }
        set
        {
          this._keyup_BackingField = value;
        }
      }

      public dom.Event load
      {
        get
        {
          return this._load_BackingField;
        }
        set
        {
          this._load_BackingField = value;
        }
      }

      public dom.Event loadeddata
      {
        get
        {
          return this._loadeddata_BackingField;
        }
        set
        {
          this._loadeddata_BackingField = value;
        }
      }

      public dom.Event loadedmetadata
      {
        get
        {
          return this._loadedmetadata_BackingField;
        }
        set
        {
          this._loadedmetadata_BackingField = value;
        }
      }

      public dom.Event loadstart
      {
        get
        {
          return this._loadstart_BackingField;
        }
        set
        {
          this._loadstart_BackingField = value;
        }
      }

      public dom.MouseEvent mousedown
      {
        get
        {
          return this._mousedown_BackingField;
        }
        set
        {
          this._mousedown_BackingField = value;
        }
      }

      public dom.MouseEvent mousemove
      {
        get
        {
          return this._mousemove_BackingField;
        }
        set
        {
          this._mousemove_BackingField = value;
        }
      }

      public dom.MouseEvent mouseout
      {
        get
        {
          return this._mouseout_BackingField;
        }
        set
        {
          this._mouseout_BackingField = value;
        }
      }

      public dom.MouseEvent mouseover
      {
        get
        {
          return this._mouseover_BackingField;
        }
        set
        {
          this._mouseover_BackingField = value;
        }
      }

      public dom.MouseEvent mouseup
      {
        get
        {
          return this._mouseup_BackingField;
        }
        set
        {
          this._mouseup_BackingField = value;
        }
      }

      public dom.WheelEvent mousewheel
      {
        get
        {
          return this._mousewheel_BackingField;
        }
        set
        {
          this._mousewheel_BackingField = value;
        }
      }

      public dom.Event MSContentZoom
      {
        get
        {
          return this._MSContentZoom_BackingField;
        }
        set
        {
          this._MSContentZoom_BackingField = value;
        }
      }

      public dom.Event MSGestureChange
      {
        get
        {
          return this._MSGestureChange_BackingField;
        }
        set
        {
          this._MSGestureChange_BackingField = value;
        }
      }

      public dom.Event MSGestureDoubleTap
      {
        get
        {
          return this._MSGestureDoubleTap_BackingField;
        }
        set
        {
          this._MSGestureDoubleTap_BackingField = value;
        }
      }

      public dom.Event MSGestureEnd
      {
        get
        {
          return this._MSGestureEnd_BackingField;
        }
        set
        {
          this._MSGestureEnd_BackingField = value;
        }
      }

      public dom.Event MSGestureHold
      {
        get
        {
          return this._MSGestureHold_BackingField;
        }
        set
        {
          this._MSGestureHold_BackingField = value;
        }
      }

      public dom.Event MSGestureStart
      {
        get
        {
          return this._MSGestureStart_BackingField;
        }
        set
        {
          this._MSGestureStart_BackingField = value;
        }
      }

      public dom.Event MSGestureTap
      {
        get
        {
          return this._MSGestureTap_BackingField;
        }
        set
        {
          this._MSGestureTap_BackingField = value;
        }
      }

      public dom.Event MSInertiaStart
      {
        get
        {
          return this._MSInertiaStart_BackingField;
        }
        set
        {
          this._MSInertiaStart_BackingField = value;
        }
      }

      public dom.Event MSManipulationStateChanged
      {
        get
        {
          return this._MSManipulationStateChanged_BackingField;
        }
        set
        {
          this._MSManipulationStateChanged_BackingField = value;
        }
      }

      public dom.Event MSPointerCancel
      {
        get
        {
          return this._MSPointerCancel_BackingField;
        }
        set
        {
          this._MSPointerCancel_BackingField = value;
        }
      }

      public dom.Event MSPointerDown
      {
        get
        {
          return this._MSPointerDown_BackingField;
        }
        set
        {
          this._MSPointerDown_BackingField = value;
        }
      }

      public dom.Event MSPointerEnter
      {
        get
        {
          return this._MSPointerEnter_BackingField;
        }
        set
        {
          this._MSPointerEnter_BackingField = value;
        }
      }

      public dom.Event MSPointerLeave
      {
        get
        {
          return this._MSPointerLeave_BackingField;
        }
        set
        {
          this._MSPointerLeave_BackingField = value;
        }
      }

      public dom.Event MSPointerMove
      {
        get
        {
          return this._MSPointerMove_BackingField;
        }
        set
        {
          this._MSPointerMove_BackingField = value;
        }
      }

      public dom.Event MSPointerOut
      {
        get
        {
          return this._MSPointerOut_BackingField;
        }
        set
        {
          this._MSPointerOut_BackingField = value;
        }
      }

      public dom.Event MSPointerOver
      {
        get
        {
          return this._MSPointerOver_BackingField;
        }
        set
        {
          this._MSPointerOver_BackingField = value;
        }
      }

      public dom.Event MSPointerUp
      {
        get
        {
          return this._MSPointerUp_BackingField;
        }
        set
        {
          this._MSPointerUp_BackingField = value;
        }
      }

      public dom.Event mssitemodejumplistitemremoved
      {
        get
        {
          return this._mssitemodejumplistitemremoved_BackingField;
        }
        set
        {
          this._mssitemodejumplistitemremoved_BackingField = value;
        }
      }

      public dom.Event msthumbnailclick
      {
        get
        {
          return this._msthumbnailclick_BackingField;
        }
        set
        {
          this._msthumbnailclick_BackingField = value;
        }
      }

      public dom.Event pause
      {
        get
        {
          return this._pause_BackingField;
        }
        set
        {
          this._pause_BackingField = value;
        }
      }

      public dom.Event play
      {
        get
        {
          return this._play_BackingField;
        }
        set
        {
          this._play_BackingField = value;
        }
      }

      public dom.Event playing
      {
        get
        {
          return this._playing_BackingField;
        }
        set
        {
          this._playing_BackingField = value;
        }
      }

      public dom.Event pointerlockchange
      {
        get
        {
          return this._pointerlockchange_BackingField;
        }
        set
        {
          this._pointerlockchange_BackingField = value;
        }
      }

      public dom.Event pointerlockerror
      {
        get
        {
          return this._pointerlockerror_BackingField;
        }
        set
        {
          this._pointerlockerror_BackingField = value;
        }
      }

      public dom.ProgressEvent progress
      {
        get
        {
          return this._progress_BackingField;
        }
        set
        {
          this._progress_BackingField = value;
        }
      }

      public dom.Event ratechange
      {
        get
        {
          return this._ratechange_BackingField;
        }
        set
        {
          this._ratechange_BackingField = value;
        }
      }

      public dom.Event readystatechange
      {
        get
        {
          return this._readystatechange_BackingField;
        }
        set
        {
          this._readystatechange_BackingField = value;
        }
      }

      public dom.Event reset
      {
        get
        {
          return this._reset_BackingField;
        }
        set
        {
          this._reset_BackingField = value;
        }
      }

      public dom.UIEvent scroll
      {
        get
        {
          return this._scroll_BackingField;
        }
        set
        {
          this._scroll_BackingField = value;
        }
      }

      public dom.Event seeked
      {
        get
        {
          return this._seeked_BackingField;
        }
        set
        {
          this._seeked_BackingField = value;
        }
      }

      public dom.Event seeking
      {
        get
        {
          return this._seeking_BackingField;
        }
        set
        {
          this._seeking_BackingField = value;
        }
      }

      public dom.UIEvent select
      {
        get
        {
          return this._select_BackingField;
        }
        set
        {
          this._select_BackingField = value;
        }
      }

      public dom.Event selectionchange
      {
        get
        {
          return this._selectionchange_BackingField;
        }
        set
        {
          this._selectionchange_BackingField = value;
        }
      }

      public dom.Event selectstart
      {
        get
        {
          return this._selectstart_BackingField;
        }
        set
        {
          this._selectstart_BackingField = value;
        }
      }

      public dom.Event stalled
      {
        get
        {
          return this._stalled_BackingField;
        }
        set
        {
          this._stalled_BackingField = value;
        }
      }

      public dom.Event stop
      {
        get
        {
          return this._stop_BackingField;
        }
        set
        {
          this._stop_BackingField = value;
        }
      }

      public dom.Event submit
      {
        get
        {
          return this._submit_BackingField;
        }
        set
        {
          this._submit_BackingField = value;
        }
      }

      public dom.Event suspend
      {
        get
        {
          return this._suspend_BackingField;
        }
        set
        {
          this._suspend_BackingField = value;
        }
      }

      public dom.Event timeupdate
      {
        get
        {
          return this._timeupdate_BackingField;
        }
        set
        {
          this._timeupdate_BackingField = value;
        }
      }

      public dom.TouchEvent touchcancel
      {
        get
        {
          return this._touchcancel_BackingField;
        }
        set
        {
          this._touchcancel_BackingField = value;
        }
      }

      public dom.TouchEvent touchend
      {
        get
        {
          return this._touchend_BackingField;
        }
        set
        {
          this._touchend_BackingField = value;
        }
      }

      public dom.TouchEvent touchmove
      {
        get
        {
          return this._touchmove_BackingField;
        }
        set
        {
          this._touchmove_BackingField = value;
        }
      }

      public dom.TouchEvent touchstart
      {
        get
        {
          return this._touchstart_BackingField;
        }
        set
        {
          this._touchstart_BackingField = value;
        }
      }

      public dom.Event volumechange
      {
        get
        {
          return this._volumechange_BackingField;
        }
        set
        {
          this._volumechange_BackingField = value;
        }
      }

      public dom.Event waiting
      {
        get
        {
          return this._waiting_BackingField;
        }
        set
        {
          this._waiting_BackingField = value;
        }
      }

      public dom.Event webkitfullscreenchange
      {
        get
        {
          return this._webkitfullscreenchange_BackingField;
        }
        set
        {
          this._webkitfullscreenchange_BackingField = value;
        }
      }

      public dom.Event webkitfullscreenerror
      {
        get
        {
          return this._webkitfullscreenerror_BackingField;
        }
        set
        {
          this._webkitfullscreenerror_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"abort\"")]
        public static readonly KeyOf<dom.DocumentEventMap> abort;
        [Template("\"activate\"")]
        public static readonly KeyOf<dom.DocumentEventMap> activate;
        [Template("\"beforeactivate\"")]
        public static readonly KeyOf<dom.DocumentEventMap> beforeactivate;
        [Template("\"beforedeactivate\"")]
        public static readonly KeyOf<dom.DocumentEventMap> beforedeactivate;
        [Template("\"blur\"")]
        public static readonly KeyOf<dom.DocumentEventMap> blur;
        [Template("\"canplay\"")]
        public static readonly KeyOf<dom.DocumentEventMap> canplay;
        [Template("\"canplaythrough\"")]
        public static readonly KeyOf<dom.DocumentEventMap> canplaythrough;
        [Template("\"change\"")]
        public static readonly KeyOf<dom.DocumentEventMap> change;
        [Template("\"click\"")]
        public static readonly KeyOf<dom.DocumentEventMap> click;
        [Template("\"contextmenu\"")]
        public static readonly KeyOf<dom.DocumentEventMap> contextmenu;
        [Template("\"dblclick\"")]
        public static readonly KeyOf<dom.DocumentEventMap> dblclick;
        [Template("\"deactivate\"")]
        public static readonly KeyOf<dom.DocumentEventMap> deactivate;
        [Template("\"drag\"")]
        public static readonly KeyOf<dom.DocumentEventMap> drag;
        [Template("\"dragend\"")]
        public static readonly KeyOf<dom.DocumentEventMap> dragend;
        [Template("\"dragenter\"")]
        public static readonly KeyOf<dom.DocumentEventMap> dragenter;
        [Template("\"dragleave\"")]
        public static readonly KeyOf<dom.DocumentEventMap> dragleave;
        [Template("\"dragover\"")]
        public static readonly KeyOf<dom.DocumentEventMap> dragover;
        [Template("\"dragstart\"")]
        public static readonly KeyOf<dom.DocumentEventMap> dragstart;
        [Template("\"drop\"")]
        public static readonly KeyOf<dom.DocumentEventMap> drop;
        [Template("\"durationchange\"")]
        public static readonly KeyOf<dom.DocumentEventMap> durationchange;
        [Template("\"emptied\"")]
        public static readonly KeyOf<dom.DocumentEventMap> emptied;
        [Template("\"ended\"")]
        public static readonly KeyOf<dom.DocumentEventMap> ended;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.DocumentEventMap> error;
        [Template("\"focus\"")]
        public static readonly KeyOf<dom.DocumentEventMap> focus;
        [Template("\"fullscreenchange\"")]
        public static readonly KeyOf<dom.DocumentEventMap> fullscreenchange;
        [Template("\"fullscreenerror\"")]
        public static readonly KeyOf<dom.DocumentEventMap> fullscreenerror;
        [Template("\"input\"")]
        public static readonly KeyOf<dom.DocumentEventMap> input;
        [Template("\"invalid\"")]
        public static readonly KeyOf<dom.DocumentEventMap> invalid;
        [Template("\"keydown\"")]
        public static readonly KeyOf<dom.DocumentEventMap> keydown;
        [Template("\"keypress\"")]
        public static readonly KeyOf<dom.DocumentEventMap> keypress;
        [Template("\"keyup\"")]
        public static readonly KeyOf<dom.DocumentEventMap> keyup;
        [Template("\"load\"")]
        public static readonly KeyOf<dom.DocumentEventMap> load;
        [Template("\"loadeddata\"")]
        public static readonly KeyOf<dom.DocumentEventMap> loadeddata;
        [Template("\"loadedmetadata\"")]
        public static readonly KeyOf<dom.DocumentEventMap> loadedmetadata;
        [Template("\"loadstart\"")]
        public static readonly KeyOf<dom.DocumentEventMap> loadstart;
        [Template("\"mousedown\"")]
        public static readonly KeyOf<dom.DocumentEventMap> mousedown;
        [Template("\"mousemove\"")]
        public static readonly KeyOf<dom.DocumentEventMap> mousemove;
        [Template("\"mouseout\"")]
        public static readonly KeyOf<dom.DocumentEventMap> mouseout;
        [Template("\"mouseover\"")]
        public static readonly KeyOf<dom.DocumentEventMap> mouseover;
        [Template("\"mouseup\"")]
        public static readonly KeyOf<dom.DocumentEventMap> mouseup;
        [Template("\"mousewheel\"")]
        public static readonly KeyOf<dom.DocumentEventMap> mousewheel;
        [Template("\"MSContentZoom\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSContentZoom;
        [Template("\"MSGestureChange\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSGestureChange;
        [Template("\"MSGestureDoubleTap\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSGestureDoubleTap;
        [Template("\"MSGestureEnd\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSGestureEnd;
        [Template("\"MSGestureHold\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSGestureHold;
        [Template("\"MSGestureStart\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSGestureStart;
        [Template("\"MSGestureTap\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSGestureTap;
        [Template("\"MSInertiaStart\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSInertiaStart;
        [Template("\"MSManipulationStateChanged\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSManipulationStateChanged;
        [Template("\"MSPointerCancel\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSPointerCancel;
        [Template("\"MSPointerDown\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSPointerDown;
        [Template("\"MSPointerEnter\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSPointerEnter;
        [Template("\"MSPointerLeave\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSPointerLeave;
        [Template("\"MSPointerMove\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSPointerMove;
        [Template("\"MSPointerOut\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSPointerOut;
        [Template("\"MSPointerOver\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSPointerOver;
        [Template("\"MSPointerUp\"")]
        public static readonly KeyOf<dom.DocumentEventMap> MSPointerUp;
        [Template("\"mssitemodejumplistitemremoved\"")]
        public static readonly KeyOf<dom.DocumentEventMap> mssitemodejumplistitemremoved;
        [Template("\"msthumbnailclick\"")]
        public static readonly KeyOf<dom.DocumentEventMap> msthumbnailclick;
        [Template("\"pause\"")]
        public static readonly KeyOf<dom.DocumentEventMap> pause;
        [Template("\"play\"")]
        public static readonly KeyOf<dom.DocumentEventMap> play;
        [Template("\"playing\"")]
        public static readonly KeyOf<dom.DocumentEventMap> playing;
        [Template("\"pointerlockchange\"")]
        public static readonly KeyOf<dom.DocumentEventMap> pointerlockchange;
        [Template("\"pointerlockerror\"")]
        public static readonly KeyOf<dom.DocumentEventMap> pointerlockerror;
        [Template("\"progress\"")]
        public static readonly KeyOf<dom.DocumentEventMap> progress;
        [Template("\"ratechange\"")]
        public static readonly KeyOf<dom.DocumentEventMap> ratechange;
        [Template("\"readystatechange\"")]
        public static readonly KeyOf<dom.DocumentEventMap> readystatechange;
        [Template("\"reset\"")]
        public static readonly KeyOf<dom.DocumentEventMap> reset;
        [Template("\"scroll\"")]
        public static readonly KeyOf<dom.DocumentEventMap> scroll;
        [Template("\"seeked\"")]
        public static readonly KeyOf<dom.DocumentEventMap> seeked;
        [Template("\"seeking\"")]
        public static readonly KeyOf<dom.DocumentEventMap> seeking;
        [Template("\"select\"")]
        public static readonly KeyOf<dom.DocumentEventMap> select;
        [Template("\"selectionchange\"")]
        public static readonly KeyOf<dom.DocumentEventMap> selectionchange;
        [Template("\"selectstart\"")]
        public static readonly KeyOf<dom.DocumentEventMap> selectstart;
        [Template("\"stalled\"")]
        public static readonly KeyOf<dom.DocumentEventMap> stalled;
        [Template("\"stop\"")]
        public static readonly KeyOf<dom.DocumentEventMap> stop;
        [Template("\"submit\"")]
        public static readonly KeyOf<dom.DocumentEventMap> submit;
        [Template("\"suspend\"")]
        public static readonly KeyOf<dom.DocumentEventMap> suspend;
        [Template("\"timeupdate\"")]
        public static readonly KeyOf<dom.DocumentEventMap> timeupdate;
        [Template("\"touchcancel\"")]
        public static readonly KeyOf<dom.DocumentEventMap> touchcancel;
        [Template("\"touchend\"")]
        public static readonly KeyOf<dom.DocumentEventMap> touchend;
        [Template("\"touchmove\"")]
        public static readonly KeyOf<dom.DocumentEventMap> touchmove;
        [Template("\"touchstart\"")]
        public static readonly KeyOf<dom.DocumentEventMap> touchstart;
        [Template("\"volumechange\"")]
        public static readonly KeyOf<dom.DocumentEventMap> volumechange;
        [Template("\"waiting\"")]
        public static readonly KeyOf<dom.DocumentEventMap> waiting;
        [Template("\"webkitfullscreenchange\"")]
        public static readonly KeyOf<dom.DocumentEventMap> webkitfullscreenchange;
        [Template("\"webkitfullscreenerror\"")]
        public static readonly KeyOf<dom.DocumentEventMap> webkitfullscreenerror;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Document : dom.Node, dom.GlobalEventHandlers.Interface, IObject, dom.ParentNode.Interface, dom.DocumentEvent.Interface
    {
      private static dom.Document _prototype_BackingField;
      private readonly string _URL_BackingField;
      private readonly string _URLUnencoded_BackingField;
      private readonly dom.Element _activeElement_BackingField;
      private string _alinkColor_BackingField;
      private readonly dom.HTMLAllCollection _all_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLAnchorElement> _anchors_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLAppletElement> _applets_BackingField;
      private string _bgColor_BackingField;
      private dom.HTMLElement _body_BackingField;
      private readonly string _characterSet_BackingField;
      private string _charset_BackingField;
      private readonly string _compatMode_BackingField;
      private string _cookie_BackingField;
      private readonly Union<dom.HTMLScriptElement, dom.SVGScriptElement, Null> _currentScript_BackingField;
      private readonly dom.Window _defaultView_BackingField;
      private string _designMode_BackingField;
      private string _dir_BackingField;
      private readonly dom.DocumentType _doctype_BackingField;
      private readonly dom.HTMLElement _documentElement_BackingField;
      private string _domain_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLEmbedElement> _embeds_BackingField;
      private string _fgColor_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLFormElement> _forms_BackingField;
      private readonly dom.Element _fullscreenElement_BackingField;
      private readonly bool _fullscreenEnabled_BackingField;
      private readonly dom.HTMLHeadElement _head_BackingField;
      private readonly bool _hidden_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLImageElement> _images_BackingField;
      private readonly dom.DOMImplementation _implementation_BackingField;
      private readonly string _inputEncoding_BackingField;
      private readonly string _lastModified_BackingField;
      private string _linkColor_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLElement> _links_BackingField;
      private dom.Location _location_BackingField;
      private bool _msCSSOMElementFloatMetrics_BackingField;
      private bool _msCapsLockWarningOff_BackingField;
      private dom.Document.onabortFn _onabort_BackingField;
      private dom.Document.onactivateFn _onactivate_BackingField;
      private dom.Document.onactivateFn _onbeforeactivate_BackingField;
      private dom.Document.onactivateFn _onbeforedeactivate_BackingField;
      private dom.Document.onblurFn _onblur_BackingField;
      private dom.Document.onactivateFn _oncanplay_BackingField;
      private dom.Document.onactivateFn _oncanplaythrough_BackingField;
      private dom.Document.onactivateFn _onchange_BackingField;
      private dom.Document.onclickFn _onclick_BackingField;
      private dom.Document.oncontextmenuFn _oncontextmenu_BackingField;
      private dom.Document.onclickFn _ondblclick_BackingField;
      private dom.Document.onactivateFn _ondeactivate_BackingField;
      private dom.Document.ondragFn _ondrag_BackingField;
      private dom.Document.ondragFn _ondragend_BackingField;
      private dom.Document.ondragFn _ondragenter_BackingField;
      private dom.Document.ondragFn _ondragleave_BackingField;
      private dom.Document.ondragFn _ondragover_BackingField;
      private dom.Document.ondragFn _ondragstart_BackingField;
      private dom.Document.ondragFn _ondrop_BackingField;
      private dom.Document.onactivateFn _ondurationchange_BackingField;
      private dom.Document.onactivateFn _onemptied_BackingField;
      private dom.Document.onactivateFn _onended_BackingField;
      private dom.Document.onerrorFn _onerror_BackingField;
      private dom.Document.onblurFn _onfocus_BackingField;
      private dom.Document.onactivateFn _onfullscreenchange_BackingField;
      private dom.Document.onactivateFn _onfullscreenerror_BackingField;
      private dom.Document.onactivateFn _oninput_BackingField;
      private dom.Document.onactivateFn _oninvalid_BackingField;
      private dom.Document.onkeydownFn _onkeydown_BackingField;
      private dom.Document.onkeydownFn _onkeypress_BackingField;
      private dom.Document.onkeydownFn _onkeyup_BackingField;
      private dom.Document.onactivateFn _onload_BackingField;
      private dom.Document.onactivateFn _onloadeddata_BackingField;
      private dom.Document.onactivateFn _onloadedmetadata_BackingField;
      private dom.Document.onactivateFn _onloadstart_BackingField;
      private dom.Document.onclickFn _onmousedown_BackingField;
      private dom.Document.onclickFn _onmousemove_BackingField;
      private dom.Document.onclickFn _onmouseout_BackingField;
      private dom.Document.onclickFn _onmouseover_BackingField;
      private dom.Document.onclickFn _onmouseup_BackingField;
      private dom.Document.onmousewheelFn _onmousewheel_BackingField;
      private dom.Document.onactivateFn _onmscontentzoom_BackingField;
      private dom.Document.onactivateFn _onmsgesturechange_BackingField;
      private dom.Document.onactivateFn _onmsgesturedoubletap_BackingField;
      private dom.Document.onactivateFn _onmsgestureend_BackingField;
      private dom.Document.onactivateFn _onmsgesturehold_BackingField;
      private dom.Document.onactivateFn _onmsgesturestart_BackingField;
      private dom.Document.onactivateFn _onmsgesturetap_BackingField;
      private dom.Document.onactivateFn _onmsinertiastart_BackingField;
      private dom.Document.onactivateFn _onmsmanipulationstatechanged_BackingField;
      private dom.Document.onactivateFn _onmspointercancel_BackingField;
      private dom.Document.onactivateFn _onmspointerdown_BackingField;
      private dom.Document.onactivateFn _onmspointerenter_BackingField;
      private dom.Document.onactivateFn _onmspointerleave_BackingField;
      private dom.Document.onactivateFn _onmspointermove_BackingField;
      private dom.Document.onactivateFn _onmspointerout_BackingField;
      private dom.Document.onactivateFn _onmspointerover_BackingField;
      private dom.Document.onactivateFn _onmspointerup_BackingField;
      private dom.Document.onactivateFn _onmssitemodejumplistitemremoved_BackingField;
      private dom.Document.onactivateFn _onmsthumbnailclick_BackingField;
      private dom.Document.onactivateFn _onpause_BackingField;
      private dom.Document.onactivateFn _onplay_BackingField;
      private dom.Document.onactivateFn _onplaying_BackingField;
      private dom.Document.onactivateFn _onpointerlockchange_BackingField;
      private dom.Document.onactivateFn _onpointerlockerror_BackingField;
      private dom.Document.onprogressFn _onprogress_BackingField;
      private dom.Document.onactivateFn _onratechange_BackingField;
      private dom.Document.onactivateFn _onreadystatechange_BackingField;
      private dom.Document.onactivateFn _onreset_BackingField;
      private dom.Document.onabortFn _onscroll_BackingField;
      private dom.Document.onactivateFn _onseeked_BackingField;
      private dom.Document.onactivateFn _onseeking_BackingField;
      private dom.Document.onabortFn _onselect_BackingField;
      private dom.Document.onactivateFn _onselectionchange_BackingField;
      private dom.Document.onactivateFn _onselectstart_BackingField;
      private dom.Document.onactivateFn _onstalled_BackingField;
      private dom.Document.onactivateFn _onstop_BackingField;
      private dom.Document.onactivateFn _onsubmit_BackingField;
      private dom.Document.onactivateFn _onsuspend_BackingField;
      private dom.Document.onactivateFn _ontimeupdate_BackingField;
      private dom.Document.ontouchcancelFn _ontouchcancel_BackingField;
      private dom.Document.ontouchcancelFn _ontouchend_BackingField;
      private dom.Document.ontouchcancelFn _ontouchmove_BackingField;
      private dom.Document.ontouchcancelFn _ontouchstart_BackingField;
      private dom.Document.onvisibilitychangeFn _onvisibilitychange_BackingField;
      private dom.Document.onactivateFn _onvolumechange_BackingField;
      private dom.Document.onactivateFn _onwaiting_BackingField;
      private dom.Document.onactivateFn _onwebkitfullscreenchange_BackingField;
      private dom.Document.onactivateFn _onwebkitfullscreenerror_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLEmbedElement> _plugins_BackingField;
      private readonly dom.Element _pointerLockElement_BackingField;
      private readonly string _readyState_BackingField;
      private readonly string _referrer_BackingField;
      private readonly dom.SVGSVGElement _rootElement_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLScriptElement> _scripts_BackingField;
      private readonly dom.Element _scrollingElement_BackingField;
      private readonly dom.StyleSheetList _styleSheets_BackingField;
      private string _title_BackingField;
      private readonly dom.VisibilityState _visibilityState_BackingField;
      private string _vlinkColor_BackingField;
      private readonly dom.Element _webkitCurrentFullScreenElement_BackingField;
      private readonly dom.Element _webkitFullscreenElement_BackingField;
      private readonly bool _webkitFullscreenEnabled_BackingField;
      private readonly bool _webkitIsFullScreen_BackingField;
      private readonly string _xmlEncoding_BackingField;
      private bool _xmlStandalone_BackingField;
      private string _xmlVersion_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointercancel_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerdown_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerenter_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerleave_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointermove_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerout_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerover_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerup_BackingField;
      private dom.GlobalEventHandlers.onwheelFn _onwheel_BackingField;
      private readonly uint _childElementCount_BackingField;
      private readonly dom.Element _firstElementChild_BackingField;
      private readonly dom.Element _lastElementChild_BackingField;
      private readonly dom.HTMLCollection _children_BackingField;

      public static dom.Document prototype
      {
        get
        {
          return dom.Document._prototype_BackingField;
        }
        set
        {
          dom.Document._prototype_BackingField = value;
        }
      }

      public virtual string URL
      {
        get
        {
          return this._URL_BackingField;
        }
      }

      public virtual string URLUnencoded
      {
        get
        {
          return this._URLUnencoded_BackingField;
        }
      }

      public virtual dom.Element activeElement
      {
        get
        {
          return this._activeElement_BackingField;
        }
      }

      public virtual string alinkColor
      {
        get
        {
          return this._alinkColor_BackingField;
        }
        set
        {
          this._alinkColor_BackingField = value;
        }
      }

      public virtual dom.HTMLAllCollection all
      {
        get
        {
          return this._all_BackingField;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLAnchorElement> anchors
      {
        get
        {
          return this._anchors_BackingField;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLAppletElement> applets
      {
        get
        {
          return this._applets_BackingField;
        }
      }

      public virtual string bgColor
      {
        get
        {
          return this._bgColor_BackingField;
        }
        set
        {
          this._bgColor_BackingField = value;
        }
      }

      public virtual dom.HTMLElement body
      {
        get
        {
          return this._body_BackingField;
        }
        set
        {
          this._body_BackingField = value;
        }
      }

      public virtual string characterSet
      {
        get
        {
          return this._characterSet_BackingField;
        }
      }

      public virtual string charset
      {
        get
        {
          return this._charset_BackingField;
        }
        set
        {
          this._charset_BackingField = value;
        }
      }

      public virtual string compatMode
      {
        get
        {
          return this._compatMode_BackingField;
        }
      }

      public virtual string cookie
      {
        get
        {
          return this._cookie_BackingField;
        }
        set
        {
          this._cookie_BackingField = value;
        }
      }

      public virtual Union<dom.HTMLScriptElement, dom.SVGScriptElement, Null> currentScript
      {
        get
        {
          return this._currentScript_BackingField;
        }
      }

      public virtual dom.Window defaultView
      {
        get
        {
          return this._defaultView_BackingField;
        }
      }

      public virtual string designMode
      {
        get
        {
          return this._designMode_BackingField;
        }
        set
        {
          this._designMode_BackingField = value;
        }
      }

      public virtual string dir
      {
        get
        {
          return this._dir_BackingField;
        }
        set
        {
          this._dir_BackingField = value;
        }
      }

      public virtual dom.DocumentType doctype
      {
        get
        {
          return this._doctype_BackingField;
        }
      }

      public virtual dom.HTMLElement documentElement
      {
        get
        {
          return this._documentElement_BackingField;
        }
      }

      public virtual string domain
      {
        get
        {
          return this._domain_BackingField;
        }
        set
        {
          this._domain_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLEmbedElement> embeds
      {
        get
        {
          return this._embeds_BackingField;
        }
      }

      public virtual string fgColor
      {
        get
        {
          return this._fgColor_BackingField;
        }
        set
        {
          this._fgColor_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLFormElement> forms
      {
        get
        {
          return this._forms_BackingField;
        }
      }

      public virtual dom.Element fullscreenElement
      {
        get
        {
          return this._fullscreenElement_BackingField;
        }
      }

      public virtual bool fullscreenEnabled
      {
        get
        {
          return this._fullscreenEnabled_BackingField;
        }
      }

      public virtual dom.HTMLHeadElement head
      {
        get
        {
          return this._head_BackingField;
        }
      }

      public virtual bool hidden
      {
        get
        {
          return this._hidden_BackingField;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLImageElement> images
      {
        get
        {
          return this._images_BackingField;
        }
      }

      public virtual dom.DOMImplementation implementation
      {
        get
        {
          return this._implementation_BackingField;
        }
      }

      public virtual string inputEncoding
      {
        get
        {
          return this._inputEncoding_BackingField;
        }
      }

      public virtual string lastModified
      {
        get
        {
          return this._lastModified_BackingField;
        }
      }

      public virtual string linkColor
      {
        get
        {
          return this._linkColor_BackingField;
        }
        set
        {
          this._linkColor_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLElement> links
      {
        get
        {
          return this._links_BackingField;
        }
      }

      public virtual dom.Location location
      {
        get
        {
          return this._location_BackingField;
        }
        set
        {
          this._location_BackingField = value;
        }
      }

      public virtual bool msCSSOMElementFloatMetrics
      {
        get
        {
          return this._msCSSOMElementFloatMetrics_BackingField;
        }
        set
        {
          this._msCSSOMElementFloatMetrics_BackingField = value;
        }
      }

      public virtual bool msCapsLockWarningOff
      {
        get
        {
          return this._msCapsLockWarningOff_BackingField;
        }
        set
        {
          this._msCapsLockWarningOff_BackingField = value;
        }
      }

      public virtual dom.Document.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onactivate
      {
        get
        {
          return this._onactivate_BackingField;
        }
        set
        {
          this._onactivate_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onbeforeactivate
      {
        get
        {
          return this._onbeforeactivate_BackingField;
        }
        set
        {
          this._onbeforeactivate_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onbeforedeactivate
      {
        get
        {
          return this._onbeforedeactivate_BackingField;
        }
        set
        {
          this._onbeforedeactivate_BackingField = value;
        }
      }

      public virtual dom.Document.onblurFn onblur
      {
        get
        {
          return this._onblur_BackingField;
        }
        set
        {
          this._onblur_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn oncanplay
      {
        get
        {
          return this._oncanplay_BackingField;
        }
        set
        {
          this._oncanplay_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn oncanplaythrough
      {
        get
        {
          return this._oncanplaythrough_BackingField;
        }
        set
        {
          this._oncanplaythrough_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onchange
      {
        get
        {
          return this._onchange_BackingField;
        }
        set
        {
          this._onchange_BackingField = value;
        }
      }

      public virtual dom.Document.onclickFn onclick
      {
        get
        {
          return this._onclick_BackingField;
        }
        set
        {
          this._onclick_BackingField = value;
        }
      }

      public virtual dom.Document.oncontextmenuFn oncontextmenu
      {
        get
        {
          return this._oncontextmenu_BackingField;
        }
        set
        {
          this._oncontextmenu_BackingField = value;
        }
      }

      public virtual dom.Document.onclickFn ondblclick
      {
        get
        {
          return this._ondblclick_BackingField;
        }
        set
        {
          this._ondblclick_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn ondeactivate
      {
        get
        {
          return this._ondeactivate_BackingField;
        }
        set
        {
          this._ondeactivate_BackingField = value;
        }
      }

      public virtual dom.Document.ondragFn ondrag
      {
        get
        {
          return this._ondrag_BackingField;
        }
        set
        {
          this._ondrag_BackingField = value;
        }
      }

      public virtual dom.Document.ondragFn ondragend
      {
        get
        {
          return this._ondragend_BackingField;
        }
        set
        {
          this._ondragend_BackingField = value;
        }
      }

      public virtual dom.Document.ondragFn ondragenter
      {
        get
        {
          return this._ondragenter_BackingField;
        }
        set
        {
          this._ondragenter_BackingField = value;
        }
      }

      public virtual dom.Document.ondragFn ondragleave
      {
        get
        {
          return this._ondragleave_BackingField;
        }
        set
        {
          this._ondragleave_BackingField = value;
        }
      }

      public virtual dom.Document.ondragFn ondragover
      {
        get
        {
          return this._ondragover_BackingField;
        }
        set
        {
          this._ondragover_BackingField = value;
        }
      }

      public virtual dom.Document.ondragFn ondragstart
      {
        get
        {
          return this._ondragstart_BackingField;
        }
        set
        {
          this._ondragstart_BackingField = value;
        }
      }

      public virtual dom.Document.ondragFn ondrop
      {
        get
        {
          return this._ondrop_BackingField;
        }
        set
        {
          this._ondrop_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn ondurationchange
      {
        get
        {
          return this._ondurationchange_BackingField;
        }
        set
        {
          this._ondurationchange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onemptied
      {
        get
        {
          return this._onemptied_BackingField;
        }
        set
        {
          this._onemptied_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onended
      {
        get
        {
          return this._onended_BackingField;
        }
        set
        {
          this._onended_BackingField = value;
        }
      }

      public virtual dom.Document.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.Document.onblurFn onfocus
      {
        get
        {
          return this._onfocus_BackingField;
        }
        set
        {
          this._onfocus_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onfullscreenchange
      {
        get
        {
          return this._onfullscreenchange_BackingField;
        }
        set
        {
          this._onfullscreenchange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onfullscreenerror
      {
        get
        {
          return this._onfullscreenerror_BackingField;
        }
        set
        {
          this._onfullscreenerror_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn oninput
      {
        get
        {
          return this._oninput_BackingField;
        }
        set
        {
          this._oninput_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn oninvalid
      {
        get
        {
          return this._oninvalid_BackingField;
        }
        set
        {
          this._oninvalid_BackingField = value;
        }
      }

      public virtual dom.Document.onkeydownFn onkeydown
      {
        get
        {
          return this._onkeydown_BackingField;
        }
        set
        {
          this._onkeydown_BackingField = value;
        }
      }

      public virtual dom.Document.onkeydownFn onkeypress
      {
        get
        {
          return this._onkeypress_BackingField;
        }
        set
        {
          this._onkeypress_BackingField = value;
        }
      }

      public virtual dom.Document.onkeydownFn onkeyup
      {
        get
        {
          return this._onkeyup_BackingField;
        }
        set
        {
          this._onkeyup_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onloadeddata
      {
        get
        {
          return this._onloadeddata_BackingField;
        }
        set
        {
          this._onloadeddata_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onloadedmetadata
      {
        get
        {
          return this._onloadedmetadata_BackingField;
        }
        set
        {
          this._onloadedmetadata_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onloadstart
      {
        get
        {
          return this._onloadstart_BackingField;
        }
        set
        {
          this._onloadstart_BackingField = value;
        }
      }

      public virtual dom.Document.onclickFn onmousedown
      {
        get
        {
          return this._onmousedown_BackingField;
        }
        set
        {
          this._onmousedown_BackingField = value;
        }
      }

      public virtual dom.Document.onclickFn onmousemove
      {
        get
        {
          return this._onmousemove_BackingField;
        }
        set
        {
          this._onmousemove_BackingField = value;
        }
      }

      public virtual dom.Document.onclickFn onmouseout
      {
        get
        {
          return this._onmouseout_BackingField;
        }
        set
        {
          this._onmouseout_BackingField = value;
        }
      }

      public virtual dom.Document.onclickFn onmouseover
      {
        get
        {
          return this._onmouseover_BackingField;
        }
        set
        {
          this._onmouseover_BackingField = value;
        }
      }

      public virtual dom.Document.onclickFn onmouseup
      {
        get
        {
          return this._onmouseup_BackingField;
        }
        set
        {
          this._onmouseup_BackingField = value;
        }
      }

      public virtual dom.Document.onmousewheelFn onmousewheel
      {
        get
        {
          return this._onmousewheel_BackingField;
        }
        set
        {
          this._onmousewheel_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmscontentzoom
      {
        get
        {
          return this._onmscontentzoom_BackingField;
        }
        set
        {
          this._onmscontentzoom_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmsgesturechange
      {
        get
        {
          return this._onmsgesturechange_BackingField;
        }
        set
        {
          this._onmsgesturechange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmsgesturedoubletap
      {
        get
        {
          return this._onmsgesturedoubletap_BackingField;
        }
        set
        {
          this._onmsgesturedoubletap_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmsgestureend
      {
        get
        {
          return this._onmsgestureend_BackingField;
        }
        set
        {
          this._onmsgestureend_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmsgesturehold
      {
        get
        {
          return this._onmsgesturehold_BackingField;
        }
        set
        {
          this._onmsgesturehold_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmsgesturestart
      {
        get
        {
          return this._onmsgesturestart_BackingField;
        }
        set
        {
          this._onmsgesturestart_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmsgesturetap
      {
        get
        {
          return this._onmsgesturetap_BackingField;
        }
        set
        {
          this._onmsgesturetap_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmsinertiastart
      {
        get
        {
          return this._onmsinertiastart_BackingField;
        }
        set
        {
          this._onmsinertiastart_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmsmanipulationstatechanged
      {
        get
        {
          return this._onmsmanipulationstatechanged_BackingField;
        }
        set
        {
          this._onmsmanipulationstatechanged_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmspointercancel
      {
        get
        {
          return this._onmspointercancel_BackingField;
        }
        set
        {
          this._onmspointercancel_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmspointerdown
      {
        get
        {
          return this._onmspointerdown_BackingField;
        }
        set
        {
          this._onmspointerdown_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmspointerenter
      {
        get
        {
          return this._onmspointerenter_BackingField;
        }
        set
        {
          this._onmspointerenter_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmspointerleave
      {
        get
        {
          return this._onmspointerleave_BackingField;
        }
        set
        {
          this._onmspointerleave_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmspointermove
      {
        get
        {
          return this._onmspointermove_BackingField;
        }
        set
        {
          this._onmspointermove_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmspointerout
      {
        get
        {
          return this._onmspointerout_BackingField;
        }
        set
        {
          this._onmspointerout_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmspointerover
      {
        get
        {
          return this._onmspointerover_BackingField;
        }
        set
        {
          this._onmspointerover_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmspointerup
      {
        get
        {
          return this._onmspointerup_BackingField;
        }
        set
        {
          this._onmspointerup_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmssitemodejumplistitemremoved
      {
        get
        {
          return this._onmssitemodejumplistitemremoved_BackingField;
        }
        set
        {
          this._onmssitemodejumplistitemremoved_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onmsthumbnailclick
      {
        get
        {
          return this._onmsthumbnailclick_BackingField;
        }
        set
        {
          this._onmsthumbnailclick_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onpause
      {
        get
        {
          return this._onpause_BackingField;
        }
        set
        {
          this._onpause_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onplay
      {
        get
        {
          return this._onplay_BackingField;
        }
        set
        {
          this._onplay_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onplaying
      {
        get
        {
          return this._onplaying_BackingField;
        }
        set
        {
          this._onplaying_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onpointerlockchange
      {
        get
        {
          return this._onpointerlockchange_BackingField;
        }
        set
        {
          this._onpointerlockchange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onpointerlockerror
      {
        get
        {
          return this._onpointerlockerror_BackingField;
        }
        set
        {
          this._onpointerlockerror_BackingField = value;
        }
      }

      public virtual dom.Document.onprogressFn onprogress
      {
        get
        {
          return this._onprogress_BackingField;
        }
        set
        {
          this._onprogress_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onratechange
      {
        get
        {
          return this._onratechange_BackingField;
        }
        set
        {
          this._onratechange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onreadystatechange
      {
        get
        {
          return this._onreadystatechange_BackingField;
        }
        set
        {
          this._onreadystatechange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onreset
      {
        get
        {
          return this._onreset_BackingField;
        }
        set
        {
          this._onreset_BackingField = value;
        }
      }

      public virtual dom.Document.onabortFn onscroll
      {
        get
        {
          return this._onscroll_BackingField;
        }
        set
        {
          this._onscroll_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onseeked
      {
        get
        {
          return this._onseeked_BackingField;
        }
        set
        {
          this._onseeked_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onseeking
      {
        get
        {
          return this._onseeking_BackingField;
        }
        set
        {
          this._onseeking_BackingField = value;
        }
      }

      public virtual dom.Document.onabortFn onselect
      {
        get
        {
          return this._onselect_BackingField;
        }
        set
        {
          this._onselect_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onselectionchange
      {
        get
        {
          return this._onselectionchange_BackingField;
        }
        set
        {
          this._onselectionchange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onselectstart
      {
        get
        {
          return this._onselectstart_BackingField;
        }
        set
        {
          this._onselectstart_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onstalled
      {
        get
        {
          return this._onstalled_BackingField;
        }
        set
        {
          this._onstalled_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onstop
      {
        get
        {
          return this._onstop_BackingField;
        }
        set
        {
          this._onstop_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onsubmit
      {
        get
        {
          return this._onsubmit_BackingField;
        }
        set
        {
          this._onsubmit_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onsuspend
      {
        get
        {
          return this._onsuspend_BackingField;
        }
        set
        {
          this._onsuspend_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn ontimeupdate
      {
        get
        {
          return this._ontimeupdate_BackingField;
        }
        set
        {
          this._ontimeupdate_BackingField = value;
        }
      }

      public virtual dom.Document.ontouchcancelFn ontouchcancel
      {
        get
        {
          return this._ontouchcancel_BackingField;
        }
        set
        {
          this._ontouchcancel_BackingField = value;
        }
      }

      public virtual dom.Document.ontouchcancelFn ontouchend
      {
        get
        {
          return this._ontouchend_BackingField;
        }
        set
        {
          this._ontouchend_BackingField = value;
        }
      }

      public virtual dom.Document.ontouchcancelFn ontouchmove
      {
        get
        {
          return this._ontouchmove_BackingField;
        }
        set
        {
          this._ontouchmove_BackingField = value;
        }
      }

      public virtual dom.Document.ontouchcancelFn ontouchstart
      {
        get
        {
          return this._ontouchstart_BackingField;
        }
        set
        {
          this._ontouchstart_BackingField = value;
        }
      }

      public virtual dom.Document.onvisibilitychangeFn onvisibilitychange
      {
        get
        {
          return this._onvisibilitychange_BackingField;
        }
        set
        {
          this._onvisibilitychange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onvolumechange
      {
        get
        {
          return this._onvolumechange_BackingField;
        }
        set
        {
          this._onvolumechange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onwaiting
      {
        get
        {
          return this._onwaiting_BackingField;
        }
        set
        {
          this._onwaiting_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onwebkitfullscreenchange
      {
        get
        {
          return this._onwebkitfullscreenchange_BackingField;
        }
        set
        {
          this._onwebkitfullscreenchange_BackingField = value;
        }
      }

      public virtual dom.Document.onactivateFn onwebkitfullscreenerror
      {
        get
        {
          return this._onwebkitfullscreenerror_BackingField;
        }
        set
        {
          this._onwebkitfullscreenerror_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLEmbedElement> plugins
      {
        get
        {
          return this._plugins_BackingField;
        }
      }

      public virtual dom.Element pointerLockElement
      {
        get
        {
          return this._pointerLockElement_BackingField;
        }
      }

      public virtual string readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual string referrer
      {
        get
        {
          return this._referrer_BackingField;
        }
      }

      public virtual dom.SVGSVGElement rootElement
      {
        get
        {
          return this._rootElement_BackingField;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLScriptElement> scripts
      {
        get
        {
          return this._scripts_BackingField;
        }
      }

      public virtual dom.Element scrollingElement
      {
        get
        {
          return this._scrollingElement_BackingField;
        }
      }

      public virtual dom.StyleSheetList styleSheets
      {
        get
        {
          return this._styleSheets_BackingField;
        }
      }

      public virtual string title
      {
        get
        {
          return this._title_BackingField;
        }
        set
        {
          this._title_BackingField = value;
        }
      }

      public virtual dom.VisibilityState visibilityState
      {
        get
        {
          return this._visibilityState_BackingField;
        }
      }

      public virtual string vlinkColor
      {
        get
        {
          return this._vlinkColor_BackingField;
        }
        set
        {
          this._vlinkColor_BackingField = value;
        }
      }

      public virtual dom.Element webkitCurrentFullScreenElement
      {
        get
        {
          return this._webkitCurrentFullScreenElement_BackingField;
        }
      }

      public virtual dom.Element webkitFullscreenElement
      {
        get
        {
          return this._webkitFullscreenElement_BackingField;
        }
      }

      public virtual bool webkitFullscreenEnabled
      {
        get
        {
          return this._webkitFullscreenEnabled_BackingField;
        }
      }

      public virtual bool webkitIsFullScreen
      {
        get
        {
          return this._webkitIsFullScreen_BackingField;
        }
      }

      public virtual string xmlEncoding
      {
        get
        {
          return this._xmlEncoding_BackingField;
        }
      }

      public virtual bool xmlStandalone
      {
        get
        {
          return this._xmlStandalone_BackingField;
        }
        set
        {
          this._xmlStandalone_BackingField = value;
        }
      }

      public virtual string xmlVersion
      {
        get
        {
          return this._xmlVersion_BackingField;
        }
        set
        {
          this._xmlVersion_BackingField = value;
        }
      }

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public virtual extern T adoptNode<T>(T source);

      public virtual extern void captureEvents();

      public virtual extern dom.Range caretRangeFromPoint(double x, double y);

      public virtual extern void clear();

      public virtual extern void close();

      public virtual extern dom.Attr createAttribute(string name);

      public virtual extern dom.Attr createAttributeNS(string namespaceURI, string qualifiedName);

      public virtual extern dom.CDATASection createCDATASection(string data);

      public virtual extern dom.Comment createComment(string data);

      public virtual extern dom.DocumentFragment createDocumentFragment();

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object createElement<K>(K tagName);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object createElement<K>(K tagName, dom.ElementCreationOptions options);

      public virtual extern dom.HTMLElement createElement(string tagName);

      public virtual extern dom.HTMLElement createElement(
        string tagName,
        dom.ElementCreationOptions options);

      public virtual extern dom.HTMLElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash1999Slashxhtml namespaceURI,
        string qualifiedName);

      public virtual extern dom.SVGAElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.a qualifiedName);

      public virtual extern dom.SVGCircleElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.circle qualifiedName);

      public virtual extern dom.SVGClipPathElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.clipPath qualifiedName);

      public virtual extern dom.SVGComponentTransferFunctionElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.componentTransferFunction qualifiedName);

      public virtual extern dom.SVGDefsElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.defs qualifiedName);

      public virtual extern dom.SVGDescElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.desc qualifiedName);

      public virtual extern dom.SVGEllipseElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.ellipse qualifiedName);

      public virtual extern dom.SVGFEBlendElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feBlend qualifiedName);

      public virtual extern dom.SVGFEColorMatrixElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feColorMatrix qualifiedName);

      public virtual extern dom.SVGFEComponentTransferElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feComponentTransfer qualifiedName);

      public virtual extern dom.SVGFECompositeElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feComposite qualifiedName);

      public virtual extern dom.SVGFEConvolveMatrixElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feConvolveMatrix qualifiedName);

      public virtual extern dom.SVGFEDiffuseLightingElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feDiffuseLighting qualifiedName);

      public virtual extern dom.SVGFEDisplacementMapElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feDisplacementMap qualifiedName);

      public virtual extern dom.SVGFEDistantLightElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feDistantLight qualifiedName);

      public virtual extern dom.SVGFEFloodElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feFlood qualifiedName);

      public virtual extern dom.SVGFEFuncAElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feFuncA qualifiedName);

      public virtual extern dom.SVGFEFuncBElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feFuncB qualifiedName);

      public virtual extern dom.SVGFEFuncGElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feFuncG qualifiedName);

      public virtual extern dom.SVGFEFuncRElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feFuncR qualifiedName);

      public virtual extern dom.SVGFEGaussianBlurElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feGaussianBlur qualifiedName);

      public virtual extern dom.SVGFEImageElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feImage qualifiedName);

      public virtual extern dom.SVGFEMergeElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feMerge qualifiedName);

      public virtual extern dom.SVGFEMergeNodeElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feMergeNode qualifiedName);

      public virtual extern dom.SVGFEMorphologyElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feMorphology qualifiedName);

      public virtual extern dom.SVGFEOffsetElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feOffset qualifiedName);

      public virtual extern dom.SVGFEPointLightElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.fePointLight qualifiedName);

      public virtual extern dom.SVGFESpecularLightingElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feSpecularLighting qualifiedName);

      public virtual extern dom.SVGFESpotLightElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feSpotLight qualifiedName);

      public virtual extern dom.SVGFETileElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feTile qualifiedName);

      public virtual extern dom.SVGFETurbulenceElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.feTurbulence qualifiedName);

      public virtual extern dom.SVGFilterElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.filter qualifiedName);

      public virtual extern dom.SVGForeignObjectElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.foreignObject qualifiedName);

      public virtual extern dom.SVGGElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.g qualifiedName);

      public virtual extern dom.SVGImageElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.image qualifiedName);

      public virtual extern dom.SVGGradientElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.gradient qualifiedName);

      public virtual extern dom.SVGLineElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.line qualifiedName);

      public virtual extern dom.SVGLinearGradientElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.linearGradient qualifiedName);

      public virtual extern dom.SVGMarkerElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.marker qualifiedName);

      public virtual extern dom.SVGMaskElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.mask qualifiedName);

      public virtual extern dom.SVGPathElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.path qualifiedName);

      public virtual extern dom.SVGMetadataElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.metadata qualifiedName);

      public virtual extern dom.SVGPatternElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.pattern qualifiedName);

      public virtual extern dom.SVGPolygonElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.polygon qualifiedName);

      public virtual extern dom.SVGPolylineElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.polyline qualifiedName);

      public virtual extern dom.SVGRadialGradientElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.radialGradient qualifiedName);

      public virtual extern dom.SVGRectElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.rect qualifiedName);

      public virtual extern dom.SVGSVGElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.svg qualifiedName);

      public virtual extern dom.SVGScriptElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.script qualifiedName);

      public virtual extern dom.SVGStopElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.stop qualifiedName);

      public virtual extern dom.SVGStyleElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.style qualifiedName);

      public virtual extern dom.SVGSwitchElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.@switch qualifiedName);

      public virtual extern dom.SVGSymbolElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.symbol qualifiedName);

      public virtual extern dom.SVGTSpanElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.tspan qualifiedName);

      public virtual extern dom.SVGTextContentElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.textContent qualifiedName);

      public virtual extern dom.SVGTextElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.text qualifiedName);

      public virtual extern dom.SVGTextPathElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.textPath qualifiedName);

      public virtual extern dom.SVGTextPositioningElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.textPositioning qualifiedName);

      public virtual extern dom.SVGTitleElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.title qualifiedName);

      public virtual extern dom.SVGUseElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.use qualifiedName);

      public virtual extern dom.SVGViewElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        dom.Literals.Types.view qualifiedName);

      public virtual extern dom.SVGElement createElementNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        string qualifiedName);

      public virtual extern dom.Element createElementNS(
        string namespaceURI,
        string qualifiedName);

      public virtual extern dom.XPathExpression createExpression(
        string expression,
        dom.XPathNSResolver resolver);

      public virtual extern dom.XPathNSResolver createNSResolver(dom.Node nodeResolver);

      public virtual extern dom.NodeIterator createNodeIterator(dom.Node root);

      public virtual extern dom.NodeIterator createNodeIterator(dom.Node root, uint whatToShow);

      public virtual extern dom.NodeIterator createNodeIterator(
        dom.Node root,
        uint whatToShow,
        dom.NodeFilter filter);

      public virtual extern dom.NodeIterator createNodeIterator(
        dom.Node root,
        uint whatToShow,
        dom.NodeFilter filter,
        bool entityReferenceExpansion);

      public virtual extern dom.ProcessingInstruction createProcessingInstruction(
        string target,
        string data);

      public virtual extern dom.Range createRange();

      public virtual extern dom.Text createTextNode(string data);

      public virtual extern dom.Touch createTouch(
        dom.Window view,
        dom.EventTarget target,
        double identifier,
        double pageX,
        double pageY,
        double screenX,
        double screenY);

      [ExpandParams]
      public virtual extern dom.TouchList createTouchList(params dom.Touch[] touches);

      public virtual extern dom.TreeWalker createTreeWalker(dom.Node root);

      public virtual extern dom.TreeWalker createTreeWalker(dom.Node root, uint whatToShow);

      public virtual extern dom.TreeWalker createTreeWalker(
        dom.Node root,
        uint whatToShow,
        dom.NodeFilter filter);

      public virtual extern dom.TreeWalker createTreeWalker(
        dom.Node root,
        uint whatToShow,
        dom.NodeFilter filter,
        bool entityReferenceExpansion);

      public virtual extern dom.Element elementFromPoint(double x, double y);

      public virtual extern dom.Element[] elementsFromPoint(double x, double y);

      public virtual extern dom.XPathResult evaluate(
        string expression,
        dom.Node contextNode,
        dom.XPathNSResolver resolver,
        double type,
        dom.XPathResult result);

      public virtual extern bool execCommand(string commandId);

      public virtual extern bool execCommand(string commandId, bool showUI);

      public virtual extern bool execCommand(string commandId, bool showUI, object value);

      public virtual extern bool execCommandShowHelp(string commandId);

      public virtual extern void exitFullscreen();

      public virtual extern void exitPointerLock();

      public virtual extern void focus();

      public virtual extern dom.HTMLElement getElementById(string elementId);

      public virtual extern dom.HTMLCollectionOf<dom.Element> getElementsByClassName(
        string classNames);

      public virtual extern dom.NodeListOf<dom.HTMLElement> getElementsByName(
        string elementName);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> getElementsByTagName<K>(K tagname);

      [Name("getElementsByTagName")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> getElementsByTagName2<K>(K tagname);

      public virtual extern dom.NodeListOf<dom.Element> getElementsByTagName(string tagname);

      public virtual extern dom.HTMLCollectionOf<dom.HTMLElement> getElementsByTagNameNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash1999Slashxhtml namespaceURI,
        string localName);

      public virtual extern dom.HTMLCollectionOf<dom.SVGElement> getElementsByTagNameNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        string localName);

      public virtual extern dom.HTMLCollectionOf<dom.Element> getElementsByTagNameNS(
        string namespaceURI,
        string localName);

      public virtual extern dom.Selection getSelection();

      public virtual extern bool hasFocus();

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public virtual extern T importNode<T>(T importedNode, bool deep);

      public virtual extern dom.NodeListOf<dom.Element> msElementsFromPoint(
        double x,
        double y);

      public virtual extern dom.NodeListOf<dom.Element> msElementsFromRect(
        double left,
        double top,
        double width,
        double height);

      public virtual extern dom.Document open();

      public virtual extern dom.Document open(string url);

      public virtual extern dom.Document open(string url, string name);

      public virtual extern dom.Document open(string url, string name, string features);

      public virtual extern dom.Document open(
        string url,
        string name,
        string features,
        bool replace);

      public virtual extern bool queryCommandEnabled(string commandId);

      public virtual extern bool queryCommandIndeterm(string commandId);

      public virtual extern bool queryCommandState(string commandId);

      public virtual extern bool queryCommandSupported(string commandId);

      public virtual extern string queryCommandText(string commandId);

      public virtual extern string queryCommandValue(string commandId);

      public virtual extern void releaseEvents();

      public virtual extern void webkitCancelFullScreen();

      public virtual extern void webkitExitFullscreen();

      [ExpandParams]
      public virtual extern void write(params string[] content);

      [ExpandParams]
      public virtual extern void writeln(params string[] content);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Document.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Document.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Document.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Document.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Document.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Document.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Document.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Document.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointercancel
      {
        get
        {
          return this._onpointercancel_BackingField;
        }
        set
        {
          this._onpointercancel_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerdown
      {
        get
        {
          return this._onpointerdown_BackingField;
        }
        set
        {
          this._onpointerdown_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerenter
      {
        get
        {
          return this._onpointerenter_BackingField;
        }
        set
        {
          this._onpointerenter_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerleave
      {
        get
        {
          return this._onpointerleave_BackingField;
        }
        set
        {
          this._onpointerleave_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointermove
      {
        get
        {
          return this._onpointermove_BackingField;
        }
        set
        {
          this._onpointermove_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerout
      {
        get
        {
          return this._onpointerout_BackingField;
        }
        set
        {
          this._onpointerout_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerover
      {
        get
        {
          return this._onpointerover_BackingField;
        }
        set
        {
          this._onpointerover_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerup
      {
        get
        {
          return this._onpointerup_BackingField;
        }
        set
        {
          this._onpointerup_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onwheelFn onwheel
      {
        get
        {
          return this._onwheel_BackingField;
        }
        set
        {
          this._onwheel_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual uint childElementCount
      {
        get
        {
          return this._childElementCount_BackingField;
        }
      }

      public virtual dom.Element firstElementChild
      {
        get
        {
          return this._firstElementChild_BackingField;
        }
      }

      public virtual dom.Element lastElementChild
      {
        get
        {
          return this._lastElementChild_BackingField;
        }
      }

      public virtual dom.HTMLCollection children
      {
        get
        {
          return this._children_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object querySelector<K>(K selectors);

      [Name("querySelector")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object querySelector2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public virtual extern Union<E, Null> querySelector<E>(string selectors);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

      [Name("querySelectorAll")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<E> querySelectorAll<E>(string selectors);

      public virtual extern dom.AnimationEvent createEvent(
        dom.Literals.Types.AnimationEvent eventInterface);

      public virtual extern dom.AnimationPlaybackEvent createEvent(
        dom.Literals.Types.AnimationPlaybackEvent eventInterface);

      public virtual extern dom.AudioProcessingEvent createEvent(
        dom.Literals.Types.AudioProcessingEvent eventInterface);

      public virtual extern dom.BeforeUnloadEvent createEvent(
        dom.Literals.Types.BeforeUnloadEvent eventInterface);

      public virtual extern dom.ClipboardEvent createEvent(
        dom.Literals.Types.ClipboardEvent eventInterface);

      public virtual extern dom.CloseEvent createEvent(
        dom.Literals.Types.CloseEvent eventInterface);

      public virtual extern dom.CompositionEvent createEvent(
        dom.Literals.Types.CompositionEvent eventInterface);

      public virtual extern dom.CustomEvent<object> createEvent(
        dom.Literals.Types.CustomEvent eventInterface);

      public virtual extern dom.DeviceLightEvent createEvent(
        dom.Literals.Types.DeviceLightEvent eventInterface);

      public virtual extern dom.DeviceMotionEvent createEvent(
        dom.Literals.Types.DeviceMotionEvent eventInterface);

      public virtual extern dom.DeviceOrientationEvent createEvent(
        dom.Literals.Types.DeviceOrientationEvent eventInterface);

      public virtual extern dom.DragEvent createEvent(dom.Literals.Types.DragEvent eventInterface);

      public virtual extern dom.ErrorEvent createEvent(
        dom.Literals.Types.ErrorEvent eventInterface);

      public virtual extern dom.Event createEvent(dom.Literals.Types.Event eventInterface);

      public virtual extern dom.Event createEvent(dom.Literals.Types.Events eventInterface);

      public virtual extern dom.FocusEvent createEvent(
        dom.Literals.Types.FocusEvent eventInterface);

      public virtual extern dom.FocusNavigationEvent createEvent(
        dom.Literals.Types.FocusNavigationEvent eventInterface);

      public virtual extern dom.GamepadEvent createEvent(
        dom.Literals.Types.GamepadEvent eventInterface);

      public virtual extern dom.HashChangeEvent createEvent(
        dom.Literals.Types.HashChangeEvent eventInterface);

      public virtual extern dom.IDBVersionChangeEvent createEvent(
        dom.Literals.Types.IDBVersionChangeEvent eventInterface);

      public virtual extern dom.KeyboardEvent createEvent(
        dom.Literals.Types.KeyboardEvent eventInterface);

      public virtual extern dom.ListeningStateChangedEvent createEvent(
        dom.Literals.Types.ListeningStateChangedEvent eventInterface);

      public virtual extern dom.MSDCCEvent createEvent(
        dom.Literals.Types.MSDCCEvent eventInterface);

      public virtual extern dom.MSDSHEvent createEvent(
        dom.Literals.Types.MSDSHEvent eventInterface);

      public virtual extern dom.MSMediaKeyMessageEvent createEvent(
        dom.Literals.Types.MSMediaKeyMessageEvent eventInterface);

      public virtual extern dom.MSMediaKeyNeededEvent createEvent(
        dom.Literals.Types.MSMediaKeyNeededEvent eventInterface);

      public virtual extern dom.MediaEncryptedEvent createEvent(
        dom.Literals.Types.MediaEncryptedEvent eventInterface);

      public virtual extern dom.MediaKeyMessageEvent createEvent(
        dom.Literals.Types.MediaKeyMessageEvent eventInterface);

      public virtual extern dom.MediaStreamErrorEvent createEvent(
        dom.Literals.Types.MediaStreamErrorEvent eventInterface);

      public virtual extern dom.MediaStreamEvent createEvent(
        dom.Literals.Types.MediaStreamEvent eventInterface);

      public virtual extern dom.MediaStreamTrackEvent createEvent(
        dom.Literals.Types.MediaStreamTrackEvent eventInterface);

      public virtual extern dom.MessageEvent createEvent(
        dom.Literals.Types.MessageEvent eventInterface);

      public virtual extern dom.MouseEvent createEvent(
        dom.Literals.Types.MouseEvent eventInterface);

      public virtual extern dom.MouseEvent createEvent(
        dom.Literals.Types.MouseEvents eventInterface);

      public virtual extern dom.MutationEvent createEvent(
        dom.Literals.Types.MutationEvent eventInterface);

      public virtual extern dom.MutationEvent createEvent(
        dom.Literals.Types.MutationEvents eventInterface);

      public virtual extern dom.OfflineAudioCompletionEvent createEvent(
        dom.Literals.Types.OfflineAudioCompletionEvent eventInterface);

      public virtual extern dom.OverflowEvent createEvent(
        dom.Literals.Types.OverflowEvent eventInterface);

      public virtual extern dom.PageTransitionEvent createEvent(
        dom.Literals.Types.PageTransitionEvent eventInterface);

      public virtual extern dom.PaymentRequestUpdateEvent createEvent(
        dom.Literals.Types.PaymentRequestUpdateEvent eventInterface);

      public virtual extern dom.PermissionRequestedEvent createEvent(
        dom.Literals.Types.PermissionRequestedEvent eventInterface);

      public virtual extern dom.PointerEvent createEvent(
        dom.Literals.Types.PointerEvent eventInterface);

      public virtual extern dom.PopStateEvent createEvent(
        dom.Literals.Types.PopStateEvent eventInterface);

      public virtual extern dom.ProgressEvent createEvent(
        dom.Literals.Types.ProgressEvent eventInterface);

      public virtual extern dom.PromiseRejectionEvent createEvent(
        dom.Literals.Types.PromiseRejectionEvent eventInterface);

      public virtual extern dom.RTCDTMFToneChangeEvent createEvent(
        dom.Literals.Types.RTCDTMFToneChangeEvent eventInterface);

      public virtual extern dom.RTCDtlsTransportStateChangedEvent createEvent(
        dom.Literals.Types.RTCDtlsTransportStateChangedEvent eventInterface);

      public virtual extern dom.RTCIceCandidatePairChangedEvent createEvent(
        dom.Literals.Types.RTCIceCandidatePairChangedEvent eventInterface);

      public virtual extern dom.RTCIceGathererEvent createEvent(
        dom.Literals.Types.RTCIceGathererEvent eventInterface);

      public virtual extern dom.RTCIceTransportStateChangedEvent createEvent(
        dom.Literals.Types.RTCIceTransportStateChangedEvent eventInterface);

      public virtual extern dom.RTCPeerConnectionIceEvent createEvent(
        dom.Literals.Types.RTCPeerConnectionIceEvent eventInterface);

      public virtual extern dom.RTCSsrcConflictEvent createEvent(
        dom.Literals.Types.RTCSsrcConflictEvent eventInterface);

      public virtual extern dom.SVGZoomEvent createEvent(
        dom.Literals.Types.SVGZoomEvent eventInterface);

      public virtual extern dom.SVGZoomEvent createEvent(
        dom.Literals.Types.SVGZoomEvents eventInterface);

      public virtual extern dom.SecurityPolicyViolationEvent createEvent(
        dom.Literals.Types.SecurityPolicyViolationEvent eventInterface);

      public virtual extern dom.ServiceWorkerMessageEvent createEvent(
        dom.Literals.Types.ServiceWorkerMessageEvent eventInterface);

      public virtual extern dom.SpeechSynthesisEvent createEvent(
        dom.Literals.Types.SpeechSynthesisEvent eventInterface);

      public virtual extern dom.StorageEvent createEvent(
        dom.Literals.Types.StorageEvent eventInterface);

      public virtual extern dom.TextEvent createEvent(dom.Literals.Types.TextEvent eventInterface);

      public virtual extern dom.TouchEvent createEvent(
        dom.Literals.Types.TouchEvent eventInterface);

      public virtual extern dom.TrackEvent createEvent(
        dom.Literals.Types.TrackEvent eventInterface);

      public virtual extern dom.TransitionEvent createEvent(
        dom.Literals.Types.TransitionEvent eventInterface);

      public virtual extern dom.UIEvent createEvent(dom.Literals.Types.UIEvent eventInterface);

      public virtual extern dom.UIEvent createEvent(dom.Literals.Types.UIEvents eventInterface);

      public virtual extern dom.VRDisplayEvent createEvent(
        dom.Literals.Types.VRDisplayEvent eventInterface);

      public virtual extern dom.VRDisplayEvent createEvent(
        dom.Literals.Types.VRDisplayEvent_ eventInterface);

      public virtual extern dom.WebGLContextEvent createEvent(
        dom.Literals.Types.WebGLContextEvent eventInterface);

      public virtual extern dom.WheelEvent createEvent(
        dom.Literals.Types.WheelEvent eventInterface);

      public virtual extern dom.Event createEvent(string eventInterface);

      [Generated]
      public delegate void onabortFn(dom.UIEvent ev);

      [Generated]
      public delegate void onactivateFn(dom.Event ev);

      [Generated]
      public delegate void onblurFn(dom.FocusEvent ev);

      [Generated]
      public delegate void onclickFn(dom.MouseEvent ev);

      [Generated]
      public delegate void oncontextmenuFn(dom.PointerEvent ev);

      [Generated]
      public delegate void ondragFn(dom.DragEvent ev);

      [Generated]
      public delegate void onerrorFn(dom.ErrorEvent ev);

      [Generated]
      public delegate void onkeydownFn(dom.KeyboardEvent ev);

      [Generated]
      public delegate void onmousewheelFn(dom.WheelEvent ev);

      [Generated]
      public delegate void onprogressFn(dom.ProgressEvent ev);

      [Generated]
      public delegate void ontouchcancelFn(dom.TouchEvent ev);

      [Generated]
      public delegate void onvisibilitychangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class DocumentEvent : dom.DocumentEvent.Interface, IObject
    {
      public abstract dom.AnimationEvent createEvent(
        dom.Literals.Types.AnimationEvent eventInterface);

      public abstract dom.AnimationPlaybackEvent createEvent(
        dom.Literals.Types.AnimationPlaybackEvent eventInterface);

      public abstract dom.AudioProcessingEvent createEvent(
        dom.Literals.Types.AudioProcessingEvent eventInterface);

      public abstract dom.BeforeUnloadEvent createEvent(
        dom.Literals.Types.BeforeUnloadEvent eventInterface);

      public abstract dom.ClipboardEvent createEvent(
        dom.Literals.Types.ClipboardEvent eventInterface);

      public abstract dom.CloseEvent createEvent(dom.Literals.Types.CloseEvent eventInterface);

      public abstract dom.CompositionEvent createEvent(
        dom.Literals.Types.CompositionEvent eventInterface);

      public abstract dom.CustomEvent<object> createEvent(
        dom.Literals.Types.CustomEvent eventInterface);

      public abstract dom.DeviceLightEvent createEvent(
        dom.Literals.Types.DeviceLightEvent eventInterface);

      public abstract dom.DeviceMotionEvent createEvent(
        dom.Literals.Types.DeviceMotionEvent eventInterface);

      public abstract dom.DeviceOrientationEvent createEvent(
        dom.Literals.Types.DeviceOrientationEvent eventInterface);

      public abstract dom.DragEvent createEvent(dom.Literals.Types.DragEvent eventInterface);

      public abstract dom.ErrorEvent createEvent(dom.Literals.Types.ErrorEvent eventInterface);

      public abstract dom.Event createEvent(dom.Literals.Types.Event eventInterface);

      public abstract dom.Event createEvent(dom.Literals.Types.Events eventInterface);

      public abstract dom.FocusEvent createEvent(dom.Literals.Types.FocusEvent eventInterface);

      public abstract dom.FocusNavigationEvent createEvent(
        dom.Literals.Types.FocusNavigationEvent eventInterface);

      public abstract dom.GamepadEvent createEvent(dom.Literals.Types.GamepadEvent eventInterface);

      public abstract dom.HashChangeEvent createEvent(
        dom.Literals.Types.HashChangeEvent eventInterface);

      public abstract dom.IDBVersionChangeEvent createEvent(
        dom.Literals.Types.IDBVersionChangeEvent eventInterface);

      public abstract dom.KeyboardEvent createEvent(
        dom.Literals.Types.KeyboardEvent eventInterface);

      public abstract dom.ListeningStateChangedEvent createEvent(
        dom.Literals.Types.ListeningStateChangedEvent eventInterface);

      public abstract dom.MSDCCEvent createEvent(dom.Literals.Types.MSDCCEvent eventInterface);

      public abstract dom.MSDSHEvent createEvent(dom.Literals.Types.MSDSHEvent eventInterface);

      public abstract dom.MSMediaKeyMessageEvent createEvent(
        dom.Literals.Types.MSMediaKeyMessageEvent eventInterface);

      public abstract dom.MSMediaKeyNeededEvent createEvent(
        dom.Literals.Types.MSMediaKeyNeededEvent eventInterface);

      public abstract dom.MediaEncryptedEvent createEvent(
        dom.Literals.Types.MediaEncryptedEvent eventInterface);

      public abstract dom.MediaKeyMessageEvent createEvent(
        dom.Literals.Types.MediaKeyMessageEvent eventInterface);

      public abstract dom.MediaStreamErrorEvent createEvent(
        dom.Literals.Types.MediaStreamErrorEvent eventInterface);

      public abstract dom.MediaStreamEvent createEvent(
        dom.Literals.Types.MediaStreamEvent eventInterface);

      public abstract dom.MediaStreamTrackEvent createEvent(
        dom.Literals.Types.MediaStreamTrackEvent eventInterface);

      public abstract dom.MessageEvent createEvent(dom.Literals.Types.MessageEvent eventInterface);

      public abstract dom.MouseEvent createEvent(dom.Literals.Types.MouseEvent eventInterface);

      public abstract dom.MouseEvent createEvent(dom.Literals.Types.MouseEvents eventInterface);

      public abstract dom.MutationEvent createEvent(
        dom.Literals.Types.MutationEvent eventInterface);

      public abstract dom.MutationEvent createEvent(
        dom.Literals.Types.MutationEvents eventInterface);

      public abstract dom.OfflineAudioCompletionEvent createEvent(
        dom.Literals.Types.OfflineAudioCompletionEvent eventInterface);

      public abstract dom.OverflowEvent createEvent(
        dom.Literals.Types.OverflowEvent eventInterface);

      public abstract dom.PageTransitionEvent createEvent(
        dom.Literals.Types.PageTransitionEvent eventInterface);

      public abstract dom.PaymentRequestUpdateEvent createEvent(
        dom.Literals.Types.PaymentRequestUpdateEvent eventInterface);

      public abstract dom.PermissionRequestedEvent createEvent(
        dom.Literals.Types.PermissionRequestedEvent eventInterface);

      public abstract dom.PointerEvent createEvent(dom.Literals.Types.PointerEvent eventInterface);

      public abstract dom.PopStateEvent createEvent(
        dom.Literals.Types.PopStateEvent eventInterface);

      public abstract dom.ProgressEvent createEvent(
        dom.Literals.Types.ProgressEvent eventInterface);

      public abstract dom.PromiseRejectionEvent createEvent(
        dom.Literals.Types.PromiseRejectionEvent eventInterface);

      public abstract dom.RTCDTMFToneChangeEvent createEvent(
        dom.Literals.Types.RTCDTMFToneChangeEvent eventInterface);

      public abstract dom.RTCDtlsTransportStateChangedEvent createEvent(
        dom.Literals.Types.RTCDtlsTransportStateChangedEvent eventInterface);

      public abstract dom.RTCIceCandidatePairChangedEvent createEvent(
        dom.Literals.Types.RTCIceCandidatePairChangedEvent eventInterface);

      public abstract dom.RTCIceGathererEvent createEvent(
        dom.Literals.Types.RTCIceGathererEvent eventInterface);

      public abstract dom.RTCIceTransportStateChangedEvent createEvent(
        dom.Literals.Types.RTCIceTransportStateChangedEvent eventInterface);

      public abstract dom.RTCPeerConnectionIceEvent createEvent(
        dom.Literals.Types.RTCPeerConnectionIceEvent eventInterface);

      public abstract dom.RTCSsrcConflictEvent createEvent(
        dom.Literals.Types.RTCSsrcConflictEvent eventInterface);

      public abstract dom.SVGZoomEvent createEvent(dom.Literals.Types.SVGZoomEvent eventInterface);

      public abstract dom.SVGZoomEvent createEvent(
        dom.Literals.Types.SVGZoomEvents eventInterface);

      public abstract dom.SecurityPolicyViolationEvent createEvent(
        dom.Literals.Types.SecurityPolicyViolationEvent eventInterface);

      public abstract dom.ServiceWorkerMessageEvent createEvent(
        dom.Literals.Types.ServiceWorkerMessageEvent eventInterface);

      public abstract dom.SpeechSynthesisEvent createEvent(
        dom.Literals.Types.SpeechSynthesisEvent eventInterface);

      public abstract dom.StorageEvent createEvent(dom.Literals.Types.StorageEvent eventInterface);

      public abstract dom.TextEvent createEvent(dom.Literals.Types.TextEvent eventInterface);

      public abstract dom.TouchEvent createEvent(dom.Literals.Types.TouchEvent eventInterface);

      public abstract dom.TrackEvent createEvent(dom.Literals.Types.TrackEvent eventInterface);

      public abstract dom.TransitionEvent createEvent(
        dom.Literals.Types.TransitionEvent eventInterface);

      public abstract dom.UIEvent createEvent(dom.Literals.Types.UIEvent eventInterface);

      public abstract dom.UIEvent createEvent(dom.Literals.Types.UIEvents eventInterface);

      public abstract dom.VRDisplayEvent createEvent(
        dom.Literals.Types.VRDisplayEvent eventInterface);

      public abstract dom.VRDisplayEvent createEvent(
        dom.Literals.Types.VRDisplayEvent_ eventInterface);

      public abstract dom.WebGLContextEvent createEvent(
        dom.Literals.Types.WebGLContextEvent eventInterface);

      public abstract dom.WheelEvent createEvent(dom.Literals.Types.WheelEvent eventInterface);

      public abstract dom.Event createEvent(string eventInterface);

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.AnimationEvent createEvent(dom.Literals.Types.AnimationEvent eventInterface);

        dom.AnimationPlaybackEvent createEvent(
          dom.Literals.Types.AnimationPlaybackEvent eventInterface);

        dom.AudioProcessingEvent createEvent(
          dom.Literals.Types.AudioProcessingEvent eventInterface);

        dom.BeforeUnloadEvent createEvent(
          dom.Literals.Types.BeforeUnloadEvent eventInterface);

        dom.ClipboardEvent createEvent(dom.Literals.Types.ClipboardEvent eventInterface);

        dom.CloseEvent createEvent(dom.Literals.Types.CloseEvent eventInterface);

        dom.CompositionEvent createEvent(dom.Literals.Types.CompositionEvent eventInterface);

        dom.CustomEvent<object> createEvent(dom.Literals.Types.CustomEvent eventInterface);

        dom.DeviceLightEvent createEvent(dom.Literals.Types.DeviceLightEvent eventInterface);

        dom.DeviceMotionEvent createEvent(
          dom.Literals.Types.DeviceMotionEvent eventInterface);

        dom.DeviceOrientationEvent createEvent(
          dom.Literals.Types.DeviceOrientationEvent eventInterface);

        dom.DragEvent createEvent(dom.Literals.Types.DragEvent eventInterface);

        dom.ErrorEvent createEvent(dom.Literals.Types.ErrorEvent eventInterface);

        dom.Event createEvent(dom.Literals.Types.Event eventInterface);

        dom.Event createEvent(dom.Literals.Types.Events eventInterface);

        dom.FocusEvent createEvent(dom.Literals.Types.FocusEvent eventInterface);

        dom.FocusNavigationEvent createEvent(
          dom.Literals.Types.FocusNavigationEvent eventInterface);

        dom.GamepadEvent createEvent(dom.Literals.Types.GamepadEvent eventInterface);

        dom.HashChangeEvent createEvent(dom.Literals.Types.HashChangeEvent eventInterface);

        dom.IDBVersionChangeEvent createEvent(
          dom.Literals.Types.IDBVersionChangeEvent eventInterface);

        dom.KeyboardEvent createEvent(dom.Literals.Types.KeyboardEvent eventInterface);

        dom.ListeningStateChangedEvent createEvent(
          dom.Literals.Types.ListeningStateChangedEvent eventInterface);

        dom.MSDCCEvent createEvent(dom.Literals.Types.MSDCCEvent eventInterface);

        dom.MSDSHEvent createEvent(dom.Literals.Types.MSDSHEvent eventInterface);

        dom.MSMediaKeyMessageEvent createEvent(
          dom.Literals.Types.MSMediaKeyMessageEvent eventInterface);

        dom.MSMediaKeyNeededEvent createEvent(
          dom.Literals.Types.MSMediaKeyNeededEvent eventInterface);

        dom.MediaEncryptedEvent createEvent(
          dom.Literals.Types.MediaEncryptedEvent eventInterface);

        dom.MediaKeyMessageEvent createEvent(
          dom.Literals.Types.MediaKeyMessageEvent eventInterface);

        dom.MediaStreamErrorEvent createEvent(
          dom.Literals.Types.MediaStreamErrorEvent eventInterface);

        dom.MediaStreamEvent createEvent(dom.Literals.Types.MediaStreamEvent eventInterface);

        dom.MediaStreamTrackEvent createEvent(
          dom.Literals.Types.MediaStreamTrackEvent eventInterface);

        dom.MessageEvent createEvent(dom.Literals.Types.MessageEvent eventInterface);

        dom.MouseEvent createEvent(dom.Literals.Types.MouseEvent eventInterface);

        dom.MouseEvent createEvent(dom.Literals.Types.MouseEvents eventInterface);

        dom.MutationEvent createEvent(dom.Literals.Types.MutationEvent eventInterface);

        dom.MutationEvent createEvent(dom.Literals.Types.MutationEvents eventInterface);

        dom.OfflineAudioCompletionEvent createEvent(
          dom.Literals.Types.OfflineAudioCompletionEvent eventInterface);

        dom.OverflowEvent createEvent(dom.Literals.Types.OverflowEvent eventInterface);

        dom.PageTransitionEvent createEvent(
          dom.Literals.Types.PageTransitionEvent eventInterface);

        dom.PaymentRequestUpdateEvent createEvent(
          dom.Literals.Types.PaymentRequestUpdateEvent eventInterface);

        dom.PermissionRequestedEvent createEvent(
          dom.Literals.Types.PermissionRequestedEvent eventInterface);

        dom.PointerEvent createEvent(dom.Literals.Types.PointerEvent eventInterface);

        dom.PopStateEvent createEvent(dom.Literals.Types.PopStateEvent eventInterface);

        dom.ProgressEvent createEvent(dom.Literals.Types.ProgressEvent eventInterface);

        dom.PromiseRejectionEvent createEvent(
          dom.Literals.Types.PromiseRejectionEvent eventInterface);

        dom.RTCDTMFToneChangeEvent createEvent(
          dom.Literals.Types.RTCDTMFToneChangeEvent eventInterface);

        dom.RTCDtlsTransportStateChangedEvent createEvent(
          dom.Literals.Types.RTCDtlsTransportStateChangedEvent eventInterface);

        dom.RTCIceCandidatePairChangedEvent createEvent(
          dom.Literals.Types.RTCIceCandidatePairChangedEvent eventInterface);

        dom.RTCIceGathererEvent createEvent(
          dom.Literals.Types.RTCIceGathererEvent eventInterface);

        dom.RTCIceTransportStateChangedEvent createEvent(
          dom.Literals.Types.RTCIceTransportStateChangedEvent eventInterface);

        dom.RTCPeerConnectionIceEvent createEvent(
          dom.Literals.Types.RTCPeerConnectionIceEvent eventInterface);

        dom.RTCSsrcConflictEvent createEvent(
          dom.Literals.Types.RTCSsrcConflictEvent eventInterface);

        dom.SVGZoomEvent createEvent(dom.Literals.Types.SVGZoomEvent eventInterface);

        dom.SVGZoomEvent createEvent(dom.Literals.Types.SVGZoomEvents eventInterface);

        dom.SecurityPolicyViolationEvent createEvent(
          dom.Literals.Types.SecurityPolicyViolationEvent eventInterface);

        dom.ServiceWorkerMessageEvent createEvent(
          dom.Literals.Types.ServiceWorkerMessageEvent eventInterface);

        dom.SpeechSynthesisEvent createEvent(
          dom.Literals.Types.SpeechSynthesisEvent eventInterface);

        dom.StorageEvent createEvent(dom.Literals.Types.StorageEvent eventInterface);

        dom.TextEvent createEvent(dom.Literals.Types.TextEvent eventInterface);

        dom.TouchEvent createEvent(dom.Literals.Types.TouchEvent eventInterface);

        dom.TrackEvent createEvent(dom.Literals.Types.TrackEvent eventInterface);

        dom.TransitionEvent createEvent(dom.Literals.Types.TransitionEvent eventInterface);

        dom.UIEvent createEvent(dom.Literals.Types.UIEvent eventInterface);

        dom.UIEvent createEvent(dom.Literals.Types.UIEvents eventInterface);

        dom.VRDisplayEvent createEvent(dom.Literals.Types.VRDisplayEvent eventInterface);

        dom.VRDisplayEvent createEvent(dom.Literals.Types.VRDisplayEvent_ eventInterface);

        dom.WebGLContextEvent createEvent(
          dom.Literals.Types.WebGLContextEvent eventInterface);

        dom.WheelEvent createEvent(dom.Literals.Types.WheelEvent eventInterface);

        dom.Event createEvent(string eventInterface);
      }
    }

    [CombinedClass]
    public class DocumentFragment : dom.Node, dom.DocumentFragment.Interface, dom.Node.Interface, dom.EventTarget.Interface, IObject, dom.ParentNode.Interface
    {
      private static dom.DocumentFragment _prototype_BackingField;
      private readonly uint _childElementCount_BackingField;
      private readonly dom.Element _firstElementChild_BackingField;
      private readonly dom.Element _lastElementChild_BackingField;
      private readonly dom.HTMLCollection _children_BackingField;

      public static dom.DocumentFragment prototype
      {
        get
        {
          return dom.DocumentFragment._prototype_BackingField;
        }
        set
        {
          dom.DocumentFragment._prototype_BackingField = value;
        }
      }

      public virtual extern dom.HTMLElement getElementById(string elementId);

      public virtual uint childElementCount
      {
        get
        {
          return this._childElementCount_BackingField;
        }
      }

      public virtual dom.Element firstElementChild
      {
        get
        {
          return this._firstElementChild_BackingField;
        }
      }

      public virtual dom.Element lastElementChild
      {
        get
        {
          return this._lastElementChild_BackingField;
        }
      }

      public virtual dom.HTMLCollection children
      {
        get
        {
          return this._children_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object querySelector<K>(K selectors);

      [Name("querySelector")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object querySelector2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public virtual extern Union<E, Null> querySelector<E>(string selectors);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

      [Name("querySelectorAll")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<E> querySelectorAll<E>(string selectors);

      [Generated]
      [IgnoreCast]
      [ClassInterface]
      [Name("DocumentFragment")]
      public new interface Interface : dom.Node.Interface, dom.EventTarget.Interface, IObject, dom.ParentNode.Interface
      {
        dom.HTMLElement getElementById(string elementId);
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class DocumentOrShadowRoot : IObject
    {
      public abstract dom.Element activeElement { get; }

      public abstract dom.StyleSheetList styleSheets { get; }

      public abstract dom.Element elementFromPoint(double x, double y);

      public abstract dom.Element[] elementsFromPoint(double x, double y);

      public abstract dom.Selection getSelection();
    }

    [CombinedClass]
    [FormerInterface]
    public class DocumentType : dom.Node, dom.ChildNode.Interface, IObject
    {
      private static dom.DocumentType _prototype_BackingField;
      private readonly dom.NamedNodeMap _entities_BackingField;
      private readonly string _internalSubset_BackingField;
      private readonly string _name_BackingField;
      private readonly dom.NamedNodeMap _notations_BackingField;
      private readonly string _publicId_BackingField;
      private readonly string _systemId_BackingField;

      public static dom.DocumentType prototype
      {
        get
        {
          return dom.DocumentType._prototype_BackingField;
        }
        set
        {
          dom.DocumentType._prototype_BackingField = value;
        }
      }

      public virtual dom.NamedNodeMap entities
      {
        get
        {
          return this._entities_BackingField;
        }
      }

      public virtual string internalSubset
      {
        get
        {
          return this._internalSubset_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual dom.NamedNodeMap notations
      {
        get
        {
          return this._notations_BackingField;
        }
      }

      public virtual string publicId
      {
        get
        {
          return this._publicId_BackingField;
        }
      }

      public virtual string systemId
      {
        get
        {
          return this._systemId_BackingField;
        }
      }

      public virtual extern void remove();
    }

    [CombinedClass]
    [FormerInterface]
    public class DragEvent : dom.MouseEvent
    {
      private static dom.DragEvent _prototype_BackingField;
      private readonly dom.DataTransfer _dataTransfer_BackingField;

      public extern DragEvent(dom.Literals.Options.type2 type);

      public extern DragEvent(dom.Literals.Options.type2 type, dom.DragEvent.Config dragEventInit);

      public static dom.DragEvent prototype
      {
        get
        {
          return dom.DragEvent._prototype_BackingField;
        }
        set
        {
          dom.DragEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.DataTransfer dataTransfer
      {
        get
        {
          return this._dataTransfer_BackingField;
        }
      }

      public virtual extern void initDragEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        double detailArg,
        double screenXArg,
        double screenYArg,
        double clientXArg,
        double clientYArg,
        bool ctrlKeyArg,
        bool altKeyArg,
        bool shiftKeyArg,
        bool metaKeyArg,
        double buttonArg,
        dom.EventTarget relatedTargetArg,
        dom.DataTransfer dataTransferArg);

      public virtual extern void msConvertURL(dom.File file, string targetType);

      public virtual extern void msConvertURL(dom.File file, string targetType, string targetURL);

      [ObjectLiteral]
      public class Config : IObject
      {
        private dom.DataTransfer _dataTransfer_BackingField;

        public dom.DataTransfer dataTransfer
        {
          get
          {
            return this._dataTransfer_BackingField;
          }
          set
          {
            this._dataTransfer_BackingField = value;
          }
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class DynamicsCompressorNode : dom.AudioNode
    {
      private static dom.DynamicsCompressorNode _prototype_BackingField;
      private readonly dom.AudioParam _attack_BackingField;
      private readonly dom.AudioParam _knee_BackingField;
      private readonly dom.AudioParam _ratio_BackingField;
      private readonly double _reduction_BackingField;
      private readonly dom.AudioParam _release_BackingField;
      private readonly dom.AudioParam _threshold_BackingField;

      public static dom.DynamicsCompressorNode prototype
      {
        get
        {
          return dom.DynamicsCompressorNode._prototype_BackingField;
        }
        set
        {
          dom.DynamicsCompressorNode._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioParam attack
      {
        get
        {
          return this._attack_BackingField;
        }
      }

      public virtual dom.AudioParam knee
      {
        get
        {
          return this._knee_BackingField;
        }
      }

      public virtual dom.AudioParam ratio
      {
        get
        {
          return this._ratio_BackingField;
        }
      }

      public virtual double reduction
      {
        get
        {
          return this._reduction_BackingField;
        }
      }

      public virtual dom.AudioParam release
      {
        get
        {
          return this._release_BackingField;
        }
      }

      public virtual dom.AudioParam threshold
      {
        get
        {
          return this._threshold_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EXT_blend_minmax : IObject
    {
      private readonly double _MAX_EXT_BackingField;
      private readonly double _MIN_EXT_BackingField;

      public double MAX_EXT
      {
        get
        {
          return this._MAX_EXT_BackingField;
        }
      }

      public double MIN_EXT
      {
        get
        {
          return this._MIN_EXT_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EXT_frag_depth : IObject
    {
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EXT_sRGB : IObject
    {
      private readonly double _FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT_BackingField;
      private readonly double _SRGB8_ALPHA8_EXT_BackingField;
      private readonly double _SRGB_ALPHA_EXT_BackingField;
      private readonly double _SRGB_EXT_BackingField;

      public double FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT
      {
        get
        {
          return this._FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT_BackingField;
        }
      }

      public double SRGB8_ALPHA8_EXT
      {
        get
        {
          return this._SRGB8_ALPHA8_EXT_BackingField;
        }
      }

      public double SRGB_ALPHA_EXT
      {
        get
        {
          return this._SRGB_ALPHA_EXT_BackingField;
        }
      }

      public double SRGB_EXT
      {
        get
        {
          return this._SRGB_EXT_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EXT_shader_texture_lod : IObject
    {
    }

    [CombinedClass]
    [FormerInterface]
    public class EXT_texture_filter_anisotropic : IObject
    {
      private static dom.EXT_texture_filter_anisotropic _prototype_BackingField;
      private static readonly double _MAX_TEXTURE_MAX_ANISOTROPY_EXT_Static_BackingField;
      private static readonly double _TEXTURE_MAX_ANISOTROPY_EXT_Static_BackingField;
      private readonly double _MAX_TEXTURE_MAX_ANISOTROPY_EXT_BackingField;
      private readonly double _TEXTURE_MAX_ANISOTROPY_EXT_BackingField;

      public static dom.EXT_texture_filter_anisotropic prototype
      {
        get
        {
          return dom.EXT_texture_filter_anisotropic._prototype_BackingField;
        }
        set
        {
          dom.EXT_texture_filter_anisotropic._prototype_BackingField = value;
        }
      }

      [Name("MAX_TEXTURE_MAX_ANISOTROPY_EXT")]
      public static double MAX_TEXTURE_MAX_ANISOTROPY_EXT_Static
      {
        get
        {
          return dom.EXT_texture_filter_anisotropic._MAX_TEXTURE_MAX_ANISOTROPY_EXT_Static_BackingField;
        }
      }

      [Name("TEXTURE_MAX_ANISOTROPY_EXT")]
      public static double TEXTURE_MAX_ANISOTROPY_EXT_Static
      {
        get
        {
          return dom.EXT_texture_filter_anisotropic._TEXTURE_MAX_ANISOTROPY_EXT_Static_BackingField;
        }
      }

      public virtual double MAX_TEXTURE_MAX_ANISOTROPY_EXT
      {
        get
        {
          return this._MAX_TEXTURE_MAX_ANISOTROPY_EXT_BackingField;
        }
      }

      public virtual double TEXTURE_MAX_ANISOTROPY_EXT
      {
        get
        {
          return this._TEXTURE_MAX_ANISOTROPY_EXT_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ElementEventMap : dom.GlobalEventHandlersEventMap
    {
      private dom.Event _ariarequest_BackingField;
      private dom.Event _command_BackingField;
      private dom.PointerEvent _gotpointercapture_BackingField;
      private dom.PointerEvent _lostpointercapture_BackingField;
      private dom.Event _MSGestureChange_BackingField;
      private dom.Event _MSGestureDoubleTap_BackingField;
      private dom.Event _MSGestureEnd_BackingField;
      private dom.Event _MSGestureHold_BackingField;
      private dom.Event _MSGestureStart_BackingField;
      private dom.Event _MSGestureTap_BackingField;
      private dom.Event _MSGotPointerCapture_BackingField;
      private dom.Event _MSInertiaStart_BackingField;
      private dom.Event _MSLostPointerCapture_BackingField;
      private dom.Event _MSPointerCancel_BackingField;
      private dom.Event _MSPointerDown_BackingField;
      private dom.Event _MSPointerEnter_BackingField;
      private dom.Event _MSPointerLeave_BackingField;
      private dom.Event _MSPointerMove_BackingField;
      private dom.Event _MSPointerOut_BackingField;
      private dom.Event _MSPointerOver_BackingField;
      private dom.Event _MSPointerUp_BackingField;
      private dom.TouchEvent _touchcancel_BackingField;
      private dom.TouchEvent _touchend_BackingField;
      private dom.TouchEvent _touchmove_BackingField;
      private dom.TouchEvent _touchstart_BackingField;
      private dom.Event _webkitfullscreenchange_BackingField;
      private dom.Event _webkitfullscreenerror_BackingField;

      public dom.Event ariarequest
      {
        get
        {
          return this._ariarequest_BackingField;
        }
        set
        {
          this._ariarequest_BackingField = value;
        }
      }

      public dom.Event command
      {
        get
        {
          return this._command_BackingField;
        }
        set
        {
          this._command_BackingField = value;
        }
      }

      public dom.PointerEvent gotpointercapture
      {
        get
        {
          return this._gotpointercapture_BackingField;
        }
        set
        {
          this._gotpointercapture_BackingField = value;
        }
      }

      public dom.PointerEvent lostpointercapture
      {
        get
        {
          return this._lostpointercapture_BackingField;
        }
        set
        {
          this._lostpointercapture_BackingField = value;
        }
      }

      public dom.Event MSGestureChange
      {
        get
        {
          return this._MSGestureChange_BackingField;
        }
        set
        {
          this._MSGestureChange_BackingField = value;
        }
      }

      public dom.Event MSGestureDoubleTap
      {
        get
        {
          return this._MSGestureDoubleTap_BackingField;
        }
        set
        {
          this._MSGestureDoubleTap_BackingField = value;
        }
      }

      public dom.Event MSGestureEnd
      {
        get
        {
          return this._MSGestureEnd_BackingField;
        }
        set
        {
          this._MSGestureEnd_BackingField = value;
        }
      }

      public dom.Event MSGestureHold
      {
        get
        {
          return this._MSGestureHold_BackingField;
        }
        set
        {
          this._MSGestureHold_BackingField = value;
        }
      }

      public dom.Event MSGestureStart
      {
        get
        {
          return this._MSGestureStart_BackingField;
        }
        set
        {
          this._MSGestureStart_BackingField = value;
        }
      }

      public dom.Event MSGestureTap
      {
        get
        {
          return this._MSGestureTap_BackingField;
        }
        set
        {
          this._MSGestureTap_BackingField = value;
        }
      }

      public dom.Event MSGotPointerCapture
      {
        get
        {
          return this._MSGotPointerCapture_BackingField;
        }
        set
        {
          this._MSGotPointerCapture_BackingField = value;
        }
      }

      public dom.Event MSInertiaStart
      {
        get
        {
          return this._MSInertiaStart_BackingField;
        }
        set
        {
          this._MSInertiaStart_BackingField = value;
        }
      }

      public dom.Event MSLostPointerCapture
      {
        get
        {
          return this._MSLostPointerCapture_BackingField;
        }
        set
        {
          this._MSLostPointerCapture_BackingField = value;
        }
      }

      public dom.Event MSPointerCancel
      {
        get
        {
          return this._MSPointerCancel_BackingField;
        }
        set
        {
          this._MSPointerCancel_BackingField = value;
        }
      }

      public dom.Event MSPointerDown
      {
        get
        {
          return this._MSPointerDown_BackingField;
        }
        set
        {
          this._MSPointerDown_BackingField = value;
        }
      }

      public dom.Event MSPointerEnter
      {
        get
        {
          return this._MSPointerEnter_BackingField;
        }
        set
        {
          this._MSPointerEnter_BackingField = value;
        }
      }

      public dom.Event MSPointerLeave
      {
        get
        {
          return this._MSPointerLeave_BackingField;
        }
        set
        {
          this._MSPointerLeave_BackingField = value;
        }
      }

      public dom.Event MSPointerMove
      {
        get
        {
          return this._MSPointerMove_BackingField;
        }
        set
        {
          this._MSPointerMove_BackingField = value;
        }
      }

      public dom.Event MSPointerOut
      {
        get
        {
          return this._MSPointerOut_BackingField;
        }
        set
        {
          this._MSPointerOut_BackingField = value;
        }
      }

      public dom.Event MSPointerOver
      {
        get
        {
          return this._MSPointerOver_BackingField;
        }
        set
        {
          this._MSPointerOver_BackingField = value;
        }
      }

      public dom.Event MSPointerUp
      {
        get
        {
          return this._MSPointerUp_BackingField;
        }
        set
        {
          this._MSPointerUp_BackingField = value;
        }
      }

      public dom.TouchEvent touchcancel
      {
        get
        {
          return this._touchcancel_BackingField;
        }
        set
        {
          this._touchcancel_BackingField = value;
        }
      }

      public dom.TouchEvent touchend
      {
        get
        {
          return this._touchend_BackingField;
        }
        set
        {
          this._touchend_BackingField = value;
        }
      }

      public dom.TouchEvent touchmove
      {
        get
        {
          return this._touchmove_BackingField;
        }
        set
        {
          this._touchmove_BackingField = value;
        }
      }

      public dom.TouchEvent touchstart
      {
        get
        {
          return this._touchstart_BackingField;
        }
        set
        {
          this._touchstart_BackingField = value;
        }
      }

      public dom.Event webkitfullscreenchange
      {
        get
        {
          return this._webkitfullscreenchange_BackingField;
        }
        set
        {
          this._webkitfullscreenchange_BackingField = value;
        }
      }

      public dom.Event webkitfullscreenerror
      {
        get
        {
          return this._webkitfullscreenerror_BackingField;
        }
        set
        {
          this._webkitfullscreenerror_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"ariarequest\"")]
        public static readonly KeyOf<dom.ElementEventMap> ariarequest;
        [Template("\"command\"")]
        public static readonly KeyOf<dom.ElementEventMap> command;
        [Template("\"gotpointercapture\"")]
        public static readonly KeyOf<dom.ElementEventMap> gotpointercapture;
        [Template("\"lostpointercapture\"")]
        public static readonly KeyOf<dom.ElementEventMap> lostpointercapture;
        [Template("\"MSGestureChange\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSGestureChange;
        [Template("\"MSGestureDoubleTap\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSGestureDoubleTap;
        [Template("\"MSGestureEnd\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSGestureEnd;
        [Template("\"MSGestureHold\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSGestureHold;
        [Template("\"MSGestureStart\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSGestureStart;
        [Template("\"MSGestureTap\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSGestureTap;
        [Template("\"MSGotPointerCapture\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSGotPointerCapture;
        [Template("\"MSInertiaStart\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSInertiaStart;
        [Template("\"MSLostPointerCapture\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSLostPointerCapture;
        [Template("\"MSPointerCancel\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSPointerCancel;
        [Template("\"MSPointerDown\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSPointerDown;
        [Template("\"MSPointerEnter\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSPointerEnter;
        [Template("\"MSPointerLeave\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSPointerLeave;
        [Template("\"MSPointerMove\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSPointerMove;
        [Template("\"MSPointerOut\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSPointerOut;
        [Template("\"MSPointerOver\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSPointerOver;
        [Template("\"MSPointerUp\"")]
        public static readonly KeyOf<dom.ElementEventMap> MSPointerUp;
        [Template("\"touchcancel\"")]
        public static readonly KeyOf<dom.ElementEventMap> touchcancel;
        [Template("\"touchend\"")]
        public static readonly KeyOf<dom.ElementEventMap> touchend;
        [Template("\"touchmove\"")]
        public static readonly KeyOf<dom.ElementEventMap> touchmove;
        [Template("\"touchstart\"")]
        public static readonly KeyOf<dom.ElementEventMap> touchstart;
        [Template("\"webkitfullscreenchange\"")]
        public static readonly KeyOf<dom.ElementEventMap> webkitfullscreenchange;
        [Template("\"webkitfullscreenerror\"")]
        public static readonly KeyOf<dom.ElementEventMap> webkitfullscreenerror;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Element : dom.Node, dom.GlobalEventHandlers.Interface, IObject, dom.ElementTraversal.Interface, dom.ParentNode.Interface, dom.ChildNode.Interface
    {
      private static dom.Element _prototype_BackingField;
      private readonly dom.HTMLSlotElement _assignedSlot_BackingField;
      private readonly dom.NamedNodeMap _attributes_BackingField;
      private readonly dom.DOMTokenList _classList_BackingField;
      private string _className_BackingField;
      private readonly int _clientHeight_BackingField;
      private readonly int _clientLeft_BackingField;
      private readonly int _clientTop_BackingField;
      private readonly int _clientWidth_BackingField;
      private string _id_BackingField;
      private string _innerHTML_BackingField;
      private double _msContentZoomFactor_BackingField;
      private readonly string _msRegionOverflow_BackingField;
      private dom.Element.onariarequestFn _onariarequest_BackingField;
      private dom.Element.onariarequestFn _oncommand_BackingField;
      private dom.Element.ongotpointercaptureFn _ongotpointercapture_BackingField;
      private dom.Element.ongotpointercaptureFn _onlostpointercapture_BackingField;
      private dom.Element.onariarequestFn _onmsgesturechange_BackingField;
      private dom.Element.onariarequestFn _onmsgesturedoubletap_BackingField;
      private dom.Element.onariarequestFn _onmsgestureend_BackingField;
      private dom.Element.onariarequestFn _onmsgesturehold_BackingField;
      private dom.Element.onariarequestFn _onmsgesturestart_BackingField;
      private dom.Element.onariarequestFn _onmsgesturetap_BackingField;
      private dom.Element.onariarequestFn _onmsgotpointercapture_BackingField;
      private dom.Element.onariarequestFn _onmsinertiastart_BackingField;
      private dom.Element.onariarequestFn _onmslostpointercapture_BackingField;
      private dom.Element.onariarequestFn _onmspointercancel_BackingField;
      private dom.Element.onariarequestFn _onmspointerdown_BackingField;
      private dom.Element.onariarequestFn _onmspointerenter_BackingField;
      private dom.Element.onariarequestFn _onmspointerleave_BackingField;
      private dom.Element.onariarequestFn _onmspointermove_BackingField;
      private dom.Element.onariarequestFn _onmspointerout_BackingField;
      private dom.Element.onariarequestFn _onmspointerover_BackingField;
      private dom.Element.onariarequestFn _onmspointerup_BackingField;
      private dom.Element.ontouchcancelFn _ontouchcancel_BackingField;
      private dom.Element.ontouchcancelFn _ontouchend_BackingField;
      private dom.Element.ontouchcancelFn _ontouchmove_BackingField;
      private dom.Element.ontouchcancelFn _ontouchstart_BackingField;
      private dom.Element.onariarequestFn _onwebkitfullscreenchange_BackingField;
      private dom.Element.onariarequestFn _onwebkitfullscreenerror_BackingField;
      private string _outerHTML_BackingField;
      private readonly string _prefix_BackingField;
      private readonly int _scrollHeight_BackingField;
      private double _scrollLeft_BackingField;
      private double _scrollTop_BackingField;
      private readonly int _scrollWidth_BackingField;
      private readonly dom.ShadowRoot _shadowRoot_BackingField;
      private string _slot_BackingField;
      private readonly string _tagName_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointercancel_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerdown_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerenter_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerleave_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointermove_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerout_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerover_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerup_BackingField;
      private dom.GlobalEventHandlers.onwheelFn _onwheel_BackingField;
      private readonly double _childElementCount_BackingField;
      private readonly dom.Element _firstElementChild_BackingField;
      private readonly dom.Element _lastElementChild_BackingField;
      private readonly dom.Element _nextElementSibling_BackingField;
      private readonly dom.Element _previousElementSibling_BackingField;
      private readonly dom.HTMLCollection _children_BackingField;
      private readonly uint _H5_D_dom_D_ParentNode_D_Interface_D_childElementCount_BackingField;

      public static dom.Element prototype
      {
        get
        {
          return dom.Element._prototype_BackingField;
        }
        set
        {
          dom.Element._prototype_BackingField = value;
        }
      }

      public virtual dom.HTMLSlotElement assignedSlot
      {
        get
        {
          return this._assignedSlot_BackingField;
        }
      }

      public virtual dom.NamedNodeMap attributes
      {
        get
        {
          return this._attributes_BackingField;
        }
      }

      public virtual dom.DOMTokenList classList
      {
        get
        {
          return this._classList_BackingField;
        }
      }

      public virtual string className
      {
        get
        {
          return this._className_BackingField;
        }
        set
        {
          this._className_BackingField = value;
        }
      }

      public virtual int clientHeight
      {
        get
        {
          return this._clientHeight_BackingField;
        }
      }

      public virtual int clientLeft
      {
        get
        {
          return this._clientLeft_BackingField;
        }
      }

      public virtual int clientTop
      {
        get
        {
          return this._clientTop_BackingField;
        }
      }

      public virtual int clientWidth
      {
        get
        {
          return this._clientWidth_BackingField;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public virtual string innerHTML
      {
        get
        {
          return this._innerHTML_BackingField;
        }
        set
        {
          this._innerHTML_BackingField = value;
        }
      }

      public virtual double msContentZoomFactor
      {
        get
        {
          return this._msContentZoomFactor_BackingField;
        }
        set
        {
          this._msContentZoomFactor_BackingField = value;
        }
      }

      public virtual string msRegionOverflow
      {
        get
        {
          return this._msRegionOverflow_BackingField;
        }
      }

      public virtual dom.Element.onariarequestFn onariarequest
      {
        get
        {
          return this._onariarequest_BackingField;
        }
        set
        {
          this._onariarequest_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn oncommand
      {
        get
        {
          return this._oncommand_BackingField;
        }
        set
        {
          this._oncommand_BackingField = value;
        }
      }

      public virtual dom.Element.ongotpointercaptureFn ongotpointercapture
      {
        get
        {
          return this._ongotpointercapture_BackingField;
        }
        set
        {
          this._ongotpointercapture_BackingField = value;
        }
      }

      public virtual dom.Element.ongotpointercaptureFn onlostpointercapture
      {
        get
        {
          return this._onlostpointercapture_BackingField;
        }
        set
        {
          this._onlostpointercapture_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmsgesturechange
      {
        get
        {
          return this._onmsgesturechange_BackingField;
        }
        set
        {
          this._onmsgesturechange_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmsgesturedoubletap
      {
        get
        {
          return this._onmsgesturedoubletap_BackingField;
        }
        set
        {
          this._onmsgesturedoubletap_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmsgestureend
      {
        get
        {
          return this._onmsgestureend_BackingField;
        }
        set
        {
          this._onmsgestureend_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmsgesturehold
      {
        get
        {
          return this._onmsgesturehold_BackingField;
        }
        set
        {
          this._onmsgesturehold_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmsgesturestart
      {
        get
        {
          return this._onmsgesturestart_BackingField;
        }
        set
        {
          this._onmsgesturestart_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmsgesturetap
      {
        get
        {
          return this._onmsgesturetap_BackingField;
        }
        set
        {
          this._onmsgesturetap_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmsgotpointercapture
      {
        get
        {
          return this._onmsgotpointercapture_BackingField;
        }
        set
        {
          this._onmsgotpointercapture_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmsinertiastart
      {
        get
        {
          return this._onmsinertiastart_BackingField;
        }
        set
        {
          this._onmsinertiastart_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmslostpointercapture
      {
        get
        {
          return this._onmslostpointercapture_BackingField;
        }
        set
        {
          this._onmslostpointercapture_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmspointercancel
      {
        get
        {
          return this._onmspointercancel_BackingField;
        }
        set
        {
          this._onmspointercancel_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmspointerdown
      {
        get
        {
          return this._onmspointerdown_BackingField;
        }
        set
        {
          this._onmspointerdown_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmspointerenter
      {
        get
        {
          return this._onmspointerenter_BackingField;
        }
        set
        {
          this._onmspointerenter_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmspointerleave
      {
        get
        {
          return this._onmspointerleave_BackingField;
        }
        set
        {
          this._onmspointerleave_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmspointermove
      {
        get
        {
          return this._onmspointermove_BackingField;
        }
        set
        {
          this._onmspointermove_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmspointerout
      {
        get
        {
          return this._onmspointerout_BackingField;
        }
        set
        {
          this._onmspointerout_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmspointerover
      {
        get
        {
          return this._onmspointerover_BackingField;
        }
        set
        {
          this._onmspointerover_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onmspointerup
      {
        get
        {
          return this._onmspointerup_BackingField;
        }
        set
        {
          this._onmspointerup_BackingField = value;
        }
      }

      public virtual dom.Element.ontouchcancelFn ontouchcancel
      {
        get
        {
          return this._ontouchcancel_BackingField;
        }
        set
        {
          this._ontouchcancel_BackingField = value;
        }
      }

      public virtual dom.Element.ontouchcancelFn ontouchend
      {
        get
        {
          return this._ontouchend_BackingField;
        }
        set
        {
          this._ontouchend_BackingField = value;
        }
      }

      public virtual dom.Element.ontouchcancelFn ontouchmove
      {
        get
        {
          return this._ontouchmove_BackingField;
        }
        set
        {
          this._ontouchmove_BackingField = value;
        }
      }

      public virtual dom.Element.ontouchcancelFn ontouchstart
      {
        get
        {
          return this._ontouchstart_BackingField;
        }
        set
        {
          this._ontouchstart_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onwebkitfullscreenchange
      {
        get
        {
          return this._onwebkitfullscreenchange_BackingField;
        }
        set
        {
          this._onwebkitfullscreenchange_BackingField = value;
        }
      }

      public virtual dom.Element.onariarequestFn onwebkitfullscreenerror
      {
        get
        {
          return this._onwebkitfullscreenerror_BackingField;
        }
        set
        {
          this._onwebkitfullscreenerror_BackingField = value;
        }
      }

      public virtual string outerHTML
      {
        get
        {
          return this._outerHTML_BackingField;
        }
        set
        {
          this._outerHTML_BackingField = value;
        }
      }

      public virtual string prefix
      {
        get
        {
          return this._prefix_BackingField;
        }
      }

      public virtual int scrollHeight
      {
        get
        {
          return this._scrollHeight_BackingField;
        }
      }

      public virtual double scrollLeft
      {
        get
        {
          return this._scrollLeft_BackingField;
        }
        set
        {
          this._scrollLeft_BackingField = value;
        }
      }

      public virtual double scrollTop
      {
        get
        {
          return this._scrollTop_BackingField;
        }
        set
        {
          this._scrollTop_BackingField = value;
        }
      }

      public virtual int scrollWidth
      {
        get
        {
          return this._scrollWidth_BackingField;
        }
      }

      public virtual dom.ShadowRoot shadowRoot
      {
        get
        {
          return this._shadowRoot_BackingField;
        }
      }

      public virtual string slot
      {
        get
        {
          return this._slot_BackingField;
        }
        set
        {
          this._slot_BackingField = value;
        }
      }

      public virtual string tagName
      {
        get
        {
          return this._tagName_BackingField;
        }
      }

      public virtual extern dom.ShadowRoot attachShadow(dom.ShadowRootInit shadowRootInitDict);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object closest<K>(K selector);

      [Name("closest")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object closest2<K>(K selector);

      public virtual extern dom.Element closest(string selector);

      public virtual extern string getAttribute(string qualifiedName);

      public virtual extern string getAttributeNS(string namespaceURI, string localName);

      public virtual extern dom.Attr getAttributeNode(string name);

      public virtual extern dom.Attr getAttributeNodeNS(string namespaceURI, string localName);

      public virtual extern Union<dom.ClientRect, dom.DOMRect> getBoundingClientRect();

      public virtual extern Union<dom.ClientRectList, dom.DOMRectList> getClientRects();

      public virtual extern dom.NodeListOf<dom.Element> getElementsByClassName(
        string classNames);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> getElementsByTagName<K>(K name);

      [Name("getElementsByTagName")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> getElementsByTagName2<K>(K name);

      public virtual extern dom.NodeListOf<dom.Element> getElementsByTagName(string name);

      public virtual extern dom.HTMLCollectionOf<dom.HTMLElement> getElementsByTagNameNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash1999Slashxhtml namespaceURI,
        string localName);

      public virtual extern dom.HTMLCollectionOf<dom.SVGElement> getElementsByTagNameNS(
        dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
        string localName);

      public virtual extern dom.HTMLCollectionOf<dom.Element> getElementsByTagNameNS(
        string namespaceURI,
        string localName);

      public virtual extern bool hasAttribute(string name);

      public virtual extern bool hasAttributeNS(string namespaceURI, string localName);

      public virtual extern bool hasAttributes();

      public virtual extern dom.Element insertAdjacentElement(
        dom.InsertPosition position,
        dom.Element insertedElement);

      public virtual extern void insertAdjacentHTML(dom.InsertPosition where, string html);

      public virtual extern void insertAdjacentText(dom.InsertPosition where, string text);

      public virtual extern bool matches(string selectors);

      public virtual extern object msGetRegionContent();

      public virtual extern dom.ClientRect msGetUntransformedBounds();

      public virtual extern bool msMatchesSelector(string selectors);

      public virtual extern void msReleasePointerCapture(double pointerId);

      public virtual extern void msSetPointerCapture(double pointerId);

      public virtual extern void msZoomTo(dom.MsZoomToOptions args);

      public virtual extern void releasePointerCapture(double pointerId);

      public virtual extern void removeAttribute(string qualifiedName);

      public virtual extern void removeAttributeNS(string namespaceURI, string localName);

      public virtual extern dom.Attr removeAttributeNode(dom.Attr oldAttr);

      public virtual extern void requestFullscreen();

      public virtual extern void requestPointerLock();

      public virtual extern void scroll();

      public virtual extern void scroll(dom.ScrollToOptions options);

      public virtual extern void scroll(double x, double y);

      public virtual extern void scrollBy();

      public virtual extern void scrollBy(dom.ScrollToOptions options);

      public virtual extern void scrollBy(double x, double y);

      public virtual extern void scrollIntoView();

      public virtual extern void scrollIntoView(Union<bool, dom.ScrollIntoViewOptions> arg);

      public virtual extern void scrollIntoView(bool arg);

      public virtual extern void scrollIntoView(dom.ScrollIntoViewOptions arg);

      public virtual extern void scrollTo();

      public virtual extern void scrollTo(dom.ScrollToOptions options);

      public virtual extern void scrollTo(double x, double y);

      public virtual extern void setAttribute(string qualifiedName, string value);

      public virtual extern void setAttributeNS(
        string namespaceURI,
        string qualifiedName,
        string value);

      public virtual extern dom.Attr setAttributeNode(dom.Attr newAttr);

      public virtual extern dom.Attr setAttributeNodeNS(dom.Attr newAttr);

      public virtual extern void setPointerCapture(double pointerId);

      public virtual extern bool webkitMatchesSelector(string selectors);

      public virtual extern void webkitRequestFullScreen();

      public virtual extern void webkitRequestFullscreen();

      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Element.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Element.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Element.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Element.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Element.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Element.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Element.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Element.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointercancel
      {
        get
        {
          return this._onpointercancel_BackingField;
        }
        set
        {
          this._onpointercancel_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerdown
      {
        get
        {
          return this._onpointerdown_BackingField;
        }
        set
        {
          this._onpointerdown_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerenter
      {
        get
        {
          return this._onpointerenter_BackingField;
        }
        set
        {
          this._onpointerenter_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerleave
      {
        get
        {
          return this._onpointerleave_BackingField;
        }
        set
        {
          this._onpointerleave_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointermove
      {
        get
        {
          return this._onpointermove_BackingField;
        }
        set
        {
          this._onpointermove_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerout
      {
        get
        {
          return this._onpointerout_BackingField;
        }
        set
        {
          this._onpointerout_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerover
      {
        get
        {
          return this._onpointerover_BackingField;
        }
        set
        {
          this._onpointerover_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerup
      {
        get
        {
          return this._onpointerup_BackingField;
        }
        set
        {
          this._onpointerup_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onwheelFn onwheel
      {
        get
        {
          return this._onwheel_BackingField;
        }
        set
        {
          this._onwheel_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual double childElementCount
      {
        get
        {
          return this._childElementCount_BackingField;
        }
      }

      public virtual dom.Element firstElementChild
      {
        get
        {
          return this._firstElementChild_BackingField;
        }
      }

      public virtual dom.Element lastElementChild
      {
        get
        {
          return this._lastElementChild_BackingField;
        }
      }

      public virtual dom.Element nextElementSibling
      {
        get
        {
          return this._nextElementSibling_BackingField;
        }
      }

      public virtual dom.Element previousElementSibling
      {
        get
        {
          return this._previousElementSibling_BackingField;
        }
      }

      public virtual dom.HTMLCollection children
      {
        get
        {
          return this._children_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object querySelector<K>(K selectors);

      [Name("querySelector")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern object querySelector2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public virtual extern Union<E, Null> querySelector<E>(string selectors);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

      [Name("querySelectorAll")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public virtual extern dom.NodeListOf<E> querySelectorAll<E>(string selectors);

      public virtual extern void remove();

      uint dom.ParentNode.Interface.childElementCount
      {
        get
        {
          return this._H5_D_dom_D_ParentNode_D_Interface_D_childElementCount_BackingField;
        }
      }

      [Generated]
      public delegate void onariarequestFn(dom.Event ev);

      [Generated]
      public delegate void ongotpointercaptureFn(dom.PointerEvent ev);

      [Generated]
      public delegate void ontouchcancelFn(dom.TouchEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class ElementCSSInlineStyle : dom.ElementCSSInlineStyle.Interface, IObject
    {
      private readonly dom.CSSStyleDeclaration _style_BackingField;

      public dom.CSSStyleDeclaration style
      {
        get
        {
          return this._style_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.CSSStyleDeclaration style { get; }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ElementCreationOptions : IObject
    {
      private string _is_BackingField;

      [Name("is")]
      public string @is
      {
        get
        {
          return this._is_BackingField;
        }
        set
        {
          this._is_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ElementDefinitionOptions : IObject
    {
      private string _extends_BackingField;

      public string extends
      {
        get
        {
          return this._extends_BackingField;
        }
        set
        {
          this._extends_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class ElementTraversal : dom.ElementTraversal.Interface, IObject
    {
      private readonly double _childElementCount_BackingField;
      private readonly dom.Element _firstElementChild_BackingField;
      private readonly dom.Element _lastElementChild_BackingField;
      private readonly dom.Element _nextElementSibling_BackingField;
      private readonly dom.Element _previousElementSibling_BackingField;

      public double childElementCount
      {
        get
        {
          return this._childElementCount_BackingField;
        }
      }

      public dom.Element firstElementChild
      {
        get
        {
          return this._firstElementChild_BackingField;
        }
      }

      public dom.Element lastElementChild
      {
        get
        {
          return this._lastElementChild_BackingField;
        }
      }

      public dom.Element nextElementSibling
      {
        get
        {
          return this._nextElementSibling_BackingField;
        }
      }

      public dom.Element previousElementSibling
      {
        get
        {
          return this._previousElementSibling_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        double childElementCount { get; }

        dom.Element firstElementChild { get; }

        dom.Element lastElementChild { get; }

        dom.Element nextElementSibling { get; }

        dom.Element previousElementSibling { get; }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ErrorEvent : dom.Event
    {
      private static dom.ErrorEvent _prototype_BackingField;
      private readonly uint _colno_BackingField;
      private readonly object _error_BackingField;
      private readonly string _filename_BackingField;
      private readonly uint _lineno_BackingField;
      private readonly string _message_BackingField;

      public extern ErrorEvent(string typeArg);

      public extern ErrorEvent(string typeArg, dom.ErrorEventInit eventInitDict);

      public static dom.ErrorEvent prototype
      {
        get
        {
          return dom.ErrorEvent._prototype_BackingField;
        }
        set
        {
          dom.ErrorEvent._prototype_BackingField = value;
        }
      }

      public virtual uint colno
      {
        get
        {
          return this._colno_BackingField;
        }
      }

      public virtual object error
      {
        get
        {
          return this._error_BackingField;
        }
      }

      public virtual string filename
      {
        get
        {
          return this._filename_BackingField;
        }
      }

      public virtual uint lineno
      {
        get
        {
          return this._lineno_BackingField;
        }
      }

      public virtual string message
      {
        get
        {
          return this._message_BackingField;
        }
      }

      public virtual extern void initErrorEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        string messageArg,
        string filenameArg,
        double linenoArg);
    }

    [CombinedClass]
    [FormerInterface]
    public class Event : IObject
    {
      private static dom.Event _prototype_BackingField;
      private static readonly ushort _AT_TARGET_Static_BackingField;
      private static readonly ushort _BUBBLING_PHASE_Static_BackingField;
      private static readonly ushort _CAPTURING_PHASE_Static_BackingField;
      private static readonly ushort _NONE_Static_BackingField;
      private readonly bool _bubbles_BackingField;
      private bool _cancelBubble_BackingField;
      private readonly bool _cancelable_BackingField;
      private readonly dom.EventTarget _currentTarget_BackingField;
      private readonly bool _defaultPrevented_BackingField;
      private readonly ushort _eventPhase_BackingField;
      private readonly bool _isTrusted_BackingField;
      private bool _returnValue_BackingField;
      private readonly bool _scoped_BackingField;
      private readonly dom.Element _srcElement_BackingField;
      private readonly dom.EventTarget _target_BackingField;
      private readonly double _timeStamp_BackingField;
      private readonly string _type_BackingField;
      private readonly ushort _AT_TARGET_BackingField;
      private readonly ushort _BUBBLING_PHASE_BackingField;
      private readonly ushort _CAPTURING_PHASE_BackingField;
      private readonly ushort _NONE_BackingField;

      public extern Event();

      public extern Event(string typeArg);

      public extern Event(string typeArg, dom.EventInit eventInitDict);

      public static dom.Event prototype
      {
        get
        {
          return dom.Event._prototype_BackingField;
        }
        set
        {
          dom.Event._prototype_BackingField = value;
        }
      }

      [Name("AT_TARGET")]
      public static ushort AT_TARGET_Static
      {
        get
        {
          return dom.Event._AT_TARGET_Static_BackingField;
        }
      }

      [Name("BUBBLING_PHASE")]
      public static ushort BUBBLING_PHASE_Static
      {
        get
        {
          return dom.Event._BUBBLING_PHASE_Static_BackingField;
        }
      }

      [Name("CAPTURING_PHASE")]
      public static ushort CAPTURING_PHASE_Static
      {
        get
        {
          return dom.Event._CAPTURING_PHASE_Static_BackingField;
        }
      }

      [Name("NONE")]
      public static ushort NONE_Static
      {
        get
        {
          return dom.Event._NONE_Static_BackingField;
        }
      }

      public virtual bool bubbles
      {
        get
        {
          return this._bubbles_BackingField;
        }
      }

      public virtual bool cancelBubble
      {
        get
        {
          return this._cancelBubble_BackingField;
        }
        set
        {
          this._cancelBubble_BackingField = value;
        }
      }

      public virtual bool cancelable
      {
        get
        {
          return this._cancelable_BackingField;
        }
      }

      public virtual dom.EventTarget currentTarget
      {
        get
        {
          return this._currentTarget_BackingField;
        }
      }

      public virtual bool defaultPrevented
      {
        get
        {
          return this._defaultPrevented_BackingField;
        }
      }

      public virtual ushort eventPhase
      {
        get
        {
          return this._eventPhase_BackingField;
        }
      }

      public virtual bool isTrusted
      {
        get
        {
          return this._isTrusted_BackingField;
        }
      }

      public virtual bool returnValue
      {
        get
        {
          return this._returnValue_BackingField;
        }
        set
        {
          this._returnValue_BackingField = value;
        }
      }

      public virtual bool scoped
      {
        get
        {
          return this._scoped_BackingField;
        }
      }

      public virtual dom.Element srcElement
      {
        get
        {
          return this._srcElement_BackingField;
        }
      }

      public virtual dom.EventTarget target
      {
        get
        {
          return this._target_BackingField;
        }
      }

      public virtual double timeStamp
      {
        get
        {
          return this._timeStamp_BackingField;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual extern dom.EventTarget[] deepPath();

      public virtual extern void initEvent(string type);

      public virtual extern void initEvent(string type, bool bubbles);

      public virtual extern void initEvent(string type, bool bubbles, bool cancelable);

      public virtual extern void preventDefault();

      public virtual extern void stopImmediatePropagation();

      public virtual extern void stopPropagation();

      public virtual ushort AT_TARGET
      {
        get
        {
          return this._AT_TARGET_BackingField;
        }
      }

      public virtual ushort BUBBLING_PHASE
      {
        get
        {
          return this._BUBBLING_PHASE_BackingField;
        }
      }

      public virtual ushort CAPTURING_PHASE
      {
        get
        {
          return this._CAPTURING_PHASE_BackingField;
        }
      }

      public virtual ushort NONE
      {
        get
        {
          return this._NONE_BackingField;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class EventListenerObject : IObject
    {
      public abstract void handleEvent(dom.Event evt);
    }

    [CombinedClass]
    [FormerInterface]
    public class EventSource : dom.EventTarget
    {
      private static dom.EventSource _prototype_BackingField;
      private readonly ushort _CLOSED_BackingField;
      private readonly ushort _CONNECTING_BackingField;
      private readonly ushort _OPEN_BackingField;
      private dom.EventSource.onerrorFn _onerror_BackingField;
      private dom.EventSource.onmessageFn _onmessage_BackingField;
      private dom.EventSource.onopenFn _onopen_BackingField;
      private readonly ushort _readyState_BackingField;
      private readonly string _url_BackingField;
      private readonly bool _withCredentials_BackingField;

      public extern EventSource(string url);

      public extern EventSource(string url, dom.EventSourceInit eventSourceInitDict);

      public static dom.EventSource prototype
      {
        get
        {
          return dom.EventSource._prototype_BackingField;
        }
        set
        {
          dom.EventSource._prototype_BackingField = value;
        }
      }

      public virtual ushort CLOSED
      {
        get
        {
          return this._CLOSED_BackingField;
        }
      }

      public virtual ushort CONNECTING
      {
        get
        {
          return this._CONNECTING_BackingField;
        }
      }

      public virtual ushort OPEN
      {
        get
        {
          return this._OPEN_BackingField;
        }
      }

      public virtual dom.EventSource.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.EventSource.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual dom.EventSource.onopenFn onopen
      {
        get
        {
          return this._onopen_BackingField;
        }
        set
        {
          this._onopen_BackingField = value;
        }
      }

      public virtual ushort readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual string url
      {
        get
        {
          return this._url_BackingField;
        }
      }

      public virtual bool withCredentials
      {
        get
        {
          return this._withCredentials_BackingField;
        }
      }

      public virtual extern void close();

      [Generated]
      public delegate void onerrorFn(dom.MessageEvent evt);

      [Generated]
      public delegate void onmessageFn(dom.MessageEvent evt);

      [Generated]
      public delegate void onopenFn(dom.MessageEvent evt);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class EventSourceInit : IObject
    {
      private readonly bool _withCredentials_BackingField;

      public bool withCredentials
      {
        get
        {
          return this._withCredentials_BackingField;
        }
      }
    }

    [CombinedClass]
    public class EventTarget : dom.EventTarget.Interface, IObject
    {
      private static dom.EventTarget _prototype_BackingField;

      public static dom.EventTarget prototype
      {
        get
        {
          return dom.EventTarget._prototype_BackingField;
        }
        set
        {
          dom.EventTarget._prototype_BackingField = value;
        }
      }

      public virtual extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public virtual extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public virtual extern void addEventListener(string type, dom.EventListener listener);

      public virtual extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern bool dispatchEvent(dom.Event evt);

      public virtual extern void removeEventListener(string type);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public virtual extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public virtual extern void removeEventListener(string type, dom.EventListener listener);

      public virtual extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<dom.EventListenerOptions, bool> options);

      public virtual extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      [Generated]
      [IgnoreCast]
      [ClassInterface]
      [Name("EventTarget")]
      public interface Interface : IObject
      {
        void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void addEventListener(string type, dom.EventListener listener);

        void addEventListener(string type, dom.EventListenerObject listener);

        void addEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<bool, dom.AddEventListenerOptions> options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListener listener, bool options);

        void addEventListener(
          string type,
          dom.EventListener listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListenerObject listener, bool options);

        void addEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.AddEventListenerOptions options);

        bool dispatchEvent(dom.Event evt);

        void removeEventListener(string type);

        void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void removeEventListener(string type, dom.EventListener listener);

        void removeEventListener(string type, dom.EventListenerObject listener);

        void removeEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<dom.EventListenerOptions, bool> options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.EventListenerOptions options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void removeEventListener(
          string type,
          dom.EventListener listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListener listener, bool options);

        void removeEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListenerObject listener, bool options);
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ExtensionScriptApis : IObject
    {
      private static dom.ExtensionScriptApis _prototype_BackingField;

      public static dom.ExtensionScriptApis prototype
      {
        get
        {
          return dom.ExtensionScriptApis._prototype_BackingField;
        }
        set
        {
          dom.ExtensionScriptApis._prototype_BackingField = value;
        }
      }

      public virtual extern double extensionIdToShortId(string extensionId);

      public virtual extern void fireExtensionApiTelemetry(
        string functionName,
        bool isSucceeded,
        bool isSupported,
        string errorString);

      public virtual extern void genericFunction(object routerAddress);

      public virtual extern void genericFunction(object routerAddress, string parameters);

      public virtual extern void genericFunction(
        object routerAddress,
        string parameters,
        double callbackId);

      public virtual extern string genericSynchronousFunction(double functionId);

      public virtual extern string genericSynchronousFunction(double functionId, string parameters);

      public virtual extern void genericWebRuntimeCallout(object to, object from, string payload);

      public virtual extern string getExtensionId();

      public virtual extern void registerGenericFunctionCallbackHandler(es5.Function callbackHandler);

      public virtual extern void registerGenericFunctionCallbackHandler(Action callbackHandler);

      public virtual extern void registerGenericFunctionCallbackHandler(Func<object> callbackHandler);

      public virtual extern void registerGenericPersistentCallbackHandler(
        es5.Function callbackHandler);

      public virtual extern void registerGenericPersistentCallbackHandler(Action callbackHandler);

      public virtual extern void registerGenericPersistentCallbackHandler(
        Func<object> callbackHandler);

      public virtual extern object registerWebRuntimeCallbackHandler(es5.Function handler);

      public virtual extern object registerWebRuntimeCallbackHandler(Action handler);

      public virtual extern object registerWebRuntimeCallbackHandler(Func<object> handler);
    }

    [CombinedClass]
    [FormerInterface]
    public class External : IObject
    {
      private static dom.External _prototype_BackingField;

      public static dom.External prototype
      {
        get
        {
          return dom.External._prototype_BackingField;
        }
        set
        {
          dom.External._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class File : dom.Blob
    {
      private static dom.File _prototype_BackingField;
      private readonly long _lastModified_BackingField;
      private readonly es5.Date _lastModifiedDate_BackingField;
      private readonly string _name_BackingField;
      private readonly string _webkitRelativePath_BackingField;

      public extern File(
        Union<es5.ArrayBuffer, es5.ArrayBufferView, dom.Blob, string>[] parts,
        string filename);

      public extern File(es5.ArrayBuffer[] parts, string filename);

      public extern File(es5.ArrayBufferView[] parts, string filename);

      public extern File(dom.Blob[] parts, string filename);

      public extern File(string[] parts, string filename);

      public extern File(
        Union<es5.ArrayBuffer, es5.ArrayBufferView, dom.Blob, string>[] parts,
        string filename,
        dom.FilePropertyBag properties);

      public extern File(es5.ArrayBuffer[] parts, string filename, dom.FilePropertyBag properties);

      public extern File(
        es5.ArrayBufferView[] parts,
        string filename,
        dom.FilePropertyBag properties);

      public extern File(dom.Blob[] parts, string filename, dom.FilePropertyBag properties);

      public extern File(string[] parts, string filename, dom.FilePropertyBag properties);

      public static dom.File prototype
      {
        get
        {
          return dom.File._prototype_BackingField;
        }
        set
        {
          dom.File._prototype_BackingField = value;
        }
      }

      public virtual long lastModified
      {
        get
        {
          return this._lastModified_BackingField;
        }
      }

      public virtual es5.Date lastModifiedDate
      {
        get
        {
          return this._lastModifiedDate_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual string webkitRelativePath
      {
        get
        {
          return this._webkitRelativePath_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class FileList : IEnumerable<dom.File>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.FileList _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.FileList prototype
      {
        get
        {
          return dom.FileList._prototype_BackingField;
        }
        set
        {
          dom.FileList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.File item(uint index);

      public virtual extern dom.File this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.File> IEnumerable<dom.File>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class FilePropertyBag : dom.BlobPropertyBag
    {
      private long? _lastModified_BackingField;

      public long? lastModified
      {
        get
        {
          return this._lastModified_BackingField;
        }
        set
        {
          this._lastModified_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class FileReaderEventMap : IObject
    {
      private dom.ProgressEvent _abort_BackingField;
      private dom.ProgressEvent _error_BackingField;
      private dom.ProgressEvent _load_BackingField;
      private dom.ProgressEvent _loadend_BackingField;
      private dom.ProgressEvent _loadstart_BackingField;
      private dom.ProgressEvent _progress_BackingField;

      public dom.ProgressEvent abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      public dom.ProgressEvent error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.ProgressEvent load
      {
        get
        {
          return this._load_BackingField;
        }
        set
        {
          this._load_BackingField = value;
        }
      }

      public dom.ProgressEvent loadend
      {
        get
        {
          return this._loadend_BackingField;
        }
        set
        {
          this._loadend_BackingField = value;
        }
      }

      public dom.ProgressEvent loadstart
      {
        get
        {
          return this._loadstart_BackingField;
        }
        set
        {
          this._loadstart_BackingField = value;
        }
      }

      public dom.ProgressEvent progress
      {
        get
        {
          return this._progress_BackingField;
        }
        set
        {
          this._progress_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"abort\"")]
        public static readonly KeyOf<dom.FileReaderEventMap> abort;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.FileReaderEventMap> error;
        [Template("\"load\"")]
        public static readonly KeyOf<dom.FileReaderEventMap> load;
        [Template("\"loadend\"")]
        public static readonly KeyOf<dom.FileReaderEventMap> loadend;
        [Template("\"loadstart\"")]
        public static readonly KeyOf<dom.FileReaderEventMap> loadstart;
        [Template("\"progress\"")]
        public static readonly KeyOf<dom.FileReaderEventMap> progress;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class FileReader : dom.EventTarget
    {
      private static dom.FileReader _prototype_BackingField;
      private static readonly ushort _DONE_Static_BackingField;
      private static readonly ushort _EMPTY_Static_BackingField;
      private static readonly ushort _LOADING_Static_BackingField;
      private readonly dom.DOMException _error_BackingField;
      private dom.FileReader.onabortFn _onabort_BackingField;
      private dom.FileReader.onabortFn _onerror_BackingField;
      private dom.FileReader.onabortFn _onload_BackingField;
      private dom.FileReader.onabortFn _onloadend_BackingField;
      private dom.FileReader.onabortFn _onloadstart_BackingField;
      private dom.FileReader.onabortFn _onprogress_BackingField;
      private readonly ushort _readyState_BackingField;
      private readonly object _result_BackingField;
      private readonly ushort _DONE_BackingField;
      private readonly ushort _EMPTY_BackingField;
      private readonly ushort _LOADING_BackingField;

      public static dom.FileReader prototype
      {
        get
        {
          return dom.FileReader._prototype_BackingField;
        }
        set
        {
          dom.FileReader._prototype_BackingField = value;
        }
      }

      [Name("DONE")]
      public static ushort DONE_Static
      {
        get
        {
          return dom.FileReader._DONE_Static_BackingField;
        }
      }

      [Name("EMPTY")]
      public static ushort EMPTY_Static
      {
        get
        {
          return dom.FileReader._EMPTY_Static_BackingField;
        }
      }

      [Name("LOADING")]
      public static ushort LOADING_Static
      {
        get
        {
          return dom.FileReader._LOADING_Static_BackingField;
        }
      }

      public virtual dom.DOMException error
      {
        get
        {
          return this._error_BackingField;
        }
      }

      public virtual dom.FileReader.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.FileReader.onabortFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.FileReader.onabortFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual dom.FileReader.onabortFn onloadend
      {
        get
        {
          return this._onloadend_BackingField;
        }
        set
        {
          this._onloadend_BackingField = value;
        }
      }

      public virtual dom.FileReader.onabortFn onloadstart
      {
        get
        {
          return this._onloadstart_BackingField;
        }
        set
        {
          this._onloadstart_BackingField = value;
        }
      }

      public virtual dom.FileReader.onabortFn onprogress
      {
        get
        {
          return this._onprogress_BackingField;
        }
        set
        {
          this._onprogress_BackingField = value;
        }
      }

      public virtual ushort readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual object result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual extern void abort();

      public virtual extern void readAsArrayBuffer(dom.Blob blob);

      public virtual extern void readAsBinaryString(dom.Blob blob);

      public virtual extern void readAsDataURL(dom.Blob blob);

      public virtual extern void readAsText(dom.Blob blob);

      public virtual extern void readAsText(dom.Blob blob, string label);

      public virtual ushort DONE
      {
        get
        {
          return this._DONE_BackingField;
        }
      }

      public virtual ushort EMPTY
      {
        get
        {
          return this._EMPTY_BackingField;
        }
      }

      public virtual ushort LOADING
      {
        get
        {
          return this._LOADING_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.FileReader.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.FileReader.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.FileReader.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.FileReader.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.FileReader.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.FileReader.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.FileReader.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.FileReader.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onabortFn(dom.FileReaderProgressEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class FileReaderProgressEvent : dom.ProgressEvent
    {
      public extern FileReaderProgressEvent(string typeArg);

      public abstract dom.FileReader target { get; }
    }

    [CombinedClass]
    [FormerInterface]
    public class FocusEvent : dom.UIEvent
    {
      private static dom.FocusEvent _prototype_BackingField;
      private readonly dom.EventTarget _relatedTarget_BackingField;

      public extern FocusEvent(string typeArg);

      public extern FocusEvent(string typeArg, dom.FocusEventInit eventInitDict);

      public static dom.FocusEvent prototype
      {
        get
        {
          return dom.FocusEvent._prototype_BackingField;
        }
        set
        {
          dom.FocusEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.EventTarget relatedTarget
      {
        get
        {
          return this._relatedTarget_BackingField;
        }
      }

      public virtual extern void initFocusEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        double detailArg,
        dom.EventTarget relatedTargetArg);
    }

    [CombinedClass]
    [FormerInterface]
    public class FocusNavigationEvent : dom.Event
    {
      private static dom.FocusNavigationEvent _prototype_BackingField;
      private readonly dom.NavigationReason _navigationReason_BackingField;
      private readonly double _originHeight_BackingField;
      private readonly double _originLeft_BackingField;
      private readonly double _originTop_BackingField;
      private readonly double _originWidth_BackingField;

      public extern FocusNavigationEvent(string type);

      public extern FocusNavigationEvent(string type, dom.FocusNavigationEventInit eventInitDict);

      public static dom.FocusNavigationEvent prototype
      {
        get
        {
          return dom.FocusNavigationEvent._prototype_BackingField;
        }
        set
        {
          dom.FocusNavigationEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.NavigationReason navigationReason
      {
        get
        {
          return this._navigationReason_BackingField;
        }
      }

      public virtual double originHeight
      {
        get
        {
          return this._originHeight_BackingField;
        }
      }

      public virtual double originLeft
      {
        get
        {
          return this._originLeft_BackingField;
        }
      }

      public virtual double originTop
      {
        get
        {
          return this._originTop_BackingField;
        }
      }

      public virtual double originWidth
      {
        get
        {
          return this._originWidth_BackingField;
        }
      }

      public virtual extern void requestFocus();
    }

    [CombinedClass]
    [FormerInterface]
    public class FormData : IObject
    {
      private static dom.FormData _prototype_BackingField;

      public extern FormData();

      public extern FormData(dom.HTMLFormElement form);

      public static dom.FormData prototype
      {
        get
        {
          return dom.FormData._prototype_BackingField;
        }
        set
        {
          dom.FormData._prototype_BackingField = value;
        }
      }

      public virtual extern void append(string name, Union<string, dom.Blob> value);

      public virtual extern void append(string name, string value);

      public virtual extern void append(string name, dom.Blob value);

      public virtual extern void append(
        string name,
        Union<string, dom.Blob> value,
        string fileName);

      public virtual extern void append(string name, string value, string fileName);

      public virtual extern void append(string name, dom.Blob value, string fileName);

      public virtual extern void delete(string name);

      public virtual extern dom.FormDataEntryValue get(string name);

      public virtual extern dom.FormDataEntryValue[] getAll(string name);

      public virtual extern bool has(string name);

      public virtual extern void set(string name, Union<string, dom.Blob> value);

      public virtual extern void set(string name, string value);

      public virtual extern void set(string name, dom.Blob value);

      public virtual extern void set(string name, Union<string, dom.Blob> value, string fileName);

      public virtual extern void set(string name, string value, string fileName);

      public virtual extern void set(string name, dom.Blob value, string fileName);
    }

    [CombinedClass]
    [FormerInterface]
    public class GainNode : dom.AudioNode
    {
      private static dom.GainNode _prototype_BackingField;
      private readonly dom.AudioParam _gain_BackingField;

      public static dom.GainNode prototype
      {
        get
        {
          return dom.GainNode._prototype_BackingField;
        }
        set
        {
          dom.GainNode._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioParam gain
      {
        get
        {
          return this._gain_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Gamepad : IObject
    {
      private static dom.Gamepad _prototype_BackingField;
      private readonly double[] _axes_BackingField;
      private readonly dom.GamepadButton[] _buttons_BackingField;
      private readonly bool _connected_BackingField;
      private readonly double _displayId_BackingField;
      private readonly dom.GamepadHand _hand_BackingField;
      private readonly dom.GamepadHapticActuator[] _hapticActuators_BackingField;
      private readonly string _id_BackingField;
      private readonly double _index_BackingField;
      private readonly dom.GamepadMappingType _mapping_BackingField;
      private readonly dom.GamepadPose _pose_BackingField;
      private readonly double _timestamp_BackingField;

      public static dom.Gamepad prototype
      {
        get
        {
          return dom.Gamepad._prototype_BackingField;
        }
        set
        {
          dom.Gamepad._prototype_BackingField = value;
        }
      }

      public virtual double[] axes
      {
        get
        {
          return this._axes_BackingField;
        }
      }

      public virtual dom.GamepadButton[] buttons
      {
        get
        {
          return this._buttons_BackingField;
        }
      }

      public virtual bool connected
      {
        get
        {
          return this._connected_BackingField;
        }
      }

      public virtual double displayId
      {
        get
        {
          return this._displayId_BackingField;
        }
      }

      public virtual dom.GamepadHand hand
      {
        get
        {
          return this._hand_BackingField;
        }
      }

      public virtual dom.GamepadHapticActuator[] hapticActuators
      {
        get
        {
          return this._hapticActuators_BackingField;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual double index
      {
        get
        {
          return this._index_BackingField;
        }
      }

      public virtual dom.GamepadMappingType mapping
      {
        get
        {
          return this._mapping_BackingField;
        }
      }

      public virtual dom.GamepadPose pose
      {
        get
        {
          return this._pose_BackingField;
        }
      }

      public virtual double timestamp
      {
        get
        {
          return this._timestamp_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class GamepadButton : IObject
    {
      private static dom.GamepadButton _prototype_BackingField;
      private readonly bool _pressed_BackingField;
      private readonly bool _touched_BackingField;
      private readonly double _value_BackingField;

      public static dom.GamepadButton prototype
      {
        get
        {
          return dom.GamepadButton._prototype_BackingField;
        }
        set
        {
          dom.GamepadButton._prototype_BackingField = value;
        }
      }

      public virtual bool pressed
      {
        get
        {
          return this._pressed_BackingField;
        }
      }

      public virtual bool touched
      {
        get
        {
          return this._touched_BackingField;
        }
      }

      public virtual double value
      {
        get
        {
          return this._value_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class GamepadEvent : dom.Event
    {
      private static dom.GamepadEvent _prototype_BackingField;
      private readonly dom.Gamepad _gamepad_BackingField;

      public extern GamepadEvent(string typeArg);

      public extern GamepadEvent(string typeArg, dom.GamepadEventInit eventInitDict);

      public static dom.GamepadEvent prototype
      {
        get
        {
          return dom.GamepadEvent._prototype_BackingField;
        }
        set
        {
          dom.GamepadEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.Gamepad gamepad
      {
        get
        {
          return this._gamepad_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class GamepadHapticActuator : IObject
    {
      private static dom.GamepadHapticActuator _prototype_BackingField;
      private readonly dom.GamepadHapticActuatorType _type_BackingField;

      public static dom.GamepadHapticActuator prototype
      {
        get
        {
          return dom.GamepadHapticActuator._prototype_BackingField;
        }
        set
        {
          dom.GamepadHapticActuator._prototype_BackingField = value;
        }
      }

      public virtual dom.GamepadHapticActuatorType type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual extern es5.Promise<bool> pulse(double value, double duration);
    }

    [CombinedClass]
    [FormerInterface]
    public class GamepadPose : IObject
    {
      private static dom.GamepadPose _prototype_BackingField;
      private readonly es5.Float32Array _angularAcceleration_BackingField;
      private readonly es5.Float32Array _angularVelocity_BackingField;
      private readonly bool _hasOrientation_BackingField;
      private readonly bool _hasPosition_BackingField;
      private readonly es5.Float32Array _linearAcceleration_BackingField;
      private readonly es5.Float32Array _linearVelocity_BackingField;
      private readonly es5.Float32Array _orientation_BackingField;
      private readonly es5.Float32Array _position_BackingField;

      public static dom.GamepadPose prototype
      {
        get
        {
          return dom.GamepadPose._prototype_BackingField;
        }
        set
        {
          dom.GamepadPose._prototype_BackingField = value;
        }
      }

      public virtual es5.Float32Array angularAcceleration
      {
        get
        {
          return this._angularAcceleration_BackingField;
        }
      }

      public virtual es5.Float32Array angularVelocity
      {
        get
        {
          return this._angularVelocity_BackingField;
        }
      }

      public virtual bool hasOrientation
      {
        get
        {
          return this._hasOrientation_BackingField;
        }
      }

      public virtual bool hasPosition
      {
        get
        {
          return this._hasPosition_BackingField;
        }
      }

      public virtual es5.Float32Array linearAcceleration
      {
        get
        {
          return this._linearAcceleration_BackingField;
        }
      }

      public virtual es5.Float32Array linearVelocity
      {
        get
        {
          return this._linearVelocity_BackingField;
        }
      }

      public virtual es5.Float32Array orientation
      {
        get
        {
          return this._orientation_BackingField;
        }
      }

      public virtual es5.Float32Array position
      {
        get
        {
          return this._position_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Geolocation : IObject
    {
      private static dom.Geolocation _prototype_BackingField;

      public static dom.Geolocation prototype
      {
        get
        {
          return dom.Geolocation._prototype_BackingField;
        }
        set
        {
          dom.Geolocation._prototype_BackingField = value;
        }
      }

      public virtual extern void clearWatch(double watchId);

      public virtual extern void getCurrentPosition(dom.PositionCallback successCallback);

      public virtual extern void getCurrentPosition(
        dom.PositionCallback successCallback,
        dom.PositionErrorCallback errorCallback);

      public virtual extern void getCurrentPosition(
        dom.PositionCallback successCallback,
        dom.PositionErrorCallback errorCallback,
        dom.PositionOptions options);

      public virtual extern double watchPosition(dom.PositionCallback successCallback);

      public virtual extern double watchPosition(
        dom.PositionCallback successCallback,
        dom.PositionErrorCallback errorCallback);

      public virtual extern double watchPosition(
        dom.PositionCallback successCallback,
        dom.PositionErrorCallback errorCallback,
        dom.PositionOptions options);
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class GetSVGDocument : dom.GetSVGDocument.Interface, IObject
    {
      public abstract dom.Document getSVGDocument();

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.Document getSVGDocument();
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class GlobalEventHandlersEventMap : IObject
    {
      private dom.PointerEvent _pointercancel_BackingField;
      private dom.PointerEvent _pointerdown_BackingField;
      private dom.PointerEvent _pointerenter_BackingField;
      private dom.PointerEvent _pointerleave_BackingField;
      private dom.PointerEvent _pointermove_BackingField;
      private dom.PointerEvent _pointerout_BackingField;
      private dom.PointerEvent _pointerover_BackingField;
      private dom.PointerEvent _pointerup_BackingField;
      private dom.WheelEvent _wheel_BackingField;

      public dom.PointerEvent pointercancel
      {
        get
        {
          return this._pointercancel_BackingField;
        }
        set
        {
          this._pointercancel_BackingField = value;
        }
      }

      public dom.PointerEvent pointerdown
      {
        get
        {
          return this._pointerdown_BackingField;
        }
        set
        {
          this._pointerdown_BackingField = value;
        }
      }

      public dom.PointerEvent pointerenter
      {
        get
        {
          return this._pointerenter_BackingField;
        }
        set
        {
          this._pointerenter_BackingField = value;
        }
      }

      public dom.PointerEvent pointerleave
      {
        get
        {
          return this._pointerleave_BackingField;
        }
        set
        {
          this._pointerleave_BackingField = value;
        }
      }

      public dom.PointerEvent pointermove
      {
        get
        {
          return this._pointermove_BackingField;
        }
        set
        {
          this._pointermove_BackingField = value;
        }
      }

      public dom.PointerEvent pointerout
      {
        get
        {
          return this._pointerout_BackingField;
        }
        set
        {
          this._pointerout_BackingField = value;
        }
      }

      public dom.PointerEvent pointerover
      {
        get
        {
          return this._pointerover_BackingField;
        }
        set
        {
          this._pointerover_BackingField = value;
        }
      }

      public dom.PointerEvent pointerup
      {
        get
        {
          return this._pointerup_BackingField;
        }
        set
        {
          this._pointerup_BackingField = value;
        }
      }

      public dom.WheelEvent wheel
      {
        get
        {
          return this._wheel_BackingField;
        }
        set
        {
          this._wheel_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"pointercancel\"")]
        public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointercancel;
        [Template("\"pointerdown\"")]
        public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerdown;
        [Template("\"pointerenter\"")]
        public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerenter;
        [Template("\"pointerleave\"")]
        public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerleave;
        [Template("\"pointermove\"")]
        public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointermove;
        [Template("\"pointerout\"")]
        public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerout;
        [Template("\"pointerover\"")]
        public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerover;
        [Template("\"pointerup\"")]
        public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerup;
        [Template("\"wheel\"")]
        public static readonly KeyOf<dom.GlobalEventHandlersEventMap> wheel;
      }
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class GlobalEventHandlers : dom.GlobalEventHandlers.Interface, IObject
    {
      private dom.GlobalEventHandlers.onpointercancelFn _onpointercancel_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerdown_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerenter_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerleave_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointermove_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerout_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerover_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerup_BackingField;
      private dom.GlobalEventHandlers.onwheelFn _onwheel_BackingField;

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointercancel
      {
        get
        {
          return this._onpointercancel_BackingField;
        }
        set
        {
          this._onpointercancel_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerdown
      {
        get
        {
          return this._onpointerdown_BackingField;
        }
        set
        {
          this._onpointerdown_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerenter
      {
        get
        {
          return this._onpointerenter_BackingField;
        }
        set
        {
          this._onpointerenter_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerleave
      {
        get
        {
          return this._onpointerleave_BackingField;
        }
        set
        {
          this._onpointerleave_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointermove
      {
        get
        {
          return this._onpointermove_BackingField;
        }
        set
        {
          this._onpointermove_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerout
      {
        get
        {
          return this._onpointerout_BackingField;
        }
        set
        {
          this._onpointerout_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerover
      {
        get
        {
          return this._onpointerover_BackingField;
        }
        set
        {
          this._onpointerover_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerup
      {
        get
        {
          return this._onpointerup_BackingField;
        }
        set
        {
          this._onpointerup_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onwheelFn onwheel
      {
        get
        {
          return this._onwheel_BackingField;
        }
        set
        {
          this._onwheel_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void addEventListener(string type, dom.EventListener listener);

      public abstract void addEventListener(string type, dom.EventListenerObject listener);

      public abstract void addEventListener(string type, Action<dom.Event> listener);

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(string type, dom.EventListener listener, bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void removeEventListener(string type, dom.EventListener listener);

      public abstract void removeEventListener(string type, dom.EventListenerObject listener);

      public abstract void removeEventListener(string type, Action<dom.Event> listener);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      [IgnoreCast]
      [Name("GlobalEventHandlers")]
      public interface Interface : IObject
      {
        dom.GlobalEventHandlers.onpointercancelFn onpointercancel { get; set; }

        dom.GlobalEventHandlers.onpointercancelFn onpointerdown { get; set; }

        dom.GlobalEventHandlers.onpointercancelFn onpointerenter { get; set; }

        dom.GlobalEventHandlers.onpointercancelFn onpointerleave { get; set; }

        dom.GlobalEventHandlers.onpointercancelFn onpointermove { get; set; }

        dom.GlobalEventHandlers.onpointercancelFn onpointerout { get; set; }

        dom.GlobalEventHandlers.onpointercancelFn onpointerover { get; set; }

        dom.GlobalEventHandlers.onpointercancelFn onpointerup { get; set; }

        dom.GlobalEventHandlers.onwheelFn onwheel { get; set; }

        [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.GlobalEventHandlers.addEventListenerFn<K> listener);

        [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.GlobalEventHandlers.addEventListenerFn<K> listener,
          Union<bool, dom.AddEventListenerOptions> options);

        [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.GlobalEventHandlers.addEventListenerFn<K> listener,
          bool options);

        [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.GlobalEventHandlers.addEventListenerFn<K> listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void addEventListener(string type, dom.EventListener listener);

        void addEventListener(string type, dom.EventListenerObject listener);

        void addEventListener(string type, Action<dom.Event> listener);

        void addEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<bool, dom.AddEventListenerOptions> options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListener listener, bool options);

        void addEventListener(
          string type,
          dom.EventListener listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListenerObject listener, bool options);

        void addEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.AddEventListenerOptions options);

        void addEventListener(
          string type,
          Action<dom.Event> listener,
          Union<bool, dom.AddEventListenerOptions> options);

        void addEventListener(string type, Action<dom.Event> listener, bool options);

        void addEventListener(
          string type,
          Action<dom.Event> listener,
          dom.AddEventListenerOptions options);

        [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.GlobalEventHandlers.removeEventListenerFn<K> listener);

        [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
          Union<bool, dom.EventListenerOptions> options);

        [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
          bool options);

        [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void removeEventListener(string type, dom.EventListener listener);

        void removeEventListener(string type, dom.EventListenerObject listener);

        void removeEventListener(string type, Action<dom.Event> listener);

        void removeEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<bool, dom.EventListenerOptions> options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListener listener, bool options);

        void removeEventListener(
          string type,
          dom.EventListener listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListenerObject listener, bool options);

        void removeEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.EventListenerOptions options);

        void removeEventListener(
          string type,
          Action<dom.Event> listener,
          Union<bool, dom.EventListenerOptions> options);

        void removeEventListener(string type, Action<dom.Event> listener, bool options);

        void removeEventListener(
          string type,
          Action<dom.Event> listener,
          dom.EventListenerOptions options);
      }

      [Generated]
      public delegate void onpointercancelFn(dom.PointerEvent ev);

      [Generated]
      public delegate void onwheelFn(dom.WheelEvent ev);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void addEventListenerFn<K>(object ev);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class GlobalFetch : dom.GlobalFetch.Interface, IObject
    {
      public abstract es5.Promise<dom.Response> fetch();

      public abstract es5.Promise<dom.Response> fetch(Union<dom.Request, string> input);

      public abstract es5.Promise<dom.Response> fetch(dom.Request input);

      public abstract es5.Promise<dom.Response> fetch(string input);

      public abstract es5.Promise<dom.Response> fetch(
        Union<dom.Request, string> input,
        dom.RequestInit init);

      public abstract es5.Promise<dom.Response> fetch(dom.Request input, dom.RequestInit init);

      public abstract es5.Promise<dom.Response> fetch(string input, dom.RequestInit init);

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        es5.Promise<dom.Response> fetch();

        es5.Promise<dom.Response> fetch(Union<dom.Request, string> input);

        es5.Promise<dom.Response> fetch(dom.Request input);

        es5.Promise<dom.Response> fetch(string input);

        es5.Promise<dom.Response> fetch(
          Union<dom.Request, string> input,
          dom.RequestInit init);

        es5.Promise<dom.Response> fetch(dom.Request input, dom.RequestInit init);

        es5.Promise<dom.Response> fetch(string input, dom.RequestInit init);
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLAllCollection : IObject
    {
      private static dom.HTMLAllCollection _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.HTMLAllCollection prototype
      {
        get
        {
          return dom.HTMLAllCollection._prototype_BackingField;
        }
        set
        {
          dom.HTMLAllCollection._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern Union<dom.HTMLCollection, dom.Element, Null> item();

      public virtual extern Union<dom.HTMLCollection, dom.Element, Null> item(
        string nameOrIndex);

      public virtual extern Union<dom.HTMLCollection, dom.Element, Null> namedItem(
        string name);

      public virtual extern dom.Element this[double index] { get; set; }
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLAnchorElement : dom.HTMLElement, dom.HTMLHyperlinkElementUtils.Interface, IObject
    {
      private static dom.HTMLAnchorElement _prototype_BackingField;
      private string _Methods_BackingField;
      private string _charset_BackingField;
      private string _coords_BackingField;
      private string _download_BackingField;
      private string _hreflang_BackingField;
      private readonly string _mimeType_BackingField;
      private string _name_BackingField;
      private readonly string _nameProp_BackingField;
      private readonly string _protocolLong_BackingField;
      private string _rel_BackingField;
      private string _rev_BackingField;
      private string _shape_BackingField;
      private string _target_BackingField;
      private string _text_BackingField;
      private string _type_BackingField;
      private string _urn_BackingField;
      private string _hash_BackingField;
      private string _host_BackingField;
      private string _hostname_BackingField;
      private string _href_BackingField;
      private string _origin_BackingField;
      private string _pathname_BackingField;
      private string _port_BackingField;
      private string _protocol_BackingField;
      private string _search_BackingField;

      [Template("document.createElement(\"a\")")]
      public extern HTMLAnchorElement();

      public static dom.HTMLAnchorElement prototype
      {
        get
        {
          return dom.HTMLAnchorElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLAnchorElement._prototype_BackingField = value;
        }
      }

      public virtual string Methods
      {
        get
        {
          return this._Methods_BackingField;
        }
        set
        {
          this._Methods_BackingField = value;
        }
      }

      public virtual string charset
      {
        get
        {
          return this._charset_BackingField;
        }
        set
        {
          this._charset_BackingField = value;
        }
      }

      public virtual string coords
      {
        get
        {
          return this._coords_BackingField;
        }
        set
        {
          this._coords_BackingField = value;
        }
      }

      public virtual string download
      {
        get
        {
          return this._download_BackingField;
        }
        set
        {
          this._download_BackingField = value;
        }
      }

      public virtual string hreflang
      {
        get
        {
          return this._hreflang_BackingField;
        }
        set
        {
          this._hreflang_BackingField = value;
        }
      }

      public virtual string mimeType
      {
        get
        {
          return this._mimeType_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual string nameProp
      {
        get
        {
          return this._nameProp_BackingField;
        }
      }

      public virtual string protocolLong
      {
        get
        {
          return this._protocolLong_BackingField;
        }
      }

      public virtual string rel
      {
        get
        {
          return this._rel_BackingField;
        }
        set
        {
          this._rel_BackingField = value;
        }
      }

      public virtual string rev
      {
        get
        {
          return this._rev_BackingField;
        }
        set
        {
          this._rev_BackingField = value;
        }
      }

      public virtual string shape
      {
        get
        {
          return this._shape_BackingField;
        }
        set
        {
          this._shape_BackingField = value;
        }
      }

      public virtual string target
      {
        get
        {
          return this._target_BackingField;
        }
        set
        {
          this._target_BackingField = value;
        }
      }

      public virtual string text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      public virtual string urn
      {
        get
        {
          return this._urn_BackingField;
        }
        set
        {
          this._urn_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAnchorElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAnchorElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAnchorElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAnchorElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAnchorElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAnchorElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAnchorElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAnchorElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual string hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public virtual string host
      {
        get
        {
          return this._host_BackingField;
        }
        set
        {
          this._host_BackingField = value;
        }
      }

      public virtual string hostname
      {
        get
        {
          return this._hostname_BackingField;
        }
        set
        {
          this._hostname_BackingField = value;
        }
      }

      public virtual string href
      {
        get
        {
          return this._href_BackingField;
        }
        set
        {
          this._href_BackingField = value;
        }
      }

      public virtual string origin
      {
        get
        {
          return this._origin_BackingField;
        }
        set
        {
          this._origin_BackingField = value;
        }
      }

      public virtual string pathname
      {
        get
        {
          return this._pathname_BackingField;
        }
        set
        {
          this._pathname_BackingField = value;
        }
      }

      public virtual string port
      {
        get
        {
          return this._port_BackingField;
        }
        set
        {
          this._port_BackingField = value;
        }
      }

      public virtual string protocol
      {
        get
        {
          return this._protocol_BackingField;
        }
        set
        {
          this._protocol_BackingField = value;
        }
      }

      public virtual string search
      {
        get
        {
          return this._search_BackingField;
        }
        set
        {
          this._search_BackingField = value;
        }
      }

      public virtual extern string toString();

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLAppletElement : dom.HTMLElement
    {
      private static dom.HTMLAppletElement _prototype_BackingField;
      private string _align_BackingField;
      private string _alt_BackingField;
      private string _archive_BackingField;
      private string _code_BackingField;
      private string _codeBase_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private string _height_BackingField;
      private uint _hspace_BackingField;
      private string _name_BackingField;
      private string _object_BackingField;
      private uint _vspace_BackingField;
      private string _width_BackingField;

      [Template("document.createElement(\"applet\")")]
      public extern HTMLAppletElement();

      public static dom.HTMLAppletElement prototype
      {
        get
        {
          return dom.HTMLAppletElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLAppletElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string alt
      {
        get
        {
          return this._alt_BackingField;
        }
        set
        {
          this._alt_BackingField = value;
        }
      }

      public virtual string archive
      {
        get
        {
          return this._archive_BackingField;
        }
        set
        {
          this._archive_BackingField = value;
        }
      }

      public virtual string code
      {
        get
        {
          return this._code_BackingField;
        }
        set
        {
          this._code_BackingField = value;
        }
      }

      public virtual string codeBase
      {
        get
        {
          return this._codeBase_BackingField;
        }
        set
        {
          this._codeBase_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual string height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual uint hspace
      {
        get
        {
          return this._hspace_BackingField;
        }
        set
        {
          this._hspace_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      [Name("object")]
      public virtual string @object
      {
        get
        {
          return this._object_BackingField;
        }
        set
        {
          this._object_BackingField = value;
        }
      }

      public virtual uint vspace
      {
        get
        {
          return this._vspace_BackingField;
        }
        set
        {
          this._vspace_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAppletElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAppletElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAppletElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAppletElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAppletElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAppletElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAppletElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAppletElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLAreaElement : dom.HTMLElement, dom.HTMLHyperlinkElementUtils.Interface, IObject
    {
      private static dom.HTMLAreaElement _prototype_BackingField;
      private string _alt_BackingField;
      private string _coords_BackingField;
      private string _download_BackingField;
      private bool _noHref_BackingField;
      private string _rel_BackingField;
      private string _shape_BackingField;
      private string _target_BackingField;
      private string _hash_BackingField;
      private string _host_BackingField;
      private string _hostname_BackingField;
      private string _href_BackingField;
      private string _origin_BackingField;
      private string _pathname_BackingField;
      private string _port_BackingField;
      private string _protocol_BackingField;
      private string _search_BackingField;

      [Template("document.createElement(\"area\")")]
      public extern HTMLAreaElement();

      public static dom.HTMLAreaElement prototype
      {
        get
        {
          return dom.HTMLAreaElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLAreaElement._prototype_BackingField = value;
        }
      }

      public virtual string alt
      {
        get
        {
          return this._alt_BackingField;
        }
        set
        {
          this._alt_BackingField = value;
        }
      }

      public virtual string coords
      {
        get
        {
          return this._coords_BackingField;
        }
        set
        {
          this._coords_BackingField = value;
        }
      }

      public virtual string download
      {
        get
        {
          return this._download_BackingField;
        }
        set
        {
          this._download_BackingField = value;
        }
      }

      public virtual bool noHref
      {
        get
        {
          return this._noHref_BackingField;
        }
        set
        {
          this._noHref_BackingField = value;
        }
      }

      public virtual string rel
      {
        get
        {
          return this._rel_BackingField;
        }
        set
        {
          this._rel_BackingField = value;
        }
      }

      public virtual string shape
      {
        get
        {
          return this._shape_BackingField;
        }
        set
        {
          this._shape_BackingField = value;
        }
      }

      public virtual string target
      {
        get
        {
          return this._target_BackingField;
        }
        set
        {
          this._target_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAreaElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAreaElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAreaElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAreaElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAreaElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAreaElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAreaElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAreaElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual string hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public virtual string host
      {
        get
        {
          return this._host_BackingField;
        }
        set
        {
          this._host_BackingField = value;
        }
      }

      public virtual string hostname
      {
        get
        {
          return this._hostname_BackingField;
        }
        set
        {
          this._hostname_BackingField = value;
        }
      }

      public virtual string href
      {
        get
        {
          return this._href_BackingField;
        }
        set
        {
          this._href_BackingField = value;
        }
      }

      public virtual string origin
      {
        get
        {
          return this._origin_BackingField;
        }
        set
        {
          this._origin_BackingField = value;
        }
      }

      public virtual string pathname
      {
        get
        {
          return this._pathname_BackingField;
        }
        set
        {
          this._pathname_BackingField = value;
        }
      }

      public virtual string port
      {
        get
        {
          return this._port_BackingField;
        }
        set
        {
          this._port_BackingField = value;
        }
      }

      public virtual string protocol
      {
        get
        {
          return this._protocol_BackingField;
        }
        set
        {
          this._protocol_BackingField = value;
        }
      }

      public virtual string search
      {
        get
        {
          return this._search_BackingField;
        }
        set
        {
          this._search_BackingField = value;
        }
      }

      public virtual extern string toString();

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLAreasCollection : dom.HTMLCollectionBase
    {
      private static dom.HTMLAreasCollection _prototype_BackingField;

      public static dom.HTMLAreasCollection prototype
      {
        get
        {
          return dom.HTMLAreasCollection._prototype_BackingField;
        }
        set
        {
          dom.HTMLAreasCollection._prototype_BackingField = value;
        }
      }

      public override extern uint length { get; }

      public override extern dom.Element item(uint index);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLAudioElement : dom.HTMLMediaElement
    {
      private static dom.HTMLAudioElement _prototype_BackingField;

      [Template("document.createElement(\"audio\")")]
      public extern HTMLAudioElement();

      public static dom.HTMLAudioElement prototype
      {
        get
        {
          return dom.HTMLAudioElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLAudioElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAudioElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAudioElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAudioElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLAudioElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAudioElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAudioElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAudioElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLAudioElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLBRElement : dom.HTMLElement
    {
      private static dom.HTMLBRElement _prototype_BackingField;
      private string _clear_BackingField;

      [Template("document.createElement(\"br\")")]
      public extern HTMLBRElement();

      public static dom.HTMLBRElement prototype
      {
        get
        {
          return dom.HTMLBRElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLBRElement._prototype_BackingField = value;
        }
      }

      public virtual string clear
      {
        get
        {
          return this._clear_BackingField;
        }
        set
        {
          this._clear_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBRElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBRElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBRElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBRElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBRElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBRElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBRElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBRElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLBaseElement : dom.HTMLElement
    {
      private static dom.HTMLBaseElement _prototype_BackingField;
      private string _href_BackingField;
      private string _target_BackingField;

      [Template("document.createElement(\"base\")")]
      public extern HTMLBaseElement();

      public static dom.HTMLBaseElement prototype
      {
        get
        {
          return dom.HTMLBaseElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLBaseElement._prototype_BackingField = value;
        }
      }

      public virtual string href
      {
        get
        {
          return this._href_BackingField;
        }
        set
        {
          this._href_BackingField = value;
        }
      }

      public virtual string target
      {
        get
        {
          return this._target_BackingField;
        }
        set
        {
          this._target_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBaseElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBaseElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBaseElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBaseElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBaseElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBaseElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBaseElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBaseElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLBaseFontElement : dom.HTMLElement, dom.DOML2DeprecatedColorProperty.Interface, IObject
    {
      private static dom.HTMLBaseFontElement _prototype_BackingField;
      private string _face_BackingField;
      private double _size_BackingField;
      private string _color_BackingField;

      [Template("document.createElement(\"basefont\")")]
      public extern HTMLBaseFontElement();

      public static dom.HTMLBaseFontElement prototype
      {
        get
        {
          return dom.HTMLBaseFontElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLBaseFontElement._prototype_BackingField = value;
        }
      }

      public virtual string face
      {
        get
        {
          return this._face_BackingField;
        }
        set
        {
          this._face_BackingField = value;
        }
      }

      public virtual double size
      {
        get
        {
          return this._size_BackingField;
        }
        set
        {
          this._size_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBaseFontElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBaseFontElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBaseFontElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBaseFontElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBaseFontElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBaseFontElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBaseFontElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBaseFontElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual string color
      {
        get
        {
          return this._color_BackingField;
        }
        set
        {
          this._color_BackingField = value;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HTMLBodyElementEventMap : dom.HTMLElementEventMap, dom.WindowEventHandlersEventMap.Interface, IObject
    {
      private dom.Event _orientationchange_BackingField;
      private dom.UIEvent _resize_BackingField;
      private dom.Event _afterprint_BackingField;
      private dom.Event _beforeprint_BackingField;
      private dom.BeforeUnloadEvent _beforeunload_BackingField;
      private dom.HashChangeEvent _hashchange_BackingField;
      private dom.MessageEvent _message_BackingField;
      private dom.Event _offline_BackingField;
      private dom.Event _online_BackingField;
      private dom.PageTransitionEvent _pagehide_BackingField;
      private dom.PageTransitionEvent _pageshow_BackingField;
      private dom.PopStateEvent _popstate_BackingField;
      private dom.StorageEvent _storage_BackingField;
      private dom.Event _unload_BackingField;

      public dom.Event orientationchange
      {
        get
        {
          return this._orientationchange_BackingField;
        }
        set
        {
          this._orientationchange_BackingField = value;
        }
      }

      public dom.UIEvent resize
      {
        get
        {
          return this._resize_BackingField;
        }
        set
        {
          this._resize_BackingField = value;
        }
      }

      public dom.Event afterprint
      {
        get
        {
          return this._afterprint_BackingField;
        }
        set
        {
          this._afterprint_BackingField = value;
        }
      }

      public dom.Event beforeprint
      {
        get
        {
          return this._beforeprint_BackingField;
        }
        set
        {
          this._beforeprint_BackingField = value;
        }
      }

      public dom.BeforeUnloadEvent beforeunload
      {
        get
        {
          return this._beforeunload_BackingField;
        }
        set
        {
          this._beforeunload_BackingField = value;
        }
      }

      public dom.HashChangeEvent hashchange
      {
        get
        {
          return this._hashchange_BackingField;
        }
        set
        {
          this._hashchange_BackingField = value;
        }
      }

      public dom.MessageEvent message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      public dom.Event offline
      {
        get
        {
          return this._offline_BackingField;
        }
        set
        {
          this._offline_BackingField = value;
        }
      }

      public dom.Event online
      {
        get
        {
          return this._online_BackingField;
        }
        set
        {
          this._online_BackingField = value;
        }
      }

      public dom.PageTransitionEvent pagehide
      {
        get
        {
          return this._pagehide_BackingField;
        }
        set
        {
          this._pagehide_BackingField = value;
        }
      }

      public dom.PageTransitionEvent pageshow
      {
        get
        {
          return this._pageshow_BackingField;
        }
        set
        {
          this._pageshow_BackingField = value;
        }
      }

      public dom.PopStateEvent popstate
      {
        get
        {
          return this._popstate_BackingField;
        }
        set
        {
          this._popstate_BackingField = value;
        }
      }

      public dom.StorageEvent storage
      {
        get
        {
          return this._storage_BackingField;
        }
        set
        {
          this._storage_BackingField = value;
        }
      }

      public dom.Event unload
      {
        get
        {
          return this._unload_BackingField;
        }
        set
        {
          this._unload_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"orientationchange\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> orientationchange;
        [Template("\"resize\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> resize;
        [Template("\"afterprint\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> afterprint;
        [Template("\"beforeprint\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> beforeprint;
        [Template("\"beforeunload\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> beforeunload;
        [Template("\"hashchange\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> hashchange;
        [Template("\"message\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> message;
        [Template("\"offline\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> offline;
        [Template("\"online\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> online;
        [Template("\"pagehide\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> pagehide;
        [Template("\"pageshow\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> pageshow;
        [Template("\"popstate\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> popstate;
        [Template("\"storage\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> storage;
        [Template("\"unload\"")]
        public static readonly KeyOf<dom.HTMLBodyElementEventMap> unload;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLBodyElement : dom.HTMLElement, dom.WindowEventHandlers.Interface, IObject
    {
      private static dom.HTMLBodyElement _prototype_BackingField;
      private string _aLink_BackingField;
      private string _background_BackingField;
      private string _bgColor_BackingField;
      private string _bgProperties_BackingField;
      private string _link_BackingField;
      private bool _noWrap_BackingField;
      private dom.HTMLBodyElement.onorientationchangeFn _onorientationchange_BackingField;
      private dom.HTMLBodyElement.onresizeFn _onresize_BackingField;
      private string _text_BackingField;
      private string _vLink_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onafterprint_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onbeforeprint_BackingField;
      private dom.WindowEventHandlers.onbeforeunloadFn _onbeforeunload_BackingField;
      private dom.WindowEventHandlers.onhashchangeFn _onhashchange_BackingField;
      private dom.WindowEventHandlers.onmessageFn _onmessage_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onoffline_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _ononline_BackingField;
      private dom.WindowEventHandlers.onpagehideFn _onpagehide_BackingField;
      private dom.WindowEventHandlers.onpagehideFn _onpageshow_BackingField;
      private dom.WindowEventHandlers.onpopstateFn _onpopstate_BackingField;
      private dom.WindowEventHandlers.onstorageFn _onstorage_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onunload_BackingField;

      [Template("document.createElement(\"body\")")]
      public extern HTMLBodyElement();

      public static dom.HTMLBodyElement prototype
      {
        get
        {
          return dom.HTMLBodyElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLBodyElement._prototype_BackingField = value;
        }
      }

      public virtual string aLink
      {
        get
        {
          return this._aLink_BackingField;
        }
        set
        {
          this._aLink_BackingField = value;
        }
      }

      public virtual string background
      {
        get
        {
          return this._background_BackingField;
        }
        set
        {
          this._background_BackingField = value;
        }
      }

      public virtual string bgColor
      {
        get
        {
          return this._bgColor_BackingField;
        }
        set
        {
          this._bgColor_BackingField = value;
        }
      }

      public virtual string bgProperties
      {
        get
        {
          return this._bgProperties_BackingField;
        }
        set
        {
          this._bgProperties_BackingField = value;
        }
      }

      public virtual string link
      {
        get
        {
          return this._link_BackingField;
        }
        set
        {
          this._link_BackingField = value;
        }
      }

      public virtual bool noWrap
      {
        get
        {
          return this._noWrap_BackingField;
        }
        set
        {
          this._noWrap_BackingField = value;
        }
      }

      public virtual dom.HTMLBodyElement.onorientationchangeFn onorientationchange
      {
        get
        {
          return this._onorientationchange_BackingField;
        }
        set
        {
          this._onorientationchange_BackingField = value;
        }
      }

      public virtual dom.HTMLBodyElement.onresizeFn onresize
      {
        get
        {
          return this._onresize_BackingField;
        }
        set
        {
          this._onresize_BackingField = value;
        }
      }

      public virtual string text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }

      public virtual string vLink
      {
        get
        {
          return this._vLink_BackingField;
        }
        set
        {
          this._vLink_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBodyElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBodyElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBodyElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLBodyElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBodyElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBodyElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBodyElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLBodyElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.WindowEventHandlers.onafterprintFn onafterprint
      {
        get
        {
          return this._onafterprint_BackingField;
        }
        set
        {
          this._onafterprint_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn onbeforeprint
      {
        get
        {
          return this._onbeforeprint_BackingField;
        }
        set
        {
          this._onbeforeprint_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onbeforeunloadFn onbeforeunload
      {
        get
        {
          return this._onbeforeunload_BackingField;
        }
        set
        {
          this._onbeforeunload_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onhashchangeFn onhashchange
      {
        get
        {
          return this._onhashchange_BackingField;
        }
        set
        {
          this._onhashchange_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn onoffline
      {
        get
        {
          return this._onoffline_BackingField;
        }
        set
        {
          this._onoffline_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn ononline
      {
        get
        {
          return this._ononline_BackingField;
        }
        set
        {
          this._ononline_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onpagehideFn onpagehide
      {
        get
        {
          return this._onpagehide_BackingField;
        }
        set
        {
          this._onpagehide_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onpagehideFn onpageshow
      {
        get
        {
          return this._onpageshow_BackingField;
        }
        set
        {
          this._onpageshow_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onpopstateFn onpopstate
      {
        get
        {
          return this._onpopstate_BackingField;
        }
        set
        {
          this._onpopstate_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onstorageFn onstorage
      {
        get
        {
          return this._onstorage_BackingField;
        }
        set
        {
          this._onstorage_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn onunload
      {
        get
        {
          return this._onunload_BackingField;
        }
        set
        {
          this._onunload_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onorientationchangeFn(dom.Event ev);

      [Generated]
      public delegate void onresizeFn(dom.UIEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLBodyElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLButtonElement : dom.HTMLElement
    {
      private static dom.HTMLButtonElement _prototype_BackingField;
      private bool _autofocus_BackingField;
      private bool _disabled_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private string _formAction_BackingField;
      private string _formEnctype_BackingField;
      private string _formMethod_BackingField;
      private bool _formNoValidate_BackingField;
      private string _formTarget_BackingField;
      private string _name_BackingField;
      private object _status_BackingField;
      private string _type_BackingField;
      private readonly string _validationMessage_BackingField;
      private readonly dom.ValidityState _validity_BackingField;
      private string _value_BackingField;
      private readonly bool _willValidate_BackingField;

      [Template("document.createElement(\"button\")")]
      public extern HTMLButtonElement();

      public static dom.HTMLButtonElement prototype
      {
        get
        {
          return dom.HTMLButtonElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLButtonElement._prototype_BackingField = value;
        }
      }

      public virtual bool autofocus
      {
        get
        {
          return this._autofocus_BackingField;
        }
        set
        {
          this._autofocus_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual string formAction
      {
        get
        {
          return this._formAction_BackingField;
        }
        set
        {
          this._formAction_BackingField = value;
        }
      }

      public virtual string formEnctype
      {
        get
        {
          return this._formEnctype_BackingField;
        }
        set
        {
          this._formEnctype_BackingField = value;
        }
      }

      public virtual string formMethod
      {
        get
        {
          return this._formMethod_BackingField;
        }
        set
        {
          this._formMethod_BackingField = value;
        }
      }

      public virtual bool formNoValidate
      {
        get
        {
          return this._formNoValidate_BackingField;
        }
        set
        {
          this._formNoValidate_BackingField = value;
        }
      }

      public virtual string formTarget
      {
        get
        {
          return this._formTarget_BackingField;
        }
        set
        {
          this._formTarget_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual object status
      {
        get
        {
          return this._status_BackingField;
        }
        set
        {
          this._status_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      public virtual string validationMessage
      {
        get
        {
          return this._validationMessage_BackingField;
        }
      }

      public virtual dom.ValidityState validity
      {
        get
        {
          return this._validity_BackingField;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      public virtual bool willValidate
      {
        get
        {
          return this._willValidate_BackingField;
        }
      }

      public virtual extern bool checkValidity();

      public virtual extern void setCustomValidity(string error);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLButtonElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLButtonElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLButtonElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLButtonElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLButtonElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLButtonElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLButtonElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLButtonElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLCanvasElement : dom.HTMLElement
    {
      private static dom.HTMLCanvasElement _prototype_BackingField;
      private uint _height_BackingField;
      private uint _width_BackingField;

      [Template("document.createElement(\"canvas\")")]
      public extern HTMLCanvasElement();

      public static dom.HTMLCanvasElement prototype
      {
        get
        {
          return dom.HTMLCanvasElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLCanvasElement._prototype_BackingField = value;
        }
      }

      public virtual uint height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual uint width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public virtual extern dom.CanvasRenderingContext2D getContext(
        dom.Literals.Types._2d contextId);

      public virtual extern dom.CanvasRenderingContext2D getContext(
        dom.Literals.Types._2d contextId,
        dom.Canvas2DContextAttributes contextAttributes);

      public virtual extern dom.WebGLRenderingContext getContext(
        dom.Literals.Options.contextId contextId);

      public virtual extern dom.WebGLRenderingContext getContext(
        dom.Literals.Options.contextId contextId,
        dom.WebGLContextAttributes contextAttributes);

      public virtual extern Union<dom.CanvasRenderingContext2D, dom.WebGLRenderingContext, Null> getContext(
        string contextId);

      public virtual extern Union<dom.CanvasRenderingContext2D, dom.WebGLRenderingContext, Null> getContext(
        string contextId,
        object contextAttributes);

      public virtual extern dom.Blob msToBlob();

      public virtual extern void toBlob(dom.HTMLCanvasElement.toBlobFn callback);

      [ExpandParams]
      public virtual extern void toBlob(
        dom.HTMLCanvasElement.toBlobFn callback,
        string type,
        params object[] arguments);

      public virtual extern string toDataURL();

      [ExpandParams]
      public virtual extern string toDataURL(string type, params object[] args);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLCanvasElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLCanvasElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLCanvasElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLCanvasElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLCanvasElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLCanvasElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLCanvasElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLCanvasElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void toBlobFn(dom.Blob result);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class HTMLCollectionBase : IEnumerable<dom.Element>, IEnumerable, IHighFiveClass, IObject
    {
      public abstract uint length { get; }

      public abstract dom.Element item(uint index);

      public virtual extern dom.Element this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.Element> IEnumerable<dom.Element>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLCollection : dom.HTMLCollectionBase
    {
      private static dom.HTMLCollection _prototype_BackingField;

      public static dom.HTMLCollection prototype
      {
        get
        {
          return dom.HTMLCollection._prototype_BackingField;
        }
        set
        {
          dom.HTMLCollection._prototype_BackingField = value;
        }
      }

      public virtual extern dom.Element namedItem(string name);

      public override extern uint length { get; }

      public override extern dom.Element item(uint index);
    }

    [IgnoreCast]
    [IgnoreGeneric(AllowInTypeScript = true)]
    [Virtual]
    [FormerInterface]
    [Where("T", typeof (dom.Element), EnableImplicitConversion = true)]
    public abstract class HTMLCollectionOf<T> : dom.HTMLCollectionBase, IEnumerable<T>, IEnumerable, IHighFiveClass
    {
      public abstract T item(double index);

      public abstract T namedItem(string name);

      public virtual extern T this[double index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<T> IEnumerable<T>.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLDListElement : dom.HTMLElement
    {
      private static dom.HTMLDListElement _prototype_BackingField;
      private bool _compact_BackingField;

      [Template("document.createElement(\"dl\")")]
      public extern HTMLDListElement();

      public static dom.HTMLDListElement prototype
      {
        get
        {
          return dom.HTMLDListElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLDListElement._prototype_BackingField = value;
        }
      }

      public virtual bool compact
      {
        get
        {
          return this._compact_BackingField;
        }
        set
        {
          this._compact_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDListElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDListElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDListElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDListElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDListElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDListElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDListElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDListElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLDataElement : dom.HTMLElement
    {
      private static dom.HTMLDataElement _prototype_BackingField;
      private string _value_BackingField;

      [Template("document.createElement(\"data\")")]
      public extern HTMLDataElement();

      public static dom.HTMLDataElement prototype
      {
        get
        {
          return dom.HTMLDataElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLDataElement._prototype_BackingField = value;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDataElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDataElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDataElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDataElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDataElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDataElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDataElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDataElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLDataListElement : dom.HTMLElement
    {
      private static dom.HTMLDataListElement _prototype_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLOptionElement> _options_BackingField;

      [Template("document.createElement(\"datalist\")")]
      public extern HTMLDataListElement();

      public static dom.HTMLDataListElement prototype
      {
        get
        {
          return dom.HTMLDataListElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLDataListElement._prototype_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLOptionElement> options
      {
        get
        {
          return this._options_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDataListElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDataListElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDataListElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDataListElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDataListElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDataListElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDataListElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDataListElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLDetailsElement : dom.HTMLElement
    {
      private static dom.HTMLDetailsElement _prototype_BackingField;
      private bool _open_BackingField;

      public static dom.HTMLDetailsElement prototype
      {
        get
        {
          return dom.HTMLDetailsElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLDetailsElement._prototype_BackingField = value;
        }
      }

      public virtual bool open
      {
        get
        {
          return this._open_BackingField;
        }
        set
        {
          this._open_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDetailsElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDetailsElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDetailsElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDetailsElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDetailsElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDetailsElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDetailsElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDetailsElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLDialogElement : dom.HTMLElement
    {
      private static dom.HTMLDialogElement _prototype_BackingField;
      private bool _open_BackingField;
      private string _returnValue_BackingField;

      public static dom.HTMLDialogElement prototype
      {
        get
        {
          return dom.HTMLDialogElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLDialogElement._prototype_BackingField = value;
        }
      }

      public virtual bool open
      {
        get
        {
          return this._open_BackingField;
        }
        set
        {
          this._open_BackingField = value;
        }
      }

      public virtual string returnValue
      {
        get
        {
          return this._returnValue_BackingField;
        }
        set
        {
          this._returnValue_BackingField = value;
        }
      }

      public virtual extern void close();

      public virtual extern void close(string returnValue);

      public virtual extern void show();

      public virtual extern void showModal();

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDialogElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDialogElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDialogElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDialogElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDialogElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDialogElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDialogElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDialogElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLDirectoryElement : dom.HTMLElement
    {
      private static dom.HTMLDirectoryElement _prototype_BackingField;
      private bool _compact_BackingField;

      [Template("document.createElement(\"dir\")")]
      public extern HTMLDirectoryElement();

      public static dom.HTMLDirectoryElement prototype
      {
        get
        {
          return dom.HTMLDirectoryElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLDirectoryElement._prototype_BackingField = value;
        }
      }

      public virtual bool compact
      {
        get
        {
          return this._compact_BackingField;
        }
        set
        {
          this._compact_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDirectoryElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDirectoryElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDirectoryElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDirectoryElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDirectoryElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDirectoryElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDirectoryElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDirectoryElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLDivElement : dom.HTMLElement
    {
      private static dom.HTMLDivElement _prototype_BackingField;
      private string _align_BackingField;
      private bool _noWrap_BackingField;

      [Template("document.createElement(\"div\")")]
      public extern HTMLDivElement();

      public static dom.HTMLDivElement prototype
      {
        get
        {
          return dom.HTMLDivElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLDivElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual bool noWrap
      {
        get
        {
          return this._noWrap_BackingField;
        }
        set
        {
          this._noWrap_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDivElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDivElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDivElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDivElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDivElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDivElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDivElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDivElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLDocument : dom.Document
    {
      private static dom.HTMLDocument _prototype_BackingField;

      public static dom.HTMLDocument prototype
      {
        get
        {
          return dom.HTMLDocument._prototype_BackingField;
        }
        set
        {
          dom.HTMLDocument._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDocument.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDocument.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDocument.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLDocument.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDocument.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDocument.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDocument.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLDocument.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HTMLElementEventMap : dom.ElementEventMap
    {
      private dom.UIEvent _abort_BackingField;
      private dom.Event _activate_BackingField;
      private dom.Event _beforeactivate_BackingField;
      private dom.Event _beforecopy_BackingField;
      private dom.Event _beforecut_BackingField;
      private dom.Event _beforedeactivate_BackingField;
      private dom.Event _beforepaste_BackingField;
      private dom.FocusEvent _blur_BackingField;
      private dom.Event _canplay_BackingField;
      private dom.Event _canplaythrough_BackingField;
      private dom.Event _change_BackingField;
      private dom.MouseEvent _click_BackingField;
      private dom.PointerEvent _contextmenu_BackingField;
      private dom.ClipboardEvent _copy_BackingField;
      private dom.Event _cuechange_BackingField;
      private dom.ClipboardEvent _cut_BackingField;
      private dom.MouseEvent _dblclick_BackingField;
      private dom.Event _deactivate_BackingField;
      private dom.DragEvent _drag_BackingField;
      private dom.DragEvent _dragend_BackingField;
      private dom.DragEvent _dragenter_BackingField;
      private dom.DragEvent _dragleave_BackingField;
      private dom.DragEvent _dragover_BackingField;
      private dom.DragEvent _dragstart_BackingField;
      private dom.DragEvent _drop_BackingField;
      private dom.Event _durationchange_BackingField;
      private dom.Event _emptied_BackingField;
      private dom.Event _ended_BackingField;
      private dom.ErrorEvent _error_BackingField;
      private dom.FocusEvent _focus_BackingField;
      private dom.Event _input_BackingField;
      private dom.Event _invalid_BackingField;
      private dom.KeyboardEvent _keydown_BackingField;
      private dom.KeyboardEvent _keypress_BackingField;
      private dom.KeyboardEvent _keyup_BackingField;
      private dom.Event _load_BackingField;
      private dom.Event _loadeddata_BackingField;
      private dom.Event _loadedmetadata_BackingField;
      private dom.Event _loadstart_BackingField;
      private dom.MouseEvent _mousedown_BackingField;
      private dom.MouseEvent _mouseenter_BackingField;
      private dom.MouseEvent _mouseleave_BackingField;
      private dom.MouseEvent _mousemove_BackingField;
      private dom.MouseEvent _mouseout_BackingField;
      private dom.MouseEvent _mouseover_BackingField;
      private dom.MouseEvent _mouseup_BackingField;
      private dom.WheelEvent _mousewheel_BackingField;
      private dom.Event _MSContentZoom_BackingField;
      private dom.Event _MSManipulationStateChanged_BackingField;
      private dom.ClipboardEvent _paste_BackingField;
      private dom.Event _pause_BackingField;
      private dom.Event _play_BackingField;
      private dom.Event _playing_BackingField;
      private dom.ProgressEvent _progress_BackingField;
      private dom.Event _ratechange_BackingField;
      private dom.Event _reset_BackingField;
      private dom.UIEvent _scroll_BackingField;
      private dom.Event _seeked_BackingField;
      private dom.Event _seeking_BackingField;
      private dom.UIEvent _select_BackingField;
      private dom.Event _selectstart_BackingField;
      private dom.Event _stalled_BackingField;
      private dom.Event _submit_BackingField;
      private dom.Event _suspend_BackingField;
      private dom.Event _timeupdate_BackingField;
      private dom.Event _volumechange_BackingField;
      private dom.Event _waiting_BackingField;

      public dom.UIEvent abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      public dom.Event activate
      {
        get
        {
          return this._activate_BackingField;
        }
        set
        {
          this._activate_BackingField = value;
        }
      }

      public dom.Event beforeactivate
      {
        get
        {
          return this._beforeactivate_BackingField;
        }
        set
        {
          this._beforeactivate_BackingField = value;
        }
      }

      public dom.Event beforecopy
      {
        get
        {
          return this._beforecopy_BackingField;
        }
        set
        {
          this._beforecopy_BackingField = value;
        }
      }

      public dom.Event beforecut
      {
        get
        {
          return this._beforecut_BackingField;
        }
        set
        {
          this._beforecut_BackingField = value;
        }
      }

      public dom.Event beforedeactivate
      {
        get
        {
          return this._beforedeactivate_BackingField;
        }
        set
        {
          this._beforedeactivate_BackingField = value;
        }
      }

      public dom.Event beforepaste
      {
        get
        {
          return this._beforepaste_BackingField;
        }
        set
        {
          this._beforepaste_BackingField = value;
        }
      }

      public dom.FocusEvent blur
      {
        get
        {
          return this._blur_BackingField;
        }
        set
        {
          this._blur_BackingField = value;
        }
      }

      public dom.Event canplay
      {
        get
        {
          return this._canplay_BackingField;
        }
        set
        {
          this._canplay_BackingField = value;
        }
      }

      public dom.Event canplaythrough
      {
        get
        {
          return this._canplaythrough_BackingField;
        }
        set
        {
          this._canplaythrough_BackingField = value;
        }
      }

      public dom.Event change
      {
        get
        {
          return this._change_BackingField;
        }
        set
        {
          this._change_BackingField = value;
        }
      }

      public dom.MouseEvent click
      {
        get
        {
          return this._click_BackingField;
        }
        set
        {
          this._click_BackingField = value;
        }
      }

      public dom.PointerEvent contextmenu
      {
        get
        {
          return this._contextmenu_BackingField;
        }
        set
        {
          this._contextmenu_BackingField = value;
        }
      }

      public dom.ClipboardEvent copy
      {
        get
        {
          return this._copy_BackingField;
        }
        set
        {
          this._copy_BackingField = value;
        }
      }

      public dom.Event cuechange
      {
        get
        {
          return this._cuechange_BackingField;
        }
        set
        {
          this._cuechange_BackingField = value;
        }
      }

      public dom.ClipboardEvent cut
      {
        get
        {
          return this._cut_BackingField;
        }
        set
        {
          this._cut_BackingField = value;
        }
      }

      public dom.MouseEvent dblclick
      {
        get
        {
          return this._dblclick_BackingField;
        }
        set
        {
          this._dblclick_BackingField = value;
        }
      }

      public dom.Event deactivate
      {
        get
        {
          return this._deactivate_BackingField;
        }
        set
        {
          this._deactivate_BackingField = value;
        }
      }

      public dom.DragEvent drag
      {
        get
        {
          return this._drag_BackingField;
        }
        set
        {
          this._drag_BackingField = value;
        }
      }

      public dom.DragEvent dragend
      {
        get
        {
          return this._dragend_BackingField;
        }
        set
        {
          this._dragend_BackingField = value;
        }
      }

      public dom.DragEvent dragenter
      {
        get
        {
          return this._dragenter_BackingField;
        }
        set
        {
          this._dragenter_BackingField = value;
        }
      }

      public dom.DragEvent dragleave
      {
        get
        {
          return this._dragleave_BackingField;
        }
        set
        {
          this._dragleave_BackingField = value;
        }
      }

      public dom.DragEvent dragover
      {
        get
        {
          return this._dragover_BackingField;
        }
        set
        {
          this._dragover_BackingField = value;
        }
      }

      public dom.DragEvent dragstart
      {
        get
        {
          return this._dragstart_BackingField;
        }
        set
        {
          this._dragstart_BackingField = value;
        }
      }

      public dom.DragEvent drop
      {
        get
        {
          return this._drop_BackingField;
        }
        set
        {
          this._drop_BackingField = value;
        }
      }

      public dom.Event durationchange
      {
        get
        {
          return this._durationchange_BackingField;
        }
        set
        {
          this._durationchange_BackingField = value;
        }
      }

      public dom.Event emptied
      {
        get
        {
          return this._emptied_BackingField;
        }
        set
        {
          this._emptied_BackingField = value;
        }
      }

      public dom.Event ended
      {
        get
        {
          return this._ended_BackingField;
        }
        set
        {
          this._ended_BackingField = value;
        }
      }

      public dom.ErrorEvent error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.FocusEvent focus
      {
        get
        {
          return this._focus_BackingField;
        }
        set
        {
          this._focus_BackingField = value;
        }
      }

      public dom.Event input
      {
        get
        {
          return this._input_BackingField;
        }
        set
        {
          this._input_BackingField = value;
        }
      }

      public dom.Event invalid
      {
        get
        {
          return this._invalid_BackingField;
        }
        set
        {
          this._invalid_BackingField = value;
        }
      }

      public dom.KeyboardEvent keydown
      {
        get
        {
          return this._keydown_BackingField;
        }
        set
        {
          this._keydown_BackingField = value;
        }
      }

      public dom.KeyboardEvent keypress
      {
        get
        {
          return this._keypress_BackingField;
        }
        set
        {
          this._keypress_BackingField = value;
        }
      }

      public dom.KeyboardEvent keyup
      {
        get
        {
          return this._keyup_BackingField;
        }
        set
        {
          this._keyup_BackingField = value;
        }
      }

      public dom.Event load
      {
        get
        {
          return this._load_BackingField;
        }
        set
        {
          this._load_BackingField = value;
        }
      }

      public dom.Event loadeddata
      {
        get
        {
          return this._loadeddata_BackingField;
        }
        set
        {
          this._loadeddata_BackingField = value;
        }
      }

      public dom.Event loadedmetadata
      {
        get
        {
          return this._loadedmetadata_BackingField;
        }
        set
        {
          this._loadedmetadata_BackingField = value;
        }
      }

      public dom.Event loadstart
      {
        get
        {
          return this._loadstart_BackingField;
        }
        set
        {
          this._loadstart_BackingField = value;
        }
      }

      public dom.MouseEvent mousedown
      {
        get
        {
          return this._mousedown_BackingField;
        }
        set
        {
          this._mousedown_BackingField = value;
        }
      }

      public dom.MouseEvent mouseenter
      {
        get
        {
          return this._mouseenter_BackingField;
        }
        set
        {
          this._mouseenter_BackingField = value;
        }
      }

      public dom.MouseEvent mouseleave
      {
        get
        {
          return this._mouseleave_BackingField;
        }
        set
        {
          this._mouseleave_BackingField = value;
        }
      }

      public dom.MouseEvent mousemove
      {
        get
        {
          return this._mousemove_BackingField;
        }
        set
        {
          this._mousemove_BackingField = value;
        }
      }

      public dom.MouseEvent mouseout
      {
        get
        {
          return this._mouseout_BackingField;
        }
        set
        {
          this._mouseout_BackingField = value;
        }
      }

      public dom.MouseEvent mouseover
      {
        get
        {
          return this._mouseover_BackingField;
        }
        set
        {
          this._mouseover_BackingField = value;
        }
      }

      public dom.MouseEvent mouseup
      {
        get
        {
          return this._mouseup_BackingField;
        }
        set
        {
          this._mouseup_BackingField = value;
        }
      }

      public dom.WheelEvent mousewheel
      {
        get
        {
          return this._mousewheel_BackingField;
        }
        set
        {
          this._mousewheel_BackingField = value;
        }
      }

      public dom.Event MSContentZoom
      {
        get
        {
          return this._MSContentZoom_BackingField;
        }
        set
        {
          this._MSContentZoom_BackingField = value;
        }
      }

      public dom.Event MSManipulationStateChanged
      {
        get
        {
          return this._MSManipulationStateChanged_BackingField;
        }
        set
        {
          this._MSManipulationStateChanged_BackingField = value;
        }
      }

      public dom.ClipboardEvent paste
      {
        get
        {
          return this._paste_BackingField;
        }
        set
        {
          this._paste_BackingField = value;
        }
      }

      public dom.Event pause
      {
        get
        {
          return this._pause_BackingField;
        }
        set
        {
          this._pause_BackingField = value;
        }
      }

      public dom.Event play
      {
        get
        {
          return this._play_BackingField;
        }
        set
        {
          this._play_BackingField = value;
        }
      }

      public dom.Event playing
      {
        get
        {
          return this._playing_BackingField;
        }
        set
        {
          this._playing_BackingField = value;
        }
      }

      public dom.ProgressEvent progress
      {
        get
        {
          return this._progress_BackingField;
        }
        set
        {
          this._progress_BackingField = value;
        }
      }

      public dom.Event ratechange
      {
        get
        {
          return this._ratechange_BackingField;
        }
        set
        {
          this._ratechange_BackingField = value;
        }
      }

      public dom.Event reset
      {
        get
        {
          return this._reset_BackingField;
        }
        set
        {
          this._reset_BackingField = value;
        }
      }

      public dom.UIEvent scroll
      {
        get
        {
          return this._scroll_BackingField;
        }
        set
        {
          this._scroll_BackingField = value;
        }
      }

      public dom.Event seeked
      {
        get
        {
          return this._seeked_BackingField;
        }
        set
        {
          this._seeked_BackingField = value;
        }
      }

      public dom.Event seeking
      {
        get
        {
          return this._seeking_BackingField;
        }
        set
        {
          this._seeking_BackingField = value;
        }
      }

      public dom.UIEvent select
      {
        get
        {
          return this._select_BackingField;
        }
        set
        {
          this._select_BackingField = value;
        }
      }

      public dom.Event selectstart
      {
        get
        {
          return this._selectstart_BackingField;
        }
        set
        {
          this._selectstart_BackingField = value;
        }
      }

      public dom.Event stalled
      {
        get
        {
          return this._stalled_BackingField;
        }
        set
        {
          this._stalled_BackingField = value;
        }
      }

      public dom.Event submit
      {
        get
        {
          return this._submit_BackingField;
        }
        set
        {
          this._submit_BackingField = value;
        }
      }

      public dom.Event suspend
      {
        get
        {
          return this._suspend_BackingField;
        }
        set
        {
          this._suspend_BackingField = value;
        }
      }

      public dom.Event timeupdate
      {
        get
        {
          return this._timeupdate_BackingField;
        }
        set
        {
          this._timeupdate_BackingField = value;
        }
      }

      public dom.Event volumechange
      {
        get
        {
          return this._volumechange_BackingField;
        }
        set
        {
          this._volumechange_BackingField = value;
        }
      }

      public dom.Event waiting
      {
        get
        {
          return this._waiting_BackingField;
        }
        set
        {
          this._waiting_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"abort\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> abort;
        [Template("\"activate\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> activate;
        [Template("\"beforeactivate\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> beforeactivate;
        [Template("\"beforecopy\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> beforecopy;
        [Template("\"beforecut\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> beforecut;
        [Template("\"beforedeactivate\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> beforedeactivate;
        [Template("\"beforepaste\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> beforepaste;
        [Template("\"blur\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> blur;
        [Template("\"canplay\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> canplay;
        [Template("\"canplaythrough\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> canplaythrough;
        [Template("\"change\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> change;
        [Template("\"click\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> click;
        [Template("\"contextmenu\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> contextmenu;
        [Template("\"copy\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> copy;
        [Template("\"cuechange\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> cuechange;
        [Template("\"cut\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> cut;
        [Template("\"dblclick\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> dblclick;
        [Template("\"deactivate\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> deactivate;
        [Template("\"drag\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> drag;
        [Template("\"dragend\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> dragend;
        [Template("\"dragenter\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> dragenter;
        [Template("\"dragleave\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> dragleave;
        [Template("\"dragover\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> dragover;
        [Template("\"dragstart\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> dragstart;
        [Template("\"drop\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> drop;
        [Template("\"durationchange\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> durationchange;
        [Template("\"emptied\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> emptied;
        [Template("\"ended\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> ended;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> error;
        [Template("\"focus\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> focus;
        [Template("\"input\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> input;
        [Template("\"invalid\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> invalid;
        [Template("\"keydown\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> keydown;
        [Template("\"keypress\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> keypress;
        [Template("\"keyup\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> keyup;
        [Template("\"load\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> load;
        [Template("\"loadeddata\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> loadeddata;
        [Template("\"loadedmetadata\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> loadedmetadata;
        [Template("\"loadstart\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> loadstart;
        [Template("\"mousedown\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> mousedown;
        [Template("\"mouseenter\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> mouseenter;
        [Template("\"mouseleave\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> mouseleave;
        [Template("\"mousemove\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> mousemove;
        [Template("\"mouseout\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> mouseout;
        [Template("\"mouseover\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> mouseover;
        [Template("\"mouseup\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> mouseup;
        [Template("\"mousewheel\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> mousewheel;
        [Template("\"MSContentZoom\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> MSContentZoom;
        [Template("\"MSManipulationStateChanged\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> MSManipulationStateChanged;
        [Template("\"paste\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> paste;
        [Template("\"pause\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> pause;
        [Template("\"play\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> play;
        [Template("\"playing\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> playing;
        [Template("\"progress\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> progress;
        [Template("\"ratechange\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> ratechange;
        [Template("\"reset\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> reset;
        [Template("\"scroll\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> scroll;
        [Template("\"seeked\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> seeked;
        [Template("\"seeking\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> seeking;
        [Template("\"select\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> select;
        [Template("\"selectstart\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> selectstart;
        [Template("\"stalled\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> stalled;
        [Template("\"submit\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> submit;
        [Template("\"suspend\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> suspend;
        [Template("\"timeupdate\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> timeupdate;
        [Template("\"volumechange\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> volumechange;
        [Template("\"waiting\"")]
        public static readonly KeyOf<dom.HTMLElementEventMap> waiting;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLElement : dom.Element, dom.ElementCSSInlineStyle.Interface, IObject
    {
      private static dom.HTMLElement _prototype_BackingField;
      private string _accessKey_BackingField;
      private string _contentEditable_BackingField;
      private readonly dom.DOMStringMap _dataset_BackingField;
      private string _dir_BackingField;
      private bool _draggable_BackingField;
      private bool _hidden_BackingField;
      private bool _hideFocus_BackingField;
      private string _innerText_BackingField;
      private readonly bool _isContentEditable_BackingField;
      private string _lang_BackingField;
      private readonly int _offsetHeight_BackingField;
      private readonly int _offsetLeft_BackingField;
      private readonly dom.Element _offsetParent_BackingField;
      private readonly int _offsetTop_BackingField;
      private readonly int _offsetWidth_BackingField;
      private dom.HTMLElement.onabortFn _onabort_BackingField;
      private dom.HTMLElement.onactivateFn _onactivate_BackingField;
      private dom.HTMLElement.onactivateFn _onbeforeactivate_BackingField;
      private dom.HTMLElement.onactivateFn _onbeforecopy_BackingField;
      private dom.HTMLElement.onactivateFn _onbeforecut_BackingField;
      private dom.HTMLElement.onactivateFn _onbeforedeactivate_BackingField;
      private dom.HTMLElement.onactivateFn _onbeforepaste_BackingField;
      private dom.HTMLElement.onblurFn _onblur_BackingField;
      private dom.HTMLElement.onactivateFn _oncanplay_BackingField;
      private dom.HTMLElement.onactivateFn _oncanplaythrough_BackingField;
      private dom.HTMLElement.onactivateFn _onchange_BackingField;
      private dom.HTMLElement.onclickFn _onclick_BackingField;
      private dom.HTMLElement.oncontextmenuFn _oncontextmenu_BackingField;
      private dom.HTMLElement.oncopyFn _oncopy_BackingField;
      private dom.HTMLElement.onactivateFn _oncuechange_BackingField;
      private dom.HTMLElement.oncopyFn _oncut_BackingField;
      private dom.HTMLElement.onclickFn _ondblclick_BackingField;
      private dom.HTMLElement.onactivateFn _ondeactivate_BackingField;
      private dom.HTMLElement.ondragFn _ondrag_BackingField;
      private dom.HTMLElement.ondragFn _ondragend_BackingField;
      private dom.HTMLElement.ondragFn _ondragenter_BackingField;
      private dom.HTMLElement.ondragFn _ondragleave_BackingField;
      private dom.HTMLElement.ondragFn _ondragover_BackingField;
      private dom.HTMLElement.ondragFn _ondragstart_BackingField;
      private dom.HTMLElement.ondragFn _ondrop_BackingField;
      private dom.HTMLElement.onactivateFn _ondurationchange_BackingField;
      private dom.HTMLElement.onactivateFn _onemptied_BackingField;
      private dom.HTMLElement.onactivateFn _onended_BackingField;
      private dom.HTMLElement.onerrorFn _onerror_BackingField;
      private dom.HTMLElement.onblurFn _onfocus_BackingField;
      private dom.HTMLElement.onactivateFn _oninput_BackingField;
      private dom.HTMLElement.onactivateFn _oninvalid_BackingField;
      private dom.HTMLElement.onkeydownFn _onkeydown_BackingField;
      private dom.HTMLElement.onkeydownFn _onkeypress_BackingField;
      private dom.HTMLElement.onkeydownFn _onkeyup_BackingField;
      private dom.HTMLElement.onactivateFn _onload_BackingField;
      private dom.HTMLElement.onactivateFn _onloadeddata_BackingField;
      private dom.HTMLElement.onactivateFn _onloadedmetadata_BackingField;
      private dom.HTMLElement.onactivateFn _onloadstart_BackingField;
      private dom.HTMLElement.onclickFn _onmousedown_BackingField;
      private dom.HTMLElement.onclickFn _onmouseenter_BackingField;
      private dom.HTMLElement.onclickFn _onmouseleave_BackingField;
      private dom.HTMLElement.onclickFn _onmousemove_BackingField;
      private dom.HTMLElement.onclickFn _onmouseout_BackingField;
      private dom.HTMLElement.onclickFn _onmouseover_BackingField;
      private dom.HTMLElement.onclickFn _onmouseup_BackingField;
      private dom.HTMLElement.onmousewheelFn _onmousewheel_BackingField;
      private dom.HTMLElement.onactivateFn _onmscontentzoom_BackingField;
      private dom.HTMLElement.onactivateFn _onmsmanipulationstatechanged_BackingField;
      private dom.HTMLElement.oncopyFn _onpaste_BackingField;
      private dom.HTMLElement.onactivateFn _onpause_BackingField;
      private dom.HTMLElement.onactivateFn _onplay_BackingField;
      private dom.HTMLElement.onactivateFn _onplaying_BackingField;
      private dom.HTMLElement.onprogressFn _onprogress_BackingField;
      private dom.HTMLElement.onactivateFn _onratechange_BackingField;
      private dom.HTMLElement.onactivateFn _onreset_BackingField;
      private dom.HTMLElement.onabortFn _onscroll_BackingField;
      private dom.HTMLElement.onactivateFn _onseeked_BackingField;
      private dom.HTMLElement.onactivateFn _onseeking_BackingField;
      private dom.HTMLElement.onabortFn _onselect_BackingField;
      private dom.HTMLElement.onactivateFn _onselectstart_BackingField;
      private dom.HTMLElement.onactivateFn _onstalled_BackingField;
      private dom.HTMLElement.onactivateFn _onsubmit_BackingField;
      private dom.HTMLElement.onactivateFn _onsuspend_BackingField;
      private dom.HTMLElement.onactivateFn _ontimeupdate_BackingField;
      private dom.HTMLElement.onactivateFn _onvolumechange_BackingField;
      private dom.HTMLElement.onactivateFn _onwaiting_BackingField;
      private string _outerText_BackingField;
      private bool _spellcheck_BackingField;
      private int _tabIndex_BackingField;
      private string _title_BackingField;
      private readonly dom.CSSStyleDeclaration _style_BackingField;

      public static dom.HTMLElement prototype
      {
        get
        {
          return dom.HTMLElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLElement._prototype_BackingField = value;
        }
      }

      public virtual string accessKey
      {
        get
        {
          return this._accessKey_BackingField;
        }
        set
        {
          this._accessKey_BackingField = value;
        }
      }

      public virtual string contentEditable
      {
        get
        {
          return this._contentEditable_BackingField;
        }
        set
        {
          this._contentEditable_BackingField = value;
        }
      }

      public virtual dom.DOMStringMap dataset
      {
        get
        {
          return this._dataset_BackingField;
        }
      }

      public virtual string dir
      {
        get
        {
          return this._dir_BackingField;
        }
        set
        {
          this._dir_BackingField = value;
        }
      }

      public virtual bool draggable
      {
        get
        {
          return this._draggable_BackingField;
        }
        set
        {
          this._draggable_BackingField = value;
        }
      }

      public virtual bool hidden
      {
        get
        {
          return this._hidden_BackingField;
        }
        set
        {
          this._hidden_BackingField = value;
        }
      }

      public virtual bool hideFocus
      {
        get
        {
          return this._hideFocus_BackingField;
        }
        set
        {
          this._hideFocus_BackingField = value;
        }
      }

      public virtual string innerText
      {
        get
        {
          return this._innerText_BackingField;
        }
        set
        {
          this._innerText_BackingField = value;
        }
      }

      public virtual bool isContentEditable
      {
        get
        {
          return this._isContentEditable_BackingField;
        }
      }

      public virtual string lang
      {
        get
        {
          return this._lang_BackingField;
        }
        set
        {
          this._lang_BackingField = value;
        }
      }

      public virtual int offsetHeight
      {
        get
        {
          return this._offsetHeight_BackingField;
        }
      }

      public virtual int offsetLeft
      {
        get
        {
          return this._offsetLeft_BackingField;
        }
      }

      public virtual dom.Element offsetParent
      {
        get
        {
          return this._offsetParent_BackingField;
        }
      }

      public virtual int offsetTop
      {
        get
        {
          return this._offsetTop_BackingField;
        }
      }

      public virtual int offsetWidth
      {
        get
        {
          return this._offsetWidth_BackingField;
        }
      }

      public virtual dom.HTMLElement.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onactivate
      {
        get
        {
          return this._onactivate_BackingField;
        }
        set
        {
          this._onactivate_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onbeforeactivate
      {
        get
        {
          return this._onbeforeactivate_BackingField;
        }
        set
        {
          this._onbeforeactivate_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onbeforecopy
      {
        get
        {
          return this._onbeforecopy_BackingField;
        }
        set
        {
          this._onbeforecopy_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onbeforecut
      {
        get
        {
          return this._onbeforecut_BackingField;
        }
        set
        {
          this._onbeforecut_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onbeforedeactivate
      {
        get
        {
          return this._onbeforedeactivate_BackingField;
        }
        set
        {
          this._onbeforedeactivate_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onbeforepaste
      {
        get
        {
          return this._onbeforepaste_BackingField;
        }
        set
        {
          this._onbeforepaste_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onblurFn onblur
      {
        get
        {
          return this._onblur_BackingField;
        }
        set
        {
          this._onblur_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn oncanplay
      {
        get
        {
          return this._oncanplay_BackingField;
        }
        set
        {
          this._oncanplay_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn oncanplaythrough
      {
        get
        {
          return this._oncanplaythrough_BackingField;
        }
        set
        {
          this._oncanplaythrough_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onchange
      {
        get
        {
          return this._onchange_BackingField;
        }
        set
        {
          this._onchange_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onclickFn onclick
      {
        get
        {
          return this._onclick_BackingField;
        }
        set
        {
          this._onclick_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.oncontextmenuFn oncontextmenu
      {
        get
        {
          return this._oncontextmenu_BackingField;
        }
        set
        {
          this._oncontextmenu_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.oncopyFn oncopy
      {
        get
        {
          return this._oncopy_BackingField;
        }
        set
        {
          this._oncopy_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn oncuechange
      {
        get
        {
          return this._oncuechange_BackingField;
        }
        set
        {
          this._oncuechange_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.oncopyFn oncut
      {
        get
        {
          return this._oncut_BackingField;
        }
        set
        {
          this._oncut_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onclickFn ondblclick
      {
        get
        {
          return this._ondblclick_BackingField;
        }
        set
        {
          this._ondblclick_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn ondeactivate
      {
        get
        {
          return this._ondeactivate_BackingField;
        }
        set
        {
          this._ondeactivate_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.ondragFn ondrag
      {
        get
        {
          return this._ondrag_BackingField;
        }
        set
        {
          this._ondrag_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.ondragFn ondragend
      {
        get
        {
          return this._ondragend_BackingField;
        }
        set
        {
          this._ondragend_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.ondragFn ondragenter
      {
        get
        {
          return this._ondragenter_BackingField;
        }
        set
        {
          this._ondragenter_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.ondragFn ondragleave
      {
        get
        {
          return this._ondragleave_BackingField;
        }
        set
        {
          this._ondragleave_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.ondragFn ondragover
      {
        get
        {
          return this._ondragover_BackingField;
        }
        set
        {
          this._ondragover_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.ondragFn ondragstart
      {
        get
        {
          return this._ondragstart_BackingField;
        }
        set
        {
          this._ondragstart_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.ondragFn ondrop
      {
        get
        {
          return this._ondrop_BackingField;
        }
        set
        {
          this._ondrop_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn ondurationchange
      {
        get
        {
          return this._ondurationchange_BackingField;
        }
        set
        {
          this._ondurationchange_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onemptied
      {
        get
        {
          return this._onemptied_BackingField;
        }
        set
        {
          this._onemptied_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onended
      {
        get
        {
          return this._onended_BackingField;
        }
        set
        {
          this._onended_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onblurFn onfocus
      {
        get
        {
          return this._onfocus_BackingField;
        }
        set
        {
          this._onfocus_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn oninput
      {
        get
        {
          return this._oninput_BackingField;
        }
        set
        {
          this._oninput_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn oninvalid
      {
        get
        {
          return this._oninvalid_BackingField;
        }
        set
        {
          this._oninvalid_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onkeydownFn onkeydown
      {
        get
        {
          return this._onkeydown_BackingField;
        }
        set
        {
          this._onkeydown_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onkeydownFn onkeypress
      {
        get
        {
          return this._onkeypress_BackingField;
        }
        set
        {
          this._onkeypress_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onkeydownFn onkeyup
      {
        get
        {
          return this._onkeyup_BackingField;
        }
        set
        {
          this._onkeyup_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onloadeddata
      {
        get
        {
          return this._onloadeddata_BackingField;
        }
        set
        {
          this._onloadeddata_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onloadedmetadata
      {
        get
        {
          return this._onloadedmetadata_BackingField;
        }
        set
        {
          this._onloadedmetadata_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onloadstart
      {
        get
        {
          return this._onloadstart_BackingField;
        }
        set
        {
          this._onloadstart_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onclickFn onmousedown
      {
        get
        {
          return this._onmousedown_BackingField;
        }
        set
        {
          this._onmousedown_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onclickFn onmouseenter
      {
        get
        {
          return this._onmouseenter_BackingField;
        }
        set
        {
          this._onmouseenter_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onclickFn onmouseleave
      {
        get
        {
          return this._onmouseleave_BackingField;
        }
        set
        {
          this._onmouseleave_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onclickFn onmousemove
      {
        get
        {
          return this._onmousemove_BackingField;
        }
        set
        {
          this._onmousemove_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onclickFn onmouseout
      {
        get
        {
          return this._onmouseout_BackingField;
        }
        set
        {
          this._onmouseout_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onclickFn onmouseover
      {
        get
        {
          return this._onmouseover_BackingField;
        }
        set
        {
          this._onmouseover_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onclickFn onmouseup
      {
        get
        {
          return this._onmouseup_BackingField;
        }
        set
        {
          this._onmouseup_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onmousewheelFn onmousewheel
      {
        get
        {
          return this._onmousewheel_BackingField;
        }
        set
        {
          this._onmousewheel_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onmscontentzoom
      {
        get
        {
          return this._onmscontentzoom_BackingField;
        }
        set
        {
          this._onmscontentzoom_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onmsmanipulationstatechanged
      {
        get
        {
          return this._onmsmanipulationstatechanged_BackingField;
        }
        set
        {
          this._onmsmanipulationstatechanged_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.oncopyFn onpaste
      {
        get
        {
          return this._onpaste_BackingField;
        }
        set
        {
          this._onpaste_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onpause
      {
        get
        {
          return this._onpause_BackingField;
        }
        set
        {
          this._onpause_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onplay
      {
        get
        {
          return this._onplay_BackingField;
        }
        set
        {
          this._onplay_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onplaying
      {
        get
        {
          return this._onplaying_BackingField;
        }
        set
        {
          this._onplaying_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onprogressFn onprogress
      {
        get
        {
          return this._onprogress_BackingField;
        }
        set
        {
          this._onprogress_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onratechange
      {
        get
        {
          return this._onratechange_BackingField;
        }
        set
        {
          this._onratechange_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onreset
      {
        get
        {
          return this._onreset_BackingField;
        }
        set
        {
          this._onreset_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onabortFn onscroll
      {
        get
        {
          return this._onscroll_BackingField;
        }
        set
        {
          this._onscroll_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onseeked
      {
        get
        {
          return this._onseeked_BackingField;
        }
        set
        {
          this._onseeked_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onseeking
      {
        get
        {
          return this._onseeking_BackingField;
        }
        set
        {
          this._onseeking_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onabortFn onselect
      {
        get
        {
          return this._onselect_BackingField;
        }
        set
        {
          this._onselect_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onselectstart
      {
        get
        {
          return this._onselectstart_BackingField;
        }
        set
        {
          this._onselectstart_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onstalled
      {
        get
        {
          return this._onstalled_BackingField;
        }
        set
        {
          this._onstalled_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onsubmit
      {
        get
        {
          return this._onsubmit_BackingField;
        }
        set
        {
          this._onsubmit_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onsuspend
      {
        get
        {
          return this._onsuspend_BackingField;
        }
        set
        {
          this._onsuspend_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn ontimeupdate
      {
        get
        {
          return this._ontimeupdate_BackingField;
        }
        set
        {
          this._ontimeupdate_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onvolumechange
      {
        get
        {
          return this._onvolumechange_BackingField;
        }
        set
        {
          this._onvolumechange_BackingField = value;
        }
      }

      public virtual dom.HTMLElement.onactivateFn onwaiting
      {
        get
        {
          return this._onwaiting_BackingField;
        }
        set
        {
          this._onwaiting_BackingField = value;
        }
      }

      public virtual string outerText
      {
        get
        {
          return this._outerText_BackingField;
        }
        set
        {
          this._outerText_BackingField = value;
        }
      }

      public virtual bool spellcheck
      {
        get
        {
          return this._spellcheck_BackingField;
        }
        set
        {
          this._spellcheck_BackingField = value;
        }
      }

      public virtual int tabIndex
      {
        get
        {
          return this._tabIndex_BackingField;
        }
        set
        {
          this._tabIndex_BackingField = value;
        }
      }

      public virtual string title
      {
        get
        {
          return this._title_BackingField;
        }
        set
        {
          this._title_BackingField = value;
        }
      }

      public virtual extern dom.Animation animate(
        Union<dom.AnimationKeyFrame, dom.AnimationKeyFrame[]> keyframes,
        Union<double, dom.AnimationOptions> options);

      public virtual extern dom.Animation animate(
        dom.AnimationKeyFrame keyframes,
        double options);

      public virtual extern dom.Animation animate(
        dom.AnimationKeyFrame keyframes,
        dom.AnimationOptions options);

      public virtual extern dom.Animation animate(
        dom.AnimationKeyFrame[] keyframes,
        double options);

      public virtual extern dom.Animation animate(
        dom.AnimationKeyFrame[] keyframes,
        dom.AnimationOptions options);

      public virtual extern void blur();

      public virtual extern void click();

      public virtual extern bool dragDrop();

      public virtual extern void focus();

      public virtual extern dom.MSInputMethodContext msGetInputContext();

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void addEventListener(string type, Action listenerFn);

      [Where("T", typeof (dom.Event), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<T>(string type, Action<T> listenerFn);

      public virtual dom.CSSStyleDeclaration style
      {
        get
        {
          return this._style_BackingField;
        }
      }

      [Generated]
      public delegate void onabortFn(dom.UIEvent ev);

      [Generated]
      public delegate void onactivateFn(dom.Event ev);

      [Generated]
      public delegate void onblurFn(dom.FocusEvent ev);

      [Generated]
      public delegate void onclickFn(dom.MouseEvent ev);

      [Generated]
      public delegate void oncontextmenuFn(dom.PointerEvent ev);

      [Generated]
      public delegate void oncopyFn(dom.ClipboardEvent ev);

      [Generated]
      public delegate void ondragFn(dom.DragEvent ev);

      [Generated]
      public delegate void onerrorFn(dom.ErrorEvent ev);

      [Generated]
      public delegate void onkeydownFn(dom.KeyboardEvent ev);

      [Generated]
      public delegate void onmousewheelFn(dom.WheelEvent ev);

      [Generated]
      public delegate void onprogressFn(dom.ProgressEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLEmbedElement : dom.HTMLElement, dom.GetSVGDocument.Interface, IObject
    {
      private static dom.HTMLEmbedElement _prototype_BackingField;
      private string _height_BackingField;
      private object _hidden_BackingField;
      private bool _msPlayToDisabled_BackingField;
      private string _msPlayToPreferredSourceUri_BackingField;
      private bool _msPlayToPrimary_BackingField;
      private readonly object _msPlayToSource_BackingField;
      private string _name_BackingField;
      private readonly string _palette_BackingField;
      private readonly string _pluginspage_BackingField;
      private readonly string _readyState_BackingField;
      private string _src_BackingField;
      private string _units_BackingField;
      private string _width_BackingField;

      [Template("document.createElement(\"embed\")")]
      public extern HTMLEmbedElement();

      public static dom.HTMLEmbedElement prototype
      {
        get
        {
          return dom.HTMLEmbedElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLEmbedElement._prototype_BackingField = value;
        }
      }

      public virtual string height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual object hidden
      {
        get
        {
          return this._hidden_BackingField;
        }
        set
        {
          this._hidden_BackingField = value;
        }
      }

      public virtual bool msPlayToDisabled
      {
        get
        {
          return this._msPlayToDisabled_BackingField;
        }
        set
        {
          this._msPlayToDisabled_BackingField = value;
        }
      }

      public virtual string msPlayToPreferredSourceUri
      {
        get
        {
          return this._msPlayToPreferredSourceUri_BackingField;
        }
        set
        {
          this._msPlayToPreferredSourceUri_BackingField = value;
        }
      }

      public virtual bool msPlayToPrimary
      {
        get
        {
          return this._msPlayToPrimary_BackingField;
        }
        set
        {
          this._msPlayToPrimary_BackingField = value;
        }
      }

      public virtual object msPlayToSource
      {
        get
        {
          return this._msPlayToSource_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual string palette
      {
        get
        {
          return this._palette_BackingField;
        }
      }

      public virtual string pluginspage
      {
        get
        {
          return this._pluginspage_BackingField;
        }
      }

      public virtual string readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual string src
      {
        get
        {
          return this._src_BackingField;
        }
        set
        {
          this._src_BackingField = value;
        }
      }

      public virtual string units
      {
        get
        {
          return this._units_BackingField;
        }
        set
        {
          this._units_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLEmbedElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLEmbedElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLEmbedElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLEmbedElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLEmbedElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLEmbedElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLEmbedElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLEmbedElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern dom.Document getSVGDocument();

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLFieldSetElement : dom.HTMLElement
    {
      private static dom.HTMLFieldSetElement _prototype_BackingField;
      private string _align_BackingField;
      private bool _disabled_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private string _name_BackingField;
      private readonly string _validationMessage_BackingField;
      private readonly dom.ValidityState _validity_BackingField;
      private readonly bool _willValidate_BackingField;

      [Template("document.createElement(\"fieldset\")")]
      public extern HTMLFieldSetElement();

      public static dom.HTMLFieldSetElement prototype
      {
        get
        {
          return dom.HTMLFieldSetElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLFieldSetElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual string validationMessage
      {
        get
        {
          return this._validationMessage_BackingField;
        }
      }

      public virtual dom.ValidityState validity
      {
        get
        {
          return this._validity_BackingField;
        }
      }

      public virtual bool willValidate
      {
        get
        {
          return this._willValidate_BackingField;
        }
      }

      public virtual extern bool checkValidity();

      public virtual extern void setCustomValidity(string error);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFieldSetElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFieldSetElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFieldSetElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFieldSetElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFieldSetElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFieldSetElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFieldSetElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFieldSetElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLFontElement : dom.HTMLElement, dom.DOML2DeprecatedColorProperty.Interface, IObject, dom.DOML2DeprecatedSizeProperty.Interface
    {
      private static dom.HTMLFontElement _prototype_BackingField;
      private string _face_BackingField;
      private string _color_BackingField;
      private double _size_BackingField;

      [Template("document.createElement(\"font\")")]
      public extern HTMLFontElement();

      public static dom.HTMLFontElement prototype
      {
        get
        {
          return dom.HTMLFontElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLFontElement._prototype_BackingField = value;
        }
      }

      public virtual string face
      {
        get
        {
          return this._face_BackingField;
        }
        set
        {
          this._face_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFontElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFontElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFontElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFontElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFontElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFontElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFontElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFontElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual string color
      {
        get
        {
          return this._color_BackingField;
        }
        set
        {
          this._color_BackingField = value;
        }
      }

      public virtual double size
      {
        get
        {
          return this._size_BackingField;
        }
        set
        {
          this._size_BackingField = value;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLFormControlsCollection : dom.HTMLCollectionBase
    {
      private static dom.HTMLFormControlsCollection _prototype_BackingField;

      public static dom.HTMLFormControlsCollection prototype
      {
        get
        {
          return dom.HTMLFormControlsCollection._prototype_BackingField;
        }
        set
        {
          dom.HTMLFormControlsCollection._prototype_BackingField = value;
        }
      }

      public virtual extern Union<dom.HTMLCollection, dom.Element, Null> namedItem(
        string name);

      public override extern uint length { get; }

      public override extern dom.Element item(uint index);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLFormElement : dom.HTMLElement
    {
      private static dom.HTMLFormElement _prototype_BackingField;
      private string _acceptCharset_BackingField;
      private string _action_BackingField;
      private string _autocomplete_BackingField;
      private readonly dom.HTMLFormControlsCollection _elements_BackingField;
      private string _encoding_BackingField;
      private string _enctype_BackingField;
      private readonly uint _length_BackingField;
      private string _method_BackingField;
      private string _name_BackingField;
      private bool _noValidate_BackingField;
      private string _target_BackingField;

      [Template("document.createElement(\"form\")")]
      public extern HTMLFormElement();

      public static dom.HTMLFormElement prototype
      {
        get
        {
          return dom.HTMLFormElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLFormElement._prototype_BackingField = value;
        }
      }

      public virtual string acceptCharset
      {
        get
        {
          return this._acceptCharset_BackingField;
        }
        set
        {
          this._acceptCharset_BackingField = value;
        }
      }

      public virtual string action
      {
        get
        {
          return this._action_BackingField;
        }
        set
        {
          this._action_BackingField = value;
        }
      }

      public virtual string autocomplete
      {
        get
        {
          return this._autocomplete_BackingField;
        }
        set
        {
          this._autocomplete_BackingField = value;
        }
      }

      public virtual dom.HTMLFormControlsCollection elements
      {
        get
        {
          return this._elements_BackingField;
        }
      }

      public virtual string encoding
      {
        get
        {
          return this._encoding_BackingField;
        }
        set
        {
          this._encoding_BackingField = value;
        }
      }

      public virtual string enctype
      {
        get
        {
          return this._enctype_BackingField;
        }
        set
        {
          this._enctype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual string method
      {
        get
        {
          return this._method_BackingField;
        }
        set
        {
          this._method_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual bool noValidate
      {
        get
        {
          return this._noValidate_BackingField;
        }
        set
        {
          this._noValidate_BackingField = value;
        }
      }

      public virtual string target
      {
        get
        {
          return this._target_BackingField;
        }
        set
        {
          this._target_BackingField = value;
        }
      }

      public virtual extern bool checkValidity();

      public virtual extern object item();

      public virtual extern object item(object name);

      public virtual extern object item(object name, object index);

      public virtual extern object namedItem(string name);

      public virtual extern bool reportValidity();

      public virtual extern void reset();

      public virtual extern void submit();

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFormElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFormElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFormElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFormElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFormElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFormElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFormElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFormElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HTMLFrameElementEventMap : dom.HTMLElementEventMap
    {
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLFrameElement : dom.HTMLElement, dom.GetSVGDocument.Interface, IObject
    {
      private static dom.HTMLFrameElement _prototype_BackingField;
      private string _border_BackingField;
      private object _borderColor_BackingField;
      private readonly dom.Document _contentDocument_BackingField;
      private readonly dom.Window _contentWindow_BackingField;
      private string _frameBorder_BackingField;
      private object _frameSpacing_BackingField;
      private Union<string, double> _height_BackingField;
      private string _longDesc_BackingField;
      private string _marginHeight_BackingField;
      private string _marginWidth_BackingField;
      private string _name_BackingField;
      private bool _noResize_BackingField;
      private string _scrolling_BackingField;
      private string _src_BackingField;
      private Union<string, double> _width_BackingField;

      [Template("document.createElement(\"frame\")")]
      public extern HTMLFrameElement();

      public static dom.HTMLFrameElement prototype
      {
        get
        {
          return dom.HTMLFrameElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLFrameElement._prototype_BackingField = value;
        }
      }

      public virtual string border
      {
        get
        {
          return this._border_BackingField;
        }
        set
        {
          this._border_BackingField = value;
        }
      }

      public virtual object borderColor
      {
        get
        {
          return this._borderColor_BackingField;
        }
        set
        {
          this._borderColor_BackingField = value;
        }
      }

      public virtual dom.Document contentDocument
      {
        get
        {
          return this._contentDocument_BackingField;
        }
      }

      public virtual dom.Window contentWindow
      {
        get
        {
          return this._contentWindow_BackingField;
        }
      }

      public virtual string frameBorder
      {
        get
        {
          return this._frameBorder_BackingField;
        }
        set
        {
          this._frameBorder_BackingField = value;
        }
      }

      public virtual object frameSpacing
      {
        get
        {
          return this._frameSpacing_BackingField;
        }
        set
        {
          this._frameSpacing_BackingField = value;
        }
      }

      public virtual Union<string, double> height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual string longDesc
      {
        get
        {
          return this._longDesc_BackingField;
        }
        set
        {
          this._longDesc_BackingField = value;
        }
      }

      public virtual string marginHeight
      {
        get
        {
          return this._marginHeight_BackingField;
        }
        set
        {
          this._marginHeight_BackingField = value;
        }
      }

      public virtual string marginWidth
      {
        get
        {
          return this._marginWidth_BackingField;
        }
        set
        {
          this._marginWidth_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual bool noResize
      {
        get
        {
          return this._noResize_BackingField;
        }
        set
        {
          this._noResize_BackingField = value;
        }
      }

      public virtual string scrolling
      {
        get
        {
          return this._scrolling_BackingField;
        }
        set
        {
          this._scrolling_BackingField = value;
        }
      }

      public virtual string src
      {
        get
        {
          return this._src_BackingField;
        }
        set
        {
          this._src_BackingField = value;
        }
      }

      public virtual Union<string, double> width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFrameElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFrameElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFrameElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFrameElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFrameElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFrameElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFrameElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFrameElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern dom.Document getSVGDocument();

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLFrameElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HTMLFrameSetElementEventMap : dom.HTMLElementEventMap, dom.WindowEventHandlersEventMap.Interface, IObject
    {
      private dom.Event _orientationchange_BackingField;
      private dom.UIEvent _resize_BackingField;
      private dom.Event _afterprint_BackingField;
      private dom.Event _beforeprint_BackingField;
      private dom.BeforeUnloadEvent _beforeunload_BackingField;
      private dom.HashChangeEvent _hashchange_BackingField;
      private dom.MessageEvent _message_BackingField;
      private dom.Event _offline_BackingField;
      private dom.Event _online_BackingField;
      private dom.PageTransitionEvent _pagehide_BackingField;
      private dom.PageTransitionEvent _pageshow_BackingField;
      private dom.PopStateEvent _popstate_BackingField;
      private dom.StorageEvent _storage_BackingField;
      private dom.Event _unload_BackingField;

      public dom.Event orientationchange
      {
        get
        {
          return this._orientationchange_BackingField;
        }
        set
        {
          this._orientationchange_BackingField = value;
        }
      }

      public dom.UIEvent resize
      {
        get
        {
          return this._resize_BackingField;
        }
        set
        {
          this._resize_BackingField = value;
        }
      }

      public dom.Event afterprint
      {
        get
        {
          return this._afterprint_BackingField;
        }
        set
        {
          this._afterprint_BackingField = value;
        }
      }

      public dom.Event beforeprint
      {
        get
        {
          return this._beforeprint_BackingField;
        }
        set
        {
          this._beforeprint_BackingField = value;
        }
      }

      public dom.BeforeUnloadEvent beforeunload
      {
        get
        {
          return this._beforeunload_BackingField;
        }
        set
        {
          this._beforeunload_BackingField = value;
        }
      }

      public dom.HashChangeEvent hashchange
      {
        get
        {
          return this._hashchange_BackingField;
        }
        set
        {
          this._hashchange_BackingField = value;
        }
      }

      public dom.MessageEvent message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      public dom.Event offline
      {
        get
        {
          return this._offline_BackingField;
        }
        set
        {
          this._offline_BackingField = value;
        }
      }

      public dom.Event online
      {
        get
        {
          return this._online_BackingField;
        }
        set
        {
          this._online_BackingField = value;
        }
      }

      public dom.PageTransitionEvent pagehide
      {
        get
        {
          return this._pagehide_BackingField;
        }
        set
        {
          this._pagehide_BackingField = value;
        }
      }

      public dom.PageTransitionEvent pageshow
      {
        get
        {
          return this._pageshow_BackingField;
        }
        set
        {
          this._pageshow_BackingField = value;
        }
      }

      public dom.PopStateEvent popstate
      {
        get
        {
          return this._popstate_BackingField;
        }
        set
        {
          this._popstate_BackingField = value;
        }
      }

      public dom.StorageEvent storage
      {
        get
        {
          return this._storage_BackingField;
        }
        set
        {
          this._storage_BackingField = value;
        }
      }

      public dom.Event unload
      {
        get
        {
          return this._unload_BackingField;
        }
        set
        {
          this._unload_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"orientationchange\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> orientationchange;
        [Template("\"resize\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> resize;
        [Template("\"afterprint\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> afterprint;
        [Template("\"beforeprint\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> beforeprint;
        [Template("\"beforeunload\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> beforeunload;
        [Template("\"hashchange\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> hashchange;
        [Template("\"message\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> message;
        [Template("\"offline\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> offline;
        [Template("\"online\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> online;
        [Template("\"pagehide\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> pagehide;
        [Template("\"pageshow\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> pageshow;
        [Template("\"popstate\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> popstate;
        [Template("\"storage\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> storage;
        [Template("\"unload\"")]
        public static readonly KeyOf<dom.HTMLFrameSetElementEventMap> unload;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLFrameSetElement : dom.HTMLElement, dom.WindowEventHandlers.Interface, IObject
    {
      private static dom.HTMLFrameSetElement _prototype_BackingField;
      private string _cols_BackingField;
      private string _name_BackingField;
      private dom.HTMLFrameSetElement.onorientationchangeFn _onorientationchange_BackingField;
      private dom.HTMLFrameSetElement.onresizeFn _onresize_BackingField;
      private string _rows_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onafterprint_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onbeforeprint_BackingField;
      private dom.WindowEventHandlers.onbeforeunloadFn _onbeforeunload_BackingField;
      private dom.WindowEventHandlers.onhashchangeFn _onhashchange_BackingField;
      private dom.WindowEventHandlers.onmessageFn _onmessage_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onoffline_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _ononline_BackingField;
      private dom.WindowEventHandlers.onpagehideFn _onpagehide_BackingField;
      private dom.WindowEventHandlers.onpagehideFn _onpageshow_BackingField;
      private dom.WindowEventHandlers.onpopstateFn _onpopstate_BackingField;
      private dom.WindowEventHandlers.onstorageFn _onstorage_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onunload_BackingField;

      [Template("document.createElement(\"frameset\")")]
      public extern HTMLFrameSetElement();

      public static dom.HTMLFrameSetElement prototype
      {
        get
        {
          return dom.HTMLFrameSetElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLFrameSetElement._prototype_BackingField = value;
        }
      }

      public virtual string cols
      {
        get
        {
          return this._cols_BackingField;
        }
        set
        {
          this._cols_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual dom.HTMLFrameSetElement.onorientationchangeFn onorientationchange
      {
        get
        {
          return this._onorientationchange_BackingField;
        }
        set
        {
          this._onorientationchange_BackingField = value;
        }
      }

      public virtual dom.HTMLFrameSetElement.onresizeFn onresize
      {
        get
        {
          return this._onresize_BackingField;
        }
        set
        {
          this._onresize_BackingField = value;
        }
      }

      public virtual string rows
      {
        get
        {
          return this._rows_BackingField;
        }
        set
        {
          this._rows_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFrameSetElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFrameSetElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFrameSetElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLFrameSetElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFrameSetElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFrameSetElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFrameSetElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLFrameSetElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.WindowEventHandlers.onafterprintFn onafterprint
      {
        get
        {
          return this._onafterprint_BackingField;
        }
        set
        {
          this._onafterprint_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn onbeforeprint
      {
        get
        {
          return this._onbeforeprint_BackingField;
        }
        set
        {
          this._onbeforeprint_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onbeforeunloadFn onbeforeunload
      {
        get
        {
          return this._onbeforeunload_BackingField;
        }
        set
        {
          this._onbeforeunload_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onhashchangeFn onhashchange
      {
        get
        {
          return this._onhashchange_BackingField;
        }
        set
        {
          this._onhashchange_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn onoffline
      {
        get
        {
          return this._onoffline_BackingField;
        }
        set
        {
          this._onoffline_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn ononline
      {
        get
        {
          return this._ononline_BackingField;
        }
        set
        {
          this._ononline_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onpagehideFn onpagehide
      {
        get
        {
          return this._onpagehide_BackingField;
        }
        set
        {
          this._onpagehide_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onpagehideFn onpageshow
      {
        get
        {
          return this._onpageshow_BackingField;
        }
        set
        {
          this._onpageshow_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onpopstateFn onpopstate
      {
        get
        {
          return this._onpopstate_BackingField;
        }
        set
        {
          this._onpopstate_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onstorageFn onstorage
      {
        get
        {
          return this._onstorage_BackingField;
        }
        set
        {
          this._onstorage_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn onunload
      {
        get
        {
          return this._onunload_BackingField;
        }
        set
        {
          this._onunload_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onorientationchangeFn(dom.Event ev);

      [Generated]
      public delegate void onresizeFn(dom.UIEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLFrameSetElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLHRElement : dom.HTMLElement, dom.DOML2DeprecatedColorProperty.Interface, IObject, dom.DOML2DeprecatedSizeProperty.Interface
    {
      private static dom.HTMLHRElement _prototype_BackingField;
      private string _align_BackingField;
      private bool _noShade_BackingField;
      private string _width_BackingField;
      private string _color_BackingField;
      private double _size_BackingField;

      [Template("document.createElement(\"hr\")")]
      public extern HTMLHRElement();

      public static dom.HTMLHRElement prototype
      {
        get
        {
          return dom.HTMLHRElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLHRElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual bool noShade
      {
        get
        {
          return this._noShade_BackingField;
        }
        set
        {
          this._noShade_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHRElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHRElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHRElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHRElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHRElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHRElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHRElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHRElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual string color
      {
        get
        {
          return this._color_BackingField;
        }
        set
        {
          this._color_BackingField = value;
        }
      }

      public virtual double size
      {
        get
        {
          return this._size_BackingField;
        }
        set
        {
          this._size_BackingField = value;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLHeadElement : dom.HTMLElement
    {
      private static dom.HTMLHeadElement _prototype_BackingField;
      private string _profile_BackingField;

      [Template("document.createElement(\"head\")")]
      public extern HTMLHeadElement();

      public static dom.HTMLHeadElement prototype
      {
        get
        {
          return dom.HTMLHeadElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLHeadElement._prototype_BackingField = value;
        }
      }

      public virtual string profile
      {
        get
        {
          return this._profile_BackingField;
        }
        set
        {
          this._profile_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHeadElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHeadElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHeadElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHeadElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHeadElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHeadElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHeadElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHeadElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLHeadingElement : dom.HTMLElement
    {
      private static dom.HTMLHeadingElement _prototype_BackingField;
      private string _align_BackingField;

      [Template("document.createElement(\"h1\")")]
      public extern HTMLHeadingElement();

      public static dom.HTMLHeadingElement prototype
      {
        get
        {
          return dom.HTMLHeadingElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLHeadingElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHeadingElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHeadingElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHeadingElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHeadingElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHeadingElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHeadingElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHeadingElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHeadingElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLHtmlElement : dom.HTMLElement
    {
      private static dom.HTMLHtmlElement _prototype_BackingField;
      private string _version_BackingField;

      [Template("document.createElement(\"html\")")]
      public extern HTMLHtmlElement();

      public static dom.HTMLHtmlElement prototype
      {
        get
        {
          return dom.HTMLHtmlElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLHtmlElement._prototype_BackingField = value;
        }
      }

      public virtual string version
      {
        get
        {
          return this._version_BackingField;
        }
        set
        {
          this._version_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHtmlElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHtmlElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHtmlElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLHtmlElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHtmlElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHtmlElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHtmlElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLHtmlElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class HTMLHyperlinkElementUtils : dom.HTMLHyperlinkElementUtils.Interface, IObject
    {
      private string _hash_BackingField;
      private string _host_BackingField;
      private string _hostname_BackingField;
      private string _href_BackingField;
      private string _origin_BackingField;
      private string _pathname_BackingField;
      private string _port_BackingField;
      private string _protocol_BackingField;
      private string _search_BackingField;

      public virtual string hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public virtual string host
      {
        get
        {
          return this._host_BackingField;
        }
        set
        {
          this._host_BackingField = value;
        }
      }

      public virtual string hostname
      {
        get
        {
          return this._hostname_BackingField;
        }
        set
        {
          this._hostname_BackingField = value;
        }
      }

      public virtual string href
      {
        get
        {
          return this._href_BackingField;
        }
        set
        {
          this._href_BackingField = value;
        }
      }

      public virtual string origin
      {
        get
        {
          return this._origin_BackingField;
        }
        set
        {
          this._origin_BackingField = value;
        }
      }

      public virtual string pathname
      {
        get
        {
          return this._pathname_BackingField;
        }
        set
        {
          this._pathname_BackingField = value;
        }
      }

      public virtual string port
      {
        get
        {
          return this._port_BackingField;
        }
        set
        {
          this._port_BackingField = value;
        }
      }

      public virtual string protocol
      {
        get
        {
          return this._protocol_BackingField;
        }
        set
        {
          this._protocol_BackingField = value;
        }
      }

      public virtual string search
      {
        get
        {
          return this._search_BackingField;
        }
        set
        {
          this._search_BackingField = value;
        }
      }

      public abstract string toString();

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        string hash { get; set; }

        string host { get; set; }

        string hostname { get; set; }

        string href { get; set; }

        string origin { get; set; }

        string pathname { get; set; }

        string port { get; set; }

        string protocol { get; set; }

        string search { get; set; }

        string toString();
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HTMLIFrameElementEventMap : dom.HTMLElementEventMap
    {
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLIFrameElement : dom.HTMLElement, dom.GetSVGDocument.Interface, IObject
    {
      private static dom.HTMLIFrameElement _prototype_BackingField;
      private string _align_BackingField;
      private bool _allowFullscreen_BackingField;
      private bool _allowPaymentRequest_BackingField;
      private readonly dom.Document _contentDocument_BackingField;
      private readonly dom.Window _contentWindow_BackingField;
      private string _frameBorder_BackingField;
      private string _height_BackingField;
      private string _longDesc_BackingField;
      private string _marginHeight_BackingField;
      private string _marginWidth_BackingField;
      private string _name_BackingField;
      private readonly dom.DOMTokenList _sandbox_BackingField;
      private string _scrolling_BackingField;
      private string _src_BackingField;
      private string _srcdoc_BackingField;
      private string _width_BackingField;

      [Template("document.createElement(\"iframe\")")]
      public extern HTMLIFrameElement();

      public static dom.HTMLIFrameElement prototype
      {
        get
        {
          return dom.HTMLIFrameElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLIFrameElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual bool allowFullscreen
      {
        get
        {
          return this._allowFullscreen_BackingField;
        }
        set
        {
          this._allowFullscreen_BackingField = value;
        }
      }

      public virtual bool allowPaymentRequest
      {
        get
        {
          return this._allowPaymentRequest_BackingField;
        }
        set
        {
          this._allowPaymentRequest_BackingField = value;
        }
      }

      public virtual dom.Document contentDocument
      {
        get
        {
          return this._contentDocument_BackingField;
        }
      }

      public virtual dom.Window contentWindow
      {
        get
        {
          return this._contentWindow_BackingField;
        }
      }

      public virtual string frameBorder
      {
        get
        {
          return this._frameBorder_BackingField;
        }
        set
        {
          this._frameBorder_BackingField = value;
        }
      }

      public virtual string height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual string longDesc
      {
        get
        {
          return this._longDesc_BackingField;
        }
        set
        {
          this._longDesc_BackingField = value;
        }
      }

      public virtual string marginHeight
      {
        get
        {
          return this._marginHeight_BackingField;
        }
        set
        {
          this._marginHeight_BackingField = value;
        }
      }

      public virtual string marginWidth
      {
        get
        {
          return this._marginWidth_BackingField;
        }
        set
        {
          this._marginWidth_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual dom.DOMTokenList sandbox
      {
        get
        {
          return this._sandbox_BackingField;
        }
      }

      public virtual string scrolling
      {
        get
        {
          return this._scrolling_BackingField;
        }
        set
        {
          this._scrolling_BackingField = value;
        }
      }

      public virtual string src
      {
        get
        {
          return this._src_BackingField;
        }
        set
        {
          this._src_BackingField = value;
        }
      }

      public virtual string srcdoc
      {
        get
        {
          return this._srcdoc_BackingField;
        }
        set
        {
          this._srcdoc_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLIFrameElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLIFrameElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLIFrameElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLIFrameElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLIFrameElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLIFrameElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLIFrameElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLIFrameElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern dom.Document getSVGDocument();

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLIFrameElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLImageElement : dom.HTMLElement
    {
      private static dom.HTMLImageElement _prototype_BackingField;
      private string _align_BackingField;
      private string _alt_BackingField;
      private string _border_BackingField;
      private readonly bool _complete_BackingField;
      private string _crossOrigin_BackingField;
      private readonly string _currentSrc_BackingField;
      private dom.Literals.Options.decoding _decoding_BackingField;
      private uint _height_BackingField;
      private uint _hspace_BackingField;
      private bool _isMap_BackingField;
      private string _longDesc_BackingField;
      private string _lowsrc_BackingField;
      private bool _msPlayToDisabled_BackingField;
      private string _msPlayToPreferredSourceUri_BackingField;
      private bool _msPlayToPrimary_BackingField;
      private readonly object _msPlayToSource_BackingField;
      private string _name_BackingField;
      private readonly uint _naturalHeight_BackingField;
      private readonly uint _naturalWidth_BackingField;
      private string _sizes_BackingField;
      private string _src_BackingField;
      private string _srcset_BackingField;
      private string _useMap_BackingField;
      private uint _vspace_BackingField;
      private uint _width_BackingField;
      private readonly int _x_BackingField;
      private readonly int _y_BackingField;

      [Template("document.createElement(\"img\")")]
      public extern HTMLImageElement();

      public static dom.HTMLImageElement prototype
      {
        get
        {
          return dom.HTMLImageElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLImageElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string alt
      {
        get
        {
          return this._alt_BackingField;
        }
        set
        {
          this._alt_BackingField = value;
        }
      }

      public virtual string border
      {
        get
        {
          return this._border_BackingField;
        }
        set
        {
          this._border_BackingField = value;
        }
      }

      public virtual bool complete
      {
        get
        {
          return this._complete_BackingField;
        }
      }

      public virtual string crossOrigin
      {
        get
        {
          return this._crossOrigin_BackingField;
        }
        set
        {
          this._crossOrigin_BackingField = value;
        }
      }

      public virtual string currentSrc
      {
        get
        {
          return this._currentSrc_BackingField;
        }
      }

      public virtual dom.Literals.Options.decoding decoding
      {
        get
        {
          return this._decoding_BackingField;
        }
        set
        {
          this._decoding_BackingField = value;
        }
      }

      public virtual uint height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual uint hspace
      {
        get
        {
          return this._hspace_BackingField;
        }
        set
        {
          this._hspace_BackingField = value;
        }
      }

      public virtual bool isMap
      {
        get
        {
          return this._isMap_BackingField;
        }
        set
        {
          this._isMap_BackingField = value;
        }
      }

      public virtual string longDesc
      {
        get
        {
          return this._longDesc_BackingField;
        }
        set
        {
          this._longDesc_BackingField = value;
        }
      }

      public virtual string lowsrc
      {
        get
        {
          return this._lowsrc_BackingField;
        }
        set
        {
          this._lowsrc_BackingField = value;
        }
      }

      public virtual bool msPlayToDisabled
      {
        get
        {
          return this._msPlayToDisabled_BackingField;
        }
        set
        {
          this._msPlayToDisabled_BackingField = value;
        }
      }

      public virtual string msPlayToPreferredSourceUri
      {
        get
        {
          return this._msPlayToPreferredSourceUri_BackingField;
        }
        set
        {
          this._msPlayToPreferredSourceUri_BackingField = value;
        }
      }

      public virtual bool msPlayToPrimary
      {
        get
        {
          return this._msPlayToPrimary_BackingField;
        }
        set
        {
          this._msPlayToPrimary_BackingField = value;
        }
      }

      public virtual object msPlayToSource
      {
        get
        {
          return this._msPlayToSource_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual uint naturalHeight
      {
        get
        {
          return this._naturalHeight_BackingField;
        }
      }

      public virtual uint naturalWidth
      {
        get
        {
          return this._naturalWidth_BackingField;
        }
      }

      public virtual string sizes
      {
        get
        {
          return this._sizes_BackingField;
        }
        set
        {
          this._sizes_BackingField = value;
        }
      }

      public virtual string src
      {
        get
        {
          return this._src_BackingField;
        }
        set
        {
          this._src_BackingField = value;
        }
      }

      public virtual string srcset
      {
        get
        {
          return this._srcset_BackingField;
        }
        set
        {
          this._srcset_BackingField = value;
        }
      }

      public virtual string useMap
      {
        get
        {
          return this._useMap_BackingField;
        }
        set
        {
          this._useMap_BackingField = value;
        }
      }

      public virtual uint vspace
      {
        get
        {
          return this._vspace_BackingField;
        }
        set
        {
          this._vspace_BackingField = value;
        }
      }

      public virtual uint width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public virtual int x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual int y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      public virtual extern object msGetAsCastingSource();

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLImageElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLImageElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLImageElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLImageElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLImageElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLImageElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLImageElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLImageElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLInputElement : dom.HTMLElement
    {
      private static dom.HTMLInputElement _prototype_BackingField;
      private string _accept_BackingField;
      private string _align_BackingField;
      private string _alt_BackingField;
      private string _autocomplete_BackingField;
      private bool _autofocus_BackingField;
      private bool _checked_BackingField;
      private bool _defaultChecked_BackingField;
      private string _defaultValue_BackingField;
      private bool _disabled_BackingField;
      private readonly dom.FileList _files_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private string _formAction_BackingField;
      private string _formEnctype_BackingField;
      private string _formMethod_BackingField;
      private bool _formNoValidate_BackingField;
      private string _formTarget_BackingField;
      private uint _height_BackingField;
      private bool _indeterminate_BackingField;
      private readonly dom.HTMLElement _list_BackingField;
      private string _max_BackingField;
      private int _maxLength_BackingField;
      private string _min_BackingField;
      private int _minLength_BackingField;
      private bool _multiple_BackingField;
      private string _name_BackingField;
      private string _pattern_BackingField;
      private string _placeholder_BackingField;
      private bool _readOnly_BackingField;
      private bool _required_BackingField;
      private string _selectionDirection_BackingField;
      private uint? _selectionEnd_BackingField;
      private uint? _selectionStart_BackingField;
      private uint _size_BackingField;
      private string _src_BackingField;
      private string _step_BackingField;
      private string _type_BackingField;
      private string _useMap_BackingField;
      private readonly string _validationMessage_BackingField;
      private readonly dom.ValidityState _validity_BackingField;
      private string _value_BackingField;
      private object _valueAsDate_BackingField;
      private double _valueAsNumber_BackingField;
      private bool _webkitdirectory_BackingField;
      private uint _width_BackingField;
      private readonly bool _willValidate_BackingField;

      [Template("document.createElement(\"input\")")]
      public extern HTMLInputElement();

      public static dom.HTMLInputElement prototype
      {
        get
        {
          return dom.HTMLInputElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLInputElement._prototype_BackingField = value;
        }
      }

      public virtual string accept
      {
        get
        {
          return this._accept_BackingField;
        }
        set
        {
          this._accept_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string alt
      {
        get
        {
          return this._alt_BackingField;
        }
        set
        {
          this._alt_BackingField = value;
        }
      }

      public virtual string autocomplete
      {
        get
        {
          return this._autocomplete_BackingField;
        }
        set
        {
          this._autocomplete_BackingField = value;
        }
      }

      public virtual bool autofocus
      {
        get
        {
          return this._autofocus_BackingField;
        }
        set
        {
          this._autofocus_BackingField = value;
        }
      }

      [Name("checked")]
      public virtual bool @checked
      {
        get
        {
          return this._checked_BackingField;
        }
        set
        {
          this._checked_BackingField = value;
        }
      }

      public virtual bool defaultChecked
      {
        get
        {
          return this._defaultChecked_BackingField;
        }
        set
        {
          this._defaultChecked_BackingField = value;
        }
      }

      public virtual string defaultValue
      {
        get
        {
          return this._defaultValue_BackingField;
        }
        set
        {
          this._defaultValue_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual dom.FileList files
      {
        get
        {
          return this._files_BackingField;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual string formAction
      {
        get
        {
          return this._formAction_BackingField;
        }
        set
        {
          this._formAction_BackingField = value;
        }
      }

      public virtual string formEnctype
      {
        get
        {
          return this._formEnctype_BackingField;
        }
        set
        {
          this._formEnctype_BackingField = value;
        }
      }

      public virtual string formMethod
      {
        get
        {
          return this._formMethod_BackingField;
        }
        set
        {
          this._formMethod_BackingField = value;
        }
      }

      public virtual bool formNoValidate
      {
        get
        {
          return this._formNoValidate_BackingField;
        }
        set
        {
          this._formNoValidate_BackingField = value;
        }
      }

      public virtual string formTarget
      {
        get
        {
          return this._formTarget_BackingField;
        }
        set
        {
          this._formTarget_BackingField = value;
        }
      }

      public virtual uint height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual bool indeterminate
      {
        get
        {
          return this._indeterminate_BackingField;
        }
        set
        {
          this._indeterminate_BackingField = value;
        }
      }

      public virtual dom.HTMLElement list
      {
        get
        {
          return this._list_BackingField;
        }
      }

      public virtual string max
      {
        get
        {
          return this._max_BackingField;
        }
        set
        {
          this._max_BackingField = value;
        }
      }

      public virtual int maxLength
      {
        get
        {
          return this._maxLength_BackingField;
        }
        set
        {
          this._maxLength_BackingField = value;
        }
      }

      public virtual string min
      {
        get
        {
          return this._min_BackingField;
        }
        set
        {
          this._min_BackingField = value;
        }
      }

      public virtual int minLength
      {
        get
        {
          return this._minLength_BackingField;
        }
        set
        {
          this._minLength_BackingField = value;
        }
      }

      public virtual bool multiple
      {
        get
        {
          return this._multiple_BackingField;
        }
        set
        {
          this._multiple_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual string pattern
      {
        get
        {
          return this._pattern_BackingField;
        }
        set
        {
          this._pattern_BackingField = value;
        }
      }

      public virtual string placeholder
      {
        get
        {
          return this._placeholder_BackingField;
        }
        set
        {
          this._placeholder_BackingField = value;
        }
      }

      public virtual bool readOnly
      {
        get
        {
          return this._readOnly_BackingField;
        }
        set
        {
          this._readOnly_BackingField = value;
        }
      }

      public virtual bool required
      {
        get
        {
          return this._required_BackingField;
        }
        set
        {
          this._required_BackingField = value;
        }
      }

      public virtual string selectionDirection
      {
        get
        {
          return this._selectionDirection_BackingField;
        }
        set
        {
          this._selectionDirection_BackingField = value;
        }
      }

      public virtual uint? selectionEnd
      {
        get
        {
          return this._selectionEnd_BackingField;
        }
        set
        {
          this._selectionEnd_BackingField = value;
        }
      }

      public virtual uint? selectionStart
      {
        get
        {
          return this._selectionStart_BackingField;
        }
        set
        {
          this._selectionStart_BackingField = value;
        }
      }

      public virtual uint size
      {
        get
        {
          return this._size_BackingField;
        }
        set
        {
          this._size_BackingField = value;
        }
      }

      public virtual string src
      {
        get
        {
          return this._src_BackingField;
        }
        set
        {
          this._src_BackingField = value;
        }
      }

      public virtual string step
      {
        get
        {
          return this._step_BackingField;
        }
        set
        {
          this._step_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      public virtual string useMap
      {
        get
        {
          return this._useMap_BackingField;
        }
        set
        {
          this._useMap_BackingField = value;
        }
      }

      public virtual string validationMessage
      {
        get
        {
          return this._validationMessage_BackingField;
        }
      }

      public virtual dom.ValidityState validity
      {
        get
        {
          return this._validity_BackingField;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      public virtual object valueAsDate
      {
        get
        {
          return this._valueAsDate_BackingField;
        }
        set
        {
          this._valueAsDate_BackingField = value;
        }
      }

      public virtual double valueAsNumber
      {
        get
        {
          return this._valueAsNumber_BackingField;
        }
        set
        {
          this._valueAsNumber_BackingField = value;
        }
      }

      public virtual bool webkitdirectory
      {
        get
        {
          return this._webkitdirectory_BackingField;
        }
        set
        {
          this._webkitdirectory_BackingField = value;
        }
      }

      public virtual uint width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public virtual bool willValidate
      {
        get
        {
          return this._willValidate_BackingField;
        }
      }

      public virtual extern bool checkValidity();

      public virtual extern void select();

      public virtual extern void setCustomValidity(string error);

      public virtual extern void setSelectionRange(uint start, uint end);

      public virtual extern void setSelectionRange(
        uint start,
        uint end,
        dom.Literals.Options.direction2 direction);

      public virtual extern void stepDown();

      public virtual extern void stepDown(int n);

      public virtual extern void stepUp();

      public virtual extern void stepUp(int n);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLInputElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLInputElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLInputElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLInputElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLInputElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLInputElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLInputElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLInputElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLLIElement : dom.HTMLElement
    {
      private static dom.HTMLLIElement _prototype_BackingField;
      private string _type_BackingField;
      private int _value_BackingField;

      [Template("document.createElement(\"li\")")]
      public extern HTMLLIElement();

      public static dom.HTMLLIElement prototype
      {
        get
        {
          return dom.HTMLLIElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLLIElement._prototype_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      public virtual int value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLIElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLIElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLIElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLIElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLIElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLIElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLIElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLIElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLLabelElement : dom.HTMLElement
    {
      private static dom.HTMLLabelElement _prototype_BackingField;
      private readonly dom.HTMLInputElement _control_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private string _htmlFor_BackingField;

      [Template("document.createElement(\"label\")")]
      public extern HTMLLabelElement();

      public static dom.HTMLLabelElement prototype
      {
        get
        {
          return dom.HTMLLabelElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLLabelElement._prototype_BackingField = value;
        }
      }

      public virtual dom.HTMLInputElement control
      {
        get
        {
          return this._control_BackingField;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual string htmlFor
      {
        get
        {
          return this._htmlFor_BackingField;
        }
        set
        {
          this._htmlFor_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLabelElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLabelElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLabelElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLabelElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLabelElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLabelElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLabelElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLabelElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLLegendElement : dom.HTMLElement
    {
      private static dom.HTMLLegendElement _prototype_BackingField;
      private string _align_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;

      [Template("document.createElement(\"legend\")")]
      public extern HTMLLegendElement();

      public static dom.HTMLLegendElement prototype
      {
        get
        {
          return dom.HTMLLegendElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLLegendElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLegendElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLegendElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLegendElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLegendElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLegendElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLegendElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLegendElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLegendElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLLinkElement : dom.HTMLElement, dom.LinkStyle.Interface, IObject
    {
      private static dom.HTMLLinkElement _prototype_BackingField;
      private string _charset_BackingField;
      private string _crossOrigin_BackingField;
      private bool _disabled_BackingField;
      private string _href_BackingField;
      private string _hreflang_BackingField;
      private dom.Document _import_BackingField;
      private string _integrity_BackingField;
      private string _media_BackingField;
      private string _rel_BackingField;
      private string _rev_BackingField;
      private string _target_BackingField;
      private string _type_BackingField;
      private readonly dom.StyleSheet _sheet_BackingField;

      [Template("document.createElement(\"link\")")]
      public extern HTMLLinkElement();

      public static dom.HTMLLinkElement prototype
      {
        get
        {
          return dom.HTMLLinkElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLLinkElement._prototype_BackingField = value;
        }
      }

      public virtual string charset
      {
        get
        {
          return this._charset_BackingField;
        }
        set
        {
          this._charset_BackingField = value;
        }
      }

      public virtual string crossOrigin
      {
        get
        {
          return this._crossOrigin_BackingField;
        }
        set
        {
          this._crossOrigin_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual string href
      {
        get
        {
          return this._href_BackingField;
        }
        set
        {
          this._href_BackingField = value;
        }
      }

      public virtual string hreflang
      {
        get
        {
          return this._hreflang_BackingField;
        }
        set
        {
          this._hreflang_BackingField = value;
        }
      }

      public virtual dom.Document import
      {
        get
        {
          return this._import_BackingField;
        }
        set
        {
          this._import_BackingField = value;
        }
      }

      public virtual string integrity
      {
        get
        {
          return this._integrity_BackingField;
        }
        set
        {
          this._integrity_BackingField = value;
        }
      }

      public virtual string media
      {
        get
        {
          return this._media_BackingField;
        }
        set
        {
          this._media_BackingField = value;
        }
      }

      public virtual string rel
      {
        get
        {
          return this._rel_BackingField;
        }
        set
        {
          this._rel_BackingField = value;
        }
      }

      public virtual string rev
      {
        get
        {
          return this._rev_BackingField;
        }
        set
        {
          this._rev_BackingField = value;
        }
      }

      public virtual string target
      {
        get
        {
          return this._target_BackingField;
        }
        set
        {
          this._target_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLinkElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLinkElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLinkElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLLinkElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLinkElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLinkElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLinkElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLLinkElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.StyleSheet sheet
      {
        get
        {
          return this._sheet_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLMainElement : dom.HTMLElement
    {
      private static dom.HTMLMainElement _prototype_BackingField;

      public static dom.HTMLMainElement prototype
      {
        get
        {
          return dom.HTMLMainElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLMainElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMainElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMainElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMainElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMainElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMainElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMainElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMainElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMainElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLMapElement : dom.HTMLElement
    {
      private static dom.HTMLMapElement _prototype_BackingField;
      private readonly dom.HTMLAreasCollection _areas_BackingField;
      private string _name_BackingField;

      [Template("document.createElement(\"map\")")]
      public extern HTMLMapElement();

      public static dom.HTMLMapElement prototype
      {
        get
        {
          return dom.HTMLMapElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLMapElement._prototype_BackingField = value;
        }
      }

      public virtual dom.HTMLAreasCollection areas
      {
        get
        {
          return this._areas_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMapElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMapElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMapElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMapElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMapElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMapElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMapElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMapElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HTMLMarqueeElementEventMap : dom.HTMLElementEventMap
    {
      private dom.Event _bounce_BackingField;
      private dom.Event _finish_BackingField;
      private dom.Event _start_BackingField;

      public dom.Event bounce
      {
        get
        {
          return this._bounce_BackingField;
        }
        set
        {
          this._bounce_BackingField = value;
        }
      }

      public dom.Event finish
      {
        get
        {
          return this._finish_BackingField;
        }
        set
        {
          this._finish_BackingField = value;
        }
      }

      public dom.Event start
      {
        get
        {
          return this._start_BackingField;
        }
        set
        {
          this._start_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"bounce\"")]
        public static readonly KeyOf<dom.HTMLMarqueeElementEventMap> bounce;
        [Template("\"finish\"")]
        public static readonly KeyOf<dom.HTMLMarqueeElementEventMap> finish;
        [Template("\"start\"")]
        public static readonly KeyOf<dom.HTMLMarqueeElementEventMap> start;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLMarqueeElement : dom.HTMLElement
    {
      private static dom.HTMLMarqueeElement _prototype_BackingField;
      private string _behavior_BackingField;
      private string _bgColor_BackingField;
      private string _direction_BackingField;
      private string _height_BackingField;
      private uint _hspace_BackingField;
      private int _loop_BackingField;
      private dom.HTMLMarqueeElement.onbounceFn _onbounce_BackingField;
      private dom.HTMLMarqueeElement.onbounceFn _onfinish_BackingField;
      private dom.HTMLMarqueeElement.onbounceFn _onstart_BackingField;
      private uint _scrollAmount_BackingField;
      private uint _scrollDelay_BackingField;
      private bool _trueSpeed_BackingField;
      private uint _vspace_BackingField;
      private string _width_BackingField;

      [Template("document.createElement(\"marquee\")")]
      public extern HTMLMarqueeElement();

      public static dom.HTMLMarqueeElement prototype
      {
        get
        {
          return dom.HTMLMarqueeElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLMarqueeElement._prototype_BackingField = value;
        }
      }

      public virtual string behavior
      {
        get
        {
          return this._behavior_BackingField;
        }
        set
        {
          this._behavior_BackingField = value;
        }
      }

      public virtual string bgColor
      {
        get
        {
          return this._bgColor_BackingField;
        }
        set
        {
          this._bgColor_BackingField = value;
        }
      }

      public virtual string direction
      {
        get
        {
          return this._direction_BackingField;
        }
        set
        {
          this._direction_BackingField = value;
        }
      }

      public virtual string height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual uint hspace
      {
        get
        {
          return this._hspace_BackingField;
        }
        set
        {
          this._hspace_BackingField = value;
        }
      }

      public virtual int loop
      {
        get
        {
          return this._loop_BackingField;
        }
        set
        {
          this._loop_BackingField = value;
        }
      }

      public virtual dom.HTMLMarqueeElement.onbounceFn onbounce
      {
        get
        {
          return this._onbounce_BackingField;
        }
        set
        {
          this._onbounce_BackingField = value;
        }
      }

      public virtual dom.HTMLMarqueeElement.onbounceFn onfinish
      {
        get
        {
          return this._onfinish_BackingField;
        }
        set
        {
          this._onfinish_BackingField = value;
        }
      }

      public virtual dom.HTMLMarqueeElement.onbounceFn onstart
      {
        get
        {
          return this._onstart_BackingField;
        }
        set
        {
          this._onstart_BackingField = value;
        }
      }

      public virtual uint scrollAmount
      {
        get
        {
          return this._scrollAmount_BackingField;
        }
        set
        {
          this._scrollAmount_BackingField = value;
        }
      }

      public virtual uint scrollDelay
      {
        get
        {
          return this._scrollDelay_BackingField;
        }
        set
        {
          this._scrollDelay_BackingField = value;
        }
      }

      public virtual bool trueSpeed
      {
        get
        {
          return this._trueSpeed_BackingField;
        }
        set
        {
          this._trueSpeed_BackingField = value;
        }
      }

      public virtual uint vspace
      {
        get
        {
          return this._vspace_BackingField;
        }
        set
        {
          this._vspace_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public virtual extern void start();

      public virtual extern void stop();

      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMarqueeElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMarqueeElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMarqueeElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMarqueeElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMarqueeElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMarqueeElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMarqueeElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMarqueeElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onbounceFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLMarqueeElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HTMLMediaElementEventMap : dom.HTMLElementEventMap
    {
      private dom.MediaEncryptedEvent _encrypted_BackingField;
      private dom.Event _msneedkey_BackingField;

      public dom.MediaEncryptedEvent encrypted
      {
        get
        {
          return this._encrypted_BackingField;
        }
        set
        {
          this._encrypted_BackingField = value;
        }
      }

      public dom.Event msneedkey
      {
        get
        {
          return this._msneedkey_BackingField;
        }
        set
        {
          this._msneedkey_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"encrypted\"")]
        public static readonly KeyOf<dom.HTMLMediaElementEventMap> encrypted;
        [Template("\"msneedkey\"")]
        public static readonly KeyOf<dom.HTMLMediaElementEventMap> msneedkey;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLMediaElement : dom.HTMLElement
    {
      private static dom.HTMLMediaElement _prototype_BackingField;
      private static readonly ushort _HAVE_CURRENT_DATA_Static_BackingField;
      private static readonly ushort _HAVE_ENOUGH_DATA_Static_BackingField;
      private static readonly ushort _HAVE_FUTURE_DATA_Static_BackingField;
      private static readonly ushort _HAVE_METADATA_Static_BackingField;
      private static readonly ushort _HAVE_NOTHING_Static_BackingField;
      private static readonly ushort _NETWORK_EMPTY_Static_BackingField;
      private static readonly ushort _NETWORK_IDLE_Static_BackingField;
      private static readonly ushort _NETWORK_LOADING_Static_BackingField;
      private static readonly ushort _NETWORK_NO_SOURCE_Static_BackingField;
      private readonly dom.AudioTrackList _audioTracks_BackingField;
      private bool _autoplay_BackingField;
      private readonly dom.TimeRanges _buffered_BackingField;
      private bool _controls_BackingField;
      private string _crossOrigin_BackingField;
      private readonly string _currentSrc_BackingField;
      private double _currentTime_BackingField;
      private bool _defaultMuted_BackingField;
      private double _defaultPlaybackRate_BackingField;
      private readonly double _duration_BackingField;
      private readonly bool _ended_BackingField;
      private readonly dom.MediaError _error_BackingField;
      private bool _loop_BackingField;
      private readonly dom.MediaKeys _mediaKeys_BackingField;
      private string _msAudioCategory_BackingField;
      private string _msAudioDeviceType_BackingField;
      private readonly dom.MSGraphicsTrust _msGraphicsTrustStatus_BackingField;
      private readonly dom.MSMediaKeys _msKeys_BackingField;
      private bool _msPlayToDisabled_BackingField;
      private string _msPlayToPreferredSourceUri_BackingField;
      private bool _msPlayToPrimary_BackingField;
      private readonly object _msPlayToSource_BackingField;
      private bool _msRealTime_BackingField;
      private bool _muted_BackingField;
      private readonly ushort _networkState_BackingField;
      private dom.HTMLMediaElement.onencryptedFn _onencrypted_BackingField;
      private dom.HTMLMediaElement.onmsneedkeyFn _onmsneedkey_BackingField;
      private readonly bool _paused_BackingField;
      private double _playbackRate_BackingField;
      private readonly dom.TimeRanges _played_BackingField;
      private string _preload_BackingField;
      private readonly ushort _readyState_BackingField;
      private readonly dom.TimeRanges _seekable_BackingField;
      private readonly bool _seeking_BackingField;
      private string _src_BackingField;
      private Union<dom.MediaStream, dom.MediaSource, dom.Blob, Null> _srcObject_BackingField;
      private readonly dom.TextTrackList _textTracks_BackingField;
      private readonly dom.VideoTrackList _videoTracks_BackingField;
      private double _volume_BackingField;
      private readonly ushort _HAVE_CURRENT_DATA_BackingField;
      private readonly ushort _HAVE_ENOUGH_DATA_BackingField;
      private readonly ushort _HAVE_FUTURE_DATA_BackingField;
      private readonly ushort _HAVE_METADATA_BackingField;
      private readonly ushort _HAVE_NOTHING_BackingField;
      private readonly ushort _NETWORK_EMPTY_BackingField;
      private readonly ushort _NETWORK_IDLE_BackingField;
      private readonly ushort _NETWORK_LOADING_BackingField;
      private readonly ushort _NETWORK_NO_SOURCE_BackingField;

      public static dom.HTMLMediaElement prototype
      {
        get
        {
          return dom.HTMLMediaElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLMediaElement._prototype_BackingField = value;
        }
      }

      [Name("HAVE_CURRENT_DATA")]
      public static ushort HAVE_CURRENT_DATA_Static
      {
        get
        {
          return dom.HTMLMediaElement._HAVE_CURRENT_DATA_Static_BackingField;
        }
      }

      [Name("HAVE_ENOUGH_DATA")]
      public static ushort HAVE_ENOUGH_DATA_Static
      {
        get
        {
          return dom.HTMLMediaElement._HAVE_ENOUGH_DATA_Static_BackingField;
        }
      }

      [Name("HAVE_FUTURE_DATA")]
      public static ushort HAVE_FUTURE_DATA_Static
      {
        get
        {
          return dom.HTMLMediaElement._HAVE_FUTURE_DATA_Static_BackingField;
        }
      }

      [Name("HAVE_METADATA")]
      public static ushort HAVE_METADATA_Static
      {
        get
        {
          return dom.HTMLMediaElement._HAVE_METADATA_Static_BackingField;
        }
      }

      [Name("HAVE_NOTHING")]
      public static ushort HAVE_NOTHING_Static
      {
        get
        {
          return dom.HTMLMediaElement._HAVE_NOTHING_Static_BackingField;
        }
      }

      [Name("NETWORK_EMPTY")]
      public static ushort NETWORK_EMPTY_Static
      {
        get
        {
          return dom.HTMLMediaElement._NETWORK_EMPTY_Static_BackingField;
        }
      }

      [Name("NETWORK_IDLE")]
      public static ushort NETWORK_IDLE_Static
      {
        get
        {
          return dom.HTMLMediaElement._NETWORK_IDLE_Static_BackingField;
        }
      }

      [Name("NETWORK_LOADING")]
      public static ushort NETWORK_LOADING_Static
      {
        get
        {
          return dom.HTMLMediaElement._NETWORK_LOADING_Static_BackingField;
        }
      }

      [Name("NETWORK_NO_SOURCE")]
      public static ushort NETWORK_NO_SOURCE_Static
      {
        get
        {
          return dom.HTMLMediaElement._NETWORK_NO_SOURCE_Static_BackingField;
        }
      }

      public virtual dom.AudioTrackList audioTracks
      {
        get
        {
          return this._audioTracks_BackingField;
        }
      }

      public virtual bool autoplay
      {
        get
        {
          return this._autoplay_BackingField;
        }
        set
        {
          this._autoplay_BackingField = value;
        }
      }

      public virtual dom.TimeRanges buffered
      {
        get
        {
          return this._buffered_BackingField;
        }
      }

      public virtual bool controls
      {
        get
        {
          return this._controls_BackingField;
        }
        set
        {
          this._controls_BackingField = value;
        }
      }

      public virtual string crossOrigin
      {
        get
        {
          return this._crossOrigin_BackingField;
        }
        set
        {
          this._crossOrigin_BackingField = value;
        }
      }

      public virtual string currentSrc
      {
        get
        {
          return this._currentSrc_BackingField;
        }
      }

      public virtual double currentTime
      {
        get
        {
          return this._currentTime_BackingField;
        }
        set
        {
          this._currentTime_BackingField = value;
        }
      }

      public virtual bool defaultMuted
      {
        get
        {
          return this._defaultMuted_BackingField;
        }
        set
        {
          this._defaultMuted_BackingField = value;
        }
      }

      public virtual double defaultPlaybackRate
      {
        get
        {
          return this._defaultPlaybackRate_BackingField;
        }
        set
        {
          this._defaultPlaybackRate_BackingField = value;
        }
      }

      public virtual double duration
      {
        get
        {
          return this._duration_BackingField;
        }
      }

      public virtual bool ended
      {
        get
        {
          return this._ended_BackingField;
        }
      }

      public virtual dom.MediaError error
      {
        get
        {
          return this._error_BackingField;
        }
      }

      public virtual bool loop
      {
        get
        {
          return this._loop_BackingField;
        }
        set
        {
          this._loop_BackingField = value;
        }
      }

      public virtual dom.MediaKeys mediaKeys
      {
        get
        {
          return this._mediaKeys_BackingField;
        }
      }

      public virtual string msAudioCategory
      {
        get
        {
          return this._msAudioCategory_BackingField;
        }
        set
        {
          this._msAudioCategory_BackingField = value;
        }
      }

      public virtual string msAudioDeviceType
      {
        get
        {
          return this._msAudioDeviceType_BackingField;
        }
        set
        {
          this._msAudioDeviceType_BackingField = value;
        }
      }

      public virtual dom.MSGraphicsTrust msGraphicsTrustStatus
      {
        get
        {
          return this._msGraphicsTrustStatus_BackingField;
        }
      }

      public virtual dom.MSMediaKeys msKeys
      {
        get
        {
          return this._msKeys_BackingField;
        }
      }

      public virtual bool msPlayToDisabled
      {
        get
        {
          return this._msPlayToDisabled_BackingField;
        }
        set
        {
          this._msPlayToDisabled_BackingField = value;
        }
      }

      public virtual string msPlayToPreferredSourceUri
      {
        get
        {
          return this._msPlayToPreferredSourceUri_BackingField;
        }
        set
        {
          this._msPlayToPreferredSourceUri_BackingField = value;
        }
      }

      public virtual bool msPlayToPrimary
      {
        get
        {
          return this._msPlayToPrimary_BackingField;
        }
        set
        {
          this._msPlayToPrimary_BackingField = value;
        }
      }

      public virtual object msPlayToSource
      {
        get
        {
          return this._msPlayToSource_BackingField;
        }
      }

      public virtual bool msRealTime
      {
        get
        {
          return this._msRealTime_BackingField;
        }
        set
        {
          this._msRealTime_BackingField = value;
        }
      }

      public virtual bool muted
      {
        get
        {
          return this._muted_BackingField;
        }
        set
        {
          this._muted_BackingField = value;
        }
      }

      public virtual ushort networkState
      {
        get
        {
          return this._networkState_BackingField;
        }
      }

      public virtual dom.HTMLMediaElement.onencryptedFn onencrypted
      {
        get
        {
          return this._onencrypted_BackingField;
        }
        set
        {
          this._onencrypted_BackingField = value;
        }
      }

      public virtual dom.HTMLMediaElement.onmsneedkeyFn onmsneedkey
      {
        get
        {
          return this._onmsneedkey_BackingField;
        }
        set
        {
          this._onmsneedkey_BackingField = value;
        }
      }

      public virtual bool paused
      {
        get
        {
          return this._paused_BackingField;
        }
      }

      public virtual double playbackRate
      {
        get
        {
          return this._playbackRate_BackingField;
        }
        set
        {
          this._playbackRate_BackingField = value;
        }
      }

      public virtual dom.TimeRanges played
      {
        get
        {
          return this._played_BackingField;
        }
      }

      public virtual string preload
      {
        get
        {
          return this._preload_BackingField;
        }
        set
        {
          this._preload_BackingField = value;
        }
      }

      public virtual ushort readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual dom.TimeRanges seekable
      {
        get
        {
          return this._seekable_BackingField;
        }
      }

      public virtual bool seeking
      {
        get
        {
          return this._seeking_BackingField;
        }
      }

      public virtual string src
      {
        get
        {
          return this._src_BackingField;
        }
        set
        {
          this._src_BackingField = value;
        }
      }

      public virtual Union<dom.MediaStream, dom.MediaSource, dom.Blob, Null> srcObject
      {
        get
        {
          return this._srcObject_BackingField;
        }
        set
        {
          this._srcObject_BackingField = value;
        }
      }

      public virtual dom.TextTrackList textTracks
      {
        get
        {
          return this._textTracks_BackingField;
        }
      }

      public virtual dom.VideoTrackList videoTracks
      {
        get
        {
          return this._videoTracks_BackingField;
        }
      }

      public virtual double volume
      {
        get
        {
          return this._volume_BackingField;
        }
        set
        {
          this._volume_BackingField = value;
        }
      }

      public virtual extern dom.TextTrack addTextTrack(dom.TextTrackKind kind);

      public virtual extern dom.TextTrack addTextTrack(dom.TextTrackKind kind, string label);

      public virtual extern dom.TextTrack addTextTrack(
        dom.TextTrackKind kind,
        string label,
        string language);

      public virtual extern dom.CanPlayTypeResult canPlayType(string type);

      public virtual extern void load();

      public virtual extern void msClearEffects();

      public virtual extern object msGetAsCastingSource();

      public virtual extern void msInsertAudioEffect(string activatableClassId, bool effectRequired);

      public virtual extern void msInsertAudioEffect(
        string activatableClassId,
        bool effectRequired,
        object config);

      public virtual extern void msSetMediaKeys(dom.MSMediaKeys mediaKeys);

      public virtual extern void msSetMediaProtectionManager();

      public virtual extern void msSetMediaProtectionManager(object mediaProtectionManager);

      public virtual extern void pause();

      public virtual extern es5.Promise<H5.Primitive.Void> play();

      public virtual extern es5.Promise<H5.Primitive.Void> setMediaKeys(
        dom.MediaKeys mediaKeys);

      public virtual ushort HAVE_CURRENT_DATA
      {
        get
        {
          return this._HAVE_CURRENT_DATA_BackingField;
        }
      }

      public virtual ushort HAVE_ENOUGH_DATA
      {
        get
        {
          return this._HAVE_ENOUGH_DATA_BackingField;
        }
      }

      public virtual ushort HAVE_FUTURE_DATA
      {
        get
        {
          return this._HAVE_FUTURE_DATA_BackingField;
        }
      }

      public virtual ushort HAVE_METADATA
      {
        get
        {
          return this._HAVE_METADATA_BackingField;
        }
      }

      public virtual ushort HAVE_NOTHING
      {
        get
        {
          return this._HAVE_NOTHING_BackingField;
        }
      }

      public virtual ushort NETWORK_EMPTY
      {
        get
        {
          return this._NETWORK_EMPTY_BackingField;
        }
      }

      public virtual ushort NETWORK_IDLE
      {
        get
        {
          return this._NETWORK_IDLE_BackingField;
        }
      }

      public virtual ushort NETWORK_LOADING
      {
        get
        {
          return this._NETWORK_LOADING_BackingField;
        }
      }

      public virtual ushort NETWORK_NO_SOURCE
      {
        get
        {
          return this._NETWORK_NO_SOURCE_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMediaElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMediaElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMediaElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMediaElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMediaElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMediaElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMediaElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMediaElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onencryptedFn(dom.MediaEncryptedEvent ev);

      [Generated]
      public delegate void onmsneedkeyFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLMediaElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLMenuElement : dom.HTMLElement
    {
      private static dom.HTMLMenuElement _prototype_BackingField;
      private bool _compact_BackingField;
      private string _type_BackingField;

      [Template("document.createElement(\"menu\")")]
      public extern HTMLMenuElement();

      public static dom.HTMLMenuElement prototype
      {
        get
        {
          return dom.HTMLMenuElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLMenuElement._prototype_BackingField = value;
        }
      }

      public virtual bool compact
      {
        get
        {
          return this._compact_BackingField;
        }
        set
        {
          this._compact_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMenuElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMenuElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMenuElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMenuElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMenuElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMenuElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMenuElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMenuElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLMetaElement : dom.HTMLElement
    {
      private static dom.HTMLMetaElement _prototype_BackingField;
      private string _charset_BackingField;
      private string _content_BackingField;
      private string _httpEquiv_BackingField;
      private string _name_BackingField;
      private string _scheme_BackingField;
      private string _url_BackingField;

      [Template("document.createElement(\"meta\")")]
      public extern HTMLMetaElement();

      public static dom.HTMLMetaElement prototype
      {
        get
        {
          return dom.HTMLMetaElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLMetaElement._prototype_BackingField = value;
        }
      }

      public virtual string charset
      {
        get
        {
          return this._charset_BackingField;
        }
        set
        {
          this._charset_BackingField = value;
        }
      }

      public virtual string content
      {
        get
        {
          return this._content_BackingField;
        }
        set
        {
          this._content_BackingField = value;
        }
      }

      public virtual string httpEquiv
      {
        get
        {
          return this._httpEquiv_BackingField;
        }
        set
        {
          this._httpEquiv_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual string scheme
      {
        get
        {
          return this._scheme_BackingField;
        }
        set
        {
          this._scheme_BackingField = value;
        }
      }

      public virtual string url
      {
        get
        {
          return this._url_BackingField;
        }
        set
        {
          this._url_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMetaElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMetaElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMetaElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMetaElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMetaElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMetaElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMetaElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMetaElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLMeterElement : dom.HTMLElement
    {
      private static dom.HTMLMeterElement _prototype_BackingField;
      private double _high_BackingField;
      private double _low_BackingField;
      private double _max_BackingField;
      private double _min_BackingField;
      private double _optimum_BackingField;
      private double _value_BackingField;

      [Template("document.createElement(\"meter\")")]
      public extern HTMLMeterElement();

      public static dom.HTMLMeterElement prototype
      {
        get
        {
          return dom.HTMLMeterElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLMeterElement._prototype_BackingField = value;
        }
      }

      public virtual double high
      {
        get
        {
          return this._high_BackingField;
        }
        set
        {
          this._high_BackingField = value;
        }
      }

      public virtual double low
      {
        get
        {
          return this._low_BackingField;
        }
        set
        {
          this._low_BackingField = value;
        }
      }

      public virtual double max
      {
        get
        {
          return this._max_BackingField;
        }
        set
        {
          this._max_BackingField = value;
        }
      }

      public virtual double min
      {
        get
        {
          return this._min_BackingField;
        }
        set
        {
          this._min_BackingField = value;
        }
      }

      public virtual double optimum
      {
        get
        {
          return this._optimum_BackingField;
        }
        set
        {
          this._optimum_BackingField = value;
        }
      }

      public virtual double value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMeterElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMeterElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMeterElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLMeterElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMeterElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMeterElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMeterElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLMeterElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLModElement : dom.HTMLElement
    {
      private static dom.HTMLModElement _prototype_BackingField;
      private string _cite_BackingField;
      private string _dateTime_BackingField;

      [Template("document.createElement(\"del\")")]
      public extern HTMLModElement();

      public static dom.HTMLModElement prototype
      {
        get
        {
          return dom.HTMLModElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLModElement._prototype_BackingField = value;
        }
      }

      public virtual string cite
      {
        get
        {
          return this._cite_BackingField;
        }
        set
        {
          this._cite_BackingField = value;
        }
      }

      public virtual string dateTime
      {
        get
        {
          return this._dateTime_BackingField;
        }
        set
        {
          this._dateTime_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLModElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLModElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLModElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLModElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLModElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLModElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLModElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLModElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLOListElement : dom.HTMLElement
    {
      private static dom.HTMLOListElement _prototype_BackingField;
      private bool _compact_BackingField;
      private int _start_BackingField;
      private string _type_BackingField;

      [Template("document.createElement(\"ol\")")]
      public extern HTMLOListElement();

      public static dom.HTMLOListElement prototype
      {
        get
        {
          return dom.HTMLOListElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLOListElement._prototype_BackingField = value;
        }
      }

      public virtual bool compact
      {
        get
        {
          return this._compact_BackingField;
        }
        set
        {
          this._compact_BackingField = value;
        }
      }

      public virtual int start
      {
        get
        {
          return this._start_BackingField;
        }
        set
        {
          this._start_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOListElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOListElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOListElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOListElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOListElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOListElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOListElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOListElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLObjectElement : dom.HTMLElement, dom.GetSVGDocument.Interface, IObject
    {
      private static dom.HTMLObjectElement _prototype_BackingField;
      private readonly string _BaseHref_BackingField;
      private string _align_BackingField;
      private string _archive_BackingField;
      private string _border_BackingField;
      private string _code_BackingField;
      private string _codeBase_BackingField;
      private string _codeType_BackingField;
      private readonly dom.Document _contentDocument_BackingField;
      private string _data_BackingField;
      private bool _declare_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private string _height_BackingField;
      private uint _hspace_BackingField;
      private bool _msPlayToDisabled_BackingField;
      private string _msPlayToPreferredSourceUri_BackingField;
      private bool _msPlayToPrimary_BackingField;
      private readonly object _msPlayToSource_BackingField;
      private string _name_BackingField;
      private readonly double _readyState_BackingField;
      private string _standby_BackingField;
      private string _type_BackingField;
      private bool _typemustmatch_BackingField;
      private string _useMap_BackingField;
      private readonly string _validationMessage_BackingField;
      private readonly dom.ValidityState _validity_BackingField;
      private uint _vspace_BackingField;
      private string _width_BackingField;
      private readonly bool _willValidate_BackingField;

      [Template("document.createElement(\"object\")")]
      public extern HTMLObjectElement();

      public static dom.HTMLObjectElement prototype
      {
        get
        {
          return dom.HTMLObjectElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLObjectElement._prototype_BackingField = value;
        }
      }

      public virtual string BaseHref
      {
        get
        {
          return this._BaseHref_BackingField;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string archive
      {
        get
        {
          return this._archive_BackingField;
        }
        set
        {
          this._archive_BackingField = value;
        }
      }

      public virtual string border
      {
        get
        {
          return this._border_BackingField;
        }
        set
        {
          this._border_BackingField = value;
        }
      }

      public virtual string code
      {
        get
        {
          return this._code_BackingField;
        }
        set
        {
          this._code_BackingField = value;
        }
      }

      public virtual string codeBase
      {
        get
        {
          return this._codeBase_BackingField;
        }
        set
        {
          this._codeBase_BackingField = value;
        }
      }

      public virtual string codeType
      {
        get
        {
          return this._codeType_BackingField;
        }
        set
        {
          this._codeType_BackingField = value;
        }
      }

      public virtual dom.Document contentDocument
      {
        get
        {
          return this._contentDocument_BackingField;
        }
      }

      public virtual string data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public virtual bool declare
      {
        get
        {
          return this._declare_BackingField;
        }
        set
        {
          this._declare_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual string height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual uint hspace
      {
        get
        {
          return this._hspace_BackingField;
        }
        set
        {
          this._hspace_BackingField = value;
        }
      }

      public virtual bool msPlayToDisabled
      {
        get
        {
          return this._msPlayToDisabled_BackingField;
        }
        set
        {
          this._msPlayToDisabled_BackingField = value;
        }
      }

      public virtual string msPlayToPreferredSourceUri
      {
        get
        {
          return this._msPlayToPreferredSourceUri_BackingField;
        }
        set
        {
          this._msPlayToPreferredSourceUri_BackingField = value;
        }
      }

      public virtual bool msPlayToPrimary
      {
        get
        {
          return this._msPlayToPrimary_BackingField;
        }
        set
        {
          this._msPlayToPrimary_BackingField = value;
        }
      }

      public virtual object msPlayToSource
      {
        get
        {
          return this._msPlayToSource_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual double readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual string standby
      {
        get
        {
          return this._standby_BackingField;
        }
        set
        {
          this._standby_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      public virtual bool typemustmatch
      {
        get
        {
          return this._typemustmatch_BackingField;
        }
        set
        {
          this._typemustmatch_BackingField = value;
        }
      }

      public virtual string useMap
      {
        get
        {
          return this._useMap_BackingField;
        }
        set
        {
          this._useMap_BackingField = value;
        }
      }

      public virtual string validationMessage
      {
        get
        {
          return this._validationMessage_BackingField;
        }
      }

      public virtual dom.ValidityState validity
      {
        get
        {
          return this._validity_BackingField;
        }
      }

      public virtual uint vspace
      {
        get
        {
          return this._vspace_BackingField;
        }
        set
        {
          this._vspace_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public virtual bool willValidate
      {
        get
        {
          return this._willValidate_BackingField;
        }
      }

      public virtual extern bool checkValidity();

      public virtual extern void setCustomValidity(string error);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLObjectElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLObjectElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLObjectElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLObjectElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLObjectElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLObjectElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLObjectElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLObjectElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern dom.Document getSVGDocument();

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLOptGroupElement : dom.HTMLElement
    {
      private static dom.HTMLOptGroupElement _prototype_BackingField;
      private bool _disabled_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private string _label_BackingField;

      [Template("document.createElement(\"optgroup\")")]
      public extern HTMLOptGroupElement();

      public static dom.HTMLOptGroupElement prototype
      {
        get
        {
          return dom.HTMLOptGroupElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLOptGroupElement._prototype_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual string label
      {
        get
        {
          return this._label_BackingField;
        }
        set
        {
          this._label_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOptGroupElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOptGroupElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOptGroupElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOptGroupElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOptGroupElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOptGroupElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOptGroupElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOptGroupElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLOptionElement : dom.HTMLElement
    {
      private static dom.HTMLOptionElement _prototype_BackingField;
      private bool _defaultSelected_BackingField;
      private bool _disabled_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private readonly int _index_BackingField;
      private string _label_BackingField;
      private bool _selected_BackingField;
      private string _text_BackingField;
      private string _value_BackingField;

      [Template("document.createElement(\"option\")")]
      public extern HTMLOptionElement();

      public static dom.HTMLOptionElement prototype
      {
        get
        {
          return dom.HTMLOptionElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLOptionElement._prototype_BackingField = value;
        }
      }

      public virtual bool defaultSelected
      {
        get
        {
          return this._defaultSelected_BackingField;
        }
        set
        {
          this._defaultSelected_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual int index
      {
        get
        {
          return this._index_BackingField;
        }
      }

      public virtual string label
      {
        get
        {
          return this._label_BackingField;
        }
        set
        {
          this._label_BackingField = value;
        }
      }

      public virtual bool selected
      {
        get
        {
          return this._selected_BackingField;
        }
        set
        {
          this._selected_BackingField = value;
        }
      }

      public virtual string text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOptionElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOptionElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOptionElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOptionElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOptionElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOptionElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOptionElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOptionElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLOptionsCollection : dom.HTMLCollectionOf<dom.HTMLOptionElement>
    {
      private static dom.HTMLOptionsCollection _prototype_BackingField;
      private int _selectedIndex_BackingField;

      public static dom.HTMLOptionsCollection prototype
      {
        get
        {
          return dom.HTMLOptionsCollection._prototype_BackingField;
        }
        set
        {
          dom.HTMLOptionsCollection._prototype_BackingField = value;
        }
      }

      public virtual int selectedIndex
      {
        get
        {
          return this._selectedIndex_BackingField;
        }
        set
        {
          this._selectedIndex_BackingField = value;
        }
      }

      public virtual extern void add(
        Union<dom.HTMLOptionElement, dom.HTMLOptGroupElement> element);

      public virtual extern void add(dom.HTMLOptionElement element);

      public virtual extern void add(dom.HTMLOptGroupElement element);

      public virtual extern void add(
        Union<dom.HTMLOptionElement, dom.HTMLOptGroupElement> element,
        Union<dom.HTMLElement, double, Null> before);

      public virtual extern void add(dom.HTMLOptionElement element, dom.HTMLElement before);

      public virtual extern void add(dom.HTMLOptionElement element, double before);

      public virtual extern void add(dom.HTMLOptionElement element, Null before);

      public virtual extern void add(dom.HTMLOptGroupElement element, dom.HTMLElement before);

      public virtual extern void add(dom.HTMLOptGroupElement element, double before);

      public virtual extern void add(dom.HTMLOptGroupElement element, Null before);

      public virtual extern void remove(int index);

      public override extern dom.HTMLOptionElement item(double index);

      public override extern dom.HTMLOptionElement namedItem(string name);

      public override extern uint length { get; }

      public override extern dom.Element item(uint index);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLOutputElement : dom.HTMLElement
    {
      private static dom.HTMLOutputElement _prototype_BackingField;
      private string _defaultValue_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private readonly dom.DOMTokenList _htmlFor_BackingField;
      private string _name_BackingField;
      private readonly string _type_BackingField;
      private readonly string _validationMessage_BackingField;
      private readonly dom.ValidityState _validity_BackingField;
      private string _value_BackingField;
      private readonly bool _willValidate_BackingField;

      [Template("document.createElement(\"output\")")]
      public extern HTMLOutputElement();

      public static dom.HTMLOutputElement prototype
      {
        get
        {
          return dom.HTMLOutputElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLOutputElement._prototype_BackingField = value;
        }
      }

      public virtual string defaultValue
      {
        get
        {
          return this._defaultValue_BackingField;
        }
        set
        {
          this._defaultValue_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual dom.DOMTokenList htmlFor
      {
        get
        {
          return this._htmlFor_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual string validationMessage
      {
        get
        {
          return this._validationMessage_BackingField;
        }
      }

      public virtual dom.ValidityState validity
      {
        get
        {
          return this._validity_BackingField;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      public virtual bool willValidate
      {
        get
        {
          return this._willValidate_BackingField;
        }
      }

      public virtual extern bool checkValidity();

      public virtual extern bool reportValidity();

      public virtual extern void setCustomValidity(string error);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOutputElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOutputElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOutputElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLOutputElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOutputElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOutputElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOutputElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLOutputElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLParagraphElement : dom.HTMLElement
    {
      private static dom.HTMLParagraphElement _prototype_BackingField;
      private string _align_BackingField;
      private string _clear_BackingField;

      [Template("document.createElement(\"p\")")]
      public extern HTMLParagraphElement();

      public static dom.HTMLParagraphElement prototype
      {
        get
        {
          return dom.HTMLParagraphElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLParagraphElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string clear
      {
        get
        {
          return this._clear_BackingField;
        }
        set
        {
          this._clear_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLParagraphElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLParagraphElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLParagraphElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLParagraphElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLParagraphElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLParagraphElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLParagraphElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLParagraphElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLParamElement : dom.HTMLElement
    {
      private static dom.HTMLParamElement _prototype_BackingField;
      private string _name_BackingField;
      private string _type_BackingField;
      private string _value_BackingField;
      private string _valueType_BackingField;

      [Template("document.createElement(\"param\")")]
      public extern HTMLParamElement();

      public static dom.HTMLParamElement prototype
      {
        get
        {
          return dom.HTMLParamElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLParamElement._prototype_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      public virtual string valueType
      {
        get
        {
          return this._valueType_BackingField;
        }
        set
        {
          this._valueType_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLParamElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLParamElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLParamElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLParamElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLParamElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLParamElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLParamElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLParamElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLPictureElement : dom.HTMLElement
    {
      private static dom.HTMLPictureElement _prototype_BackingField;

      [Template("document.createElement(\"picture\")")]
      public extern HTMLPictureElement();

      public static dom.HTMLPictureElement prototype
      {
        get
        {
          return dom.HTMLPictureElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLPictureElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLPictureElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLPictureElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLPictureElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLPictureElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLPictureElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLPictureElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLPictureElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLPictureElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLPreElement : dom.HTMLElement
    {
      private static dom.HTMLPreElement _prototype_BackingField;
      private int _width_BackingField;

      [Template("document.createElement(\"pre\")")]
      public extern HTMLPreElement();

      public static dom.HTMLPreElement prototype
      {
        get
        {
          return dom.HTMLPreElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLPreElement._prototype_BackingField = value;
        }
      }

      public virtual int width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLPreElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLPreElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLPreElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLPreElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLPreElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLPreElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLPreElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLPreElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLProgressElement : dom.HTMLElement
    {
      private static dom.HTMLProgressElement _prototype_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private double _max_BackingField;
      private readonly double _position_BackingField;
      private double _value_BackingField;

      [Template("document.createElement(\"progress\")")]
      public extern HTMLProgressElement();

      public static dom.HTMLProgressElement prototype
      {
        get
        {
          return dom.HTMLProgressElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLProgressElement._prototype_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual double max
      {
        get
        {
          return this._max_BackingField;
        }
        set
        {
          this._max_BackingField = value;
        }
      }

      public virtual double position
      {
        get
        {
          return this._position_BackingField;
        }
      }

      public virtual double value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLProgressElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLProgressElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLProgressElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLProgressElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLProgressElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLProgressElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLProgressElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLProgressElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLQuoteElement : dom.HTMLElement
    {
      private static dom.HTMLQuoteElement _prototype_BackingField;
      private string _cite_BackingField;

      [Template("document.createElement(\"blockquote\")")]
      public extern HTMLQuoteElement();

      public static dom.HTMLQuoteElement prototype
      {
        get
        {
          return dom.HTMLQuoteElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLQuoteElement._prototype_BackingField = value;
        }
      }

      public virtual string cite
      {
        get
        {
          return this._cite_BackingField;
        }
        set
        {
          this._cite_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLQuoteElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLQuoteElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLQuoteElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLQuoteElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLQuoteElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLQuoteElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLQuoteElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLQuoteElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLScriptElement : dom.HTMLElement
    {
      private static dom.HTMLScriptElement _prototype_BackingField;
      private bool _async_BackingField;
      private string _charset_BackingField;
      private string _crossOrigin_BackingField;
      private bool _defer_BackingField;
      private string _event_BackingField;
      private string _htmlFor_BackingField;
      private string _integrity_BackingField;
      private bool _noModule_BackingField;
      private string _src_BackingField;
      private string _text_BackingField;
      private string _type_BackingField;

      [Template("document.createElement(\"script\")")]
      public extern HTMLScriptElement();

      public static dom.HTMLScriptElement prototype
      {
        get
        {
          return dom.HTMLScriptElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLScriptElement._prototype_BackingField = value;
        }
      }

      public virtual bool async
      {
        get
        {
          return this._async_BackingField;
        }
        set
        {
          this._async_BackingField = value;
        }
      }

      public virtual string charset
      {
        get
        {
          return this._charset_BackingField;
        }
        set
        {
          this._charset_BackingField = value;
        }
      }

      public virtual string crossOrigin
      {
        get
        {
          return this._crossOrigin_BackingField;
        }
        set
        {
          this._crossOrigin_BackingField = value;
        }
      }

      public virtual bool defer
      {
        get
        {
          return this._defer_BackingField;
        }
        set
        {
          this._defer_BackingField = value;
        }
      }

      [Name("event")]
      public virtual string @event
      {
        get
        {
          return this._event_BackingField;
        }
        set
        {
          this._event_BackingField = value;
        }
      }

      public virtual string htmlFor
      {
        get
        {
          return this._htmlFor_BackingField;
        }
        set
        {
          this._htmlFor_BackingField = value;
        }
      }

      public virtual string integrity
      {
        get
        {
          return this._integrity_BackingField;
        }
        set
        {
          this._integrity_BackingField = value;
        }
      }

      public virtual bool noModule
      {
        get
        {
          return this._noModule_BackingField;
        }
        set
        {
          this._noModule_BackingField = value;
        }
      }

      public virtual string src
      {
        get
        {
          return this._src_BackingField;
        }
        set
        {
          this._src_BackingField = value;
        }
      }

      public virtual string text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLScriptElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLScriptElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLScriptElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLScriptElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLScriptElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLScriptElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLScriptElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLScriptElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLSelectElement : dom.HTMLElement
    {
      private static dom.HTMLSelectElement _prototype_BackingField;
      private bool _autofocus_BackingField;
      private bool _disabled_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private uint _length_BackingField;
      private bool _multiple_BackingField;
      private string _name_BackingField;
      private readonly dom.HTMLOptionsCollection _options_BackingField;
      private bool _required_BackingField;
      private int _selectedIndex_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLOptionElement> _selectedOptions_BackingField;
      private uint _size_BackingField;
      private readonly string _type_BackingField;
      private readonly string _validationMessage_BackingField;
      private readonly dom.ValidityState _validity_BackingField;
      private string _value_BackingField;
      private readonly bool _willValidate_BackingField;

      [Template("document.createElement(\"select\")")]
      public extern HTMLSelectElement();

      public static dom.HTMLSelectElement prototype
      {
        get
        {
          return dom.HTMLSelectElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLSelectElement._prototype_BackingField = value;
        }
      }

      public virtual bool autofocus
      {
        get
        {
          return this._autofocus_BackingField;
        }
        set
        {
          this._autofocus_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }

      public virtual bool multiple
      {
        get
        {
          return this._multiple_BackingField;
        }
        set
        {
          this._multiple_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual dom.HTMLOptionsCollection options
      {
        get
        {
          return this._options_BackingField;
        }
      }

      public virtual bool required
      {
        get
        {
          return this._required_BackingField;
        }
        set
        {
          this._required_BackingField = value;
        }
      }

      public virtual int selectedIndex
      {
        get
        {
          return this._selectedIndex_BackingField;
        }
        set
        {
          this._selectedIndex_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLOptionElement> selectedOptions
      {
        get
        {
          return this._selectedOptions_BackingField;
        }
      }

      public virtual uint size
      {
        get
        {
          return this._size_BackingField;
        }
        set
        {
          this._size_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual string validationMessage
      {
        get
        {
          return this._validationMessage_BackingField;
        }
      }

      public virtual dom.ValidityState validity
      {
        get
        {
          return this._validity_BackingField;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      public virtual bool willValidate
      {
        get
        {
          return this._willValidate_BackingField;
        }
      }

      public virtual extern void add(
        Union<dom.HTMLOptionElement, dom.HTMLOptGroupElement> element);

      public virtual extern void add(dom.HTMLOptionElement element);

      public virtual extern void add(dom.HTMLOptGroupElement element);

      public virtual extern void add(
        Union<dom.HTMLOptionElement, dom.HTMLOptGroupElement> element,
        Union<dom.HTMLElement, double, Null> before);

      public virtual extern void add(dom.HTMLOptionElement element, dom.HTMLElement before);

      public virtual extern void add(dom.HTMLOptionElement element, double before);

      public virtual extern void add(dom.HTMLOptionElement element, Null before);

      public virtual extern void add(dom.HTMLOptGroupElement element, dom.HTMLElement before);

      public virtual extern void add(dom.HTMLOptGroupElement element, double before);

      public virtual extern void add(dom.HTMLOptGroupElement element, Null before);

      public virtual extern bool checkValidity();

      public virtual extern dom.Element item();

      public virtual extern dom.Element item(object name);

      public virtual extern dom.Element item(object name, object index);

      public virtual extern object namedItem(string name);

      public override extern void remove();

      public virtual extern void remove(int index);

      public virtual extern void setCustomValidity(string error);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSelectElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSelectElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSelectElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSelectElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSelectElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSelectElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSelectElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSelectElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class HTMLSlotElement : dom.HTMLElement
    {
      private string _name_BackingField;

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public abstract dom.Node[] assignedNodes();

      public abstract dom.Node[] assignedNodes(dom.AssignedNodesOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.HTMLSlotElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.HTMLSlotElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.HTMLSlotElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.HTMLSlotElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.HTMLSlotElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.HTMLSlotElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.HTMLSlotElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.HTMLSlotElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public new delegate void addEventListenerFn<K>(object ev);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLSourceElement : dom.HTMLElement
    {
      private static dom.HTMLSourceElement _prototype_BackingField;
      private string _media_BackingField;
      private string _msKeySystem_BackingField;
      private string _sizes_BackingField;
      private string _src_BackingField;
      private string _srcset_BackingField;
      private string _type_BackingField;

      [Template("document.createElement(\"source\")")]
      public extern HTMLSourceElement();

      public static dom.HTMLSourceElement prototype
      {
        get
        {
          return dom.HTMLSourceElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLSourceElement._prototype_BackingField = value;
        }
      }

      public virtual string media
      {
        get
        {
          return this._media_BackingField;
        }
        set
        {
          this._media_BackingField = value;
        }
      }

      public virtual string msKeySystem
      {
        get
        {
          return this._msKeySystem_BackingField;
        }
        set
        {
          this._msKeySystem_BackingField = value;
        }
      }

      public virtual string sizes
      {
        get
        {
          return this._sizes_BackingField;
        }
        set
        {
          this._sizes_BackingField = value;
        }
      }

      public virtual string src
      {
        get
        {
          return this._src_BackingField;
        }
        set
        {
          this._src_BackingField = value;
        }
      }

      public virtual string srcset
      {
        get
        {
          return this._srcset_BackingField;
        }
        set
        {
          this._srcset_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSourceElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSourceElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSourceElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSourceElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSourceElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSourceElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSourceElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSourceElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLSpanElement : dom.HTMLElement
    {
      private static dom.HTMLSpanElement _prototype_BackingField;

      [Template("document.createElement(\"span\")")]
      public extern HTMLSpanElement();

      public static dom.HTMLSpanElement prototype
      {
        get
        {
          return dom.HTMLSpanElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLSpanElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSpanElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSpanElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSpanElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSpanElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSpanElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSpanElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSpanElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSpanElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLStyleElement : dom.HTMLElement, dom.LinkStyle.Interface, IObject
    {
      private static dom.HTMLStyleElement _prototype_BackingField;
      private bool _disabled_BackingField;
      private string _media_BackingField;
      private string _type_BackingField;
      private readonly dom.StyleSheet _sheet_BackingField;

      [Template("document.createElement(\"style\")")]
      public extern HTMLStyleElement();

      public static dom.HTMLStyleElement prototype
      {
        get
        {
          return dom.HTMLStyleElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLStyleElement._prototype_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual string media
      {
        get
        {
          return this._media_BackingField;
        }
        set
        {
          this._media_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLStyleElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLStyleElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLStyleElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLStyleElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLStyleElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLStyleElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLStyleElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLStyleElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.StyleSheet sheet
      {
        get
        {
          return this._sheet_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLSummaryElement : dom.HTMLElement
    {
      private static dom.HTMLSummaryElement _prototype_BackingField;

      public static dom.HTMLSummaryElement prototype
      {
        get
        {
          return dom.HTMLSummaryElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLSummaryElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSummaryElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSummaryElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSummaryElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLSummaryElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSummaryElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSummaryElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSummaryElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLSummaryElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTableCaptionElement : dom.HTMLElement
    {
      private static dom.HTMLTableCaptionElement _prototype_BackingField;
      private string _align_BackingField;

      [Template("document.createElement(\"caption\")")]
      public extern HTMLTableCaptionElement();

      public static dom.HTMLTableCaptionElement prototype
      {
        get
        {
          return dom.HTMLTableCaptionElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTableCaptionElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableCaptionElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableCaptionElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableCaptionElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableCaptionElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableCaptionElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableCaptionElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableCaptionElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableCaptionElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTableCellElement : dom.HTMLElement
    {
      private static dom.HTMLTableCellElement _prototype_BackingField;
      private string _abbr_BackingField;
      private string _align_BackingField;
      private string _axis_BackingField;
      private string _bgColor_BackingField;
      private readonly int _cellIndex_BackingField;
      private string _ch_BackingField;
      private string _chOff_BackingField;
      private uint _colSpan_BackingField;
      private string _headers_BackingField;
      private string _height_BackingField;
      private bool _noWrap_BackingField;
      private uint _rowSpan_BackingField;
      private string _scope_BackingField;
      private string _vAlign_BackingField;
      private string _width_BackingField;

      public static dom.HTMLTableCellElement prototype
      {
        get
        {
          return dom.HTMLTableCellElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTableCellElement._prototype_BackingField = value;
        }
      }

      public virtual string abbr
      {
        get
        {
          return this._abbr_BackingField;
        }
        set
        {
          this._abbr_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string axis
      {
        get
        {
          return this._axis_BackingField;
        }
        set
        {
          this._axis_BackingField = value;
        }
      }

      public virtual string bgColor
      {
        get
        {
          return this._bgColor_BackingField;
        }
        set
        {
          this._bgColor_BackingField = value;
        }
      }

      public virtual int cellIndex
      {
        get
        {
          return this._cellIndex_BackingField;
        }
      }

      public virtual string ch
      {
        get
        {
          return this._ch_BackingField;
        }
        set
        {
          this._ch_BackingField = value;
        }
      }

      public virtual string chOff
      {
        get
        {
          return this._chOff_BackingField;
        }
        set
        {
          this._chOff_BackingField = value;
        }
      }

      public virtual uint colSpan
      {
        get
        {
          return this._colSpan_BackingField;
        }
        set
        {
          this._colSpan_BackingField = value;
        }
      }

      public virtual string headers
      {
        get
        {
          return this._headers_BackingField;
        }
        set
        {
          this._headers_BackingField = value;
        }
      }

      public virtual string height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual bool noWrap
      {
        get
        {
          return this._noWrap_BackingField;
        }
        set
        {
          this._noWrap_BackingField = value;
        }
      }

      public virtual uint rowSpan
      {
        get
        {
          return this._rowSpan_BackingField;
        }
        set
        {
          this._rowSpan_BackingField = value;
        }
      }

      public virtual string scope
      {
        get
        {
          return this._scope_BackingField;
        }
        set
        {
          this._scope_BackingField = value;
        }
      }

      public virtual string vAlign
      {
        get
        {
          return this._vAlign_BackingField;
        }
        set
        {
          this._vAlign_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableCellElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableCellElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableCellElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableCellElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableCellElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableCellElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableCellElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableCellElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTableColElement : dom.HTMLElement
    {
      private static dom.HTMLTableColElement _prototype_BackingField;
      private string _align_BackingField;
      private string _ch_BackingField;
      private string _chOff_BackingField;
      private uint _span_BackingField;
      private string _vAlign_BackingField;
      private string _width_BackingField;

      [Template("document.createElement(\"col\")")]
      public extern HTMLTableColElement();

      public static dom.HTMLTableColElement prototype
      {
        get
        {
          return dom.HTMLTableColElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTableColElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string ch
      {
        get
        {
          return this._ch_BackingField;
        }
        set
        {
          this._ch_BackingField = value;
        }
      }

      public virtual string chOff
      {
        get
        {
          return this._chOff_BackingField;
        }
        set
        {
          this._chOff_BackingField = value;
        }
      }

      public virtual uint span
      {
        get
        {
          return this._span_BackingField;
        }
        set
        {
          this._span_BackingField = value;
        }
      }

      public virtual string vAlign
      {
        get
        {
          return this._vAlign_BackingField;
        }
        set
        {
          this._vAlign_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableColElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableColElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableColElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableColElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableColElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableColElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableColElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableColElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTableDataCellElement : dom.HTMLTableCellElement
    {
      private static dom.HTMLTableDataCellElement _prototype_BackingField;

      [Template("document.createElement(\"td\")")]
      public extern HTMLTableDataCellElement();

      public static dom.HTMLTableDataCellElement prototype
      {
        get
        {
          return dom.HTMLTableDataCellElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTableDataCellElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableDataCellElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableDataCellElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableDataCellElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableDataCellElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableDataCellElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableDataCellElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableDataCellElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableDataCellElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTableElement : dom.HTMLElement
    {
      private static dom.HTMLTableElement _prototype_BackingField;
      private string _align_BackingField;
      private string _bgColor_BackingField;
      private string _border_BackingField;
      private dom.HTMLTableCaptionElement _caption_BackingField;
      private string _cellPadding_BackingField;
      private string _cellSpacing_BackingField;
      private string _frame_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLTableRowElement> _rows_BackingField;
      private string _rules_BackingField;
      private string _summary_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLTableSectionElement> _tBodies_BackingField;
      private dom.HTMLTableSectionElement _tFoot_BackingField;
      private dom.HTMLTableSectionElement _tHead_BackingField;
      private string _width_BackingField;

      [Template("document.createElement(\"table\")")]
      public extern HTMLTableElement();

      public static dom.HTMLTableElement prototype
      {
        get
        {
          return dom.HTMLTableElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTableElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string bgColor
      {
        get
        {
          return this._bgColor_BackingField;
        }
        set
        {
          this._bgColor_BackingField = value;
        }
      }

      public virtual string border
      {
        get
        {
          return this._border_BackingField;
        }
        set
        {
          this._border_BackingField = value;
        }
      }

      public virtual dom.HTMLTableCaptionElement caption
      {
        get
        {
          return this._caption_BackingField;
        }
        set
        {
          this._caption_BackingField = value;
        }
      }

      public virtual string cellPadding
      {
        get
        {
          return this._cellPadding_BackingField;
        }
        set
        {
          this._cellPadding_BackingField = value;
        }
      }

      public virtual string cellSpacing
      {
        get
        {
          return this._cellSpacing_BackingField;
        }
        set
        {
          this._cellSpacing_BackingField = value;
        }
      }

      public virtual string frame
      {
        get
        {
          return this._frame_BackingField;
        }
        set
        {
          this._frame_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLTableRowElement> rows
      {
        get
        {
          return this._rows_BackingField;
        }
      }

      public virtual string rules
      {
        get
        {
          return this._rules_BackingField;
        }
        set
        {
          this._rules_BackingField = value;
        }
      }

      public virtual string summary
      {
        get
        {
          return this._summary_BackingField;
        }
        set
        {
          this._summary_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLTableSectionElement> tBodies
      {
        get
        {
          return this._tBodies_BackingField;
        }
      }

      public virtual dom.HTMLTableSectionElement tFoot
      {
        get
        {
          return this._tFoot_BackingField;
        }
        set
        {
          this._tFoot_BackingField = value;
        }
      }

      public virtual dom.HTMLTableSectionElement tHead
      {
        get
        {
          return this._tHead_BackingField;
        }
        set
        {
          this._tHead_BackingField = value;
        }
      }

      public virtual string width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public virtual extern dom.HTMLTableCaptionElement createCaption();

      public virtual extern dom.HTMLTableSectionElement createTBody();

      public virtual extern dom.HTMLTableSectionElement createTFoot();

      public virtual extern dom.HTMLTableSectionElement createTHead();

      public virtual extern void deleteCaption();

      public virtual extern void deleteRow();

      public virtual extern void deleteRow(int index);

      public virtual extern void deleteTFoot();

      public virtual extern void deleteTHead();

      public virtual extern dom.HTMLTableRowElement insertRow();

      public virtual extern dom.HTMLTableRowElement insertRow(int index);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTableHeaderCellElement : dom.HTMLTableCellElement
    {
      private static dom.HTMLTableHeaderCellElement _prototype_BackingField;

      [Template("document.createElement(\"th\")")]
      public extern HTMLTableHeaderCellElement();

      public static dom.HTMLTableHeaderCellElement prototype
      {
        get
        {
          return dom.HTMLTableHeaderCellElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTableHeaderCellElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableHeaderCellElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableHeaderCellElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableHeaderCellElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableHeaderCellElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableHeaderCellElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableHeaderCellElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableHeaderCellElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableHeaderCellElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTableRowElement : dom.HTMLElement
    {
      private static dom.HTMLTableRowElement _prototype_BackingField;
      private string _align_BackingField;
      private string _bgColor_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLTableCellElement> _cells_BackingField;
      private string _ch_BackingField;
      private string _chOff_BackingField;
      private readonly int _rowIndex_BackingField;
      private readonly int _sectionRowIndex_BackingField;
      private string _vAlign_BackingField;

      [Template("document.createElement(\"tr\")")]
      public extern HTMLTableRowElement();

      public static dom.HTMLTableRowElement prototype
      {
        get
        {
          return dom.HTMLTableRowElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTableRowElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string bgColor
      {
        get
        {
          return this._bgColor_BackingField;
        }
        set
        {
          this._bgColor_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLTableCellElement> cells
      {
        get
        {
          return this._cells_BackingField;
        }
      }

      public virtual string ch
      {
        get
        {
          return this._ch_BackingField;
        }
        set
        {
          this._ch_BackingField = value;
        }
      }

      public virtual string chOff
      {
        get
        {
          return this._chOff_BackingField;
        }
        set
        {
          this._chOff_BackingField = value;
        }
      }

      public virtual int rowIndex
      {
        get
        {
          return this._rowIndex_BackingField;
        }
      }

      public virtual int sectionRowIndex
      {
        get
        {
          return this._sectionRowIndex_BackingField;
        }
      }

      public virtual string vAlign
      {
        get
        {
          return this._vAlign_BackingField;
        }
        set
        {
          this._vAlign_BackingField = value;
        }
      }

      public virtual extern void deleteCell();

      public virtual extern void deleteCell(int index);

      public virtual extern dom.HTMLTableDataCellElement insertCell();

      public virtual extern dom.HTMLTableDataCellElement insertCell(int index);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableRowElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableRowElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableRowElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableRowElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableRowElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableRowElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableRowElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableRowElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTableSectionElement : dom.HTMLElement
    {
      private static dom.HTMLTableSectionElement _prototype_BackingField;
      private string _align_BackingField;
      private string _ch_BackingField;
      private string _chOff_BackingField;
      private readonly dom.HTMLCollectionOf<dom.HTMLTableRowElement> _rows_BackingField;
      private string _vAlign_BackingField;

      [Template("document.createElement(\"tbody\")")]
      public extern HTMLTableSectionElement();

      public static dom.HTMLTableSectionElement prototype
      {
        get
        {
          return dom.HTMLTableSectionElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTableSectionElement._prototype_BackingField = value;
        }
      }

      public virtual string align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual string ch
      {
        get
        {
          return this._ch_BackingField;
        }
        set
        {
          this._ch_BackingField = value;
        }
      }

      public virtual string chOff
      {
        get
        {
          return this._chOff_BackingField;
        }
        set
        {
          this._chOff_BackingField = value;
        }
      }

      public virtual dom.HTMLCollectionOf<dom.HTMLTableRowElement> rows
      {
        get
        {
          return this._rows_BackingField;
        }
      }

      public virtual string vAlign
      {
        get
        {
          return this._vAlign_BackingField;
        }
        set
        {
          this._vAlign_BackingField = value;
        }
      }

      public virtual extern void deleteRow();

      public virtual extern void deleteRow(int index);

      public virtual extern dom.HTMLTableRowElement insertRow();

      public virtual extern dom.HTMLTableRowElement insertRow(int index);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableSectionElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableSectionElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableSectionElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTableSectionElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableSectionElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableSectionElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableSectionElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTableSectionElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTemplateElement : dom.HTMLElement
    {
      private static dom.HTMLTemplateElement _prototype_BackingField;
      private readonly dom.DocumentFragment _content_BackingField;

      [Template("document.createElement(\"template\")")]
      public extern HTMLTemplateElement();

      public static dom.HTMLTemplateElement prototype
      {
        get
        {
          return dom.HTMLTemplateElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTemplateElement._prototype_BackingField = value;
        }
      }

      public virtual dom.DocumentFragment content
      {
        get
        {
          return this._content_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTemplateElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTemplateElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTemplateElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTemplateElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTemplateElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTemplateElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTemplateElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTemplateElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTextAreaElement : dom.HTMLElement
    {
      private static dom.HTMLTextAreaElement _prototype_BackingField;
      private bool _autofocus_BackingField;
      private uint _cols_BackingField;
      private string _defaultValue_BackingField;
      private bool _disabled_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;
      private int _maxLength_BackingField;
      private int _minLength_BackingField;
      private string _name_BackingField;
      private string _placeholder_BackingField;
      private bool _readOnly_BackingField;
      private bool _required_BackingField;
      private uint _rows_BackingField;
      private uint _selectionEnd_BackingField;
      private uint _selectionStart_BackingField;
      private readonly string _type_BackingField;
      private readonly string _validationMessage_BackingField;
      private readonly dom.ValidityState _validity_BackingField;
      private string _value_BackingField;
      private readonly bool _willValidate_BackingField;
      private string _wrap_BackingField;

      [Template("document.createElement(\"textarea\")")]
      public extern HTMLTextAreaElement();

      public static dom.HTMLTextAreaElement prototype
      {
        get
        {
          return dom.HTMLTextAreaElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTextAreaElement._prototype_BackingField = value;
        }
      }

      public virtual bool autofocus
      {
        get
        {
          return this._autofocus_BackingField;
        }
        set
        {
          this._autofocus_BackingField = value;
        }
      }

      public virtual uint cols
      {
        get
        {
          return this._cols_BackingField;
        }
        set
        {
          this._cols_BackingField = value;
        }
      }

      public virtual string defaultValue
      {
        get
        {
          return this._defaultValue_BackingField;
        }
        set
        {
          this._defaultValue_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }

      public virtual int maxLength
      {
        get
        {
          return this._maxLength_BackingField;
        }
        set
        {
          this._maxLength_BackingField = value;
        }
      }

      public virtual int minLength
      {
        get
        {
          return this._minLength_BackingField;
        }
        set
        {
          this._minLength_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual string placeholder
      {
        get
        {
          return this._placeholder_BackingField;
        }
        set
        {
          this._placeholder_BackingField = value;
        }
      }

      public virtual bool readOnly
      {
        get
        {
          return this._readOnly_BackingField;
        }
        set
        {
          this._readOnly_BackingField = value;
        }
      }

      public virtual bool required
      {
        get
        {
          return this._required_BackingField;
        }
        set
        {
          this._required_BackingField = value;
        }
      }

      public virtual uint rows
      {
        get
        {
          return this._rows_BackingField;
        }
        set
        {
          this._rows_BackingField = value;
        }
      }

      public virtual uint selectionEnd
      {
        get
        {
          return this._selectionEnd_BackingField;
        }
        set
        {
          this._selectionEnd_BackingField = value;
        }
      }

      public virtual uint selectionStart
      {
        get
        {
          return this._selectionStart_BackingField;
        }
        set
        {
          this._selectionStart_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual string validationMessage
      {
        get
        {
          return this._validationMessage_BackingField;
        }
      }

      public virtual dom.ValidityState validity
      {
        get
        {
          return this._validity_BackingField;
        }
      }

      public virtual string value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      public virtual bool willValidate
      {
        get
        {
          return this._willValidate_BackingField;
        }
      }

      public virtual string wrap
      {
        get
        {
          return this._wrap_BackingField;
        }
        set
        {
          this._wrap_BackingField = value;
        }
      }

      public virtual extern bool checkValidity();

      public virtual extern void select();

      public virtual extern void setCustomValidity(string error);

      public virtual extern void setSelectionRange(uint start, uint end);

      public virtual extern void setSelectionRange(
        uint start,
        uint end,
        dom.Literals.Options.direction3 direction);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTextAreaElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTextAreaElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTextAreaElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTextAreaElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTextAreaElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTextAreaElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTextAreaElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTextAreaElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTimeElement : dom.HTMLElement
    {
      private static dom.HTMLTimeElement _prototype_BackingField;
      private string _dateTime_BackingField;

      [Template("document.createElement(\"time\")")]
      public extern HTMLTimeElement();

      public static dom.HTMLTimeElement prototype
      {
        get
        {
          return dom.HTMLTimeElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTimeElement._prototype_BackingField = value;
        }
      }

      public virtual string dateTime
      {
        get
        {
          return this._dateTime_BackingField;
        }
        set
        {
          this._dateTime_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTimeElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTimeElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTimeElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTimeElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTimeElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTimeElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTimeElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTimeElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTitleElement : dom.HTMLElement
    {
      private static dom.HTMLTitleElement _prototype_BackingField;
      private string _text_BackingField;

      [Template("document.createElement(\"title\")")]
      public extern HTMLTitleElement();

      public static dom.HTMLTitleElement prototype
      {
        get
        {
          return dom.HTMLTitleElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTitleElement._prototype_BackingField = value;
        }
      }

      public virtual string text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTitleElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTitleElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTitleElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTitleElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTitleElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTitleElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTitleElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTitleElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLTrackElement : dom.HTMLElement
    {
      private static dom.HTMLTrackElement _prototype_BackingField;
      private static readonly ushort _ERROR_Static_BackingField;
      private static readonly ushort _LOADED_Static_BackingField;
      private static readonly ushort _LOADING_Static_BackingField;
      private static readonly ushort _NONE_Static_BackingField;
      private bool _default_BackingField;
      private string _kind_BackingField;
      private string _label_BackingField;
      private readonly ushort _readyState_BackingField;
      private string _src_BackingField;
      private string _srclang_BackingField;
      private readonly dom.TextTrack _track_BackingField;
      private readonly ushort _ERROR_BackingField;
      private readonly ushort _LOADED_BackingField;
      private readonly ushort _LOADING_BackingField;
      private readonly ushort _NONE_BackingField;

      [Template("document.createElement(\"track\")")]
      public extern HTMLTrackElement();

      public static dom.HTMLTrackElement prototype
      {
        get
        {
          return dom.HTMLTrackElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLTrackElement._prototype_BackingField = value;
        }
      }

      [Name("ERROR")]
      public static ushort ERROR_Static
      {
        get
        {
          return dom.HTMLTrackElement._ERROR_Static_BackingField;
        }
      }

      [Name("LOADED")]
      public static ushort LOADED_Static
      {
        get
        {
          return dom.HTMLTrackElement._LOADED_Static_BackingField;
        }
      }

      [Name("LOADING")]
      public static ushort LOADING_Static
      {
        get
        {
          return dom.HTMLTrackElement._LOADING_Static_BackingField;
        }
      }

      [Name("NONE")]
      public static ushort NONE_Static
      {
        get
        {
          return dom.HTMLTrackElement._NONE_Static_BackingField;
        }
      }

      [Name("default")]
      public virtual bool @default
      {
        get
        {
          return this._default_BackingField;
        }
        set
        {
          this._default_BackingField = value;
        }
      }

      public virtual string kind
      {
        get
        {
          return this._kind_BackingField;
        }
        set
        {
          this._kind_BackingField = value;
        }
      }

      public virtual string label
      {
        get
        {
          return this._label_BackingField;
        }
        set
        {
          this._label_BackingField = value;
        }
      }

      public virtual ushort readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual string src
      {
        get
        {
          return this._src_BackingField;
        }
        set
        {
          this._src_BackingField = value;
        }
      }

      public virtual string srclang
      {
        get
        {
          return this._srclang_BackingField;
        }
        set
        {
          this._srclang_BackingField = value;
        }
      }

      public virtual dom.TextTrack track
      {
        get
        {
          return this._track_BackingField;
        }
      }

      public virtual ushort ERROR
      {
        get
        {
          return this._ERROR_BackingField;
        }
      }

      public virtual ushort LOADED
      {
        get
        {
          return this._LOADED_BackingField;
        }
      }

      public virtual ushort LOADING
      {
        get
        {
          return this._LOADING_BackingField;
        }
      }

      public virtual ushort NONE
      {
        get
        {
          return this._NONE_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTrackElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTrackElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTrackElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLTrackElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTrackElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTrackElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTrackElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLTrackElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLUListElement : dom.HTMLElement
    {
      private static dom.HTMLUListElement _prototype_BackingField;
      private bool _compact_BackingField;
      private string _type_BackingField;

      [Template("document.createElement(\"ul\")")]
      public extern HTMLUListElement();

      public static dom.HTMLUListElement prototype
      {
        get
        {
          return dom.HTMLUListElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLUListElement._prototype_BackingField = value;
        }
      }

      public virtual bool compact
      {
        get
        {
          return this._compact_BackingField;
        }
        set
        {
          this._compact_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLUListElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLUListElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLUListElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLUListElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLUListElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLUListElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLUListElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLUListElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLUnknownElement : dom.HTMLElement
    {
      private static dom.HTMLUnknownElement _prototype_BackingField;

      [Template("document.createElement(\"isindex\")")]
      public extern HTMLUnknownElement();

      public static dom.HTMLUnknownElement prototype
      {
        get
        {
          return dom.HTMLUnknownElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLUnknownElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLUnknownElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLUnknownElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLUnknownElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLUnknownElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLUnknownElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLUnknownElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLUnknownElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLUnknownElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HTMLVideoElementEventMap : dom.HTMLMediaElementEventMap
    {
      private dom.Event _MSVideoFormatChanged_BackingField;
      private dom.Event _MSVideoFrameStepCompleted_BackingField;
      private dom.Event _MSVideoOptimalLayoutChanged_BackingField;

      public dom.Event MSVideoFormatChanged
      {
        get
        {
          return this._MSVideoFormatChanged_BackingField;
        }
        set
        {
          this._MSVideoFormatChanged_BackingField = value;
        }
      }

      public dom.Event MSVideoFrameStepCompleted
      {
        get
        {
          return this._MSVideoFrameStepCompleted_BackingField;
        }
        set
        {
          this._MSVideoFrameStepCompleted_BackingField = value;
        }
      }

      public dom.Event MSVideoOptimalLayoutChanged
      {
        get
        {
          return this._MSVideoOptimalLayoutChanged_BackingField;
        }
        set
        {
          this._MSVideoOptimalLayoutChanged_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"MSVideoFormatChanged\"")]
        public static readonly KeyOf<dom.HTMLVideoElementEventMap> MSVideoFormatChanged;
        [Template("\"MSVideoFrameStepCompleted\"")]
        public static readonly KeyOf<dom.HTMLVideoElementEventMap> MSVideoFrameStepCompleted;
        [Template("\"MSVideoOptimalLayoutChanged\"")]
        public static readonly KeyOf<dom.HTMLVideoElementEventMap> MSVideoOptimalLayoutChanged;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLVideoElement : dom.HTMLMediaElement
    {
      private static dom.HTMLVideoElement _prototype_BackingField;
      private uint _height_BackingField;
      private bool _msHorizontalMirror_BackingField;
      private readonly bool _msIsLayoutOptimalForPlayback_BackingField;
      private readonly bool _msIsStereo3D_BackingField;
      private string _msStereo3DPackingMode_BackingField;
      private string _msStereo3DRenderMode_BackingField;
      private bool _msZoom_BackingField;
      private dom.HTMLVideoElement.onMSVideoFormatChangedFn _onMSVideoFormatChanged_BackingField;
      private dom.HTMLVideoElement.onMSVideoFormatChangedFn _onMSVideoFrameStepCompleted_BackingField;
      private dom.HTMLVideoElement.onMSVideoFormatChangedFn _onMSVideoOptimalLayoutChanged_BackingField;
      private string _poster_BackingField;
      private readonly uint _videoHeight_BackingField;
      private readonly uint _videoWidth_BackingField;
      private readonly bool _webkitDisplayingFullscreen_BackingField;
      private readonly bool _webkitSupportsFullscreen_BackingField;
      private uint _width_BackingField;

      [Template("document.createElement(\"video\")")]
      public extern HTMLVideoElement();

      public static dom.HTMLVideoElement prototype
      {
        get
        {
          return dom.HTMLVideoElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLVideoElement._prototype_BackingField = value;
        }
      }

      public virtual uint height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual bool msHorizontalMirror
      {
        get
        {
          return this._msHorizontalMirror_BackingField;
        }
        set
        {
          this._msHorizontalMirror_BackingField = value;
        }
      }

      public virtual bool msIsLayoutOptimalForPlayback
      {
        get
        {
          return this._msIsLayoutOptimalForPlayback_BackingField;
        }
      }

      public virtual bool msIsStereo3D
      {
        get
        {
          return this._msIsStereo3D_BackingField;
        }
      }

      public virtual string msStereo3DPackingMode
      {
        get
        {
          return this._msStereo3DPackingMode_BackingField;
        }
        set
        {
          this._msStereo3DPackingMode_BackingField = value;
        }
      }

      public virtual string msStereo3DRenderMode
      {
        get
        {
          return this._msStereo3DRenderMode_BackingField;
        }
        set
        {
          this._msStereo3DRenderMode_BackingField = value;
        }
      }

      public virtual bool msZoom
      {
        get
        {
          return this._msZoom_BackingField;
        }
        set
        {
          this._msZoom_BackingField = value;
        }
      }

      public virtual dom.HTMLVideoElement.onMSVideoFormatChangedFn onMSVideoFormatChanged
      {
        get
        {
          return this._onMSVideoFormatChanged_BackingField;
        }
        set
        {
          this._onMSVideoFormatChanged_BackingField = value;
        }
      }

      public virtual dom.HTMLVideoElement.onMSVideoFormatChangedFn onMSVideoFrameStepCompleted
      {
        get
        {
          return this._onMSVideoFrameStepCompleted_BackingField;
        }
        set
        {
          this._onMSVideoFrameStepCompleted_BackingField = value;
        }
      }

      public virtual dom.HTMLVideoElement.onMSVideoFormatChangedFn onMSVideoOptimalLayoutChanged
      {
        get
        {
          return this._onMSVideoOptimalLayoutChanged_BackingField;
        }
        set
        {
          this._onMSVideoOptimalLayoutChanged_BackingField = value;
        }
      }

      public virtual string poster
      {
        get
        {
          return this._poster_BackingField;
        }
        set
        {
          this._poster_BackingField = value;
        }
      }

      public virtual uint videoHeight
      {
        get
        {
          return this._videoHeight_BackingField;
        }
      }

      public virtual uint videoWidth
      {
        get
        {
          return this._videoWidth_BackingField;
        }
      }

      public virtual bool webkitDisplayingFullscreen
      {
        get
        {
          return this._webkitDisplayingFullscreen_BackingField;
        }
      }

      public virtual bool webkitSupportsFullscreen
      {
        get
        {
          return this._webkitSupportsFullscreen_BackingField;
        }
      }

      public virtual uint width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public virtual extern dom.VideoPlaybackQuality getVideoPlaybackQuality();

      public virtual extern void msFrameStep(bool forward);

      public virtual extern void msInsertVideoEffect(string activatableClassId, bool effectRequired);

      public virtual extern void msInsertVideoEffect(
        string activatableClassId,
        bool effectRequired,
        object config);

      public virtual extern void msSetVideoRectangle(
        double left,
        double top,
        double right,
        double bottom);

      public virtual extern void webkitEnterFullScreen();

      public virtual extern void webkitEnterFullscreen();

      public virtual extern void webkitExitFullScreen();

      public virtual extern void webkitExitFullscreen();

      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLVideoElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLVideoElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLVideoElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.HTMLVideoElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLVideoElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLVideoElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLVideoElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.HTMLVideoElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onMSVideoFormatChangedFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.HTMLVideoElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class HTMLegendElement : IObject
    {
      private static dom.HTMLegendElement _prototype_BackingField;
      private readonly dom.HTMLFormElement _form_BackingField;

      public static dom.HTMLegendElement prototype
      {
        get
        {
          return dom.HTMLegendElement._prototype_BackingField;
        }
        set
        {
          dom.HTMLegendElement._prototype_BackingField = value;
        }
      }

      public virtual dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class HashChangeEvent : dom.Event
    {
      private static dom.HashChangeEvent _prototype_BackingField;
      private readonly string _newURL_BackingField;
      private readonly string _oldURL_BackingField;

      public extern HashChangeEvent(string type);

      public extern HashChangeEvent(string type, dom.HashChangeEventInit eventInitDict);

      public static dom.HashChangeEvent prototype
      {
        get
        {
          return dom.HashChangeEvent._prototype_BackingField;
        }
        set
        {
          dom.HashChangeEvent._prototype_BackingField = value;
        }
      }

      public virtual string newURL
      {
        get
        {
          return this._newURL_BackingField;
        }
      }

      public virtual string oldURL
      {
        get
        {
          return this._oldURL_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Headers : IObject
    {
      private static dom.Headers _prototype_BackingField;

      public extern Headers();

      public extern Headers(dom.HeadersInit init);

      public extern Headers(
        Union<dom.Headers, string[][], dom.HeadersInit.HeadersInitConfig> init);

      public extern Headers(dom.Headers init);

      public extern Headers(string[][] init);

      public extern Headers(dom.HeadersInit.HeadersInitConfig init);

      public static dom.Headers prototype
      {
        get
        {
          return dom.Headers._prototype_BackingField;
        }
        set
        {
          dom.Headers._prototype_BackingField = value;
        }
      }

      public virtual extern void append(string name, string value);

      public virtual extern void delete(string name);

      public virtual extern void forEach(es5.Function callback);

      public virtual extern void forEach(Action callback);

      public virtual extern void forEach(Func<object> callback);

      public virtual extern void forEach(es5.Function callback, object thisArg);

      public virtual extern void forEach(Action callback, object thisArg);

      public virtual extern void forEach(Func<object> callback, object thisArg);

      public virtual extern string get(string name);

      public virtual extern bool has(string name);

      public virtual extern void set(string name, string value);
    }

    [CombinedClass]
    [FormerInterface]
    public class History : IObject
    {
      private static dom.History _prototype_BackingField;
      private readonly uint _length_BackingField;
      private dom.ScrollRestoration _scrollRestoration_BackingField;
      private readonly object _state_BackingField;

      public static dom.History prototype
      {
        get
        {
          return dom.History._prototype_BackingField;
        }
        set
        {
          dom.History._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual dom.ScrollRestoration scrollRestoration
      {
        get
        {
          return this._scrollRestoration_BackingField;
        }
        set
        {
          this._scrollRestoration_BackingField = value;
        }
      }

      public virtual object state
      {
        get
        {
          return this._state_BackingField;
        }
      }

      public virtual extern void back();

      public virtual extern void back(object distance);

      public virtual extern void forward();

      public virtual extern void forward(object distance);

      public virtual extern void go();

      public virtual extern void go(object delta);

      public virtual extern void pushState(object data);

      public virtual extern void pushState(object data, string title);

      public virtual extern void pushState(object data, string title, string url);

      public virtual extern void replaceState(object data);

      public virtual extern void replaceState(object data, string title);

      public virtual extern void replaceState(object data, string title, string url);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HkdfCtrParams : dom.Algorithm
    {
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> _context_BackingField;
      private Union<string, dom.Algorithm> _hash_BackingField;
      private Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> _label_BackingField;

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> context
      {
        get
        {
          return this._context_BackingField;
        }
        set
        {
          this._context_BackingField = value;
        }
      }

      public Union<string, dom.Algorithm> hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> label
      {
        get
        {
          return this._label_BackingField;
        }
        set
        {
          this._label_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public class IDBArrayKey : es5.Array<Union<double, string, es5.Date, dom.IDBArrayKey>>
    {
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBCursor : IObject
    {
      private static dom.IDBCursor _prototype_BackingField;
      private static readonly string _NEXT_Static_BackingField;
      private static readonly string _NEXT_NO_DUPLICATE_Static_BackingField;
      private static readonly string _PREV_Static_BackingField;
      private static readonly string _PREV_NO_DUPLICATE_Static_BackingField;
      private readonly dom.IDBCursorDirection _direction_BackingField;
      private readonly Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> _key_BackingField;
      private readonly object _primaryKey_BackingField;
      private readonly Union<dom.IDBObjectStore, dom.IDBIndex> _source_BackingField;
      private readonly string _NEXT_BackingField;
      private readonly string _NEXT_NO_DUPLICATE_BackingField;
      private readonly string _PREV_BackingField;
      private readonly string _PREV_NO_DUPLICATE_BackingField;

      public static dom.IDBCursor prototype
      {
        get
        {
          return dom.IDBCursor._prototype_BackingField;
        }
        set
        {
          dom.IDBCursor._prototype_BackingField = value;
        }
      }

      [Name("NEXT")]
      public static string NEXT_Static
      {
        get
        {
          return dom.IDBCursor._NEXT_Static_BackingField;
        }
      }

      [Name("NEXT_NO_DUPLICATE")]
      public static string NEXT_NO_DUPLICATE_Static
      {
        get
        {
          return dom.IDBCursor._NEXT_NO_DUPLICATE_Static_BackingField;
        }
      }

      [Name("PREV")]
      public static string PREV_Static
      {
        get
        {
          return dom.IDBCursor._PREV_Static_BackingField;
        }
      }

      [Name("PREV_NO_DUPLICATE")]
      public static string PREV_NO_DUPLICATE_Static
      {
        get
        {
          return dom.IDBCursor._PREV_NO_DUPLICATE_Static_BackingField;
        }
      }

      public virtual dom.IDBCursorDirection direction
      {
        get
        {
          return this._direction_BackingField;
        }
      }

      public virtual Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key
      {
        get
        {
          return this._key_BackingField;
        }
      }

      public virtual object primaryKey
      {
        get
        {
          return this._primaryKey_BackingField;
        }
      }

      public virtual Union<dom.IDBObjectStore, dom.IDBIndex> source
      {
        get
        {
          return this._source_BackingField;
        }
      }

      public virtual extern void advance(double count);

      [Name("continue")]
      public virtual extern void @continue();

      [Name("continue")]
      public virtual extern void @continue(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

      [Name("continue")]
      public virtual extern void @continue(dom.IDBKeyRange key);

      [Name("continue")]
      public virtual extern void @continue(double key);

      [Name("continue")]
      public virtual extern void @continue(string key);

      [Name("continue")]
      public virtual extern void @continue(es5.Date key);

      [Name("continue")]
      public virtual extern void @continue(dom.IDBArrayKey key);

      public virtual extern dom.IDBRequest delete();

      public virtual extern dom.IDBRequest update(object value);

      public virtual string NEXT
      {
        get
        {
          return this._NEXT_BackingField;
        }
      }

      public virtual string NEXT_NO_DUPLICATE
      {
        get
        {
          return this._NEXT_NO_DUPLICATE_BackingField;
        }
      }

      public virtual string PREV
      {
        get
        {
          return this._PREV_BackingField;
        }
      }

      public virtual string PREV_NO_DUPLICATE
      {
        get
        {
          return this._PREV_NO_DUPLICATE_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBCursorWithValue : dom.IDBCursor
    {
      private static dom.IDBCursorWithValue _prototype_BackingField;
      private readonly object _value_BackingField;

      public static dom.IDBCursorWithValue prototype
      {
        get
        {
          return dom.IDBCursorWithValue._prototype_BackingField;
        }
        set
        {
          dom.IDBCursorWithValue._prototype_BackingField = value;
        }
      }

      public virtual object value
      {
        get
        {
          return this._value_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class IDBDatabaseEventMap : IObject
    {
      private dom.Event _abort_BackingField;
      private dom.Event _error_BackingField;

      public dom.Event abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"abort\"")]
        public static readonly KeyOf<dom.IDBDatabaseEventMap> abort;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.IDBDatabaseEventMap> error;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBDatabase : dom.EventTarget
    {
      private static dom.IDBDatabase _prototype_BackingField;
      private readonly string _name_BackingField;
      private readonly dom.DOMStringList _objectStoreNames_BackingField;
      private dom.IDBDatabase.onabortFn _onabort_BackingField;
      private dom.IDBDatabase.onabortFn _onerror_BackingField;
      private dom.IDBDatabase.onabortFn _onversionchange_BackingField;
      private readonly double _version_BackingField;

      public static dom.IDBDatabase prototype
      {
        get
        {
          return dom.IDBDatabase._prototype_BackingField;
        }
        set
        {
          dom.IDBDatabase._prototype_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual dom.DOMStringList objectStoreNames
      {
        get
        {
          return this._objectStoreNames_BackingField;
        }
      }

      public virtual dom.IDBDatabase.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.IDBDatabase.onabortFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.IDBDatabase.onabortFn onversionchange
      {
        get
        {
          return this._onversionchange_BackingField;
        }
        set
        {
          this._onversionchange_BackingField = value;
        }
      }

      public virtual double version
      {
        get
        {
          return this._version_BackingField;
        }
      }

      public virtual extern void close();

      public virtual extern dom.IDBObjectStore createObjectStore(string name);

      public virtual extern dom.IDBObjectStore createObjectStore(
        string name,
        dom.IDBObjectStoreParameters optionalParameters);

      public virtual extern void deleteObjectStore(string name);

      public virtual extern dom.IDBTransaction transaction(Union<string, string[]> storeNames);

      public virtual extern dom.IDBTransaction transaction(string storeNames);

      public virtual extern dom.IDBTransaction transaction(string[] storeNames);

      public virtual extern dom.IDBTransaction transaction(
        Union<string, string[]> storeNames,
        dom.IDBTransactionMode mode);

      public virtual extern dom.IDBTransaction transaction(
        string storeNames,
        dom.IDBTransactionMode mode);

      public virtual extern dom.IDBTransaction transaction(
        string[] storeNames,
        dom.IDBTransactionMode mode);

      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBDatabase.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBDatabase.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBDatabase.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBDatabase.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBDatabase.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBDatabase.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBDatabase.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBDatabase.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onabortFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class IDBEnvironment : dom.IDBEnvironment.Interface, IObject
    {
      private readonly dom.IDBFactory _indexedDB_BackingField;

      public dom.IDBFactory indexedDB
      {
        get
        {
          return this._indexedDB_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.IDBFactory indexedDB { get; }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBFactory : IObject
    {
      private static dom.IDBFactory _prototype_BackingField;

      public static dom.IDBFactory prototype
      {
        get
        {
          return dom.IDBFactory._prototype_BackingField;
        }
        set
        {
          dom.IDBFactory._prototype_BackingField = value;
        }
      }

      public virtual extern double cmp(object first, object second);

      public virtual extern dom.IDBOpenDBRequest deleteDatabase(string name);

      public virtual extern dom.IDBOpenDBRequest open(string name);

      public virtual extern dom.IDBOpenDBRequest open(string name, double version);
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBIndex : IObject
    {
      private static dom.IDBIndex _prototype_BackingField;
      private readonly Union<string, string[]> _keyPath_BackingField;
      private bool _multiEntry_BackingField;
      private readonly string _name_BackingField;
      private readonly dom.IDBObjectStore _objectStore_BackingField;
      private readonly bool _unique_BackingField;

      public static dom.IDBIndex prototype
      {
        get
        {
          return dom.IDBIndex._prototype_BackingField;
        }
        set
        {
          dom.IDBIndex._prototype_BackingField = value;
        }
      }

      public virtual Union<string, string[]> keyPath
      {
        get
        {
          return this._keyPath_BackingField;
        }
      }

      public virtual bool multiEntry
      {
        get
        {
          return this._multiEntry_BackingField;
        }
        set
        {
          this._multiEntry_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual dom.IDBObjectStore objectStore
      {
        get
        {
          return this._objectStore_BackingField;
        }
      }

      public virtual bool unique
      {
        get
        {
          return this._unique_BackingField;
        }
      }

      public virtual extern dom.IDBRequest count();

      public virtual extern dom.IDBRequest count(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

      public virtual extern dom.IDBRequest count(dom.IDBKeyRange key);

      public virtual extern dom.IDBRequest count(double key);

      public virtual extern dom.IDBRequest count(string key);

      public virtual extern dom.IDBRequest count(es5.Date key);

      public virtual extern dom.IDBRequest count(dom.IDBArrayKey key);

      public virtual extern dom.IDBRequest get(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

      public virtual extern dom.IDBRequest get(dom.IDBKeyRange key);

      public virtual extern dom.IDBRequest get(double key);

      public virtual extern dom.IDBRequest get(string key);

      public virtual extern dom.IDBRequest get(es5.Date key);

      public virtual extern dom.IDBRequest get(dom.IDBArrayKey key);

      public virtual extern dom.IDBRequest getKey(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

      public virtual extern dom.IDBRequest getKey(dom.IDBKeyRange key);

      public virtual extern dom.IDBRequest getKey(double key);

      public virtual extern dom.IDBRequest getKey(string key);

      public virtual extern dom.IDBRequest getKey(es5.Date key);

      public virtual extern dom.IDBRequest getKey(dom.IDBArrayKey key);

      public virtual extern dom.IDBRequest openCursor();

      public virtual extern dom.IDBRequest openCursor(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range);

      public virtual extern dom.IDBRequest openCursor(dom.IDBKeyRange range);

      public virtual extern dom.IDBRequest openCursor(double range);

      public virtual extern dom.IDBRequest openCursor(string range);

      public virtual extern dom.IDBRequest openCursor(es5.Date range);

      public virtual extern dom.IDBRequest openCursor(dom.IDBArrayKey range);

      public virtual extern dom.IDBRequest openCursor(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        dom.IDBKeyRange range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        double range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        string range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        es5.Date range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        dom.IDBArrayKey range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openKeyCursor();

      public virtual extern dom.IDBRequest openKeyCursor(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range);

      public virtual extern dom.IDBRequest openKeyCursor(dom.IDBKeyRange range);

      public virtual extern dom.IDBRequest openKeyCursor(double range);

      public virtual extern dom.IDBRequest openKeyCursor(string range);

      public virtual extern dom.IDBRequest openKeyCursor(es5.Date range);

      public virtual extern dom.IDBRequest openKeyCursor(dom.IDBArrayKey range);

      public virtual extern dom.IDBRequest openKeyCursor(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openKeyCursor(
        dom.IDBKeyRange range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openKeyCursor(
        double range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openKeyCursor(
        string range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openKeyCursor(
        es5.Date range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openKeyCursor(
        dom.IDBArrayKey range,
        dom.IDBCursorDirection direction);
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBKeyRange : IObject
    {
      private static dom.IDBKeyRange _prototype_BackingField;
      private readonly object _lower_BackingField;
      private readonly bool _lowerOpen_BackingField;
      private readonly object _upper_BackingField;
      private readonly bool _upperOpen_BackingField;

      public static dom.IDBKeyRange prototype
      {
        get
        {
          return dom.IDBKeyRange._prototype_BackingField;
        }
        set
        {
          dom.IDBKeyRange._prototype_BackingField = value;
        }
      }

      public static extern dom.IDBKeyRange bound(object lower, object upper);

      public static extern dom.IDBKeyRange bound(object lower, object upper, bool lowerOpen);

      public static extern dom.IDBKeyRange bound(
        object lower,
        object upper,
        bool lowerOpen,
        bool upperOpen);

      public static extern dom.IDBKeyRange lowerBound(object lower);

      public static extern dom.IDBKeyRange lowerBound(object lower, bool open);

      public static extern dom.IDBKeyRange only(object value);

      public static extern dom.IDBKeyRange upperBound(object upper);

      public static extern dom.IDBKeyRange upperBound(object upper, bool open);

      public virtual object lower
      {
        get
        {
          return this._lower_BackingField;
        }
      }

      public virtual bool lowerOpen
      {
        get
        {
          return this._lowerOpen_BackingField;
        }
      }

      public virtual object upper
      {
        get
        {
          return this._upper_BackingField;
        }
      }

      public virtual bool upperOpen
      {
        get
        {
          return this._upperOpen_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBObjectStore : IObject
    {
      private static dom.IDBObjectStore _prototype_BackingField;
      private bool _autoIncrement_BackingField;
      private readonly dom.DOMStringList _indexNames_BackingField;
      private readonly Union<string, string[], Null> _keyPath_BackingField;
      private readonly string _name_BackingField;
      private readonly dom.IDBTransaction _transaction_BackingField;

      public static dom.IDBObjectStore prototype
      {
        get
        {
          return dom.IDBObjectStore._prototype_BackingField;
        }
        set
        {
          dom.IDBObjectStore._prototype_BackingField = value;
        }
      }

      public virtual bool autoIncrement
      {
        get
        {
          return this._autoIncrement_BackingField;
        }
        set
        {
          this._autoIncrement_BackingField = value;
        }
      }

      public virtual dom.DOMStringList indexNames
      {
        get
        {
          return this._indexNames_BackingField;
        }
      }

      public virtual Union<string, string[], Null> keyPath
      {
        get
        {
          return this._keyPath_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual dom.IDBTransaction transaction
      {
        get
        {
          return this._transaction_BackingField;
        }
      }

      public virtual extern dom.IDBRequest add(object value);

      public virtual extern dom.IDBRequest add(
        object value,
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

      public virtual extern dom.IDBRequest add(object value, dom.IDBKeyRange key);

      public virtual extern dom.IDBRequest add(object value, double key);

      public virtual extern dom.IDBRequest add(object value, string key);

      public virtual extern dom.IDBRequest add(object value, es5.Date key);

      public virtual extern dom.IDBRequest add(object value, dom.IDBArrayKey key);

      public virtual extern dom.IDBRequest clear();

      public virtual extern dom.IDBRequest count();

      public virtual extern dom.IDBRequest count(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

      public virtual extern dom.IDBRequest count(dom.IDBKeyRange key);

      public virtual extern dom.IDBRequest count(double key);

      public virtual extern dom.IDBRequest count(string key);

      public virtual extern dom.IDBRequest count(es5.Date key);

      public virtual extern dom.IDBRequest count(dom.IDBArrayKey key);

      public virtual extern dom.IDBIndex createIndex(
        string name,
        Union<string, string[]> keyPath);

      public virtual extern dom.IDBIndex createIndex(string name, string keyPath);

      public virtual extern dom.IDBIndex createIndex(string name, string[] keyPath);

      public virtual extern dom.IDBIndex createIndex(
        string name,
        Union<string, string[]> keyPath,
        dom.IDBIndexParameters optionalParameters);

      public virtual extern dom.IDBIndex createIndex(
        string name,
        string keyPath,
        dom.IDBIndexParameters optionalParameters);

      public virtual extern dom.IDBIndex createIndex(
        string name,
        string[] keyPath,
        dom.IDBIndexParameters optionalParameters);

      public virtual extern dom.IDBRequest delete(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

      public virtual extern dom.IDBRequest delete(dom.IDBKeyRange key);

      public virtual extern dom.IDBRequest delete(double key);

      public virtual extern dom.IDBRequest delete(string key);

      public virtual extern dom.IDBRequest delete(es5.Date key);

      public virtual extern dom.IDBRequest delete(dom.IDBArrayKey key);

      public virtual extern void deleteIndex(string indexName);

      public virtual extern dom.IDBRequest get(object key);

      public virtual extern dom.IDBIndex index(string name);

      public virtual extern dom.IDBRequest openCursor();

      public virtual extern dom.IDBRequest openCursor(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range);

      public virtual extern dom.IDBRequest openCursor(dom.IDBKeyRange range);

      public virtual extern dom.IDBRequest openCursor(double range);

      public virtual extern dom.IDBRequest openCursor(string range);

      public virtual extern dom.IDBRequest openCursor(es5.Date range);

      public virtual extern dom.IDBRequest openCursor(dom.IDBArrayKey range);

      public virtual extern dom.IDBRequest openCursor(
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        dom.IDBKeyRange range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        double range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        string range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        es5.Date range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest openCursor(
        dom.IDBArrayKey range,
        dom.IDBCursorDirection direction);

      public virtual extern dom.IDBRequest put(object value);

      public virtual extern dom.IDBRequest put(
        object value,
        Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

      public virtual extern dom.IDBRequest put(object value, dom.IDBKeyRange key);

      public virtual extern dom.IDBRequest put(object value, double key);

      public virtual extern dom.IDBRequest put(object value, string key);

      public virtual extern dom.IDBRequest put(object value, es5.Date key);

      public virtual extern dom.IDBRequest put(object value, dom.IDBArrayKey key);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class IDBOpenDBRequestEventMap : dom.IDBRequestEventMap
    {
      private dom.Event _blocked_BackingField;
      private dom.IDBVersionChangeEvent _upgradeneeded_BackingField;

      public dom.Event blocked
      {
        get
        {
          return this._blocked_BackingField;
        }
        set
        {
          this._blocked_BackingField = value;
        }
      }

      public dom.IDBVersionChangeEvent upgradeneeded
      {
        get
        {
          return this._upgradeneeded_BackingField;
        }
        set
        {
          this._upgradeneeded_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"blocked\"")]
        public static readonly KeyOf<dom.IDBOpenDBRequestEventMap> blocked;
        [Template("\"upgradeneeded\"")]
        public static readonly KeyOf<dom.IDBOpenDBRequestEventMap> upgradeneeded;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBOpenDBRequest : dom.IDBRequest
    {
      private static dom.IDBOpenDBRequest _prototype_BackingField;
      private dom.IDBOpenDBRequest.onblockedFn _onblocked_BackingField;
      private dom.IDBOpenDBRequest.onupgradeneededFn _onupgradeneeded_BackingField;

      public static dom.IDBOpenDBRequest prototype
      {
        get
        {
          return dom.IDBOpenDBRequest._prototype_BackingField;
        }
        set
        {
          dom.IDBOpenDBRequest._prototype_BackingField = value;
        }
      }

      public virtual dom.IDBOpenDBRequest.onblockedFn onblocked
      {
        get
        {
          return this._onblocked_BackingField;
        }
        set
        {
          this._onblocked_BackingField = value;
        }
      }

      public virtual dom.IDBOpenDBRequest.onupgradeneededFn onupgradeneeded
      {
        get
        {
          return this._onupgradeneeded_BackingField;
        }
        set
        {
          this._onupgradeneeded_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBOpenDBRequest.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBOpenDBRequest.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBOpenDBRequest.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBOpenDBRequest.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBOpenDBRequest.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBOpenDBRequest.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBOpenDBRequest.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBOpenDBRequest.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onblockedFn(dom.Event ev);

      [Generated]
      public delegate void onupgradeneededFn(dom.IDBVersionChangeEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class IDBRequestEventMap : IObject
    {
      private dom.Event _error_BackingField;
      private dom.Event _success_BackingField;

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.Event success
      {
        get
        {
          return this._success_BackingField;
        }
        set
        {
          this._success_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"error\"")]
        public static readonly KeyOf<dom.IDBRequestEventMap> error;
        [Template("\"success\"")]
        public static readonly KeyOf<dom.IDBRequestEventMap> success;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBRequest : dom.EventTarget
    {
      private static dom.IDBRequest _prototype_BackingField;
      private readonly dom.DOMException _error_BackingField;
      private dom.IDBRequest.onerrorFn _onerror_BackingField;
      private dom.IDBRequest.onerrorFn _onsuccess_BackingField;
      private readonly dom.IDBRequestReadyState _readyState_BackingField;
      private readonly object _result_BackingField;
      private readonly Union<dom.IDBObjectStore, dom.IDBIndex, dom.IDBCursor> _source_BackingField;
      private readonly dom.IDBTransaction _transaction_BackingField;

      public static dom.IDBRequest prototype
      {
        get
        {
          return dom.IDBRequest._prototype_BackingField;
        }
        set
        {
          dom.IDBRequest._prototype_BackingField = value;
        }
      }

      public virtual dom.DOMException error
      {
        get
        {
          return this._error_BackingField;
        }
      }

      public virtual dom.IDBRequest.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.IDBRequest.onerrorFn onsuccess
      {
        get
        {
          return this._onsuccess_BackingField;
        }
        set
        {
          this._onsuccess_BackingField = value;
        }
      }

      public virtual dom.IDBRequestReadyState readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual object result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual Union<dom.IDBObjectStore, dom.IDBIndex, dom.IDBCursor> source
      {
        get
        {
          return this._source_BackingField;
        }
      }

      public virtual dom.IDBTransaction transaction
      {
        get
        {
          return this._transaction_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBRequest.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBRequest.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBRequest.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBRequest.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBRequest.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBRequest.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBRequest.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBRequest.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onerrorFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class IDBTransactionEventMap : IObject
    {
      private dom.Event _abort_BackingField;
      private dom.Event _complete_BackingField;
      private dom.Event _error_BackingField;

      public dom.Event abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      public dom.Event complete
      {
        get
        {
          return this._complete_BackingField;
        }
        set
        {
          this._complete_BackingField = value;
        }
      }

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"abort\"")]
        public static readonly KeyOf<dom.IDBTransactionEventMap> abort;
        [Template("\"complete\"")]
        public static readonly KeyOf<dom.IDBTransactionEventMap> complete;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.IDBTransactionEventMap> error;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBTransaction : dom.EventTarget
    {
      private static dom.IDBTransaction _prototype_BackingField;
      private static readonly string _READ_ONLY_Static_BackingField;
      private static readonly string _READ_WRITE_Static_BackingField;
      private static readonly string _VERSION_CHANGE_Static_BackingField;
      private readonly dom.IDBDatabase _db_BackingField;
      private readonly dom.DOMException _error_BackingField;
      private readonly dom.IDBTransactionMode _mode_BackingField;
      private dom.IDBTransaction.onabortFn _onabort_BackingField;
      private dom.IDBTransaction.onabortFn _oncomplete_BackingField;
      private dom.IDBTransaction.onabortFn _onerror_BackingField;
      private readonly string _READ_ONLY_BackingField;
      private readonly string _READ_WRITE_BackingField;
      private readonly string _VERSION_CHANGE_BackingField;

      public static dom.IDBTransaction prototype
      {
        get
        {
          return dom.IDBTransaction._prototype_BackingField;
        }
        set
        {
          dom.IDBTransaction._prototype_BackingField = value;
        }
      }

      [Name("READ_ONLY")]
      public static string READ_ONLY_Static
      {
        get
        {
          return dom.IDBTransaction._READ_ONLY_Static_BackingField;
        }
      }

      [Name("READ_WRITE")]
      public static string READ_WRITE_Static
      {
        get
        {
          return dom.IDBTransaction._READ_WRITE_Static_BackingField;
        }
      }

      [Name("VERSION_CHANGE")]
      public static string VERSION_CHANGE_Static
      {
        get
        {
          return dom.IDBTransaction._VERSION_CHANGE_Static_BackingField;
        }
      }

      public virtual dom.IDBDatabase db
      {
        get
        {
          return this._db_BackingField;
        }
      }

      public virtual dom.DOMException error
      {
        get
        {
          return this._error_BackingField;
        }
      }

      public virtual dom.IDBTransactionMode mode
      {
        get
        {
          return this._mode_BackingField;
        }
      }

      public virtual dom.IDBTransaction.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.IDBTransaction.onabortFn oncomplete
      {
        get
        {
          return this._oncomplete_BackingField;
        }
        set
        {
          this._oncomplete_BackingField = value;
        }
      }

      public virtual dom.IDBTransaction.onabortFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual extern void abort();

      public virtual extern dom.IDBObjectStore objectStore(string name);

      public virtual string READ_ONLY
      {
        get
        {
          return this._READ_ONLY_BackingField;
        }
      }

      public virtual string READ_WRITE
      {
        get
        {
          return this._READ_WRITE_BackingField;
        }
      }

      public virtual string VERSION_CHANGE
      {
        get
        {
          return this._VERSION_CHANGE_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBTransaction.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBTransaction.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBTransaction.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.IDBTransaction.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBTransaction.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBTransaction.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBTransaction.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.IDBTransaction.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onabortFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class IDBVersionChangeEvent : dom.Event
    {
      private static dom.IDBVersionChangeEvent _prototype_BackingField;
      private readonly double? _newVersion_BackingField;
      private readonly double _oldVersion_BackingField;

      public static dom.IDBVersionChangeEvent prototype
      {
        get
        {
          return dom.IDBVersionChangeEvent._prototype_BackingField;
        }
        set
        {
          dom.IDBVersionChangeEvent._prototype_BackingField = value;
        }
      }

      public virtual double? newVersion
      {
        get
        {
          return this._newVersion_BackingField;
        }
      }

      public virtual double oldVersion
      {
        get
        {
          return this._oldVersion_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class IIRFilterNode : dom.AudioNode
    {
      private static dom.IIRFilterNode _prototype_BackingField;

      public static dom.IIRFilterNode prototype
      {
        get
        {
          return dom.IIRFilterNode._prototype_BackingField;
        }
        set
        {
          dom.IIRFilterNode._prototype_BackingField = value;
        }
      }

      public virtual extern void getFrequencyResponse(
        es5.Float32Array frequencyHz,
        es5.Float32Array magResponse,
        es5.Float32Array phaseResponse);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class ImageBitmap : IObject
    {
      public abstract uint height { get; }

      public abstract uint width { get; }

      public abstract void close();
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ImageBitmapOptions : IObject
    {
      private dom.Literals.Options.colorSpaceConversion _colorSpaceConversion_BackingField;
      private dom.Literals.Options.imageOrientation _imageOrientation_BackingField;
      private dom.Literals.Options.premultiplyAlpha _premultiplyAlpha_BackingField;
      private uint? _resizeHeight_BackingField;
      private dom.Literals.Options.resizeQuality _resizeQuality_BackingField;
      private uint? _resizeWidth_BackingField;

      public dom.Literals.Options.colorSpaceConversion colorSpaceConversion
      {
        get
        {
          return this._colorSpaceConversion_BackingField;
        }
        set
        {
          this._colorSpaceConversion_BackingField = value;
        }
      }

      public dom.Literals.Options.imageOrientation imageOrientation
      {
        get
        {
          return this._imageOrientation_BackingField;
        }
        set
        {
          this._imageOrientation_BackingField = value;
        }
      }

      public dom.Literals.Options.premultiplyAlpha premultiplyAlpha
      {
        get
        {
          return this._premultiplyAlpha_BackingField;
        }
        set
        {
          this._premultiplyAlpha_BackingField = value;
        }
      }

      public uint? resizeHeight
      {
        get
        {
          return this._resizeHeight_BackingField;
        }
        set
        {
          this._resizeHeight_BackingField = value;
        }
      }

      public dom.Literals.Options.resizeQuality resizeQuality
      {
        get
        {
          return this._resizeQuality_BackingField;
        }
        set
        {
          this._resizeQuality_BackingField = value;
        }
      }

      public uint? resizeWidth
      {
        get
        {
          return this._resizeWidth_BackingField;
        }
        set
        {
          this._resizeWidth_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ImageData : IObject
    {
      private static dom.ImageData _prototype_BackingField;
      private readonly es5.Uint8ClampedArray _data_BackingField;
      private readonly uint _height_BackingField;
      private readonly uint _width_BackingField;

      public extern ImageData(double width, double height);

      public extern ImageData(es5.Uint8ClampedArray array, double width, double height);

      public static dom.ImageData prototype
      {
        get
        {
          return dom.ImageData._prototype_BackingField;
        }
        set
        {
          dom.ImageData._prototype_BackingField = value;
        }
      }

      public virtual es5.Uint8ClampedArray data
      {
        get
        {
          return this._data_BackingField;
        }
      }

      public virtual uint height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual uint width
      {
        get
        {
          return this._width_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class IntersectionObserver : IObject
    {
      private static dom.IntersectionObserver _prototype_BackingField;
      private readonly dom.Element _root_BackingField;
      private readonly string _rootMargin_BackingField;
      private readonly double[] _thresholds_BackingField;

      public extern IntersectionObserver(dom.IntersectionObserverCallback callback);

      public extern IntersectionObserver(
        dom.IntersectionObserverCallback callback,
        dom.IntersectionObserverInit options);

      public static dom.IntersectionObserver prototype
      {
        get
        {
          return dom.IntersectionObserver._prototype_BackingField;
        }
        set
        {
          dom.IntersectionObserver._prototype_BackingField = value;
        }
      }

      public virtual dom.Element root
      {
        get
        {
          return this._root_BackingField;
        }
      }

      public virtual string rootMargin
      {
        get
        {
          return this._rootMargin_BackingField;
        }
      }

      public virtual double[] thresholds
      {
        get
        {
          return this._thresholds_BackingField;
        }
      }

      public virtual extern void disconnect();

      public virtual extern void observe(dom.Element target);

      public virtual extern dom.IntersectionObserverEntry[] takeRecords();

      public virtual extern void unobserve(dom.Element target);
    }

    [CombinedClass]
    [FormerInterface]
    public class IntersectionObserverEntry : IObject
    {
      private static dom.IntersectionObserverEntry _prototype_BackingField;
      private readonly Union<dom.ClientRect, dom.DOMRect> _boundingClientRect_BackingField;
      private readonly double _intersectionRatio_BackingField;
      private readonly Union<dom.ClientRect, dom.DOMRect> _intersectionRect_BackingField;
      private readonly bool _isIntersecting_BackingField;
      private readonly Union<dom.ClientRect, dom.DOMRect> _rootBounds_BackingField;
      private readonly dom.Element _target_BackingField;
      private readonly double _time_BackingField;

      public extern IntersectionObserverEntry(
        dom.IntersectionObserverEntryInit intersectionObserverEntryInit);

      public static dom.IntersectionObserverEntry prototype
      {
        get
        {
          return dom.IntersectionObserverEntry._prototype_BackingField;
        }
        set
        {
          dom.IntersectionObserverEntry._prototype_BackingField = value;
        }
      }

      public virtual Union<dom.ClientRect, dom.DOMRect> boundingClientRect
      {
        get
        {
          return this._boundingClientRect_BackingField;
        }
      }

      public virtual double intersectionRatio
      {
        get
        {
          return this._intersectionRatio_BackingField;
        }
      }

      public virtual Union<dom.ClientRect, dom.DOMRect> intersectionRect
      {
        get
        {
          return this._intersectionRect_BackingField;
        }
      }

      public virtual bool isIntersecting
      {
        get
        {
          return this._isIntersecting_BackingField;
        }
      }

      public virtual Union<dom.ClientRect, dom.DOMRect> rootBounds
      {
        get
        {
          return this._rootBounds_BackingField;
        }
      }

      public virtual dom.Element target
      {
        get
        {
          return this._target_BackingField;
        }
      }

      public virtual double time
      {
        get
        {
          return this._time_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class KeyboardEvent : dom.UIEvent
    {
      private static dom.KeyboardEvent _prototype_BackingField;
      private static readonly double _DOM_KEY_LOCATION_JOYSTICK_Static_BackingField;
      private static readonly uint _DOM_KEY_LOCATION_LEFT_Static_BackingField;
      private static readonly double _DOM_KEY_LOCATION_MOBILE_Static_BackingField;
      private static readonly uint _DOM_KEY_LOCATION_NUMPAD_Static_BackingField;
      private static readonly uint _DOM_KEY_LOCATION_RIGHT_Static_BackingField;
      private static readonly uint _DOM_KEY_LOCATION_STANDARD_Static_BackingField;
      private readonly bool _altKey_BackingField;
      private string _char_BackingField;
      private readonly uint _charCode_BackingField;
      private readonly string _code_BackingField;
      private readonly bool _ctrlKey_BackingField;
      private readonly string _key_BackingField;
      private readonly uint _keyCode_BackingField;
      private readonly uint _location_BackingField;
      private readonly bool _metaKey_BackingField;
      private readonly bool _repeat_BackingField;
      private readonly bool _shiftKey_BackingField;
      private readonly uint _which_BackingField;
      private readonly double _DOM_KEY_LOCATION_JOYSTICK_BackingField;
      private readonly uint _DOM_KEY_LOCATION_LEFT_BackingField;
      private readonly double _DOM_KEY_LOCATION_MOBILE_BackingField;
      private readonly uint _DOM_KEY_LOCATION_NUMPAD_BackingField;
      private readonly uint _DOM_KEY_LOCATION_RIGHT_BackingField;
      private readonly uint _DOM_KEY_LOCATION_STANDARD_BackingField;

      public extern KeyboardEvent(string typeArg);

      public extern KeyboardEvent(string typeArg, dom.KeyboardEventInit eventInitDict);

      public static dom.KeyboardEvent prototype
      {
        get
        {
          return dom.KeyboardEvent._prototype_BackingField;
        }
        set
        {
          dom.KeyboardEvent._prototype_BackingField = value;
        }
      }

      [Name("DOM_KEY_LOCATION_JOYSTICK")]
      public static double DOM_KEY_LOCATION_JOYSTICK_Static
      {
        get
        {
          return dom.KeyboardEvent._DOM_KEY_LOCATION_JOYSTICK_Static_BackingField;
        }
      }

      [Name("DOM_KEY_LOCATION_LEFT")]
      public static uint DOM_KEY_LOCATION_LEFT_Static
      {
        get
        {
          return dom.KeyboardEvent._DOM_KEY_LOCATION_LEFT_Static_BackingField;
        }
      }

      [Name("DOM_KEY_LOCATION_MOBILE")]
      public static double DOM_KEY_LOCATION_MOBILE_Static
      {
        get
        {
          return dom.KeyboardEvent._DOM_KEY_LOCATION_MOBILE_Static_BackingField;
        }
      }

      [Name("DOM_KEY_LOCATION_NUMPAD")]
      public static uint DOM_KEY_LOCATION_NUMPAD_Static
      {
        get
        {
          return dom.KeyboardEvent._DOM_KEY_LOCATION_NUMPAD_Static_BackingField;
        }
      }

      [Name("DOM_KEY_LOCATION_RIGHT")]
      public static uint DOM_KEY_LOCATION_RIGHT_Static
      {
        get
        {
          return dom.KeyboardEvent._DOM_KEY_LOCATION_RIGHT_Static_BackingField;
        }
      }

      [Name("DOM_KEY_LOCATION_STANDARD")]
      public static uint DOM_KEY_LOCATION_STANDARD_Static
      {
        get
        {
          return dom.KeyboardEvent._DOM_KEY_LOCATION_STANDARD_Static_BackingField;
        }
      }

      public virtual bool altKey
      {
        get
        {
          return this._altKey_BackingField;
        }
      }

      [Name("char")]
      public virtual string @char
      {
        get
        {
          return this._char_BackingField;
        }
        set
        {
          this._char_BackingField = value;
        }
      }

      public virtual uint charCode
      {
        get
        {
          return this._charCode_BackingField;
        }
      }

      public virtual string code
      {
        get
        {
          return this._code_BackingField;
        }
      }

      public virtual bool ctrlKey
      {
        get
        {
          return this._ctrlKey_BackingField;
        }
      }

      public virtual string key
      {
        get
        {
          return this._key_BackingField;
        }
      }

      public virtual uint keyCode
      {
        get
        {
          return this._keyCode_BackingField;
        }
      }

      public virtual uint location
      {
        get
        {
          return this._location_BackingField;
        }
      }

      public virtual bool metaKey
      {
        get
        {
          return this._metaKey_BackingField;
        }
      }

      public virtual bool repeat
      {
        get
        {
          return this._repeat_BackingField;
        }
      }

      public virtual bool shiftKey
      {
        get
        {
          return this._shiftKey_BackingField;
        }
      }

      public virtual uint which
      {
        get
        {
          return this._which_BackingField;
        }
      }

      public virtual extern bool getModifierState(string keyArg);

      public virtual extern void initKeyboardEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        string keyArg,
        double locationArg,
        string modifiersListArg,
        bool repeat,
        string locale);

      public virtual double DOM_KEY_LOCATION_JOYSTICK
      {
        get
        {
          return this._DOM_KEY_LOCATION_JOYSTICK_BackingField;
        }
      }

      public virtual uint DOM_KEY_LOCATION_LEFT
      {
        get
        {
          return this._DOM_KEY_LOCATION_LEFT_BackingField;
        }
      }

      public virtual double DOM_KEY_LOCATION_MOBILE
      {
        get
        {
          return this._DOM_KEY_LOCATION_MOBILE_BackingField;
        }
      }

      public virtual uint DOM_KEY_LOCATION_NUMPAD
      {
        get
        {
          return this._DOM_KEY_LOCATION_NUMPAD_BackingField;
        }
      }

      public virtual uint DOM_KEY_LOCATION_RIGHT
      {
        get
        {
          return this._DOM_KEY_LOCATION_RIGHT_BackingField;
        }
      }

      public virtual uint DOM_KEY_LOCATION_STANDARD
      {
        get
        {
          return this._DOM_KEY_LOCATION_STANDARD_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class LinkStyle : dom.LinkStyle.Interface, IObject
    {
      private readonly dom.StyleSheet _sheet_BackingField;

      public dom.StyleSheet sheet
      {
        get
        {
          return this._sheet_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.StyleSheet sheet { get; }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ListeningStateChangedEvent : dom.Event
    {
      private static dom.ListeningStateChangedEvent _prototype_BackingField;
      private readonly string _label_BackingField;
      private readonly dom.ListeningState _state_BackingField;

      public static dom.ListeningStateChangedEvent prototype
      {
        get
        {
          return dom.ListeningStateChangedEvent._prototype_BackingField;
        }
        set
        {
          dom.ListeningStateChangedEvent._prototype_BackingField = value;
        }
      }

      public virtual string label
      {
        get
        {
          return this._label_BackingField;
        }
      }

      public virtual dom.ListeningState state
      {
        get
        {
          return this._state_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Location : IObject
    {
      private static dom.Location _prototype_BackingField;
      private string _hash_BackingField;
      private string _host_BackingField;
      private string _hostname_BackingField;
      private string _href_BackingField;
      private readonly string _origin_BackingField;
      private string _pathname_BackingField;
      private string _port_BackingField;
      private string _protocol_BackingField;
      private string _search_BackingField;

      public static dom.Location prototype
      {
        get
        {
          return dom.Location._prototype_BackingField;
        }
        set
        {
          dom.Location._prototype_BackingField = value;
        }
      }

      public virtual string hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public virtual string host
      {
        get
        {
          return this._host_BackingField;
        }
        set
        {
          this._host_BackingField = value;
        }
      }

      public virtual string hostname
      {
        get
        {
          return this._hostname_BackingField;
        }
        set
        {
          this._hostname_BackingField = value;
        }
      }

      public virtual string href
      {
        get
        {
          return this._href_BackingField;
        }
        set
        {
          this._href_BackingField = value;
        }
      }

      public virtual string origin
      {
        get
        {
          return this._origin_BackingField;
        }
      }

      public virtual string pathname
      {
        get
        {
          return this._pathname_BackingField;
        }
        set
        {
          this._pathname_BackingField = value;
        }
      }

      public virtual string port
      {
        get
        {
          return this._port_BackingField;
        }
        set
        {
          this._port_BackingField = value;
        }
      }

      public virtual string protocol
      {
        get
        {
          return this._protocol_BackingField;
        }
        set
        {
          this._protocol_BackingField = value;
        }
      }

      public virtual string search
      {
        get
        {
          return this._search_BackingField;
        }
        set
        {
          this._search_BackingField = value;
        }
      }

      public virtual extern void assign(string url);

      public virtual extern void reload();

      public virtual extern void reload(bool forcedReload);

      public virtual extern void replace(string url);

      public virtual extern string toString();
    }

    [CombinedClass]
    [FormerInterface]
    public class MSAssertion : IObject
    {
      private static dom.MSAssertion _prototype_BackingField;
      private readonly string _id_BackingField;
      private readonly dom.MSCredentialType _type_BackingField;

      public static dom.MSAssertion prototype
      {
        get
        {
          return dom.MSAssertion._prototype_BackingField;
        }
        set
        {
          dom.MSAssertion._prototype_BackingField = value;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual dom.MSCredentialType type
      {
        get
        {
          return this._type_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSBlobBuilder : IObject
    {
      private static dom.MSBlobBuilder _prototype_BackingField;

      public static dom.MSBlobBuilder prototype
      {
        get
        {
          return dom.MSBlobBuilder._prototype_BackingField;
        }
        set
        {
          dom.MSBlobBuilder._prototype_BackingField = value;
        }
      }

      public virtual extern void append(object data);

      public virtual extern void append(object data, string endings);

      public virtual extern dom.Blob getBlob();

      public virtual extern dom.Blob getBlob(string contentType);
    }

    [CombinedClass]
    [FormerInterface]
    public class MSCredentials : IObject
    {
      private static dom.MSCredentials _prototype_BackingField;

      public static dom.MSCredentials prototype
      {
        get
        {
          return dom.MSCredentials._prototype_BackingField;
        }
        set
        {
          dom.MSCredentials._prototype_BackingField = value;
        }
      }

      public virtual extern es5.Promise<dom.MSAssertion> getAssertion(string challenge);

      public virtual extern es5.Promise<dom.MSAssertion> getAssertion(
        string challenge,
        dom.MSCredentialFilter filter);

      public virtual extern es5.Promise<dom.MSAssertion> getAssertion(
        string challenge,
        dom.MSCredentialFilter filter,
        dom.MSSignatureParameters @params);

      public virtual extern es5.Promise<dom.MSAssertion> makeCredential(
        dom.MSAccountInfo accountInfo,
        dom.MSCredentialParameters[] @params);

      public virtual extern es5.Promise<dom.MSAssertion> makeCredential(
        dom.MSAccountInfo accountInfo,
        dom.MSCredentialParameters[] @params,
        string challenge);
    }

    [CombinedClass]
    [FormerInterface]
    public class MSDCCEvent : dom.Event
    {
      private static dom.MSDCCEvent _prototype_BackingField;
      private readonly double _maxFr_BackingField;
      private readonly double _maxFs_BackingField;

      public extern MSDCCEvent(string type, dom.MSDCCEventInit eventInitDict);

      public static dom.MSDCCEvent prototype
      {
        get
        {
          return dom.MSDCCEvent._prototype_BackingField;
        }
        set
        {
          dom.MSDCCEvent._prototype_BackingField = value;
        }
      }

      public virtual double maxFr
      {
        get
        {
          return this._maxFr_BackingField;
        }
      }

      public virtual double maxFs
      {
        get
        {
          return this._maxFs_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSDSHEvent : dom.Event
    {
      private static dom.MSDSHEvent _prototype_BackingField;
      private readonly double[] _sources_BackingField;
      private readonly double _timestamp_BackingField;

      public extern MSDSHEvent(string type, dom.MSDSHEventInit eventInitDict);

      public static dom.MSDSHEvent prototype
      {
        get
        {
          return dom.MSDSHEvent._prototype_BackingField;
        }
        set
        {
          dom.MSDSHEvent._prototype_BackingField = value;
        }
      }

      public virtual double[] sources
      {
        get
        {
          return this._sources_BackingField;
        }
      }

      public virtual double timestamp
      {
        get
        {
          return this._timestamp_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSFIDOCredentialAssertion : dom.MSAssertion
    {
      private static dom.MSFIDOCredentialAssertion _prototype_BackingField;
      private readonly Union<string, dom.Algorithm> _algorithm_BackingField;
      private readonly object _attestation_BackingField;
      private readonly string _publicKey_BackingField;
      private readonly dom.MSTransportType[] _transportHints_BackingField;

      public static dom.MSFIDOCredentialAssertion prototype
      {
        get
        {
          return dom.MSFIDOCredentialAssertion._prototype_BackingField;
        }
        set
        {
          dom.MSFIDOCredentialAssertion._prototype_BackingField = value;
        }
      }

      public virtual Union<string, dom.Algorithm> algorithm
      {
        get
        {
          return this._algorithm_BackingField;
        }
      }

      public virtual object attestation
      {
        get
        {
          return this._attestation_BackingField;
        }
      }

      public virtual string publicKey
      {
        get
        {
          return this._publicKey_BackingField;
        }
      }

      public virtual dom.MSTransportType[] transportHints
      {
        get
        {
          return this._transportHints_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSFIDOSignature : IObject
    {
      private static dom.MSFIDOSignature _prototype_BackingField;
      private readonly string _authnrData_BackingField;
      private readonly string _clientData_BackingField;
      private readonly string _signature_BackingField;

      public static dom.MSFIDOSignature prototype
      {
        get
        {
          return dom.MSFIDOSignature._prototype_BackingField;
        }
        set
        {
          dom.MSFIDOSignature._prototype_BackingField = value;
        }
      }

      public virtual string authnrData
      {
        get
        {
          return this._authnrData_BackingField;
        }
      }

      public virtual string clientData
      {
        get
        {
          return this._clientData_BackingField;
        }
      }

      public virtual string signature
      {
        get
        {
          return this._signature_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSFIDOSignatureAssertion : dom.MSAssertion
    {
      private static dom.MSFIDOSignatureAssertion _prototype_BackingField;
      private readonly dom.MSFIDOSignature _signature_BackingField;

      public static dom.MSFIDOSignatureAssertion prototype
      {
        get
        {
          return dom.MSFIDOSignatureAssertion._prototype_BackingField;
        }
        set
        {
          dom.MSFIDOSignatureAssertion._prototype_BackingField = value;
        }
      }

      public virtual dom.MSFIDOSignature signature
      {
        get
        {
          return this._signature_BackingField;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class MSFileSaver : dom.MSFileSaver.Interface, IObject
    {
      public abstract bool msSaveBlob(object blob);

      public abstract bool msSaveBlob(object blob, string defaultName);

      public abstract bool msSaveOrOpenBlob(object blob);

      public abstract bool msSaveOrOpenBlob(object blob, string defaultName);

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        bool msSaveBlob(object blob);

        bool msSaveBlob(object blob, string defaultName);

        bool msSaveOrOpenBlob(object blob);

        bool msSaveOrOpenBlob(object blob, string defaultName);
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSGesture : IObject
    {
      private static dom.MSGesture _prototype_BackingField;
      private dom.Element _target_BackingField;

      public static dom.MSGesture prototype
      {
        get
        {
          return dom.MSGesture._prototype_BackingField;
        }
        set
        {
          dom.MSGesture._prototype_BackingField = value;
        }
      }

      public virtual dom.Element target
      {
        get
        {
          return this._target_BackingField;
        }
        set
        {
          this._target_BackingField = value;
        }
      }

      public virtual extern void addPointer(double pointerId);

      public virtual extern void stop();
    }

    [CombinedClass]
    [FormerInterface]
    public class MSGestureEvent : dom.UIEvent
    {
      private static dom.MSGestureEvent _prototype_BackingField;
      private static readonly double _MSGESTURE_FLAG_BEGIN_Static_BackingField;
      private static readonly double _MSGESTURE_FLAG_CANCEL_Static_BackingField;
      private static readonly double _MSGESTURE_FLAG_END_Static_BackingField;
      private static readonly double _MSGESTURE_FLAG_INERTIA_Static_BackingField;
      private static readonly double _MSGESTURE_FLAG_NONE_Static_BackingField;
      private readonly double _clientX_BackingField;
      private readonly double _clientY_BackingField;
      private readonly double _expansion_BackingField;
      private readonly object _gestureObject_BackingField;
      private readonly double _hwTimestamp_BackingField;
      private readonly double _offsetX_BackingField;
      private readonly double _offsetY_BackingField;
      private readonly double _rotation_BackingField;
      private readonly double _scale_BackingField;
      private readonly double _screenX_BackingField;
      private readonly double _screenY_BackingField;
      private readonly double _translationX_BackingField;
      private readonly double _translationY_BackingField;
      private readonly double _velocityAngular_BackingField;
      private readonly double _velocityExpansion_BackingField;
      private readonly double _velocityX_BackingField;
      private readonly double _velocityY_BackingField;
      private readonly double _MSGESTURE_FLAG_BEGIN_BackingField;
      private readonly double _MSGESTURE_FLAG_CANCEL_BackingField;
      private readonly double _MSGESTURE_FLAG_END_BackingField;
      private readonly double _MSGESTURE_FLAG_INERTIA_BackingField;
      private readonly double _MSGESTURE_FLAG_NONE_BackingField;

      public static dom.MSGestureEvent prototype
      {
        get
        {
          return dom.MSGestureEvent._prototype_BackingField;
        }
        set
        {
          dom.MSGestureEvent._prototype_BackingField = value;
        }
      }

      [Name("MSGESTURE_FLAG_BEGIN")]
      public static double MSGESTURE_FLAG_BEGIN_Static
      {
        get
        {
          return dom.MSGestureEvent._MSGESTURE_FLAG_BEGIN_Static_BackingField;
        }
      }

      [Name("MSGESTURE_FLAG_CANCEL")]
      public static double MSGESTURE_FLAG_CANCEL_Static
      {
        get
        {
          return dom.MSGestureEvent._MSGESTURE_FLAG_CANCEL_Static_BackingField;
        }
      }

      [Name("MSGESTURE_FLAG_END")]
      public static double MSGESTURE_FLAG_END_Static
      {
        get
        {
          return dom.MSGestureEvent._MSGESTURE_FLAG_END_Static_BackingField;
        }
      }

      [Name("MSGESTURE_FLAG_INERTIA")]
      public static double MSGESTURE_FLAG_INERTIA_Static
      {
        get
        {
          return dom.MSGestureEvent._MSGESTURE_FLAG_INERTIA_Static_BackingField;
        }
      }

      [Name("MSGESTURE_FLAG_NONE")]
      public static double MSGESTURE_FLAG_NONE_Static
      {
        get
        {
          return dom.MSGestureEvent._MSGESTURE_FLAG_NONE_Static_BackingField;
        }
      }

      public virtual double clientX
      {
        get
        {
          return this._clientX_BackingField;
        }
      }

      public virtual double clientY
      {
        get
        {
          return this._clientY_BackingField;
        }
      }

      public virtual double expansion
      {
        get
        {
          return this._expansion_BackingField;
        }
      }

      public virtual object gestureObject
      {
        get
        {
          return this._gestureObject_BackingField;
        }
      }

      public virtual double hwTimestamp
      {
        get
        {
          return this._hwTimestamp_BackingField;
        }
      }

      public virtual double offsetX
      {
        get
        {
          return this._offsetX_BackingField;
        }
      }

      public virtual double offsetY
      {
        get
        {
          return this._offsetY_BackingField;
        }
      }

      public virtual double rotation
      {
        get
        {
          return this._rotation_BackingField;
        }
      }

      public virtual double scale
      {
        get
        {
          return this._scale_BackingField;
        }
      }

      public virtual double screenX
      {
        get
        {
          return this._screenX_BackingField;
        }
      }

      public virtual double screenY
      {
        get
        {
          return this._screenY_BackingField;
        }
      }

      public virtual double translationX
      {
        get
        {
          return this._translationX_BackingField;
        }
      }

      public virtual double translationY
      {
        get
        {
          return this._translationY_BackingField;
        }
      }

      public virtual double velocityAngular
      {
        get
        {
          return this._velocityAngular_BackingField;
        }
      }

      public virtual double velocityExpansion
      {
        get
        {
          return this._velocityExpansion_BackingField;
        }
      }

      public virtual double velocityX
      {
        get
        {
          return this._velocityX_BackingField;
        }
      }

      public virtual double velocityY
      {
        get
        {
          return this._velocityY_BackingField;
        }
      }

      public virtual extern void initGestureEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        double detailArg,
        double screenXArg,
        double screenYArg,
        double clientXArg,
        double clientYArg,
        double offsetXArg,
        double offsetYArg,
        double translationXArg,
        double translationYArg,
        double scaleArg,
        double expansionArg,
        double rotationArg,
        double velocityXArg,
        double velocityYArg,
        double velocityExpansionArg,
        double velocityAngularArg,
        double hwTimestampArg);

      public virtual double MSGESTURE_FLAG_BEGIN
      {
        get
        {
          return this._MSGESTURE_FLAG_BEGIN_BackingField;
        }
      }

      public virtual double MSGESTURE_FLAG_CANCEL
      {
        get
        {
          return this._MSGESTURE_FLAG_CANCEL_BackingField;
        }
      }

      public virtual double MSGESTURE_FLAG_END
      {
        get
        {
          return this._MSGESTURE_FLAG_END_BackingField;
        }
      }

      public virtual double MSGESTURE_FLAG_INERTIA
      {
        get
        {
          return this._MSGESTURE_FLAG_INERTIA_BackingField;
        }
      }

      public virtual double MSGESTURE_FLAG_NONE
      {
        get
        {
          return this._MSGESTURE_FLAG_NONE_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSGraphicsTrust : IObject
    {
      private static dom.MSGraphicsTrust _prototype_BackingField;
      private readonly bool _constrictionActive_BackingField;
      private readonly string _status_BackingField;

      public static dom.MSGraphicsTrust prototype
      {
        get
        {
          return dom.MSGraphicsTrust._prototype_BackingField;
        }
        set
        {
          dom.MSGraphicsTrust._prototype_BackingField = value;
        }
      }

      public virtual bool constrictionActive
      {
        get
        {
          return this._constrictionActive_BackingField;
        }
      }

      public virtual string status
      {
        get
        {
          return this._status_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSInputMethodContextEventMap : IObject
    {
      private dom.Event _MSCandidateWindowHide_BackingField;
      private dom.Event _MSCandidateWindowShow_BackingField;
      private dom.Event _MSCandidateWindowUpdate_BackingField;

      public dom.Event MSCandidateWindowHide
      {
        get
        {
          return this._MSCandidateWindowHide_BackingField;
        }
        set
        {
          this._MSCandidateWindowHide_BackingField = value;
        }
      }

      public dom.Event MSCandidateWindowShow
      {
        get
        {
          return this._MSCandidateWindowShow_BackingField;
        }
        set
        {
          this._MSCandidateWindowShow_BackingField = value;
        }
      }

      public dom.Event MSCandidateWindowUpdate
      {
        get
        {
          return this._MSCandidateWindowUpdate_BackingField;
        }
        set
        {
          this._MSCandidateWindowUpdate_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"MSCandidateWindowHide\"")]
        public static readonly KeyOf<dom.MSInputMethodContextEventMap> MSCandidateWindowHide;
        [Template("\"MSCandidateWindowShow\"")]
        public static readonly KeyOf<dom.MSInputMethodContextEventMap> MSCandidateWindowShow;
        [Template("\"MSCandidateWindowUpdate\"")]
        public static readonly KeyOf<dom.MSInputMethodContextEventMap> MSCandidateWindowUpdate;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSInputMethodContext : dom.EventTarget
    {
      private static dom.MSInputMethodContext _prototype_BackingField;
      private readonly double _compositionEndOffset_BackingField;
      private readonly double _compositionStartOffset_BackingField;
      private dom.MSInputMethodContext.oncandidatewindowhideFn _oncandidatewindowhide_BackingField;
      private dom.MSInputMethodContext.oncandidatewindowhideFn _oncandidatewindowshow_BackingField;
      private dom.MSInputMethodContext.oncandidatewindowhideFn _oncandidatewindowupdate_BackingField;
      private readonly dom.HTMLElement _target_BackingField;

      public static dom.MSInputMethodContext prototype
      {
        get
        {
          return dom.MSInputMethodContext._prototype_BackingField;
        }
        set
        {
          dom.MSInputMethodContext._prototype_BackingField = value;
        }
      }

      public virtual double compositionEndOffset
      {
        get
        {
          return this._compositionEndOffset_BackingField;
        }
      }

      public virtual double compositionStartOffset
      {
        get
        {
          return this._compositionStartOffset_BackingField;
        }
      }

      public virtual dom.MSInputMethodContext.oncandidatewindowhideFn oncandidatewindowhide
      {
        get
        {
          return this._oncandidatewindowhide_BackingField;
        }
        set
        {
          this._oncandidatewindowhide_BackingField = value;
        }
      }

      public virtual dom.MSInputMethodContext.oncandidatewindowhideFn oncandidatewindowshow
      {
        get
        {
          return this._oncandidatewindowshow_BackingField;
        }
        set
        {
          this._oncandidatewindowshow_BackingField = value;
        }
      }

      public virtual dom.MSInputMethodContext.oncandidatewindowhideFn oncandidatewindowupdate
      {
        get
        {
          return this._oncandidatewindowupdate_BackingField;
        }
        set
        {
          this._oncandidatewindowupdate_BackingField = value;
        }
      }

      public virtual dom.HTMLElement target
      {
        get
        {
          return this._target_BackingField;
        }
      }

      public virtual extern dom.ClientRect getCandidateWindowClientRect();

      public virtual extern string[] getCompositionAlternatives();

      public virtual extern bool hasComposition();

      public virtual extern bool isCandidateWindowVisible();

      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MSInputMethodContext.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MSInputMethodContext.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MSInputMethodContext.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MSInputMethodContext.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MSInputMethodContext.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MSInputMethodContext.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MSInputMethodContext.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MSInputMethodContext.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void oncandidatewindowhideFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class MSMediaKeyError : IObject
    {
      private static dom.MSMediaKeyError _prototype_BackingField;
      private static readonly double _MS_MEDIA_KEYERR_CLIENT_Static_BackingField;
      private static readonly double _MS_MEDIA_KEYERR_DOMAIN_Static_BackingField;
      private static readonly double _MS_MEDIA_KEYERR_HARDWARECHANGE_Static_BackingField;
      private static readonly double _MS_MEDIA_KEYERR_OUTPUT_Static_BackingField;
      private static readonly double _MS_MEDIA_KEYERR_SERVICE_Static_BackingField;
      private static readonly double _MS_MEDIA_KEYERR_UNKNOWN_Static_BackingField;
      private readonly double _code_BackingField;
      private readonly double _systemCode_BackingField;
      private readonly double _MS_MEDIA_KEYERR_CLIENT_BackingField;
      private readonly double _MS_MEDIA_KEYERR_DOMAIN_BackingField;
      private readonly double _MS_MEDIA_KEYERR_HARDWARECHANGE_BackingField;
      private readonly double _MS_MEDIA_KEYERR_OUTPUT_BackingField;
      private readonly double _MS_MEDIA_KEYERR_SERVICE_BackingField;
      private readonly double _MS_MEDIA_KEYERR_UNKNOWN_BackingField;

      public static dom.MSMediaKeyError prototype
      {
        get
        {
          return dom.MSMediaKeyError._prototype_BackingField;
        }
        set
        {
          dom.MSMediaKeyError._prototype_BackingField = value;
        }
      }

      [Name("MS_MEDIA_KEYERR_CLIENT")]
      public static double MS_MEDIA_KEYERR_CLIENT_Static
      {
        get
        {
          return dom.MSMediaKeyError._MS_MEDIA_KEYERR_CLIENT_Static_BackingField;
        }
      }

      [Name("MS_MEDIA_KEYERR_DOMAIN")]
      public static double MS_MEDIA_KEYERR_DOMAIN_Static
      {
        get
        {
          return dom.MSMediaKeyError._MS_MEDIA_KEYERR_DOMAIN_Static_BackingField;
        }
      }

      [Name("MS_MEDIA_KEYERR_HARDWARECHANGE")]
      public static double MS_MEDIA_KEYERR_HARDWARECHANGE_Static
      {
        get
        {
          return dom.MSMediaKeyError._MS_MEDIA_KEYERR_HARDWARECHANGE_Static_BackingField;
        }
      }

      [Name("MS_MEDIA_KEYERR_OUTPUT")]
      public static double MS_MEDIA_KEYERR_OUTPUT_Static
      {
        get
        {
          return dom.MSMediaKeyError._MS_MEDIA_KEYERR_OUTPUT_Static_BackingField;
        }
      }

      [Name("MS_MEDIA_KEYERR_SERVICE")]
      public static double MS_MEDIA_KEYERR_SERVICE_Static
      {
        get
        {
          return dom.MSMediaKeyError._MS_MEDIA_KEYERR_SERVICE_Static_BackingField;
        }
      }

      [Name("MS_MEDIA_KEYERR_UNKNOWN")]
      public static double MS_MEDIA_KEYERR_UNKNOWN_Static
      {
        get
        {
          return dom.MSMediaKeyError._MS_MEDIA_KEYERR_UNKNOWN_Static_BackingField;
        }
      }

      public virtual double code
      {
        get
        {
          return this._code_BackingField;
        }
      }

      public virtual double systemCode
      {
        get
        {
          return this._systemCode_BackingField;
        }
      }

      public virtual double MS_MEDIA_KEYERR_CLIENT
      {
        get
        {
          return this._MS_MEDIA_KEYERR_CLIENT_BackingField;
        }
      }

      public virtual double MS_MEDIA_KEYERR_DOMAIN
      {
        get
        {
          return this._MS_MEDIA_KEYERR_DOMAIN_BackingField;
        }
      }

      public virtual double MS_MEDIA_KEYERR_HARDWARECHANGE
      {
        get
        {
          return this._MS_MEDIA_KEYERR_HARDWARECHANGE_BackingField;
        }
      }

      public virtual double MS_MEDIA_KEYERR_OUTPUT
      {
        get
        {
          return this._MS_MEDIA_KEYERR_OUTPUT_BackingField;
        }
      }

      public virtual double MS_MEDIA_KEYERR_SERVICE
      {
        get
        {
          return this._MS_MEDIA_KEYERR_SERVICE_BackingField;
        }
      }

      public virtual double MS_MEDIA_KEYERR_UNKNOWN
      {
        get
        {
          return this._MS_MEDIA_KEYERR_UNKNOWN_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSMediaKeyMessageEvent : dom.Event
    {
      private static dom.MSMediaKeyMessageEvent _prototype_BackingField;
      private readonly string _destinationURL_BackingField;
      private readonly es5.Uint8Array _message_BackingField;

      public static dom.MSMediaKeyMessageEvent prototype
      {
        get
        {
          return dom.MSMediaKeyMessageEvent._prototype_BackingField;
        }
        set
        {
          dom.MSMediaKeyMessageEvent._prototype_BackingField = value;
        }
      }

      public virtual string destinationURL
      {
        get
        {
          return this._destinationURL_BackingField;
        }
      }

      public virtual es5.Uint8Array message
      {
        get
        {
          return this._message_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSMediaKeyNeededEvent : dom.Event
    {
      private static dom.MSMediaKeyNeededEvent _prototype_BackingField;
      private readonly es5.Uint8Array _initData_BackingField;

      public static dom.MSMediaKeyNeededEvent prototype
      {
        get
        {
          return dom.MSMediaKeyNeededEvent._prototype_BackingField;
        }
        set
        {
          dom.MSMediaKeyNeededEvent._prototype_BackingField = value;
        }
      }

      public virtual es5.Uint8Array initData
      {
        get
        {
          return this._initData_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSMediaKeySession : dom.EventTarget
    {
      private static dom.MSMediaKeySession _prototype_BackingField;
      private readonly dom.MSMediaKeyError _error_BackingField;
      private readonly string _keySystem_BackingField;
      private readonly string _sessionId_BackingField;

      public static dom.MSMediaKeySession prototype
      {
        get
        {
          return dom.MSMediaKeySession._prototype_BackingField;
        }
        set
        {
          dom.MSMediaKeySession._prototype_BackingField = value;
        }
      }

      public virtual dom.MSMediaKeyError error
      {
        get
        {
          return this._error_BackingField;
        }
      }

      public virtual string keySystem
      {
        get
        {
          return this._keySystem_BackingField;
        }
      }

      public virtual string sessionId
      {
        get
        {
          return this._sessionId_BackingField;
        }
      }

      public virtual extern void close();

      public virtual extern void update(es5.Uint8Array key);
    }

    [CombinedClass]
    [FormerInterface]
    public class MSMediaKeys : IObject
    {
      private static dom.MSMediaKeys _prototype_BackingField;
      private readonly string _keySystem_BackingField;

      public extern MSMediaKeys(string keySystem);

      public static dom.MSMediaKeys prototype
      {
        get
        {
          return dom.MSMediaKeys._prototype_BackingField;
        }
        set
        {
          dom.MSMediaKeys._prototype_BackingField = value;
        }
      }

      public static extern bool isTypeSupported(string keySystem);

      public static extern bool isTypeSupported(string keySystem, string type);

      public static extern string isTypeSupportedWithFeatures(string keySystem);

      public static extern string isTypeSupportedWithFeatures(string keySystem, string type);

      public virtual string keySystem
      {
        get
        {
          return this._keySystem_BackingField;
        }
      }

      public virtual extern dom.MSMediaKeySession createSession(
        string type,
        es5.Uint8Array initData);

      public virtual extern dom.MSMediaKeySession createSession(
        string type,
        es5.Uint8Array initData,
        es5.Uint8Array cdmData);
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class MSNavigatorDoNotTrack : dom.MSNavigatorDoNotTrack.Interface, IObject
    {
      public abstract bool confirmSiteSpecificTrackingException(
        dom.ConfirmSiteSpecificExceptionsInformation args);

      public abstract bool confirmWebWideTrackingException(dom.ExceptionInformation args);

      public abstract void removeSiteSpecificTrackingException(dom.ExceptionInformation args);

      public abstract void removeWebWideTrackingException(dom.ExceptionInformation args);

      public abstract void storeSiteSpecificTrackingException(
        dom.StoreSiteSpecificExceptionsInformation args);

      public abstract void storeWebWideTrackingException(dom.StoreExceptionsInformation args);

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        bool confirmSiteSpecificTrackingException(dom.ConfirmSiteSpecificExceptionsInformation args);

        bool confirmWebWideTrackingException(dom.ExceptionInformation args);

        void removeSiteSpecificTrackingException(dom.ExceptionInformation args);

        void removeWebWideTrackingException(dom.ExceptionInformation args);

        void storeSiteSpecificTrackingException(dom.StoreSiteSpecificExceptionsInformation args);

        void storeWebWideTrackingException(dom.StoreExceptionsInformation args);
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSPointerEvent : dom.MouseEvent
    {
      private static dom.MSPointerEvent _prototype_BackingField;
      private readonly object _currentPoint_BackingField;
      private readonly double _height_BackingField;
      private readonly double _hwTimestamp_BackingField;
      private readonly object _intermediatePoints_BackingField;
      private readonly bool _isPrimary_BackingField;
      private readonly double _pointerId_BackingField;
      private readonly object _pointerType_BackingField;
      private readonly double _pressure_BackingField;
      private readonly double _rotation_BackingField;
      private readonly double _tiltX_BackingField;
      private readonly double _tiltY_BackingField;
      private readonly double _width_BackingField;

      public extern MSPointerEvent(string typeArg);

      public extern MSPointerEvent(string typeArg, dom.PointerEventInit eventInitDict);

      public static dom.MSPointerEvent prototype
      {
        get
        {
          return dom.MSPointerEvent._prototype_BackingField;
        }
        set
        {
          dom.MSPointerEvent._prototype_BackingField = value;
        }
      }

      public virtual object currentPoint
      {
        get
        {
          return this._currentPoint_BackingField;
        }
      }

      public virtual double height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual double hwTimestamp
      {
        get
        {
          return this._hwTimestamp_BackingField;
        }
      }

      public virtual object intermediatePoints
      {
        get
        {
          return this._intermediatePoints_BackingField;
        }
      }

      public virtual bool isPrimary
      {
        get
        {
          return this._isPrimary_BackingField;
        }
      }

      public virtual double pointerId
      {
        get
        {
          return this._pointerId_BackingField;
        }
      }

      public virtual object pointerType
      {
        get
        {
          return this._pointerType_BackingField;
        }
      }

      public virtual double pressure
      {
        get
        {
          return this._pressure_BackingField;
        }
      }

      public virtual double rotation
      {
        get
        {
          return this._rotation_BackingField;
        }
      }

      public virtual double tiltX
      {
        get
        {
          return this._tiltX_BackingField;
        }
      }

      public virtual double tiltY
      {
        get
        {
          return this._tiltY_BackingField;
        }
      }

      public virtual double width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual extern void getCurrentPoint(dom.Element element);

      public virtual extern void getIntermediatePoints(dom.Element element);

      public virtual extern void initPointerEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        double detailArg,
        double screenXArg,
        double screenYArg,
        double clientXArg,
        double clientYArg,
        bool ctrlKeyArg,
        bool altKeyArg,
        bool shiftKeyArg,
        bool metaKeyArg,
        double buttonArg,
        dom.EventTarget relatedTargetArg,
        double offsetXArg,
        double offsetYArg,
        double widthArg,
        double heightArg,
        double pressure,
        double rotation,
        double tiltX,
        double tiltY,
        double pointerIdArg,
        object pointerType,
        double hwTimestampArg,
        bool isPrimary);
    }

    [CombinedClass]
    [FormerInterface]
    public class MSStream : IObject
    {
      private static dom.MSStream _prototype_BackingField;
      private readonly string _type_BackingField;

      public static dom.MSStream prototype
      {
        get
        {
          return dom.MSStream._prototype_BackingField;
        }
        set
        {
          dom.MSStream._prototype_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual extern void msClose();

      public virtual extern object msDetachStream();
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MSStreamReaderEventMap : IObject
    {
      private dom.UIEvent _abort_BackingField;
      private dom.ErrorEvent _error_BackingField;
      private dom.Event _load_BackingField;
      private dom.ProgressEvent _loadend_BackingField;
      private dom.Event _loadstart_BackingField;
      private dom.ProgressEvent _progress_BackingField;

      public dom.UIEvent abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      public dom.ErrorEvent error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.Event load
      {
        get
        {
          return this._load_BackingField;
        }
        set
        {
          this._load_BackingField = value;
        }
      }

      public dom.ProgressEvent loadend
      {
        get
        {
          return this._loadend_BackingField;
        }
        set
        {
          this._loadend_BackingField = value;
        }
      }

      public dom.Event loadstart
      {
        get
        {
          return this._loadstart_BackingField;
        }
        set
        {
          this._loadstart_BackingField = value;
        }
      }

      public dom.ProgressEvent progress
      {
        get
        {
          return this._progress_BackingField;
        }
        set
        {
          this._progress_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"abort\"")]
        public static readonly KeyOf<dom.MSStreamReaderEventMap> abort;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.MSStreamReaderEventMap> error;
        [Template("\"load\"")]
        public static readonly KeyOf<dom.MSStreamReaderEventMap> load;
        [Template("\"loadend\"")]
        public static readonly KeyOf<dom.MSStreamReaderEventMap> loadend;
        [Template("\"loadstart\"")]
        public static readonly KeyOf<dom.MSStreamReaderEventMap> loadstart;
        [Template("\"progress\"")]
        public static readonly KeyOf<dom.MSStreamReaderEventMap> progress;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MSStreamReader : dom.EventTarget
    {
      private static dom.MSStreamReader _prototype_BackingField;
      private static readonly double _DONE_Static_BackingField;
      private static readonly double _EMPTY_Static_BackingField;
      private static readonly double _LOADING_Static_BackingField;
      private readonly dom.DOMError _error_BackingField;
      private dom.MSStreamReader.onabortFn _onabort_BackingField;
      private dom.MSStreamReader.onerrorFn _onerror_BackingField;
      private dom.MSStreamReader.onloadFn _onload_BackingField;
      private dom.MSStreamReader.onloadendFn _onloadend_BackingField;
      private dom.MSStreamReader.onloadFn _onloadstart_BackingField;
      private dom.MSStreamReader.onloadendFn _onprogress_BackingField;
      private readonly double _readyState_BackingField;
      private readonly object _result_BackingField;
      private readonly double _DONE_BackingField;
      private readonly double _EMPTY_BackingField;
      private readonly double _LOADING_BackingField;

      public static dom.MSStreamReader prototype
      {
        get
        {
          return dom.MSStreamReader._prototype_BackingField;
        }
        set
        {
          dom.MSStreamReader._prototype_BackingField = value;
        }
      }

      [Name("DONE")]
      public static double DONE_Static
      {
        get
        {
          return dom.MSStreamReader._DONE_Static_BackingField;
        }
      }

      [Name("EMPTY")]
      public static double EMPTY_Static
      {
        get
        {
          return dom.MSStreamReader._EMPTY_Static_BackingField;
        }
      }

      [Name("LOADING")]
      public static double LOADING_Static
      {
        get
        {
          return dom.MSStreamReader._LOADING_Static_BackingField;
        }
      }

      public virtual dom.DOMError error
      {
        get
        {
          return this._error_BackingField;
        }
      }

      public virtual dom.MSStreamReader.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.MSStreamReader.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.MSStreamReader.onloadFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual dom.MSStreamReader.onloadendFn onloadend
      {
        get
        {
          return this._onloadend_BackingField;
        }
        set
        {
          this._onloadend_BackingField = value;
        }
      }

      public virtual dom.MSStreamReader.onloadFn onloadstart
      {
        get
        {
          return this._onloadstart_BackingField;
        }
        set
        {
          this._onloadstart_BackingField = value;
        }
      }

      public virtual dom.MSStreamReader.onloadendFn onprogress
      {
        get
        {
          return this._onprogress_BackingField;
        }
        set
        {
          this._onprogress_BackingField = value;
        }
      }

      public virtual double readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual object result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual extern void abort();

      public virtual extern void readAsArrayBuffer(dom.MSStream stream);

      public virtual extern void readAsArrayBuffer(dom.MSStream stream, double size);

      public virtual extern void readAsBinaryString(dom.MSStream stream);

      public virtual extern void readAsBinaryString(dom.MSStream stream, double size);

      public virtual extern void readAsBlob(dom.MSStream stream);

      public virtual extern void readAsBlob(dom.MSStream stream, double size);

      public virtual extern void readAsDataURL(dom.MSStream stream);

      public virtual extern void readAsDataURL(dom.MSStream stream, double size);

      public virtual extern void readAsText(dom.MSStream stream);

      public virtual extern void readAsText(dom.MSStream stream, string encoding);

      public virtual extern void readAsText(dom.MSStream stream, string encoding, double size);

      public virtual double DONE
      {
        get
        {
          return this._DONE_BackingField;
        }
      }

      public virtual double EMPTY
      {
        get
        {
          return this._EMPTY_BackingField;
        }
      }

      public virtual double LOADING
      {
        get
        {
          return this._LOADING_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MSStreamReader.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MSStreamReader.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MSStreamReader.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MSStreamReader.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MSStreamReader.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MSStreamReader.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MSStreamReader.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MSStreamReader.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onabortFn(dom.UIEvent ev);

      [Generated]
      public delegate void onerrorFn(dom.ErrorEvent ev);

      [Generated]
      public delegate void onloadFn(dom.Event ev);

      [Generated]
      public delegate void onloadendFn(dom.ProgressEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaDeviceInfo : IObject
    {
      private static dom.MediaDeviceInfo _prototype_BackingField;
      private readonly string _deviceId_BackingField;
      private readonly string _groupId_BackingField;
      private readonly dom.MediaDeviceKind _kind_BackingField;
      private readonly string _label_BackingField;

      public static dom.MediaDeviceInfo prototype
      {
        get
        {
          return dom.MediaDeviceInfo._prototype_BackingField;
        }
        set
        {
          dom.MediaDeviceInfo._prototype_BackingField = value;
        }
      }

      public virtual string deviceId
      {
        get
        {
          return this._deviceId_BackingField;
        }
      }

      public virtual string groupId
      {
        get
        {
          return this._groupId_BackingField;
        }
      }

      public virtual dom.MediaDeviceKind kind
      {
        get
        {
          return this._kind_BackingField;
        }
      }

      public virtual string label
      {
        get
        {
          return this._label_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaDevicesEventMap : IObject
    {
      private dom.Event _devicechange_BackingField;

      public dom.Event devicechange
      {
        get
        {
          return this._devicechange_BackingField;
        }
        set
        {
          this._devicechange_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"devicechange\"")]
        public static readonly KeyOf<dom.MediaDevicesEventMap> devicechange;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaDevices : dom.EventTarget
    {
      private static dom.MediaDevices _prototype_BackingField;
      private dom.MediaDevices.ondevicechangeFn _ondevicechange_BackingField;

      public static dom.MediaDevices prototype
      {
        get
        {
          return dom.MediaDevices._prototype_BackingField;
        }
        set
        {
          dom.MediaDevices._prototype_BackingField = value;
        }
      }

      public virtual dom.MediaDevices.ondevicechangeFn ondevicechange
      {
        get
        {
          return this._ondevicechange_BackingField;
        }
        set
        {
          this._ondevicechange_BackingField = value;
        }
      }

      public virtual extern es5.Promise<dom.MediaDeviceInfo[]> enumerateDevices();

      public virtual extern dom.MediaTrackSupportedConstraints getSupportedConstraints();

      public virtual extern es5.Promise<dom.MediaStream> getUserMedia(
        dom.MediaStreamConstraints constraints);

      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaDevices.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaDevices.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaDevices.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaDevices.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaDevices.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaDevices.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaDevices.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaDevices.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void ondevicechangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaElementAudioSourceNode : dom.AudioNode
    {
      private static dom.MediaElementAudioSourceNode _prototype_BackingField;

      public static dom.MediaElementAudioSourceNode prototype
      {
        get
        {
          return dom.MediaElementAudioSourceNode._prototype_BackingField;
        }
        set
        {
          dom.MediaElementAudioSourceNode._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaEncryptedEvent : dom.Event
    {
      private static dom.MediaEncryptedEvent _prototype_BackingField;
      private readonly es5.ArrayBuffer _initData_BackingField;
      private readonly string _initDataType_BackingField;

      public extern MediaEncryptedEvent(string type);

      public extern MediaEncryptedEvent(string type, dom.MediaEncryptedEventInit eventInitDict);

      public static dom.MediaEncryptedEvent prototype
      {
        get
        {
          return dom.MediaEncryptedEvent._prototype_BackingField;
        }
        set
        {
          dom.MediaEncryptedEvent._prototype_BackingField = value;
        }
      }

      public virtual es5.ArrayBuffer initData
      {
        get
        {
          return this._initData_BackingField;
        }
      }

      public virtual string initDataType
      {
        get
        {
          return this._initDataType_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaError : IObject
    {
      private static dom.MediaError _prototype_BackingField;
      private static readonly ushort _MEDIA_ERR_ABORTED_Static_BackingField;
      private static readonly ushort _MEDIA_ERR_DECODE_Static_BackingField;
      private static readonly ushort _MEDIA_ERR_NETWORK_Static_BackingField;
      private static readonly ushort _MEDIA_ERR_SRC_NOT_SUPPORTED_Static_BackingField;
      private static readonly double _MS_MEDIA_ERR_ENCRYPTED_Static_BackingField;
      private readonly ushort _code_BackingField;
      private readonly string _message_BackingField;
      private readonly double _msExtendedCode_BackingField;
      private readonly ushort _MEDIA_ERR_ABORTED_BackingField;
      private readonly ushort _MEDIA_ERR_DECODE_BackingField;
      private readonly ushort _MEDIA_ERR_NETWORK_BackingField;
      private readonly ushort _MEDIA_ERR_SRC_NOT_SUPPORTED_BackingField;
      private readonly double _MS_MEDIA_ERR_ENCRYPTED_BackingField;

      public static dom.MediaError prototype
      {
        get
        {
          return dom.MediaError._prototype_BackingField;
        }
        set
        {
          dom.MediaError._prototype_BackingField = value;
        }
      }

      [Name("MEDIA_ERR_ABORTED")]
      public static ushort MEDIA_ERR_ABORTED_Static
      {
        get
        {
          return dom.MediaError._MEDIA_ERR_ABORTED_Static_BackingField;
        }
      }

      [Name("MEDIA_ERR_DECODE")]
      public static ushort MEDIA_ERR_DECODE_Static
      {
        get
        {
          return dom.MediaError._MEDIA_ERR_DECODE_Static_BackingField;
        }
      }

      [Name("MEDIA_ERR_NETWORK")]
      public static ushort MEDIA_ERR_NETWORK_Static
      {
        get
        {
          return dom.MediaError._MEDIA_ERR_NETWORK_Static_BackingField;
        }
      }

      [Name("MEDIA_ERR_SRC_NOT_SUPPORTED")]
      public static ushort MEDIA_ERR_SRC_NOT_SUPPORTED_Static
      {
        get
        {
          return dom.MediaError._MEDIA_ERR_SRC_NOT_SUPPORTED_Static_BackingField;
        }
      }

      [Name("MS_MEDIA_ERR_ENCRYPTED")]
      public static double MS_MEDIA_ERR_ENCRYPTED_Static
      {
        get
        {
          return dom.MediaError._MS_MEDIA_ERR_ENCRYPTED_Static_BackingField;
        }
      }

      public virtual ushort code
      {
        get
        {
          return this._code_BackingField;
        }
      }

      public virtual string message
      {
        get
        {
          return this._message_BackingField;
        }
      }

      public virtual double msExtendedCode
      {
        get
        {
          return this._msExtendedCode_BackingField;
        }
      }

      public virtual ushort MEDIA_ERR_ABORTED
      {
        get
        {
          return this._MEDIA_ERR_ABORTED_BackingField;
        }
      }

      public virtual ushort MEDIA_ERR_DECODE
      {
        get
        {
          return this._MEDIA_ERR_DECODE_BackingField;
        }
      }

      public virtual ushort MEDIA_ERR_NETWORK
      {
        get
        {
          return this._MEDIA_ERR_NETWORK_BackingField;
        }
      }

      public virtual ushort MEDIA_ERR_SRC_NOT_SUPPORTED
      {
        get
        {
          return this._MEDIA_ERR_SRC_NOT_SUPPORTED_BackingField;
        }
      }

      public virtual double MS_MEDIA_ERR_ENCRYPTED
      {
        get
        {
          return this._MS_MEDIA_ERR_ENCRYPTED_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaKeyMessageEvent : dom.Event
    {
      private static dom.MediaKeyMessageEvent _prototype_BackingField;
      private readonly es5.ArrayBuffer _message_BackingField;
      private readonly dom.MediaKeyMessageType _messageType_BackingField;

      public extern MediaKeyMessageEvent(string type);

      public extern MediaKeyMessageEvent(string type, dom.MediaKeyMessageEventInit eventInitDict);

      public static dom.MediaKeyMessageEvent prototype
      {
        get
        {
          return dom.MediaKeyMessageEvent._prototype_BackingField;
        }
        set
        {
          dom.MediaKeyMessageEvent._prototype_BackingField = value;
        }
      }

      public virtual es5.ArrayBuffer message
      {
        get
        {
          return this._message_BackingField;
        }
      }

      public virtual dom.MediaKeyMessageType messageType
      {
        get
        {
          return this._messageType_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaKeySession : dom.EventTarget
    {
      private static dom.MediaKeySession _prototype_BackingField;
      private readonly es5.Promise<H5.Primitive.Void> _closed_BackingField;
      private readonly double _expiration_BackingField;
      private readonly dom.MediaKeyStatusMap _keyStatuses_BackingField;
      private readonly string _sessionId_BackingField;

      public static dom.MediaKeySession prototype
      {
        get
        {
          return dom.MediaKeySession._prototype_BackingField;
        }
        set
        {
          dom.MediaKeySession._prototype_BackingField = value;
        }
      }

      public virtual es5.Promise<H5.Primitive.Void> closed
      {
        get
        {
          return this._closed_BackingField;
        }
      }

      public virtual double expiration
      {
        get
        {
          return this._expiration_BackingField;
        }
      }

      public virtual dom.MediaKeyStatusMap keyStatuses
      {
        get
        {
          return this._keyStatuses_BackingField;
        }
      }

      public virtual string sessionId
      {
        get
        {
          return this._sessionId_BackingField;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> close();

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.Int8Array initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.Int16Array initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.Int32Array initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.Uint8Array initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.Uint16Array initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.Uint32Array initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.Uint8ClampedArray initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.Float32Array initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.Float64Array initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.DataView initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        es5.ArrayBuffer initData);

      public virtual extern es5.Promise<H5.Primitive.Void> generateRequest(
        string initDataType,
        Null initData);

      public virtual extern es5.Promise<bool> load(string sessionId);

      public virtual extern es5.Promise<H5.Primitive.Void> remove();

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(es5.Int8Array response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        es5.Int16Array response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        es5.Int32Array response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        es5.Uint8Array response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        es5.Uint16Array response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        es5.Uint32Array response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        es5.Uint8ClampedArray response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        es5.Float32Array response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        es5.Float64Array response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(es5.DataView response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(
        es5.ArrayBuffer response);

      public virtual extern es5.Promise<H5.Primitive.Void> update(Null response);
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaKeyStatusMap : IObject
    {
      private static dom.MediaKeyStatusMap _prototype_BackingField;
      private readonly double _size_BackingField;

      public static dom.MediaKeyStatusMap prototype
      {
        get
        {
          return dom.MediaKeyStatusMap._prototype_BackingField;
        }
        set
        {
          dom.MediaKeyStatusMap._prototype_BackingField = value;
        }
      }

      public virtual double size
      {
        get
        {
          return this._size_BackingField;
        }
      }

      public virtual extern void forEach(es5.Function callback);

      public virtual extern void forEach(Action callback);

      public virtual extern void forEach(Func<object> callback);

      public virtual extern void forEach(es5.Function callback, object thisArg);

      public virtual extern void forEach(Action callback, object thisArg);

      public virtual extern void forEach(Func<object> callback, object thisArg);

      public virtual extern dom.MediaKeyStatus get(
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> keyId);

      public virtual extern dom.MediaKeyStatus get(es5.Int8Array keyId);

      public virtual extern dom.MediaKeyStatus get(es5.Int16Array keyId);

      public virtual extern dom.MediaKeyStatus get(es5.Int32Array keyId);

      public virtual extern dom.MediaKeyStatus get(es5.Uint8Array keyId);

      public virtual extern dom.MediaKeyStatus get(es5.Uint16Array keyId);

      public virtual extern dom.MediaKeyStatus get(es5.Uint32Array keyId);

      public virtual extern dom.MediaKeyStatus get(es5.Uint8ClampedArray keyId);

      public virtual extern dom.MediaKeyStatus get(es5.Float32Array keyId);

      public virtual extern dom.MediaKeyStatus get(es5.Float64Array keyId);

      public virtual extern dom.MediaKeyStatus get(es5.DataView keyId);

      public virtual extern dom.MediaKeyStatus get(es5.ArrayBuffer keyId);

      public virtual extern dom.MediaKeyStatus get(Null keyId);

      public virtual extern bool has(
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> keyId);

      public virtual extern bool has(es5.Int8Array keyId);

      public virtual extern bool has(es5.Int16Array keyId);

      public virtual extern bool has(es5.Int32Array keyId);

      public virtual extern bool has(es5.Uint8Array keyId);

      public virtual extern bool has(es5.Uint16Array keyId);

      public virtual extern bool has(es5.Uint32Array keyId);

      public virtual extern bool has(es5.Uint8ClampedArray keyId);

      public virtual extern bool has(es5.Float32Array keyId);

      public virtual extern bool has(es5.Float64Array keyId);

      public virtual extern bool has(es5.DataView keyId);

      public virtual extern bool has(es5.ArrayBuffer keyId);

      public virtual extern bool has(Null keyId);
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaKeySystemAccess : IObject
    {
      private static dom.MediaKeySystemAccess _prototype_BackingField;
      private readonly string _keySystem_BackingField;

      public static dom.MediaKeySystemAccess prototype
      {
        get
        {
          return dom.MediaKeySystemAccess._prototype_BackingField;
        }
        set
        {
          dom.MediaKeySystemAccess._prototype_BackingField = value;
        }
      }

      public virtual string keySystem
      {
        get
        {
          return this._keySystem_BackingField;
        }
      }

      public virtual extern es5.Promise<dom.MediaKeys> createMediaKeys();

      public virtual extern dom.MediaKeySystemConfiguration getConfiguration();
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaKeys : IObject
    {
      private static dom.MediaKeys _prototype_BackingField;

      public static dom.MediaKeys prototype
      {
        get
        {
          return dom.MediaKeys._prototype_BackingField;
        }
        set
        {
          dom.MediaKeys._prototype_BackingField = value;
        }
      }

      public virtual extern dom.MediaKeySession createSession();

      public virtual extern dom.MediaKeySession createSession(dom.MediaKeySessionType sessionType);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.Int8Array serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.Int16Array serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.Int32Array serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.Uint8Array serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.Uint16Array serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.Uint32Array serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.Uint8ClampedArray serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.Float32Array serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.Float64Array serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.DataView serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        es5.ArrayBuffer serverCertificate);

      public virtual extern es5.Promise<H5.Primitive.Void> setServerCertificate(
        Null serverCertificate);
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaList : IEnumerable<string>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.MediaList _prototype_BackingField;
      private readonly uint _length_BackingField;
      private string _mediaText_BackingField;

      public static dom.MediaList prototype
      {
        get
        {
          return dom.MediaList._prototype_BackingField;
        }
        set
        {
          dom.MediaList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual string mediaText
      {
        get
        {
          return this._mediaText_BackingField;
        }
        set
        {
          this._mediaText_BackingField = value;
        }
      }

      public virtual extern void appendMedium(string medium);

      public virtual extern void deleteMedium(string medium);

      public virtual extern string item(uint index);

      public virtual extern double toString();

      public virtual extern string this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<string> IEnumerable<string>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaQueryList : IObject
    {
      private static dom.MediaQueryList _prototype_BackingField;
      private readonly bool _matches_BackingField;
      private readonly string _media_BackingField;

      public static dom.MediaQueryList prototype
      {
        get
        {
          return dom.MediaQueryList._prototype_BackingField;
        }
        set
        {
          dom.MediaQueryList._prototype_BackingField = value;
        }
      }

      public virtual bool matches
      {
        get
        {
          return this._matches_BackingField;
        }
      }

      public virtual string media
      {
        get
        {
          return this._media_BackingField;
        }
      }

      public virtual extern void addListener(dom.MediaQueryListListener listener);

      public virtual extern void removeListener(dom.MediaQueryListListener listener);
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaSource : dom.EventTarget
    {
      private static dom.MediaSource _prototype_BackingField;
      private readonly dom.SourceBufferList _activeSourceBuffers_BackingField;
      private double _duration_BackingField;
      private readonly string _readyState_BackingField;
      private readonly dom.SourceBufferList _sourceBuffers_BackingField;

      public static dom.MediaSource prototype
      {
        get
        {
          return dom.MediaSource._prototype_BackingField;
        }
        set
        {
          dom.MediaSource._prototype_BackingField = value;
        }
      }

      public static extern bool isTypeSupported(string type);

      public virtual dom.SourceBufferList activeSourceBuffers
      {
        get
        {
          return this._activeSourceBuffers_BackingField;
        }
      }

      public virtual double duration
      {
        get
        {
          return this._duration_BackingField;
        }
        set
        {
          this._duration_BackingField = value;
        }
      }

      public virtual string readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual dom.SourceBufferList sourceBuffers
      {
        get
        {
          return this._sourceBuffers_BackingField;
        }
      }

      public virtual extern dom.SourceBuffer addSourceBuffer(string type);

      public virtual extern void endOfStream();

      public virtual extern void endOfStream(double error);

      public virtual extern void removeSourceBuffer(dom.SourceBuffer sourceBuffer);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaStreamEventMap : IObject
    {
      private dom.Event _active_BackingField;
      private dom.MediaStreamTrackEvent _addtrack_BackingField;
      private dom.Event _inactive_BackingField;
      private dom.MediaStreamTrackEvent _removetrack_BackingField;

      public dom.Event active
      {
        get
        {
          return this._active_BackingField;
        }
        set
        {
          this._active_BackingField = value;
        }
      }

      public dom.MediaStreamTrackEvent addtrack
      {
        get
        {
          return this._addtrack_BackingField;
        }
        set
        {
          this._addtrack_BackingField = value;
        }
      }

      public dom.Event inactive
      {
        get
        {
          return this._inactive_BackingField;
        }
        set
        {
          this._inactive_BackingField = value;
        }
      }

      public dom.MediaStreamTrackEvent removetrack
      {
        get
        {
          return this._removetrack_BackingField;
        }
        set
        {
          this._removetrack_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"active\"")]
        public static readonly KeyOf<dom.MediaStreamEventMap> active;
        [Template("\"addtrack\"")]
        public static readonly KeyOf<dom.MediaStreamEventMap> addtrack;
        [Template("\"inactive\"")]
        public static readonly KeyOf<dom.MediaStreamEventMap> inactive;
        [Template("\"removetrack\"")]
        public static readonly KeyOf<dom.MediaStreamEventMap> removetrack;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaStream : dom.EventTarget
    {
      private static dom.MediaStream _prototype_BackingField;
      private readonly bool _active_BackingField;
      private readonly string _id_BackingField;
      private dom.MediaStream.onactiveFn _onactive_BackingField;
      private dom.MediaStream.onaddtrackFn _onaddtrack_BackingField;
      private dom.MediaStream.onactiveFn _oninactive_BackingField;
      private dom.MediaStream.onaddtrackFn _onremovetrack_BackingField;

      public extern MediaStream();

      public extern MediaStream(dom.MediaStream stream);

      public extern MediaStream(dom.MediaStreamTrack[] tracks);

      public static dom.MediaStream prototype
      {
        get
        {
          return dom.MediaStream._prototype_BackingField;
        }
        set
        {
          dom.MediaStream._prototype_BackingField = value;
        }
      }

      public virtual bool active
      {
        get
        {
          return this._active_BackingField;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual dom.MediaStream.onactiveFn onactive
      {
        get
        {
          return this._onactive_BackingField;
        }
        set
        {
          this._onactive_BackingField = value;
        }
      }

      public virtual dom.MediaStream.onaddtrackFn onaddtrack
      {
        get
        {
          return this._onaddtrack_BackingField;
        }
        set
        {
          this._onaddtrack_BackingField = value;
        }
      }

      public virtual dom.MediaStream.onactiveFn oninactive
      {
        get
        {
          return this._oninactive_BackingField;
        }
        set
        {
          this._oninactive_BackingField = value;
        }
      }

      public virtual dom.MediaStream.onaddtrackFn onremovetrack
      {
        get
        {
          return this._onremovetrack_BackingField;
        }
        set
        {
          this._onremovetrack_BackingField = value;
        }
      }

      public virtual extern void addTrack(dom.MediaStreamTrack track);

      public virtual extern dom.MediaStream clone();

      public virtual extern dom.MediaStreamTrack[] getAudioTracks();

      public virtual extern dom.MediaStreamTrack getTrackById(string trackId);

      public virtual extern dom.MediaStreamTrack[] getTracks();

      public virtual extern dom.MediaStreamTrack[] getVideoTracks();

      public virtual extern void removeTrack(dom.MediaStreamTrack track);

      public virtual extern void stop();

      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaStream.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaStream.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaStream.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaStream.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaStream.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaStream.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaStream.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaStream.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onactiveFn(dom.Event ev);

      [Generated]
      public delegate void onaddtrackFn(dom.MediaStreamTrackEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaStreamAudioSourceNode : dom.AudioNode
    {
      private static dom.MediaStreamAudioSourceNode _prototype_BackingField;

      public static dom.MediaStreamAudioSourceNode prototype
      {
        get
        {
          return dom.MediaStreamAudioSourceNode._prototype_BackingField;
        }
        set
        {
          dom.MediaStreamAudioSourceNode._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaStreamError : IObject
    {
      private static dom.MediaStreamError _prototype_BackingField;
      private readonly string _constraintName_BackingField;
      private readonly string _message_BackingField;
      private readonly string _name_BackingField;

      public static dom.MediaStreamError prototype
      {
        get
        {
          return dom.MediaStreamError._prototype_BackingField;
        }
        set
        {
          dom.MediaStreamError._prototype_BackingField = value;
        }
      }

      public virtual string constraintName
      {
        get
        {
          return this._constraintName_BackingField;
        }
      }

      public virtual string message
      {
        get
        {
          return this._message_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaStreamErrorEvent : dom.Event
    {
      private static dom.MediaStreamErrorEvent _prototype_BackingField;
      private readonly dom.MediaStreamError _error_BackingField;

      public extern MediaStreamErrorEvent(string typeArg);

      public extern MediaStreamErrorEvent(
        string typeArg,
        dom.MediaStreamErrorEventInit eventInitDict);

      public static dom.MediaStreamErrorEvent prototype
      {
        get
        {
          return dom.MediaStreamErrorEvent._prototype_BackingField;
        }
        set
        {
          dom.MediaStreamErrorEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.MediaStreamError error
      {
        get
        {
          return this._error_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaStreamEvent : dom.Event
    {
      private static dom.MediaStreamEvent _prototype_BackingField;
      private readonly dom.MediaStream _stream_BackingField;

      public extern MediaStreamEvent(string type, dom.MediaStreamEventInit eventInitDict);

      public static dom.MediaStreamEvent prototype
      {
        get
        {
          return dom.MediaStreamEvent._prototype_BackingField;
        }
        set
        {
          dom.MediaStreamEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.MediaStream stream
      {
        get
        {
          return this._stream_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MediaStreamTrackEventMap : IObject
    {
      private dom.MediaStreamErrorEvent _ended_BackingField;
      private dom.Event _mute_BackingField;
      private dom.MediaStreamErrorEvent _overconstrained_BackingField;
      private dom.Event _unmute_BackingField;

      public dom.MediaStreamErrorEvent ended
      {
        get
        {
          return this._ended_BackingField;
        }
        set
        {
          this._ended_BackingField = value;
        }
      }

      public dom.Event mute
      {
        get
        {
          return this._mute_BackingField;
        }
        set
        {
          this._mute_BackingField = value;
        }
      }

      public dom.MediaStreamErrorEvent overconstrained
      {
        get
        {
          return this._overconstrained_BackingField;
        }
        set
        {
          this._overconstrained_BackingField = value;
        }
      }

      public dom.Event unmute
      {
        get
        {
          return this._unmute_BackingField;
        }
        set
        {
          this._unmute_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"ended\"")]
        public static readonly KeyOf<dom.MediaStreamTrackEventMap> ended;
        [Template("\"mute\"")]
        public static readonly KeyOf<dom.MediaStreamTrackEventMap> mute;
        [Template("\"overconstrained\"")]
        public static readonly KeyOf<dom.MediaStreamTrackEventMap> overconstrained;
        [Template("\"unmute\"")]
        public static readonly KeyOf<dom.MediaStreamTrackEventMap> unmute;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaStreamTrack : dom.EventTarget
    {
      private static dom.MediaStreamTrack _prototype_BackingField;
      private bool _enabled_BackingField;
      private readonly string _id_BackingField;
      private readonly string _kind_BackingField;
      private readonly string _label_BackingField;
      private readonly bool _muted_BackingField;
      private dom.MediaStreamTrack.onendedFn _onended_BackingField;
      private dom.MediaStreamTrack.onmuteFn _onmute_BackingField;
      private dom.MediaStreamTrack.onendedFn _onoverconstrained_BackingField;
      private dom.MediaStreamTrack.onmuteFn _onunmute_BackingField;
      private readonly bool _readonly_BackingField;
      private readonly dom.MediaStreamTrackState _readyState_BackingField;
      private readonly bool _remote_BackingField;

      public static dom.MediaStreamTrack prototype
      {
        get
        {
          return dom.MediaStreamTrack._prototype_BackingField;
        }
        set
        {
          dom.MediaStreamTrack._prototype_BackingField = value;
        }
      }

      public virtual bool enabled
      {
        get
        {
          return this._enabled_BackingField;
        }
        set
        {
          this._enabled_BackingField = value;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual string kind
      {
        get
        {
          return this._kind_BackingField;
        }
      }

      public virtual string label
      {
        get
        {
          return this._label_BackingField;
        }
      }

      public virtual bool muted
      {
        get
        {
          return this._muted_BackingField;
        }
      }

      public virtual dom.MediaStreamTrack.onendedFn onended
      {
        get
        {
          return this._onended_BackingField;
        }
        set
        {
          this._onended_BackingField = value;
        }
      }

      public virtual dom.MediaStreamTrack.onmuteFn onmute
      {
        get
        {
          return this._onmute_BackingField;
        }
        set
        {
          this._onmute_BackingField = value;
        }
      }

      public virtual dom.MediaStreamTrack.onendedFn onoverconstrained
      {
        get
        {
          return this._onoverconstrained_BackingField;
        }
        set
        {
          this._onoverconstrained_BackingField = value;
        }
      }

      public virtual dom.MediaStreamTrack.onmuteFn onunmute
      {
        get
        {
          return this._onunmute_BackingField;
        }
        set
        {
          this._onunmute_BackingField = value;
        }
      }

      [Name("readonly")]
      public virtual bool @readonly
      {
        get
        {
          return this._readonly_BackingField;
        }
      }

      public virtual dom.MediaStreamTrackState readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual bool remote
      {
        get
        {
          return this._remote_BackingField;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> applyConstraints(
        dom.MediaTrackConstraints constraints);

      public virtual extern dom.MediaStreamTrack clone();

      public virtual extern dom.MediaTrackCapabilities getCapabilities();

      public virtual extern dom.MediaTrackConstraints getConstraints();

      public virtual extern dom.MediaTrackSettings getSettings();

      public virtual extern void stop();

      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaStreamTrack.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaStreamTrack.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaStreamTrack.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MediaStreamTrack.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaStreamTrack.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaStreamTrack.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaStreamTrack.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MediaStreamTrack.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onendedFn(dom.MediaStreamErrorEvent ev);

      [Generated]
      public delegate void onmuteFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class MediaStreamTrackEvent : dom.Event
    {
      private static dom.MediaStreamTrackEvent _prototype_BackingField;
      private readonly dom.MediaStreamTrack _track_BackingField;

      public extern MediaStreamTrackEvent(string typeArg);

      public extern MediaStreamTrackEvent(
        string typeArg,
        dom.MediaStreamTrackEventInit eventInitDict);

      public static dom.MediaStreamTrackEvent prototype
      {
        get
        {
          return dom.MediaStreamTrackEvent._prototype_BackingField;
        }
        set
        {
          dom.MediaStreamTrackEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.MediaStreamTrack track
      {
        get
        {
          return this._track_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MessageChannel : IObject
    {
      private static dom.MessageChannel _prototype_BackingField;
      private readonly dom.MessagePort _port1_BackingField;
      private readonly dom.MessagePort _port2_BackingField;

      public static dom.MessageChannel prototype
      {
        get
        {
          return dom.MessageChannel._prototype_BackingField;
        }
        set
        {
          dom.MessageChannel._prototype_BackingField = value;
        }
      }

      public virtual dom.MessagePort port1
      {
        get
        {
          return this._port1_BackingField;
        }
      }

      public virtual dom.MessagePort port2
      {
        get
        {
          return this._port2_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MessageEvent : dom.Event
    {
      private static dom.MessageEvent _prototype_BackingField;
      private readonly object _data_BackingField;
      private readonly string _origin_BackingField;
      private readonly es5.ReadonlyArray<dom.MessagePort> _ports_BackingField;
      private readonly dom.Window _source_BackingField;

      public extern MessageEvent(string type);

      public extern MessageEvent(string type, dom.MessageEventInit eventInitDict);

      public static dom.MessageEvent prototype
      {
        get
        {
          return dom.MessageEvent._prototype_BackingField;
        }
        set
        {
          dom.MessageEvent._prototype_BackingField = value;
        }
      }

      public virtual object data
      {
        get
        {
          return this._data_BackingField;
        }
      }

      public virtual string origin
      {
        get
        {
          return this._origin_BackingField;
        }
      }

      public virtual es5.ReadonlyArray<dom.MessagePort> ports
      {
        get
        {
          return this._ports_BackingField;
        }
      }

      public virtual dom.Window source
      {
        get
        {
          return this._source_BackingField;
        }
      }

      public virtual extern void initMessageEvent(
        string type,
        bool bubbles,
        bool cancelable,
        object data,
        string origin,
        string lastEventId,
        dom.Window source);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class MessagePortEventMap : IObject
    {
      private dom.MessageEvent _message_BackingField;

      public dom.MessageEvent message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"message\"")]
        public static readonly KeyOf<dom.MessagePortEventMap> message;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MessagePort : dom.EventTarget
    {
      private static dom.MessagePort _prototype_BackingField;
      private dom.MessagePort.onmessageFn _onmessage_BackingField;

      public static dom.MessagePort prototype
      {
        get
        {
          return dom.MessagePort._prototype_BackingField;
        }
        set
        {
          dom.MessagePort._prototype_BackingField = value;
        }
      }

      public virtual dom.MessagePort.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual extern void close();

      public virtual extern void postMessage();

      public virtual extern void postMessage(object message);

      public virtual extern void postMessage(object message, object[] transfer);

      public virtual extern void start();

      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MessagePort.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MessagePort.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MessagePort.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.MessagePort.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MessagePort.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MessagePort.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MessagePort.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.MessagePort.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onmessageFn(dom.MessageEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class MimeType : IObject
    {
      private static dom.MimeType _prototype_BackingField;
      private readonly string _description_BackingField;
      private readonly dom.Plugin _enabledPlugin_BackingField;
      private readonly string _suffixes_BackingField;
      private readonly string _type_BackingField;

      public static dom.MimeType prototype
      {
        get
        {
          return dom.MimeType._prototype_BackingField;
        }
        set
        {
          dom.MimeType._prototype_BackingField = value;
        }
      }

      public virtual string description
      {
        get
        {
          return this._description_BackingField;
        }
      }

      public virtual dom.Plugin enabledPlugin
      {
        get
        {
          return this._enabledPlugin_BackingField;
        }
      }

      public virtual string suffixes
      {
        get
        {
          return this._suffixes_BackingField;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MimeTypeArray : IEnumerable<dom.MimeType>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.MimeTypeArray _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.MimeTypeArray prototype
      {
        get
        {
          return dom.MimeTypeArray._prototype_BackingField;
        }
        set
        {
          dom.MimeTypeArray._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.Plugin item(uint index);

      public virtual extern dom.Plugin namedItem(string type);

      public virtual extern dom.Plugin this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.MimeType> IEnumerable<dom.MimeType>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class MouseEvent : dom.UIEvent
    {
      private static dom.MouseEvent _prototype_BackingField;
      private readonly bool _altKey_BackingField;
      private readonly short _button_BackingField;
      private readonly ushort _buttons_BackingField;
      private readonly double _clientX_BackingField;
      private readonly double _clientY_BackingField;
      private readonly bool _ctrlKey_BackingField;
      private readonly dom.Element _fromElement_BackingField;
      private readonly double _layerX_BackingField;
      private readonly double _layerY_BackingField;
      private readonly bool _metaKey_BackingField;
      private readonly double _movementX_BackingField;
      private readonly double _movementY_BackingField;
      private readonly double _offsetX_BackingField;
      private readonly double _offsetY_BackingField;
      private readonly double _pageX_BackingField;
      private readonly double _pageY_BackingField;
      private readonly dom.EventTarget _relatedTarget_BackingField;
      private readonly double _screenX_BackingField;
      private readonly double _screenY_BackingField;
      private readonly bool _shiftKey_BackingField;
      private readonly dom.Element _toElement_BackingField;
      private readonly double _which_BackingField;
      private readonly double _x_BackingField;
      private readonly double _y_BackingField;

      public extern MouseEvent(string typeArg);

      public extern MouseEvent(string typeArg, dom.MouseEventInit eventInitDict);

      public static dom.MouseEvent prototype
      {
        get
        {
          return dom.MouseEvent._prototype_BackingField;
        }
        set
        {
          dom.MouseEvent._prototype_BackingField = value;
        }
      }

      public virtual bool altKey
      {
        get
        {
          return this._altKey_BackingField;
        }
      }

      public virtual short button
      {
        get
        {
          return this._button_BackingField;
        }
      }

      public virtual ushort buttons
      {
        get
        {
          return this._buttons_BackingField;
        }
      }

      public virtual double clientX
      {
        get
        {
          return this._clientX_BackingField;
        }
      }

      public virtual double clientY
      {
        get
        {
          return this._clientY_BackingField;
        }
      }

      public virtual bool ctrlKey
      {
        get
        {
          return this._ctrlKey_BackingField;
        }
      }

      public virtual dom.Element fromElement
      {
        get
        {
          return this._fromElement_BackingField;
        }
      }

      public virtual double layerX
      {
        get
        {
          return this._layerX_BackingField;
        }
      }

      public virtual double layerY
      {
        get
        {
          return this._layerY_BackingField;
        }
      }

      public virtual bool metaKey
      {
        get
        {
          return this._metaKey_BackingField;
        }
      }

      public virtual double movementX
      {
        get
        {
          return this._movementX_BackingField;
        }
      }

      public virtual double movementY
      {
        get
        {
          return this._movementY_BackingField;
        }
      }

      public virtual double offsetX
      {
        get
        {
          return this._offsetX_BackingField;
        }
      }

      public virtual double offsetY
      {
        get
        {
          return this._offsetY_BackingField;
        }
      }

      public virtual double pageX
      {
        get
        {
          return this._pageX_BackingField;
        }
      }

      public virtual double pageY
      {
        get
        {
          return this._pageY_BackingField;
        }
      }

      public virtual dom.EventTarget relatedTarget
      {
        get
        {
          return this._relatedTarget_BackingField;
        }
      }

      public virtual double screenX
      {
        get
        {
          return this._screenX_BackingField;
        }
      }

      public virtual double screenY
      {
        get
        {
          return this._screenY_BackingField;
        }
      }

      public virtual bool shiftKey
      {
        get
        {
          return this._shiftKey_BackingField;
        }
      }

      public virtual dom.Element toElement
      {
        get
        {
          return this._toElement_BackingField;
        }
      }

      public virtual double which
      {
        get
        {
          return this._which_BackingField;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      public virtual extern bool getModifierState(string keyArg);

      public virtual extern void initMouseEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        double detailArg,
        double screenXArg,
        double screenYArg,
        double clientXArg,
        double clientYArg,
        bool ctrlKeyArg,
        bool altKeyArg,
        bool shiftKeyArg,
        bool metaKeyArg,
        double buttonArg,
        dom.EventTarget relatedTargetArg);
    }

    [CombinedClass]
    [FormerInterface]
    public class MutationEvent : dom.Event
    {
      private static dom.MutationEvent _prototype_BackingField;
      private static readonly double _ADDITION_Static_BackingField;
      private static readonly double _MODIFICATION_Static_BackingField;
      private static readonly double _REMOVAL_Static_BackingField;
      private readonly double _attrChange_BackingField;
      private readonly string _attrName_BackingField;
      private readonly string _newValue_BackingField;
      private readonly string _prevValue_BackingField;
      private readonly dom.Node _relatedNode_BackingField;
      private readonly double _ADDITION_BackingField;
      private readonly double _MODIFICATION_BackingField;
      private readonly double _REMOVAL_BackingField;

      public static dom.MutationEvent prototype
      {
        get
        {
          return dom.MutationEvent._prototype_BackingField;
        }
        set
        {
          dom.MutationEvent._prototype_BackingField = value;
        }
      }

      [Name("ADDITION")]
      public static double ADDITION_Static
      {
        get
        {
          return dom.MutationEvent._ADDITION_Static_BackingField;
        }
      }

      [Name("MODIFICATION")]
      public static double MODIFICATION_Static
      {
        get
        {
          return dom.MutationEvent._MODIFICATION_Static_BackingField;
        }
      }

      [Name("REMOVAL")]
      public static double REMOVAL_Static
      {
        get
        {
          return dom.MutationEvent._REMOVAL_Static_BackingField;
        }
      }

      public virtual double attrChange
      {
        get
        {
          return this._attrChange_BackingField;
        }
      }

      public virtual string attrName
      {
        get
        {
          return this._attrName_BackingField;
        }
      }

      public virtual string newValue
      {
        get
        {
          return this._newValue_BackingField;
        }
      }

      public virtual string prevValue
      {
        get
        {
          return this._prevValue_BackingField;
        }
      }

      public virtual dom.Node relatedNode
      {
        get
        {
          return this._relatedNode_BackingField;
        }
      }

      public virtual extern void initMutationEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Node relatedNodeArg,
        string prevValueArg,
        string newValueArg,
        string attrNameArg,
        double attrChangeArg);

      public virtual double ADDITION
      {
        get
        {
          return this._ADDITION_BackingField;
        }
      }

      public virtual double MODIFICATION
      {
        get
        {
          return this._MODIFICATION_BackingField;
        }
      }

      public virtual double REMOVAL
      {
        get
        {
          return this._REMOVAL_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class MutationObserver : IObject
    {
      private static dom.MutationObserver _prototype_BackingField;

      public extern MutationObserver(dom.MutationCallback callback);

      public static dom.MutationObserver prototype
      {
        get
        {
          return dom.MutationObserver._prototype_BackingField;
        }
        set
        {
          dom.MutationObserver._prototype_BackingField = value;
        }
      }

      public virtual extern void disconnect();

      public virtual extern void observe(dom.Node target, dom.MutationObserverInit options);

      public virtual extern dom.MutationRecord[] takeRecords();
    }

    [CombinedClass]
    [FormerInterface]
    public class MutationRecord : IObject
    {
      private static dom.MutationRecord _prototype_BackingField;
      private readonly dom.NodeList _addedNodes_BackingField;
      private readonly string _attributeName_BackingField;
      private readonly string _attributeNamespace_BackingField;
      private readonly dom.Node _nextSibling_BackingField;
      private readonly string _oldValue_BackingField;
      private readonly dom.Node _previousSibling_BackingField;
      private readonly dom.NodeList _removedNodes_BackingField;
      private readonly dom.Node _target_BackingField;
      private readonly dom.MutationRecordType _type_BackingField;

      public static dom.MutationRecord prototype
      {
        get
        {
          return dom.MutationRecord._prototype_BackingField;
        }
        set
        {
          dom.MutationRecord._prototype_BackingField = value;
        }
      }

      public virtual dom.NodeList addedNodes
      {
        get
        {
          return this._addedNodes_BackingField;
        }
      }

      public virtual string attributeName
      {
        get
        {
          return this._attributeName_BackingField;
        }
      }

      public virtual string attributeNamespace
      {
        get
        {
          return this._attributeNamespace_BackingField;
        }
      }

      public virtual dom.Node nextSibling
      {
        get
        {
          return this._nextSibling_BackingField;
        }
      }

      public virtual string oldValue
      {
        get
        {
          return this._oldValue_BackingField;
        }
      }

      public virtual dom.Node previousSibling
      {
        get
        {
          return this._previousSibling_BackingField;
        }
      }

      public virtual dom.NodeList removedNodes
      {
        get
        {
          return this._removedNodes_BackingField;
        }
      }

      public virtual dom.Node target
      {
        get
        {
          return this._target_BackingField;
        }
      }

      public virtual dom.MutationRecordType type
      {
        get
        {
          return this._type_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class NamedNodeMap : IObject
    {
      private static dom.NamedNodeMap _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.NamedNodeMap prototype
      {
        get
        {
          return dom.NamedNodeMap._prototype_BackingField;
        }
        set
        {
          dom.NamedNodeMap._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.Attr getNamedItem(string qualifiedName);

      public virtual extern dom.Attr getNamedItemNS(string @namespace, string localName);

      public virtual extern dom.Attr item(uint index);

      public virtual extern dom.Attr removeNamedItem(string qualifiedName);

      public virtual extern dom.Attr removeNamedItemNS(string @namespace, string localName);

      public virtual extern dom.Attr setNamedItem(dom.Attr attr);

      public virtual extern dom.Attr setNamedItemNS(dom.Attr attr);

      public virtual extern dom.Attr this[uint index] { get; set; }
    }

    [CombinedClass]
    [FormerInterface]
    public class Navigator : dom.NavigatorID, dom.NavigatorOnLine.Interface, IObject, dom.NavigatorContentUtils.Interface, dom.NavigatorStorageUtils.Interface, dom.MSNavigatorDoNotTrack.Interface, dom.MSFileSaver.Interface, dom.NavigatorBeacon.Interface, dom.NavigatorConcurrentHardware.Interface, dom.NavigatorUserMedia.Interface, dom.NavigatorLanguage.Interface
    {
      private static dom.Navigator _prototype_BackingField;
      private readonly es5.ReadonlyArray<dom.VRDisplay> _activeVRDisplays_BackingField;
      private readonly dom.WebAuthentication _authentication_BackingField;
      private readonly bool _cookieEnabled_BackingField;
      private readonly string _doNotTrack_BackingField;
      private dom.GamepadInputEmulationType _gamepadInputEmulation_BackingField;
      private readonly dom.Geolocation _geolocation_BackingField;
      private readonly double _maxTouchPoints_BackingField;
      private readonly dom.MimeTypeArray _mimeTypes_BackingField;
      private readonly bool _msManipulationViewsEnabled_BackingField;
      private readonly double _msMaxTouchPoints_BackingField;
      private readonly bool _msPointerEnabled_BackingField;
      private readonly dom.PluginArray _plugins_BackingField;
      private readonly bool _pointerEnabled_BackingField;
      private readonly dom.ServiceWorkerContainer _serviceWorker_BackingField;
      private readonly bool _webdriver_BackingField;
      private readonly bool _onLine_BackingField;
      private readonly ulong _hardwareConcurrency_BackingField;
      private readonly dom.MediaDevices _mediaDevices_BackingField;
      private readonly string _language_BackingField;
      private readonly es5.ReadonlyArray<string> _languages_BackingField;

      public static dom.Navigator prototype
      {
        get
        {
          return dom.Navigator._prototype_BackingField;
        }
        set
        {
          dom.Navigator._prototype_BackingField = value;
        }
      }

      public virtual es5.ReadonlyArray<dom.VRDisplay> activeVRDisplays
      {
        get
        {
          return this._activeVRDisplays_BackingField;
        }
      }

      public virtual dom.WebAuthentication authentication
      {
        get
        {
          return this._authentication_BackingField;
        }
      }

      public virtual bool cookieEnabled
      {
        get
        {
          return this._cookieEnabled_BackingField;
        }
      }

      public virtual string doNotTrack
      {
        get
        {
          return this._doNotTrack_BackingField;
        }
      }

      public virtual dom.GamepadInputEmulationType gamepadInputEmulation
      {
        get
        {
          return this._gamepadInputEmulation_BackingField;
        }
        set
        {
          this._gamepadInputEmulation_BackingField = value;
        }
      }

      public virtual dom.Geolocation geolocation
      {
        get
        {
          return this._geolocation_BackingField;
        }
      }

      public virtual double maxTouchPoints
      {
        get
        {
          return this._maxTouchPoints_BackingField;
        }
      }

      public virtual dom.MimeTypeArray mimeTypes
      {
        get
        {
          return this._mimeTypes_BackingField;
        }
      }

      public virtual bool msManipulationViewsEnabled
      {
        get
        {
          return this._msManipulationViewsEnabled_BackingField;
        }
      }

      public virtual double msMaxTouchPoints
      {
        get
        {
          return this._msMaxTouchPoints_BackingField;
        }
      }

      public virtual bool msPointerEnabled
      {
        get
        {
          return this._msPointerEnabled_BackingField;
        }
      }

      public virtual dom.PluginArray plugins
      {
        get
        {
          return this._plugins_BackingField;
        }
      }

      public virtual bool pointerEnabled
      {
        get
        {
          return this._pointerEnabled_BackingField;
        }
      }

      public virtual dom.ServiceWorkerContainer serviceWorker
      {
        get
        {
          return this._serviceWorker_BackingField;
        }
      }

      public virtual bool webdriver
      {
        get
        {
          return this._webdriver_BackingField;
        }
      }

      public virtual extern dom.Gamepad[] getGamepads();

      public virtual extern es5.Promise<dom.VRDisplay[]> getVRDisplays();

      public virtual extern bool javaEnabled();

      public virtual extern void msLaunchUri(string uri);

      public virtual extern void msLaunchUri(string uri, dom.MSLaunchUriCallback successCallback);

      public virtual extern void msLaunchUri(
        string uri,
        dom.MSLaunchUriCallback successCallback,
        dom.MSLaunchUriCallback noHandlerCallback);

      public virtual extern es5.Promise<dom.MediaKeySystemAccess> requestMediaKeySystemAccess(
        string keySystem,
        dom.MediaKeySystemConfiguration[] supportedConfigurations);

      public virtual extern bool vibrate(Union<double, double[]> pattern);

      public virtual extern bool vibrate(double pattern);

      public virtual extern bool vibrate(double[] pattern);

      public virtual bool onLine
      {
        get
        {
          return this._onLine_BackingField;
        }
      }

      public virtual extern bool confirmSiteSpecificTrackingException(
        dom.ConfirmSiteSpecificExceptionsInformation args);

      public virtual extern bool confirmWebWideTrackingException(dom.ExceptionInformation args);

      public virtual extern void removeSiteSpecificTrackingException(dom.ExceptionInformation args);

      public virtual extern void removeWebWideTrackingException(dom.ExceptionInformation args);

      public virtual extern void storeSiteSpecificTrackingException(
        dom.StoreSiteSpecificExceptionsInformation args);

      public virtual extern void storeWebWideTrackingException(dom.StoreExceptionsInformation args);

      public virtual extern bool msSaveBlob(object blob);

      public virtual extern bool msSaveBlob(object blob, string defaultName);

      public virtual extern bool msSaveOrOpenBlob(object blob);

      public virtual extern bool msSaveOrOpenBlob(object blob, string defaultName);

      public virtual extern bool sendBeacon(string url);

      public virtual extern bool sendBeacon(
        string url,
        Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> data);

      public virtual extern bool sendBeacon(string url, dom.Blob data);

      public virtual extern bool sendBeacon(string url, es5.Int8Array data);

      public virtual extern bool sendBeacon(string url, es5.Int16Array data);

      public virtual extern bool sendBeacon(string url, es5.Int32Array data);

      public virtual extern bool sendBeacon(string url, es5.Uint8Array data);

      public virtual extern bool sendBeacon(string url, es5.Uint16Array data);

      public virtual extern bool sendBeacon(string url, es5.Uint32Array data);

      public virtual extern bool sendBeacon(string url, es5.Uint8ClampedArray data);

      public virtual extern bool sendBeacon(string url, es5.Float32Array data);

      public virtual extern bool sendBeacon(string url, es5.Float64Array data);

      public virtual extern bool sendBeacon(string url, es5.DataView data);

      public virtual extern bool sendBeacon(string url, es5.ArrayBuffer data);

      public virtual extern bool sendBeacon(string url, dom.FormData data);

      public virtual extern bool sendBeacon(string url, string data);

      public virtual extern bool sendBeacon(string url, Null data);

      public virtual ulong hardwareConcurrency
      {
        get
        {
          return this._hardwareConcurrency_BackingField;
        }
      }

      public virtual dom.MediaDevices mediaDevices
      {
        get
        {
          return this._mediaDevices_BackingField;
        }
      }

      public virtual extern es5.Promise<dom.MediaStream> getDisplayMedia(
        dom.MediaStreamConstraints constraints);

      public virtual extern void getUserMedia(
        dom.MediaStreamConstraints constraints,
        dom.NavigatorUserMediaSuccessCallback successCallback,
        dom.NavigatorUserMediaErrorCallback errorCallback);

      public virtual string language
      {
        get
        {
          return this._language_BackingField;
        }
      }

      public virtual es5.ReadonlyArray<string> languages
      {
        get
        {
          return this._languages_BackingField;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class NavigatorBeacon : dom.NavigatorBeacon.Interface, IObject
    {
      public abstract bool sendBeacon(string url);

      public abstract bool sendBeacon(
        string url,
        Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> data);

      public abstract bool sendBeacon(string url, dom.Blob data);

      public abstract bool sendBeacon(string url, es5.Int8Array data);

      public abstract bool sendBeacon(string url, es5.Int16Array data);

      public abstract bool sendBeacon(string url, es5.Int32Array data);

      public abstract bool sendBeacon(string url, es5.Uint8Array data);

      public abstract bool sendBeacon(string url, es5.Uint16Array data);

      public abstract bool sendBeacon(string url, es5.Uint32Array data);

      public abstract bool sendBeacon(string url, es5.Uint8ClampedArray data);

      public abstract bool sendBeacon(string url, es5.Float32Array data);

      public abstract bool sendBeacon(string url, es5.Float64Array data);

      public abstract bool sendBeacon(string url, es5.DataView data);

      public abstract bool sendBeacon(string url, es5.ArrayBuffer data);

      public abstract bool sendBeacon(string url, dom.FormData data);

      public abstract bool sendBeacon(string url, string data);

      public abstract bool sendBeacon(string url, Null data);

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        bool sendBeacon(string url);

        bool sendBeacon(
          string url,
          Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> data);

        bool sendBeacon(string url, dom.Blob data);

        bool sendBeacon(string url, es5.Int8Array data);

        bool sendBeacon(string url, es5.Int16Array data);

        bool sendBeacon(string url, es5.Int32Array data);

        bool sendBeacon(string url, es5.Uint8Array data);

        bool sendBeacon(string url, es5.Uint16Array data);

        bool sendBeacon(string url, es5.Uint32Array data);

        bool sendBeacon(string url, es5.Uint8ClampedArray data);

        bool sendBeacon(string url, es5.Float32Array data);

        bool sendBeacon(string url, es5.Float64Array data);

        bool sendBeacon(string url, es5.DataView data);

        bool sendBeacon(string url, es5.ArrayBuffer data);

        bool sendBeacon(string url, dom.FormData data);

        bool sendBeacon(string url, string data);

        bool sendBeacon(string url, Null data);
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class NavigatorConcurrentHardware : dom.NavigatorConcurrentHardware.Interface, IObject
    {
      private readonly ulong _hardwareConcurrency_BackingField;

      public ulong hardwareConcurrency
      {
        get
        {
          return this._hardwareConcurrency_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        ulong hardwareConcurrency { get; }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class NavigatorContentUtils : dom.NavigatorContentUtils.Interface, IObject
    {
      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class NavigatorID : IObject
    {
      private readonly string _appCodeName_BackingField;
      private readonly string _appName_BackingField;
      private readonly string _appVersion_BackingField;
      private readonly string _platform_BackingField;
      private readonly string _product_BackingField;
      private readonly string _productSub_BackingField;
      private readonly string _userAgent_BackingField;
      private readonly string _vendor_BackingField;
      private readonly string _vendorSub_BackingField;

      public string appCodeName
      {
        get
        {
          return this._appCodeName_BackingField;
        }
      }

      public string appName
      {
        get
        {
          return this._appName_BackingField;
        }
      }

      public string appVersion
      {
        get
        {
          return this._appVersion_BackingField;
        }
      }

      public string platform
      {
        get
        {
          return this._platform_BackingField;
        }
      }

      public string product
      {
        get
        {
          return this._product_BackingField;
        }
      }

      public string productSub
      {
        get
        {
          return this._productSub_BackingField;
        }
      }

      public string userAgent
      {
        get
        {
          return this._userAgent_BackingField;
        }
      }

      public string vendor
      {
        get
        {
          return this._vendor_BackingField;
        }
      }

      public string vendorSub
      {
        get
        {
          return this._vendorSub_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class NavigatorLanguage : dom.NavigatorLanguage.Interface, IObject
    {
      private readonly string _language_BackingField;
      private readonly es5.ReadonlyArray<string> _languages_BackingField;

      public string language
      {
        get
        {
          return this._language_BackingField;
        }
      }

      public es5.ReadonlyArray<string> languages
      {
        get
        {
          return this._languages_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        string language { get; }

        es5.ReadonlyArray<string> languages { get; }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class NavigatorOnLine : dom.NavigatorOnLine.Interface, IObject
    {
      private readonly bool _onLine_BackingField;

      public bool onLine
      {
        get
        {
          return this._onLine_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        bool onLine { get; }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class NavigatorStorageUtils : dom.NavigatorStorageUtils.Interface, IObject
    {
      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
      }
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class NavigatorUserMedia : dom.NavigatorUserMedia.Interface, IObject
    {
      public abstract dom.MediaDevices mediaDevices { get; }

      public abstract es5.Promise<dom.MediaStream> getDisplayMedia(
        dom.MediaStreamConstraints constraints);

      public abstract void getUserMedia(
        dom.MediaStreamConstraints constraints,
        dom.NavigatorUserMediaSuccessCallback successCallback,
        dom.NavigatorUserMediaErrorCallback errorCallback);

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.MediaDevices mediaDevices { get; }

        es5.Promise<dom.MediaStream> getDisplayMedia(dom.MediaStreamConstraints constraints);

        void getUserMedia(
          dom.MediaStreamConstraints constraints,
          dom.NavigatorUserMediaSuccessCallback successCallback,
          dom.NavigatorUserMediaErrorCallback errorCallback);
      }
    }

    [CombinedClass]
    public class Node : dom.EventTarget, dom.Node.Interface, dom.EventTarget.Interface, IObject
    {
      private static dom.Node _prototype_BackingField;
      private static readonly ushort _ATTRIBUTE_NODE_Static_BackingField;
      private static readonly ushort _CDATA_SECTION_NODE_Static_BackingField;
      private static readonly ushort _COMMENT_NODE_Static_BackingField;
      private static readonly ushort _DOCUMENT_FRAGMENT_NODE_Static_BackingField;
      private static readonly ushort _DOCUMENT_NODE_Static_BackingField;
      private static readonly ushort _DOCUMENT_POSITION_CONTAINED_BY_Static_BackingField;
      private static readonly ushort _DOCUMENT_POSITION_CONTAINS_Static_BackingField;
      private static readonly ushort _DOCUMENT_POSITION_DISCONNECTED_Static_BackingField;
      private static readonly ushort _DOCUMENT_POSITION_FOLLOWING_Static_BackingField;
      private static readonly ushort _DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC_Static_BackingField;
      private static readonly ushort _DOCUMENT_POSITION_PRECEDING_Static_BackingField;
      private static readonly ushort _DOCUMENT_TYPE_NODE_Static_BackingField;
      private static readonly ushort _ELEMENT_NODE_Static_BackingField;
      private static readonly ushort _ENTITY_NODE_Static_BackingField;
      private static readonly ushort _ENTITY_REFERENCE_NODE_Static_BackingField;
      private static readonly ushort _NOTATION_NODE_Static_BackingField;
      private static readonly ushort _PROCESSING_INSTRUCTION_NODE_Static_BackingField;
      private static readonly ushort _TEXT_NODE_Static_BackingField;
      private readonly string _baseURI_BackingField;
      private readonly dom.NodeListOf<Intersection<dom.Node, dom.ChildNode>> _childNodes_BackingField;
      private readonly dom.Node _firstChild_BackingField;
      private readonly bool _isConnected_BackingField;
      private readonly dom.Node _lastChild_BackingField;
      private readonly string _localName_BackingField;
      private readonly string _namespaceURI_BackingField;
      private readonly dom.Node _nextSibling_BackingField;
      private readonly string _nodeName_BackingField;
      private readonly ushort _nodeType_BackingField;
      private string _nodeValue_BackingField;
      private readonly dom.Document _ownerDocument_BackingField;
      private readonly dom.HTMLElement _parentElement_BackingField;
      private readonly dom.Node _parentNode_BackingField;
      private readonly dom.Node _previousSibling_BackingField;
      private string _textContent_BackingField;
      private readonly ushort _ATTRIBUTE_NODE_BackingField;
      private readonly ushort _CDATA_SECTION_NODE_BackingField;
      private readonly ushort _COMMENT_NODE_BackingField;
      private readonly ushort _DOCUMENT_FRAGMENT_NODE_BackingField;
      private readonly ushort _DOCUMENT_NODE_BackingField;
      private readonly ushort _DOCUMENT_POSITION_CONTAINED_BY_BackingField;
      private readonly ushort _DOCUMENT_POSITION_CONTAINS_BackingField;
      private readonly ushort _DOCUMENT_POSITION_DISCONNECTED_BackingField;
      private readonly ushort _DOCUMENT_POSITION_FOLLOWING_BackingField;
      private readonly ushort _DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC_BackingField;
      private readonly ushort _DOCUMENT_POSITION_PRECEDING_BackingField;
      private readonly ushort _DOCUMENT_TYPE_NODE_BackingField;
      private readonly ushort _ELEMENT_NODE_BackingField;
      private readonly ushort _ENTITY_NODE_BackingField;
      private readonly ushort _ENTITY_REFERENCE_NODE_BackingField;
      private readonly ushort _NOTATION_NODE_BackingField;
      private readonly ushort _PROCESSING_INSTRUCTION_NODE_BackingField;
      private readonly ushort _TEXT_NODE_BackingField;

      public static dom.Node prototype
      {
        get
        {
          return dom.Node._prototype_BackingField;
        }
        set
        {
          dom.Node._prototype_BackingField = value;
        }
      }

      [Name("ATTRIBUTE_NODE")]
      public static ushort ATTRIBUTE_NODE_Static
      {
        get
        {
          return dom.Node._ATTRIBUTE_NODE_Static_BackingField;
        }
      }

      [Name("CDATA_SECTION_NODE")]
      public static ushort CDATA_SECTION_NODE_Static
      {
        get
        {
          return dom.Node._CDATA_SECTION_NODE_Static_BackingField;
        }
      }

      [Name("COMMENT_NODE")]
      public static ushort COMMENT_NODE_Static
      {
        get
        {
          return dom.Node._COMMENT_NODE_Static_BackingField;
        }
      }

      [Name("DOCUMENT_FRAGMENT_NODE")]
      public static ushort DOCUMENT_FRAGMENT_NODE_Static
      {
        get
        {
          return dom.Node._DOCUMENT_FRAGMENT_NODE_Static_BackingField;
        }
      }

      [Name("DOCUMENT_NODE")]
      public static ushort DOCUMENT_NODE_Static
      {
        get
        {
          return dom.Node._DOCUMENT_NODE_Static_BackingField;
        }
      }

      [Name("DOCUMENT_POSITION_CONTAINED_BY")]
      public static ushort DOCUMENT_POSITION_CONTAINED_BY_Static
      {
        get
        {
          return dom.Node._DOCUMENT_POSITION_CONTAINED_BY_Static_BackingField;
        }
      }

      [Name("DOCUMENT_POSITION_CONTAINS")]
      public static ushort DOCUMENT_POSITION_CONTAINS_Static
      {
        get
        {
          return dom.Node._DOCUMENT_POSITION_CONTAINS_Static_BackingField;
        }
      }

      [Name("DOCUMENT_POSITION_DISCONNECTED")]
      public static ushort DOCUMENT_POSITION_DISCONNECTED_Static
      {
        get
        {
          return dom.Node._DOCUMENT_POSITION_DISCONNECTED_Static_BackingField;
        }
      }

      [Name("DOCUMENT_POSITION_FOLLOWING")]
      public static ushort DOCUMENT_POSITION_FOLLOWING_Static
      {
        get
        {
          return dom.Node._DOCUMENT_POSITION_FOLLOWING_Static_BackingField;
        }
      }

      [Name("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC")]
      public static ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC_Static
      {
        get
        {
          return dom.Node._DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC_Static_BackingField;
        }
      }

      [Name("DOCUMENT_POSITION_PRECEDING")]
      public static ushort DOCUMENT_POSITION_PRECEDING_Static
      {
        get
        {
          return dom.Node._DOCUMENT_POSITION_PRECEDING_Static_BackingField;
        }
      }

      [Name("DOCUMENT_TYPE_NODE")]
      public static ushort DOCUMENT_TYPE_NODE_Static
      {
        get
        {
          return dom.Node._DOCUMENT_TYPE_NODE_Static_BackingField;
        }
      }

      [Name("ELEMENT_NODE")]
      public static ushort ELEMENT_NODE_Static
      {
        get
        {
          return dom.Node._ELEMENT_NODE_Static_BackingField;
        }
      }

      [Name("ENTITY_NODE")]
      public static ushort ENTITY_NODE_Static
      {
        get
        {
          return dom.Node._ENTITY_NODE_Static_BackingField;
        }
      }

      [Name("ENTITY_REFERENCE_NODE")]
      public static ushort ENTITY_REFERENCE_NODE_Static
      {
        get
        {
          return dom.Node._ENTITY_REFERENCE_NODE_Static_BackingField;
        }
      }

      [Name("NOTATION_NODE")]
      public static ushort NOTATION_NODE_Static
      {
        get
        {
          return dom.Node._NOTATION_NODE_Static_BackingField;
        }
      }

      [Name("PROCESSING_INSTRUCTION_NODE")]
      public static ushort PROCESSING_INSTRUCTION_NODE_Static
      {
        get
        {
          return dom.Node._PROCESSING_INSTRUCTION_NODE_Static_BackingField;
        }
      }

      [Name("TEXT_NODE")]
      public static ushort TEXT_NODE_Static
      {
        get
        {
          return dom.Node._TEXT_NODE_Static_BackingField;
        }
      }

      public virtual string baseURI
      {
        get
        {
          return this._baseURI_BackingField;
        }
      }

      public virtual dom.NodeListOf<Intersection<dom.Node, dom.ChildNode>> childNodes
      {
        get
        {
          return this._childNodes_BackingField;
        }
      }

      public virtual dom.Node firstChild
      {
        get
        {
          return this._firstChild_BackingField;
        }
      }

      public virtual bool isConnected
      {
        get
        {
          return this._isConnected_BackingField;
        }
      }

      public virtual dom.Node lastChild
      {
        get
        {
          return this._lastChild_BackingField;
        }
      }

      public virtual string localName
      {
        get
        {
          return this._localName_BackingField;
        }
      }

      public virtual string namespaceURI
      {
        get
        {
          return this._namespaceURI_BackingField;
        }
      }

      public virtual dom.Node nextSibling
      {
        get
        {
          return this._nextSibling_BackingField;
        }
      }

      public virtual string nodeName
      {
        get
        {
          return this._nodeName_BackingField;
        }
      }

      public virtual ushort nodeType
      {
        get
        {
          return this._nodeType_BackingField;
        }
      }

      public virtual string nodeValue
      {
        get
        {
          return this._nodeValue_BackingField;
        }
        set
        {
          this._nodeValue_BackingField = value;
        }
      }

      public virtual dom.Document ownerDocument
      {
        get
        {
          return this._ownerDocument_BackingField;
        }
      }

      public virtual dom.HTMLElement parentElement
      {
        get
        {
          return this._parentElement_BackingField;
        }
      }

      public virtual dom.Node parentNode
      {
        get
        {
          return this._parentNode_BackingField;
        }
      }

      public virtual dom.Node previousSibling
      {
        get
        {
          return this._previousSibling_BackingField;
        }
      }

      public virtual string textContent
      {
        get
        {
          return this._textContent_BackingField;
        }
        set
        {
          this._textContent_BackingField = value;
        }
      }

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public virtual extern T appendChild<T>(T newChild);

      public virtual extern dom.Node cloneNode();

      public virtual extern dom.Node cloneNode(bool deep);

      public virtual extern ushort compareDocumentPosition(dom.Node other);

      public virtual extern bool contains(dom.Node child);

      public virtual extern bool hasChildNodes();

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public virtual extern T insertBefore<T>(T newChild, dom.Node refChild);

      public virtual extern bool isDefaultNamespace(string namespaceURI);

      public virtual extern bool isEqualNode(dom.Node arg);

      public virtual extern bool isSameNode(dom.Node other);

      public virtual extern string lookupNamespaceURI(string prefix);

      public virtual extern string lookupPrefix(string namespaceURI);

      public virtual extern void normalize();

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public virtual extern T removeChild<T>(T oldChild);

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public virtual extern T replaceChild<T>(dom.Node newChild, T oldChild);

      public virtual ushort ATTRIBUTE_NODE
      {
        get
        {
          return this._ATTRIBUTE_NODE_BackingField;
        }
      }

      public virtual ushort CDATA_SECTION_NODE
      {
        get
        {
          return this._CDATA_SECTION_NODE_BackingField;
        }
      }

      public virtual ushort COMMENT_NODE
      {
        get
        {
          return this._COMMENT_NODE_BackingField;
        }
      }

      public virtual ushort DOCUMENT_FRAGMENT_NODE
      {
        get
        {
          return this._DOCUMENT_FRAGMENT_NODE_BackingField;
        }
      }

      public virtual ushort DOCUMENT_NODE
      {
        get
        {
          return this._DOCUMENT_NODE_BackingField;
        }
      }

      public virtual ushort DOCUMENT_POSITION_CONTAINED_BY
      {
        get
        {
          return this._DOCUMENT_POSITION_CONTAINED_BY_BackingField;
        }
      }

      public virtual ushort DOCUMENT_POSITION_CONTAINS
      {
        get
        {
          return this._DOCUMENT_POSITION_CONTAINS_BackingField;
        }
      }

      public virtual ushort DOCUMENT_POSITION_DISCONNECTED
      {
        get
        {
          return this._DOCUMENT_POSITION_DISCONNECTED_BackingField;
        }
      }

      public virtual ushort DOCUMENT_POSITION_FOLLOWING
      {
        get
        {
          return this._DOCUMENT_POSITION_FOLLOWING_BackingField;
        }
      }

      public virtual ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
      {
        get
        {
          return this._DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC_BackingField;
        }
      }

      public virtual ushort DOCUMENT_POSITION_PRECEDING
      {
        get
        {
          return this._DOCUMENT_POSITION_PRECEDING_BackingField;
        }
      }

      public virtual ushort DOCUMENT_TYPE_NODE
      {
        get
        {
          return this._DOCUMENT_TYPE_NODE_BackingField;
        }
      }

      public virtual ushort ELEMENT_NODE
      {
        get
        {
          return this._ELEMENT_NODE_BackingField;
        }
      }

      public virtual ushort ENTITY_NODE
      {
        get
        {
          return this._ENTITY_NODE_BackingField;
        }
      }

      public virtual ushort ENTITY_REFERENCE_NODE
      {
        get
        {
          return this._ENTITY_REFERENCE_NODE_BackingField;
        }
      }

      public virtual ushort NOTATION_NODE
      {
        get
        {
          return this._NOTATION_NODE_BackingField;
        }
      }

      public virtual ushort PROCESSING_INSTRUCTION_NODE
      {
        get
        {
          return this._PROCESSING_INSTRUCTION_NODE_BackingField;
        }
      }

      public virtual ushort TEXT_NODE
      {
        get
        {
          return this._TEXT_NODE_BackingField;
        }
      }

      [Generated]
      [IgnoreCast]
      [ClassInterface]
      [Name("Node")]
      public new interface Interface : dom.EventTarget.Interface, IObject
      {
        string baseURI { get; }

        dom.NodeListOf<Intersection<dom.Node, dom.ChildNode>> childNodes { get; }

        dom.Node firstChild { get; }

        bool isConnected { get; }

        dom.Node lastChild { get; }

        string localName { get; }

        string namespaceURI { get; }

        dom.Node nextSibling { get; }

        string nodeName { get; }

        ushort nodeType { get; }

        string nodeValue { get; set; }

        dom.Document ownerDocument { get; }

        dom.HTMLElement parentElement { get; }

        dom.Node parentNode { get; }

        dom.Node previousSibling { get; }

        string textContent { get; set; }

        [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
        T appendChild<T>(T newChild);

        dom.Node cloneNode();

        dom.Node cloneNode(bool deep);

        ushort compareDocumentPosition(dom.Node other);

        bool contains(dom.Node child);

        bool hasChildNodes();

        [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
        T insertBefore<T>(T newChild, dom.Node refChild);

        bool isDefaultNamespace(string namespaceURI);

        bool isEqualNode(dom.Node arg);

        bool isSameNode(dom.Node other);

        string lookupNamespaceURI(string prefix);

        string lookupPrefix(string namespaceURI);

        void normalize();

        [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
        T removeChild<T>(T oldChild);

        [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
        T replaceChild<T>(dom.Node newChild, T oldChild);

        ushort ATTRIBUTE_NODE { get; }

        ushort CDATA_SECTION_NODE { get; }

        ushort COMMENT_NODE { get; }

        ushort DOCUMENT_FRAGMENT_NODE { get; }

        ushort DOCUMENT_NODE { get; }

        ushort DOCUMENT_POSITION_CONTAINED_BY { get; }

        ushort DOCUMENT_POSITION_CONTAINS { get; }

        ushort DOCUMENT_POSITION_DISCONNECTED { get; }

        ushort DOCUMENT_POSITION_FOLLOWING { get; }

        ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC { get; }

        ushort DOCUMENT_POSITION_PRECEDING { get; }

        ushort DOCUMENT_TYPE_NODE { get; }

        ushort ELEMENT_NODE { get; }

        ushort ENTITY_NODE { get; }

        ushort ENTITY_REFERENCE_NODE { get; }

        ushort NOTATION_NODE { get; }

        ushort PROCESSING_INSTRUCTION_NODE { get; }

        ushort TEXT_NODE { get; }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class NodeFilter : IObject
    {
      public abstract ushort acceptNode(dom.Node node);
    }

    [CombinedClass]
    [FormerInterface]
    public class NodeIterator : IObject
    {
      private static dom.NodeIterator _prototype_BackingField;
      private readonly bool _expandEntityReferences_BackingField;
      private readonly dom.NodeFilter _filter_BackingField;
      private readonly dom.Node _root_BackingField;
      private readonly uint _whatToShow_BackingField;

      public static dom.NodeIterator prototype
      {
        get
        {
          return dom.NodeIterator._prototype_BackingField;
        }
        set
        {
          dom.NodeIterator._prototype_BackingField = value;
        }
      }

      public virtual bool expandEntityReferences
      {
        get
        {
          return this._expandEntityReferences_BackingField;
        }
      }

      public virtual dom.NodeFilter filter
      {
        get
        {
          return this._filter_BackingField;
        }
      }

      public virtual dom.Node root
      {
        get
        {
          return this._root_BackingField;
        }
      }

      public virtual uint whatToShow
      {
        get
        {
          return this._whatToShow_BackingField;
        }
      }

      public virtual extern void detach();

      public virtual extern dom.Node nextNode();

      public virtual extern dom.Node previousNode();
    }

    [CombinedClass]
    [FormerInterface]
    public class NodeList : IEnumerable<dom.Node>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.NodeList _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.NodeList prototype
      {
        get
        {
          return dom.NodeList._prototype_BackingField;
        }
        set
        {
          dom.NodeList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.Node item(uint index);

      public virtual extern dom.Node this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.Node> IEnumerable<dom.Node>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [IgnoreCast]
    [IgnoreGeneric(AllowInTypeScript = true)]
    [Virtual]
    [FormerInterface]
    [Where("TNode", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
    public abstract class NodeListOf<TNode> : dom.NodeList, IEnumerable<TNode>, IEnumerable, IHighFiveClass
    {
      private double _length_BackingField;

      public virtual double length
      {
        get
        {
          return this._length_BackingField;
        }
        set
        {
          this._length_BackingField = value;
        }
      }

      public abstract TNode item(double index);

      public virtual extern TNode this[double index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<TNode> IEnumerable<TNode>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class NodeSelector : IObject
    {
      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract object querySelector<K>(K selectors);

      [Name("querySelector")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract object querySelector2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public abstract Union<E, Null> querySelector<E>(string selectors);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

      [Name("querySelectorAll")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public abstract dom.NodeListOf<E> querySelectorAll<E>(string selectors);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class NotificationEventMap : IObject
    {
      private dom.Event _click_BackingField;
      private dom.Event _close_BackingField;
      private dom.Event _error_BackingField;
      private dom.Event _show_BackingField;

      public dom.Event click
      {
        get
        {
          return this._click_BackingField;
        }
        set
        {
          this._click_BackingField = value;
        }
      }

      public dom.Event close
      {
        get
        {
          return this._close_BackingField;
        }
        set
        {
          this._close_BackingField = value;
        }
      }

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.Event show
      {
        get
        {
          return this._show_BackingField;
        }
        set
        {
          this._show_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"click\"")]
        public static readonly KeyOf<dom.NotificationEventMap> click;
        [Template("\"close\"")]
        public static readonly KeyOf<dom.NotificationEventMap> close;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.NotificationEventMap> error;
        [Template("\"show\"")]
        public static readonly KeyOf<dom.NotificationEventMap> show;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Notification : dom.EventTarget
    {
      private static dom.Notification _prototype_BackingField;
      private readonly string _body_BackingField;
      private readonly object _data_BackingField;
      private readonly dom.NotificationDirection _dir_BackingField;
      private readonly string _icon_BackingField;
      private readonly string _lang_BackingField;
      private dom.Notification.onclickFn _onclick_BackingField;
      private dom.Notification.onclickFn _onclose_BackingField;
      private dom.Notification.onclickFn _onerror_BackingField;
      private dom.Notification.onclickFn _onshow_BackingField;
      private readonly dom.NotificationPermission _permission_BackingField;
      private readonly string _tag_BackingField;
      private readonly string _title_BackingField;

      public extern Notification(string title);

      public extern Notification(string title, dom.NotificationOptions options);

      public static dom.Notification prototype
      {
        get
        {
          return dom.Notification._prototype_BackingField;
        }
        set
        {
          dom.Notification._prototype_BackingField = value;
        }
      }

      public static extern es5.Promise<dom.NotificationPermission> requestPermission();

      public static extern es5.Promise<dom.NotificationPermission> requestPermission(
        dom.NotificationPermissionCallback callback);

      public virtual string body
      {
        get
        {
          return this._body_BackingField;
        }
      }

      public virtual object data
      {
        get
        {
          return this._data_BackingField;
        }
      }

      public virtual dom.NotificationDirection dir
      {
        get
        {
          return this._dir_BackingField;
        }
      }

      public virtual string icon
      {
        get
        {
          return this._icon_BackingField;
        }
      }

      public virtual string lang
      {
        get
        {
          return this._lang_BackingField;
        }
      }

      public virtual dom.Notification.onclickFn onclick
      {
        get
        {
          return this._onclick_BackingField;
        }
        set
        {
          this._onclick_BackingField = value;
        }
      }

      public virtual dom.Notification.onclickFn onclose
      {
        get
        {
          return this._onclose_BackingField;
        }
        set
        {
          this._onclose_BackingField = value;
        }
      }

      public virtual dom.Notification.onclickFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.Notification.onclickFn onshow
      {
        get
        {
          return this._onshow_BackingField;
        }
        set
        {
          this._onshow_BackingField = value;
        }
      }

      public virtual dom.NotificationPermission permission
      {
        get
        {
          return this._permission_BackingField;
        }
      }

      public virtual string tag
      {
        get
        {
          return this._tag_BackingField;
        }
      }

      public virtual string title
      {
        get
        {
          return this._title_BackingField;
        }
      }

      public virtual extern void close();

      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Notification.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Notification.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Notification.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Notification.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Notification.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Notification.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Notification.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Notification.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onclickFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class OES_element_index_uint : IObject
    {
      private static dom.OES_element_index_uint _prototype_BackingField;

      public static dom.OES_element_index_uint prototype
      {
        get
        {
          return dom.OES_element_index_uint._prototype_BackingField;
        }
        set
        {
          dom.OES_element_index_uint._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class OES_standard_derivatives : IObject
    {
      private static dom.OES_standard_derivatives _prototype_BackingField;
      private static readonly double _FRAGMENT_SHADER_DERIVATIVE_HINT_OES_Static_BackingField;
      private readonly double _FRAGMENT_SHADER_DERIVATIVE_HINT_OES_BackingField;

      public static dom.OES_standard_derivatives prototype
      {
        get
        {
          return dom.OES_standard_derivatives._prototype_BackingField;
        }
        set
        {
          dom.OES_standard_derivatives._prototype_BackingField = value;
        }
      }

      [Name("FRAGMENT_SHADER_DERIVATIVE_HINT_OES")]
      public static double FRAGMENT_SHADER_DERIVATIVE_HINT_OES_Static
      {
        get
        {
          return dom.OES_standard_derivatives._FRAGMENT_SHADER_DERIVATIVE_HINT_OES_Static_BackingField;
        }
      }

      public virtual double FRAGMENT_SHADER_DERIVATIVE_HINT_OES
      {
        get
        {
          return this._FRAGMENT_SHADER_DERIVATIVE_HINT_OES_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class OES_texture_float : IObject
    {
      private static dom.OES_texture_float _prototype_BackingField;

      public static dom.OES_texture_float prototype
      {
        get
        {
          return dom.OES_texture_float._prototype_BackingField;
        }
        set
        {
          dom.OES_texture_float._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class OES_texture_float_linear : IObject
    {
      private static dom.OES_texture_float_linear _prototype_BackingField;

      public static dom.OES_texture_float_linear prototype
      {
        get
        {
          return dom.OES_texture_float_linear._prototype_BackingField;
        }
        set
        {
          dom.OES_texture_float_linear._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class OES_texture_half_float : IObject
    {
      private static dom.OES_texture_half_float _prototype_BackingField;
      private static readonly double _HALF_FLOAT_OES_Static_BackingField;
      private readonly double _HALF_FLOAT_OES_BackingField;

      public static dom.OES_texture_half_float prototype
      {
        get
        {
          return dom.OES_texture_half_float._prototype_BackingField;
        }
        set
        {
          dom.OES_texture_half_float._prototype_BackingField = value;
        }
      }

      [Name("HALF_FLOAT_OES")]
      public static double HALF_FLOAT_OES_Static
      {
        get
        {
          return dom.OES_texture_half_float._HALF_FLOAT_OES_Static_BackingField;
        }
      }

      public virtual double HALF_FLOAT_OES
      {
        get
        {
          return this._HALF_FLOAT_OES_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class OES_texture_half_float_linear : IObject
    {
      private static dom.OES_texture_half_float_linear _prototype_BackingField;

      public static dom.OES_texture_half_float_linear prototype
      {
        get
        {
          return dom.OES_texture_half_float_linear._prototype_BackingField;
        }
        set
        {
          dom.OES_texture_half_float_linear._prototype_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class OES_vertex_array_object : IObject
    {
      public abstract double VERTEX_ARRAY_BINDING_OES { get; }

      public abstract void bindVertexArrayOES(dom.WebGLVertexArrayObjectOES arrayObject);

      public abstract dom.WebGLVertexArrayObjectOES createVertexArrayOES();

      public abstract void deleteVertexArrayOES(dom.WebGLVertexArrayObjectOES arrayObject);

      public abstract bool isVertexArrayOES(object value);
    }

    [CombinedClass]
    [FormerInterface]
    public class OfflineAudioCompletionEvent : dom.Event
    {
      private static dom.OfflineAudioCompletionEvent _prototype_BackingField;
      private readonly dom.AudioBuffer _renderedBuffer_BackingField;

      public static dom.OfflineAudioCompletionEvent prototype
      {
        get
        {
          return dom.OfflineAudioCompletionEvent._prototype_BackingField;
        }
        set
        {
          dom.OfflineAudioCompletionEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioBuffer renderedBuffer
      {
        get
        {
          return this._renderedBuffer_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class OfflineAudioContextEventMap : dom.AudioContextEventMap
    {
      private dom.OfflineAudioCompletionEvent _complete_BackingField;

      public dom.OfflineAudioCompletionEvent complete
      {
        get
        {
          return this._complete_BackingField;
        }
        set
        {
          this._complete_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"complete\"")]
        public static readonly KeyOf<dom.OfflineAudioContextEventMap> complete;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class OfflineAudioContext : dom.AudioContextBase
    {
      private static dom.OfflineAudioContext _prototype_BackingField;
      private readonly double _length_BackingField;
      private dom.OfflineAudioContext.oncompleteFn _oncomplete_BackingField;

      public extern OfflineAudioContext(double numberOfChannels, double length, double sampleRate);

      public static dom.OfflineAudioContext prototype
      {
        get
        {
          return dom.OfflineAudioContext._prototype_BackingField;
        }
        set
        {
          dom.OfflineAudioContext._prototype_BackingField = value;
        }
      }

      public virtual double length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual dom.OfflineAudioContext.oncompleteFn oncomplete
      {
        get
        {
          return this._oncomplete_BackingField;
        }
        set
        {
          this._oncomplete_BackingField = value;
        }
      }

      public virtual extern es5.Promise<dom.AudioBuffer> startRendering();

      public virtual extern es5.Promise<H5.Primitive.Void> suspend(double suspendTime);

      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.OfflineAudioContext.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.OfflineAudioContext.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.OfflineAudioContext.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.OfflineAudioContext.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.OfflineAudioContext.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.OfflineAudioContext.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.OfflineAudioContext.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.OfflineAudioContext.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern double currentTime { get; }

      public override extern dom.AudioDestinationNode destination { get; }

      public override extern dom.AudioListener listener { get; }

      public override extern double sampleRate { get; }

      public override extern dom.AudioContextState state { get; }

      public override extern es5.Promise<H5.Primitive.Void> close();

      public override extern dom.AnalyserNode createAnalyser();

      public override extern dom.BiquadFilterNode createBiquadFilter();

      public override extern dom.AudioBuffer createBuffer(
        double numberOfChannels,
        double length,
        double sampleRate);

      public override extern dom.AudioBufferSourceNode createBufferSource();

      public override extern dom.ChannelMergerNode createChannelMerger();

      public override extern dom.ChannelMergerNode createChannelMerger(double numberOfInputs);

      public override extern dom.ChannelSplitterNode createChannelSplitter();

      public override extern dom.ChannelSplitterNode createChannelSplitter(double numberOfOutputs);

      public override extern dom.ConvolverNode createConvolver();

      public override extern dom.DelayNode createDelay();

      public override extern dom.DelayNode createDelay(double maxDelayTime);

      public override extern dom.DynamicsCompressorNode createDynamicsCompressor();

      public override extern dom.GainNode createGain();

      public override extern dom.IIRFilterNode createIIRFilter(
        double[] feedforward,
        double[] feedback);

      public override extern dom.MediaElementAudioSourceNode createMediaElementSource(
        dom.HTMLMediaElement mediaElement);

      public override extern dom.MediaStreamAudioSourceNode createMediaStreamSource(
        dom.MediaStream mediaStream);

      public override extern dom.OscillatorNode createOscillator();

      public override extern dom.PannerNode createPanner();

      public override extern dom.PeriodicWave createPeriodicWave(
        es5.Float32Array real,
        es5.Float32Array imag);

      public override extern dom.PeriodicWave createPeriodicWave(
        es5.Float32Array real,
        es5.Float32Array imag,
        dom.PeriodicWaveConstraints constraints);

      public override extern dom.ScriptProcessorNode createScriptProcessor();

      public override extern dom.ScriptProcessorNode createScriptProcessor(double bufferSize);

      public override extern dom.ScriptProcessorNode createScriptProcessor(
        double bufferSize,
        double numberOfInputChannels);

      public override extern dom.ScriptProcessorNode createScriptProcessor(
        double bufferSize,
        double numberOfInputChannels,
        double numberOfOutputChannels);

      public override extern dom.StereoPannerNode createStereoPanner();

      public override extern dom.WaveShaperNode createWaveShaper();

      public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
        es5.ArrayBuffer audioData);

      public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
        es5.ArrayBuffer audioData,
        dom.DecodeSuccessCallback successCallback);

      public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
        es5.ArrayBuffer audioData,
        dom.DecodeSuccessCallback successCallback,
        dom.DecodeErrorCallback errorCallback);

      public override extern es5.Promise<H5.Primitive.Void> resume();

      public override extern void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener);

      public override extern void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener,
        bool options);

      public override extern void addEventListener<K>(
        K type,
        dom.AudioContextBase.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      public override extern void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener);

      public override extern void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener,
        bool options);

      public override extern void removeEventListener<K>(
        K type,
        dom.AudioContextBase.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(string type, Action<dom.Event> listener);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void oncompleteFn(dom.OfflineAudioCompletionEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class OscillatorNodeEventMap : IObject
    {
      private dom.Event _ended_BackingField;

      public dom.Event ended
      {
        get
        {
          return this._ended_BackingField;
        }
        set
        {
          this._ended_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"ended\"")]
        public static readonly KeyOf<dom.OscillatorNodeEventMap> ended;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class OscillatorNode : dom.AudioNode
    {
      private static dom.OscillatorNode _prototype_BackingField;
      private readonly dom.AudioParam _detune_BackingField;
      private readonly dom.AudioParam _frequency_BackingField;
      private dom.OscillatorNode.onendedFn _onended_BackingField;
      private dom.OscillatorType _type_BackingField;

      public static dom.OscillatorNode prototype
      {
        get
        {
          return dom.OscillatorNode._prototype_BackingField;
        }
        set
        {
          dom.OscillatorNode._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioParam detune
      {
        get
        {
          return this._detune_BackingField;
        }
      }

      public virtual dom.AudioParam frequency
      {
        get
        {
          return this._frequency_BackingField;
        }
      }

      public virtual dom.OscillatorNode.onendedFn onended
      {
        get
        {
          return this._onended_BackingField;
        }
        set
        {
          this._onended_BackingField = value;
        }
      }

      public virtual dom.OscillatorType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      public virtual extern void setPeriodicWave(dom.PeriodicWave periodicWave);

      public virtual extern void start();

      public virtual extern void start(double when);

      public virtual extern void stop();

      public virtual extern void stop(double when);

      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.OscillatorNode.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.OscillatorNode.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.OscillatorNode.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.OscillatorNode.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.OscillatorNode.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.OscillatorNode.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.OscillatorNode.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.OscillatorNode.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onendedFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class OverflowEvent : dom.UIEvent
    {
      private static dom.OverflowEvent _prototype_BackingField;
      private static readonly double _BOTH_Static_BackingField;
      private static readonly double _HORIZONTAL_Static_BackingField;
      private static readonly double _VERTICAL_Static_BackingField;
      private readonly bool _horizontalOverflow_BackingField;
      private readonly double _orient_BackingField;
      private readonly bool _verticalOverflow_BackingField;
      private readonly double _BOTH_BackingField;
      private readonly double _HORIZONTAL_BackingField;
      private readonly double _VERTICAL_BackingField;

      public static dom.OverflowEvent prototype
      {
        get
        {
          return dom.OverflowEvent._prototype_BackingField;
        }
        set
        {
          dom.OverflowEvent._prototype_BackingField = value;
        }
      }

      [Name("BOTH")]
      public static double BOTH_Static
      {
        get
        {
          return dom.OverflowEvent._BOTH_Static_BackingField;
        }
      }

      [Name("HORIZONTAL")]
      public static double HORIZONTAL_Static
      {
        get
        {
          return dom.OverflowEvent._HORIZONTAL_Static_BackingField;
        }
      }

      [Name("VERTICAL")]
      public static double VERTICAL_Static
      {
        get
        {
          return dom.OverflowEvent._VERTICAL_Static_BackingField;
        }
      }

      public virtual bool horizontalOverflow
      {
        get
        {
          return this._horizontalOverflow_BackingField;
        }
      }

      public virtual double orient
      {
        get
        {
          return this._orient_BackingField;
        }
      }

      public virtual bool verticalOverflow
      {
        get
        {
          return this._verticalOverflow_BackingField;
        }
      }

      public virtual double BOTH
      {
        get
        {
          return this._BOTH_BackingField;
        }
      }

      public virtual double HORIZONTAL
      {
        get
        {
          return this._HORIZONTAL_BackingField;
        }
      }

      public virtual double VERTICAL
      {
        get
        {
          return this._VERTICAL_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PageTransitionEvent : dom.Event
    {
      private static dom.PageTransitionEvent _prototype_BackingField;
      private readonly bool _persisted_BackingField;

      public static dom.PageTransitionEvent prototype
      {
        get
        {
          return dom.PageTransitionEvent._prototype_BackingField;
        }
        set
        {
          dom.PageTransitionEvent._prototype_BackingField = value;
        }
      }

      public virtual bool persisted
      {
        get
        {
          return this._persisted_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PannerNode : dom.AudioNode
    {
      private static dom.PannerNode _prototype_BackingField;
      private double _coneInnerAngle_BackingField;
      private double _coneOuterAngle_BackingField;
      private double _coneOuterGain_BackingField;
      private dom.DistanceModelType _distanceModel_BackingField;
      private double _maxDistance_BackingField;
      private dom.PanningModelType _panningModel_BackingField;
      private double _refDistance_BackingField;
      private double _rolloffFactor_BackingField;

      public static dom.PannerNode prototype
      {
        get
        {
          return dom.PannerNode._prototype_BackingField;
        }
        set
        {
          dom.PannerNode._prototype_BackingField = value;
        }
      }

      public virtual double coneInnerAngle
      {
        get
        {
          return this._coneInnerAngle_BackingField;
        }
        set
        {
          this._coneInnerAngle_BackingField = value;
        }
      }

      public virtual double coneOuterAngle
      {
        get
        {
          return this._coneOuterAngle_BackingField;
        }
        set
        {
          this._coneOuterAngle_BackingField = value;
        }
      }

      public virtual double coneOuterGain
      {
        get
        {
          return this._coneOuterGain_BackingField;
        }
        set
        {
          this._coneOuterGain_BackingField = value;
        }
      }

      public virtual dom.DistanceModelType distanceModel
      {
        get
        {
          return this._distanceModel_BackingField;
        }
        set
        {
          this._distanceModel_BackingField = value;
        }
      }

      public virtual double maxDistance
      {
        get
        {
          return this._maxDistance_BackingField;
        }
        set
        {
          this._maxDistance_BackingField = value;
        }
      }

      public virtual dom.PanningModelType panningModel
      {
        get
        {
          return this._panningModel_BackingField;
        }
        set
        {
          this._panningModel_BackingField = value;
        }
      }

      public virtual double refDistance
      {
        get
        {
          return this._refDistance_BackingField;
        }
        set
        {
          this._refDistance_BackingField = value;
        }
      }

      public virtual double rolloffFactor
      {
        get
        {
          return this._rolloffFactor_BackingField;
        }
        set
        {
          this._rolloffFactor_BackingField = value;
        }
      }

      public virtual extern void setOrientation(double x, double y, double z);

      public virtual extern void setPosition(double x, double y, double z);

      public virtual extern void setVelocity(double x, double y, double z);
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class ParentNode : dom.ParentNode.Interface, IObject
    {
      public abstract uint childElementCount { get; }

      public abstract dom.Element firstElementChild { get; }

      public abstract dom.Element lastElementChild { get; }

      public abstract dom.HTMLCollection children { get; }

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract object querySelector<K>(K selectors);

      [Name("querySelector")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract object querySelector2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public abstract Union<E, Null> querySelector<E>(string selectors);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

      [Name("querySelectorAll")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public abstract dom.NodeListOf<E> querySelectorAll<E>(string selectors);

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        uint childElementCount { get; }

        dom.Element firstElementChild { get; }

        dom.Element lastElementChild { get; }

        dom.HTMLCollection children { get; }

        [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
        object querySelector<K>(K selectors);

        [Name("querySelector")]
        [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
        object querySelector2<K>(K selectors);

        [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
        Union<E, Null> querySelector<E>(string selectors);

        [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
        dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

        [Name("querySelectorAll")]
        [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
        dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

        [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
        dom.NodeListOf<E> querySelectorAll<E>(string selectors);
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Path2D : dom.CanvasPathMethods
    {
      private static dom.Path2D _prototype_BackingField;

      public extern Path2D();

      public extern Path2D(Union<dom.Path2D, string> d);

      public extern Path2D(dom.Path2D d);

      public extern Path2D(string d);

      public static dom.Path2D prototype
      {
        get
        {
          return dom.Path2D._prototype_BackingField;
        }
        set
        {
          dom.Path2D._prototype_BackingField = value;
        }
      }

      public override extern void arc(
        double x,
        double y,
        double radius,
        double startAngle,
        double endAngle);

      public override extern void arc(
        double x,
        double y,
        double radius,
        double startAngle,
        double endAngle,
        bool anticlockwise);

      public override extern void arcTo(
        double x1,
        double y1,
        double x2,
        double y2,
        double radius);

      public override extern void arcTo(
        double x1,
        double y1,
        double x2,
        double y2,
        double radiusX,
        double radiusY,
        double rotation);

      public override extern void bezierCurveTo(
        double cp1x,
        double cp1y,
        double cp2x,
        double cp2y,
        double x,
        double y);

      public override extern void closePath();

      public override extern void ellipse(
        double x,
        double y,
        double radiusX,
        double radiusY,
        double rotation,
        double startAngle,
        double endAngle);

      public override extern void ellipse(
        double x,
        double y,
        double radiusX,
        double radiusY,
        double rotation,
        double startAngle,
        double endAngle,
        bool anticlockwise);

      public override extern void lineTo(double x, double y);

      public override extern void moveTo(double x, double y);

      public override extern void quadraticCurveTo(double cpx, double cpy, double x, double y);

      public override extern void rect(double x, double y, double w, double h);
    }

    [CombinedClass]
    [FormerInterface]
    public class PaymentAddress : IObject
    {
      private static dom.PaymentAddress _prototype_BackingField;
      private readonly string[] _addressLine_BackingField;
      private readonly string _city_BackingField;
      private readonly string _country_BackingField;
      private readonly string _dependentLocality_BackingField;
      private readonly string _languageCode_BackingField;
      private readonly string _organization_BackingField;
      private readonly string _phone_BackingField;
      private readonly string _postalCode_BackingField;
      private readonly string _recipient_BackingField;
      private readonly string _region_BackingField;
      private readonly string _sortingCode_BackingField;

      public static dom.PaymentAddress prototype
      {
        get
        {
          return dom.PaymentAddress._prototype_BackingField;
        }
        set
        {
          dom.PaymentAddress._prototype_BackingField = value;
        }
      }

      public virtual string[] addressLine
      {
        get
        {
          return this._addressLine_BackingField;
        }
      }

      public virtual string city
      {
        get
        {
          return this._city_BackingField;
        }
      }

      public virtual string country
      {
        get
        {
          return this._country_BackingField;
        }
      }

      public virtual string dependentLocality
      {
        get
        {
          return this._dependentLocality_BackingField;
        }
      }

      public virtual string languageCode
      {
        get
        {
          return this._languageCode_BackingField;
        }
      }

      public virtual string organization
      {
        get
        {
          return this._organization_BackingField;
        }
      }

      public virtual string phone
      {
        get
        {
          return this._phone_BackingField;
        }
      }

      public virtual string postalCode
      {
        get
        {
          return this._postalCode_BackingField;
        }
      }

      public virtual string recipient
      {
        get
        {
          return this._recipient_BackingField;
        }
      }

      public virtual string region
      {
        get
        {
          return this._region_BackingField;
        }
      }

      public virtual string sortingCode
      {
        get
        {
          return this._sortingCode_BackingField;
        }
      }

      public virtual extern object toJSON();
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PaymentRequestEventMap : IObject
    {
      private dom.Event _shippingaddresschange_BackingField;
      private dom.Event _shippingoptionchange_BackingField;

      public dom.Event shippingaddresschange
      {
        get
        {
          return this._shippingaddresschange_BackingField;
        }
        set
        {
          this._shippingaddresschange_BackingField = value;
        }
      }

      public dom.Event shippingoptionchange
      {
        get
        {
          return this._shippingoptionchange_BackingField;
        }
        set
        {
          this._shippingoptionchange_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"shippingaddresschange\"")]
        public static readonly KeyOf<dom.PaymentRequestEventMap> shippingaddresschange;
        [Template("\"shippingoptionchange\"")]
        public static readonly KeyOf<dom.PaymentRequestEventMap> shippingoptionchange;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PaymentRequest : dom.EventTarget
    {
      private static dom.PaymentRequest _prototype_BackingField;
      private readonly string _id_BackingField;
      private dom.PaymentRequest.onshippingaddresschangeFn _onshippingaddresschange_BackingField;
      private dom.PaymentRequest.onshippingaddresschangeFn _onshippingoptionchange_BackingField;
      private readonly dom.PaymentAddress _shippingAddress_BackingField;
      private readonly string _shippingOption_BackingField;
      private readonly dom.PaymentShippingType _shippingType_BackingField;

      public extern PaymentRequest(
        dom.PaymentMethodData[] methodData,
        dom.PaymentDetailsInit details);

      public extern PaymentRequest(
        dom.PaymentMethodData[] methodData,
        dom.PaymentDetailsInit details,
        dom.PaymentOptions options);

      public static dom.PaymentRequest prototype
      {
        get
        {
          return dom.PaymentRequest._prototype_BackingField;
        }
        set
        {
          dom.PaymentRequest._prototype_BackingField = value;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual dom.PaymentRequest.onshippingaddresschangeFn onshippingaddresschange
      {
        get
        {
          return this._onshippingaddresschange_BackingField;
        }
        set
        {
          this._onshippingaddresschange_BackingField = value;
        }
      }

      public virtual dom.PaymentRequest.onshippingaddresschangeFn onshippingoptionchange
      {
        get
        {
          return this._onshippingoptionchange_BackingField;
        }
        set
        {
          this._onshippingoptionchange_BackingField = value;
        }
      }

      public virtual dom.PaymentAddress shippingAddress
      {
        get
        {
          return this._shippingAddress_BackingField;
        }
      }

      public virtual string shippingOption
      {
        get
        {
          return this._shippingOption_BackingField;
        }
      }

      public virtual dom.PaymentShippingType shippingType
      {
        get
        {
          return this._shippingType_BackingField;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> abort();

      public virtual extern es5.Promise<bool> canMakePayment();

      public virtual extern es5.Promise<dom.PaymentResponse> show();

      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.PaymentRequest.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.PaymentRequest.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.PaymentRequest.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.PaymentRequest.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.PaymentRequest.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.PaymentRequest.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.PaymentRequest.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.PaymentRequest.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onshippingaddresschangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class PaymentRequestUpdateEvent : dom.Event
    {
      private static dom.PaymentRequestUpdateEvent _prototype_BackingField;

      public extern PaymentRequestUpdateEvent(string type);

      public extern PaymentRequestUpdateEvent(
        string type,
        dom.PaymentRequestUpdateEventInit eventInitDict);

      public static dom.PaymentRequestUpdateEvent prototype
      {
        get
        {
          return dom.PaymentRequestUpdateEvent._prototype_BackingField;
        }
        set
        {
          dom.PaymentRequestUpdateEvent._prototype_BackingField = value;
        }
      }

      public virtual extern void updateWith(
        es5.Promise<dom.PaymentDetailsUpdate> detailsPromise);
    }

    [CombinedClass]
    [FormerInterface]
    public class PaymentResponse : IObject
    {
      private static dom.PaymentResponse _prototype_BackingField;
      private readonly object _details_BackingField;
      private readonly string _methodName_BackingField;
      private readonly string _payerEmail_BackingField;
      private readonly string _payerName_BackingField;
      private readonly string _payerPhone_BackingField;
      private readonly string _requestId_BackingField;
      private readonly dom.PaymentAddress _shippingAddress_BackingField;
      private readonly string _shippingOption_BackingField;

      public static dom.PaymentResponse prototype
      {
        get
        {
          return dom.PaymentResponse._prototype_BackingField;
        }
        set
        {
          dom.PaymentResponse._prototype_BackingField = value;
        }
      }

      public virtual object details
      {
        get
        {
          return this._details_BackingField;
        }
      }

      public virtual string methodName
      {
        get
        {
          return this._methodName_BackingField;
        }
      }

      public virtual string payerEmail
      {
        get
        {
          return this._payerEmail_BackingField;
        }
      }

      public virtual string payerName
      {
        get
        {
          return this._payerName_BackingField;
        }
      }

      public virtual string payerPhone
      {
        get
        {
          return this._payerPhone_BackingField;
        }
      }

      public virtual string requestId
      {
        get
        {
          return this._requestId_BackingField;
        }
      }

      public virtual dom.PaymentAddress shippingAddress
      {
        get
        {
          return this._shippingAddress_BackingField;
        }
      }

      public virtual string shippingOption
      {
        get
        {
          return this._shippingOption_BackingField;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> complete();

      public virtual extern es5.Promise<H5.Primitive.Void> complete(
        dom.PaymentComplete result);

      public virtual extern object toJSON();
    }

    [CombinedClass]
    [FormerInterface]
    public class PerfWidgetExternal : IObject
    {
      private static dom.PerfWidgetExternal _prototype_BackingField;
      private readonly double _activeNetworkRequestCount_BackingField;
      private readonly double _averageFrameTime_BackingField;
      private readonly double _averagePaintTime_BackingField;
      private readonly bool _extraInformationEnabled_BackingField;
      private readonly bool _independentRenderingEnabled_BackingField;
      private readonly string _irDisablingContentString_BackingField;
      private readonly bool _irStatusAvailable_BackingField;
      private readonly double _maxCpuSpeed_BackingField;
      private readonly double _paintRequestsPerSecond_BackingField;
      private readonly double _performanceCounter_BackingField;
      private readonly double _performanceCounterFrequency_BackingField;

      public static dom.PerfWidgetExternal prototype
      {
        get
        {
          return dom.PerfWidgetExternal._prototype_BackingField;
        }
        set
        {
          dom.PerfWidgetExternal._prototype_BackingField = value;
        }
      }

      public virtual double activeNetworkRequestCount
      {
        get
        {
          return this._activeNetworkRequestCount_BackingField;
        }
      }

      public virtual double averageFrameTime
      {
        get
        {
          return this._averageFrameTime_BackingField;
        }
      }

      public virtual double averagePaintTime
      {
        get
        {
          return this._averagePaintTime_BackingField;
        }
      }

      public virtual bool extraInformationEnabled
      {
        get
        {
          return this._extraInformationEnabled_BackingField;
        }
      }

      public virtual bool independentRenderingEnabled
      {
        get
        {
          return this._independentRenderingEnabled_BackingField;
        }
      }

      public virtual string irDisablingContentString
      {
        get
        {
          return this._irDisablingContentString_BackingField;
        }
      }

      public virtual bool irStatusAvailable
      {
        get
        {
          return this._irStatusAvailable_BackingField;
        }
      }

      public virtual double maxCpuSpeed
      {
        get
        {
          return this._maxCpuSpeed_BackingField;
        }
      }

      public virtual double paintRequestsPerSecond
      {
        get
        {
          return this._paintRequestsPerSecond_BackingField;
        }
      }

      public virtual double performanceCounter
      {
        get
        {
          return this._performanceCounter_BackingField;
        }
      }

      public virtual double performanceCounterFrequency
      {
        get
        {
          return this._performanceCounterFrequency_BackingField;
        }
      }

      public virtual extern void addEventListener(string eventType, es5.Function callback);

      public virtual extern void addEventListener(string eventType, Action callback);

      public virtual extern void addEventListener(string eventType, Func<object> callback);

      public virtual extern double getMemoryUsage();

      public virtual extern double getProcessCpuUsage();

      public virtual extern object getRecentCpuUsage(double? last);

      public virtual extern object getRecentFrames(double? last);

      public virtual extern object getRecentMemoryUsage(double? last);

      public virtual extern object getRecentPaintRequests(double? last);

      public virtual extern void removeEventListener(string eventType, es5.Function callback);

      public virtual extern void removeEventListener(string eventType, Action callback);

      public virtual extern void removeEventListener(string eventType, Func<object> callback);

      public virtual extern void repositionWindow(double x, double y);

      public virtual extern void resizeWindow(double width, double height);
    }

    [CombinedClass]
    [FormerInterface]
    public class Performance : IObject
    {
      private static dom.Performance _prototype_BackingField;
      private readonly dom.PerformanceNavigation _navigation_BackingField;
      private readonly double _timeOrigin_BackingField;
      private readonly dom.PerformanceTiming _timing_BackingField;

      public static dom.Performance prototype
      {
        get
        {
          return dom.Performance._prototype_BackingField;
        }
        set
        {
          dom.Performance._prototype_BackingField = value;
        }
      }

      public virtual dom.PerformanceNavigation navigation
      {
        get
        {
          return this._navigation_BackingField;
        }
      }

      public virtual double timeOrigin
      {
        get
        {
          return this._timeOrigin_BackingField;
        }
      }

      public virtual dom.PerformanceTiming timing
      {
        get
        {
          return this._timing_BackingField;
        }
      }

      public virtual extern void clearMarks();

      public virtual extern void clearMarks(string markName);

      public virtual extern void clearMeasures();

      public virtual extern void clearMeasures(string measureName);

      public virtual extern void clearResourceTimings();

      public virtual extern object getEntries();

      public virtual extern object getEntriesByName(string name);

      public virtual extern object getEntriesByName(string name, string type);

      public virtual extern object getEntriesByType(string type);

      public virtual extern object getMarks();

      public virtual extern object getMarks(string markName);

      public virtual extern object getMeasures();

      public virtual extern object getMeasures(string measureName);

      public virtual extern void mark(string markName);

      public virtual extern void measure(string measureName);

      public virtual extern void measure(string measureName, string startMarkName);

      public virtual extern void measure(
        string measureName,
        string startMarkName,
        string endMarkName);

      public virtual extern double now();

      public virtual extern void setResourceTimingBufferSize(double maxSize);

      public virtual extern object toJSON();
    }

    [CombinedClass]
    [FormerInterface]
    public class PerformanceEntry : IObject
    {
      private static dom.PerformanceEntry _prototype_BackingField;
      private readonly double _duration_BackingField;
      private readonly string _entryType_BackingField;
      private readonly string _name_BackingField;
      private readonly double _startTime_BackingField;

      public static dom.PerformanceEntry prototype
      {
        get
        {
          return dom.PerformanceEntry._prototype_BackingField;
        }
        set
        {
          dom.PerformanceEntry._prototype_BackingField = value;
        }
      }

      public virtual double duration
      {
        get
        {
          return this._duration_BackingField;
        }
      }

      public virtual string entryType
      {
        get
        {
          return this._entryType_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual double startTime
      {
        get
        {
          return this._startTime_BackingField;
        }
      }

      public virtual extern object toJSON();
    }

    [CombinedClass]
    [FormerInterface]
    public class PerformanceMark : dom.PerformanceEntry
    {
      private static dom.PerformanceMark _prototype_BackingField;

      public static dom.PerformanceMark prototype
      {
        get
        {
          return dom.PerformanceMark._prototype_BackingField;
        }
        set
        {
          dom.PerformanceMark._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PerformanceMeasure : dom.PerformanceEntry
    {
      private static dom.PerformanceMeasure _prototype_BackingField;

      public static dom.PerformanceMeasure prototype
      {
        get
        {
          return dom.PerformanceMeasure._prototype_BackingField;
        }
        set
        {
          dom.PerformanceMeasure._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PerformanceNavigation : IObject
    {
      private static dom.PerformanceNavigation _prototype_BackingField;
      private static readonly ushort _TYPE_BACK_FORWARD_Static_BackingField;
      private static readonly ushort _TYPE_NAVIGATE_Static_BackingField;
      private static readonly ushort _TYPE_RELOAD_Static_BackingField;
      private static readonly ushort _TYPE_RESERVED_Static_BackingField;
      private readonly ushort _redirectCount_BackingField;
      private readonly ushort _type_BackingField;
      private readonly ushort _TYPE_BACK_FORWARD_BackingField;
      private readonly ushort _TYPE_NAVIGATE_BackingField;
      private readonly ushort _TYPE_RELOAD_BackingField;
      private readonly ushort _TYPE_RESERVED_BackingField;

      public static dom.PerformanceNavigation prototype
      {
        get
        {
          return dom.PerformanceNavigation._prototype_BackingField;
        }
        set
        {
          dom.PerformanceNavigation._prototype_BackingField = value;
        }
      }

      [Name("TYPE_BACK_FORWARD")]
      public static ushort TYPE_BACK_FORWARD_Static
      {
        get
        {
          return dom.PerformanceNavigation._TYPE_BACK_FORWARD_Static_BackingField;
        }
      }

      [Name("TYPE_NAVIGATE")]
      public static ushort TYPE_NAVIGATE_Static
      {
        get
        {
          return dom.PerformanceNavigation._TYPE_NAVIGATE_Static_BackingField;
        }
      }

      [Name("TYPE_RELOAD")]
      public static ushort TYPE_RELOAD_Static
      {
        get
        {
          return dom.PerformanceNavigation._TYPE_RELOAD_Static_BackingField;
        }
      }

      [Name("TYPE_RESERVED")]
      public static ushort TYPE_RESERVED_Static
      {
        get
        {
          return dom.PerformanceNavigation._TYPE_RESERVED_Static_BackingField;
        }
      }

      public virtual ushort redirectCount
      {
        get
        {
          return this._redirectCount_BackingField;
        }
      }

      public virtual ushort type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual extern object toJSON();

      public virtual ushort TYPE_BACK_FORWARD
      {
        get
        {
          return this._TYPE_BACK_FORWARD_BackingField;
        }
      }

      public virtual ushort TYPE_NAVIGATE
      {
        get
        {
          return this._TYPE_NAVIGATE_BackingField;
        }
      }

      public virtual ushort TYPE_RELOAD
      {
        get
        {
          return this._TYPE_RELOAD_BackingField;
        }
      }

      public virtual ushort TYPE_RESERVED
      {
        get
        {
          return this._TYPE_RESERVED_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PerformanceNavigationTiming : dom.PerformanceEntry
    {
      private static dom.PerformanceNavigationTiming _prototype_BackingField;
      private readonly double _connectEnd_BackingField;
      private readonly double _connectStart_BackingField;
      private readonly double _domComplete_BackingField;
      private readonly double _domContentLoadedEventEnd_BackingField;
      private readonly double _domContentLoadedEventStart_BackingField;
      private readonly double _domInteractive_BackingField;
      private readonly double _domLoading_BackingField;
      private readonly double _domainLookupEnd_BackingField;
      private readonly double _domainLookupStart_BackingField;
      private readonly double _fetchStart_BackingField;
      private readonly double _loadEventEnd_BackingField;
      private readonly double _loadEventStart_BackingField;
      private readonly double _navigationStart_BackingField;
      private readonly double _redirectCount_BackingField;
      private readonly double _redirectEnd_BackingField;
      private readonly double _redirectStart_BackingField;
      private readonly double _requestStart_BackingField;
      private readonly double _responseEnd_BackingField;
      private readonly double _responseStart_BackingField;
      private readonly dom.NavigationType _type_BackingField;
      private readonly double _unloadEventEnd_BackingField;
      private readonly double _unloadEventStart_BackingField;
      private readonly double _workerStart_BackingField;

      public static dom.PerformanceNavigationTiming prototype
      {
        get
        {
          return dom.PerformanceNavigationTiming._prototype_BackingField;
        }
        set
        {
          dom.PerformanceNavigationTiming._prototype_BackingField = value;
        }
      }

      public virtual double connectEnd
      {
        get
        {
          return this._connectEnd_BackingField;
        }
      }

      public virtual double connectStart
      {
        get
        {
          return this._connectStart_BackingField;
        }
      }

      public virtual double domComplete
      {
        get
        {
          return this._domComplete_BackingField;
        }
      }

      public virtual double domContentLoadedEventEnd
      {
        get
        {
          return this._domContentLoadedEventEnd_BackingField;
        }
      }

      public virtual double domContentLoadedEventStart
      {
        get
        {
          return this._domContentLoadedEventStart_BackingField;
        }
      }

      public virtual double domInteractive
      {
        get
        {
          return this._domInteractive_BackingField;
        }
      }

      public virtual double domLoading
      {
        get
        {
          return this._domLoading_BackingField;
        }
      }

      public virtual double domainLookupEnd
      {
        get
        {
          return this._domainLookupEnd_BackingField;
        }
      }

      public virtual double domainLookupStart
      {
        get
        {
          return this._domainLookupStart_BackingField;
        }
      }

      public virtual double fetchStart
      {
        get
        {
          return this._fetchStart_BackingField;
        }
      }

      public virtual double loadEventEnd
      {
        get
        {
          return this._loadEventEnd_BackingField;
        }
      }

      public virtual double loadEventStart
      {
        get
        {
          return this._loadEventStart_BackingField;
        }
      }

      public virtual double navigationStart
      {
        get
        {
          return this._navigationStart_BackingField;
        }
      }

      public virtual double redirectCount
      {
        get
        {
          return this._redirectCount_BackingField;
        }
      }

      public virtual double redirectEnd
      {
        get
        {
          return this._redirectEnd_BackingField;
        }
      }

      public virtual double redirectStart
      {
        get
        {
          return this._redirectStart_BackingField;
        }
      }

      public virtual double requestStart
      {
        get
        {
          return this._requestStart_BackingField;
        }
      }

      public virtual double responseEnd
      {
        get
        {
          return this._responseEnd_BackingField;
        }
      }

      public virtual double responseStart
      {
        get
        {
          return this._responseStart_BackingField;
        }
      }

      public virtual dom.NavigationType type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual double unloadEventEnd
      {
        get
        {
          return this._unloadEventEnd_BackingField;
        }
      }

      public virtual double unloadEventStart
      {
        get
        {
          return this._unloadEventStart_BackingField;
        }
      }

      public virtual double workerStart
      {
        get
        {
          return this._workerStart_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PerformanceResourceTiming : dom.PerformanceEntry
    {
      private static dom.PerformanceResourceTiming _prototype_BackingField;
      private readonly double _connectEnd_BackingField;
      private readonly double _connectStart_BackingField;
      private readonly double _domainLookupEnd_BackingField;
      private readonly double _domainLookupStart_BackingField;
      private readonly double _fetchStart_BackingField;
      private readonly string _initiatorType_BackingField;
      private readonly double _redirectEnd_BackingField;
      private readonly double _redirectStart_BackingField;
      private readonly double _requestStart_BackingField;
      private readonly double _responseEnd_BackingField;
      private readonly double _responseStart_BackingField;
      private readonly double _workerStart_BackingField;

      public static dom.PerformanceResourceTiming prototype
      {
        get
        {
          return dom.PerformanceResourceTiming._prototype_BackingField;
        }
        set
        {
          dom.PerformanceResourceTiming._prototype_BackingField = value;
        }
      }

      public virtual double connectEnd
      {
        get
        {
          return this._connectEnd_BackingField;
        }
      }

      public virtual double connectStart
      {
        get
        {
          return this._connectStart_BackingField;
        }
      }

      public virtual double domainLookupEnd
      {
        get
        {
          return this._domainLookupEnd_BackingField;
        }
      }

      public virtual double domainLookupStart
      {
        get
        {
          return this._domainLookupStart_BackingField;
        }
      }

      public virtual double fetchStart
      {
        get
        {
          return this._fetchStart_BackingField;
        }
      }

      public virtual string initiatorType
      {
        get
        {
          return this._initiatorType_BackingField;
        }
      }

      public virtual double redirectEnd
      {
        get
        {
          return this._redirectEnd_BackingField;
        }
      }

      public virtual double redirectStart
      {
        get
        {
          return this._redirectStart_BackingField;
        }
      }

      public virtual double requestStart
      {
        get
        {
          return this._requestStart_BackingField;
        }
      }

      public virtual double responseEnd
      {
        get
        {
          return this._responseEnd_BackingField;
        }
      }

      public virtual double responseStart
      {
        get
        {
          return this._responseStart_BackingField;
        }
      }

      public virtual double workerStart
      {
        get
        {
          return this._workerStart_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PerformanceTiming : IObject
    {
      private static dom.PerformanceTiming _prototype_BackingField;
      private readonly ulong _connectEnd_BackingField;
      private readonly ulong _connectStart_BackingField;
      private readonly ulong _domComplete_BackingField;
      private readonly ulong _domContentLoadedEventEnd_BackingField;
      private readonly ulong _domContentLoadedEventStart_BackingField;
      private readonly ulong _domInteractive_BackingField;
      private readonly ulong _domLoading_BackingField;
      private readonly ulong _domainLookupEnd_BackingField;
      private readonly ulong _domainLookupStart_BackingField;
      private readonly ulong _fetchStart_BackingField;
      private readonly ulong _loadEventEnd_BackingField;
      private readonly ulong _loadEventStart_BackingField;
      private readonly double _msFirstPaint_BackingField;
      private readonly ulong _navigationStart_BackingField;
      private readonly ulong _redirectEnd_BackingField;
      private readonly ulong _redirectStart_BackingField;
      private readonly ulong _requestStart_BackingField;
      private readonly ulong _responseEnd_BackingField;
      private readonly ulong _responseStart_BackingField;
      private readonly ulong _secureConnectionStart_BackingField;
      private readonly ulong _unloadEventEnd_BackingField;
      private readonly ulong _unloadEventStart_BackingField;

      public static dom.PerformanceTiming prototype
      {
        get
        {
          return dom.PerformanceTiming._prototype_BackingField;
        }
        set
        {
          dom.PerformanceTiming._prototype_BackingField = value;
        }
      }

      public virtual ulong connectEnd
      {
        get
        {
          return this._connectEnd_BackingField;
        }
      }

      public virtual ulong connectStart
      {
        get
        {
          return this._connectStart_BackingField;
        }
      }

      public virtual ulong domComplete
      {
        get
        {
          return this._domComplete_BackingField;
        }
      }

      public virtual ulong domContentLoadedEventEnd
      {
        get
        {
          return this._domContentLoadedEventEnd_BackingField;
        }
      }

      public virtual ulong domContentLoadedEventStart
      {
        get
        {
          return this._domContentLoadedEventStart_BackingField;
        }
      }

      public virtual ulong domInteractive
      {
        get
        {
          return this._domInteractive_BackingField;
        }
      }

      public virtual ulong domLoading
      {
        get
        {
          return this._domLoading_BackingField;
        }
      }

      public virtual ulong domainLookupEnd
      {
        get
        {
          return this._domainLookupEnd_BackingField;
        }
      }

      public virtual ulong domainLookupStart
      {
        get
        {
          return this._domainLookupStart_BackingField;
        }
      }

      public virtual ulong fetchStart
      {
        get
        {
          return this._fetchStart_BackingField;
        }
      }

      public virtual ulong loadEventEnd
      {
        get
        {
          return this._loadEventEnd_BackingField;
        }
      }

      public virtual ulong loadEventStart
      {
        get
        {
          return this._loadEventStart_BackingField;
        }
      }

      public virtual double msFirstPaint
      {
        get
        {
          return this._msFirstPaint_BackingField;
        }
      }

      public virtual ulong navigationStart
      {
        get
        {
          return this._navigationStart_BackingField;
        }
      }

      public virtual ulong redirectEnd
      {
        get
        {
          return this._redirectEnd_BackingField;
        }
      }

      public virtual ulong redirectStart
      {
        get
        {
          return this._redirectStart_BackingField;
        }
      }

      public virtual ulong requestStart
      {
        get
        {
          return this._requestStart_BackingField;
        }
      }

      public virtual ulong responseEnd
      {
        get
        {
          return this._responseEnd_BackingField;
        }
      }

      public virtual ulong responseStart
      {
        get
        {
          return this._responseStart_BackingField;
        }
      }

      public virtual ulong secureConnectionStart
      {
        get
        {
          return this._secureConnectionStart_BackingField;
        }
      }

      public virtual ulong unloadEventEnd
      {
        get
        {
          return this._unloadEventEnd_BackingField;
        }
      }

      public virtual ulong unloadEventStart
      {
        get
        {
          return this._unloadEventStart_BackingField;
        }
      }

      public virtual extern object toJSON();
    }

    [CombinedClass]
    [FormerInterface]
    public class PeriodicWave : IObject
    {
      private static dom.PeriodicWave _prototype_BackingField;

      public static dom.PeriodicWave prototype
      {
        get
        {
          return dom.PeriodicWave._prototype_BackingField;
        }
        set
        {
          dom.PeriodicWave._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PermissionRequest : dom.DeferredPermissionRequest
    {
      private static dom.PermissionRequest _prototype_BackingField;
      private readonly dom.MSWebViewPermissionState _state_BackingField;

      public static dom.PermissionRequest prototype
      {
        get
        {
          return dom.PermissionRequest._prototype_BackingField;
        }
        set
        {
          dom.PermissionRequest._prototype_BackingField = value;
        }
      }

      public virtual dom.MSWebViewPermissionState state
      {
        get
        {
          return this._state_BackingField;
        }
      }

      public virtual extern void defer();
    }

    [CombinedClass]
    [FormerInterface]
    public class PermissionRequestedEvent : dom.Event
    {
      private static dom.PermissionRequestedEvent _prototype_BackingField;
      private readonly dom.PermissionRequest _permissionRequest_BackingField;

      public static dom.PermissionRequestedEvent prototype
      {
        get
        {
          return dom.PermissionRequestedEvent._prototype_BackingField;
        }
        set
        {
          dom.PermissionRequestedEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.PermissionRequest permissionRequest
      {
        get
        {
          return this._permissionRequest_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Plugin : IObject
    {
      private static dom.Plugin _prototype_BackingField;
      private readonly string _description_BackingField;
      private readonly string _filename_BackingField;
      private readonly uint _length_BackingField;
      private readonly string _name_BackingField;
      private readonly string _version_BackingField;

      public static dom.Plugin prototype
      {
        get
        {
          return dom.Plugin._prototype_BackingField;
        }
        set
        {
          dom.Plugin._prototype_BackingField = value;
        }
      }

      public virtual string description
      {
        get
        {
          return this._description_BackingField;
        }
      }

      public virtual string filename
      {
        get
        {
          return this._filename_BackingField;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual string version
      {
        get
        {
          return this._version_BackingField;
        }
      }

      public virtual extern dom.MimeType item(uint index);

      public virtual extern dom.MimeType namedItem(string type);

      public virtual extern dom.MimeType this[uint index] { get; set; }
    }

    [CombinedClass]
    [FormerInterface]
    public class PluginArray : IEnumerable<dom.Plugin>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.PluginArray _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.PluginArray prototype
      {
        get
        {
          return dom.PluginArray._prototype_BackingField;
        }
        set
        {
          dom.PluginArray._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.Plugin item(uint index);

      public virtual extern dom.Plugin namedItem(string name);

      public virtual extern void refresh();

      public virtual extern void refresh(bool reload);

      public virtual extern dom.Plugin this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.Plugin> IEnumerable<dom.Plugin>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class PointerEvent : dom.MouseEvent
    {
      private static dom.PointerEvent _prototype_BackingField;
      private readonly object _currentPoint_BackingField;
      private readonly double _height_BackingField;
      private readonly double _hwTimestamp_BackingField;
      private readonly object _intermediatePoints_BackingField;
      private readonly bool _isPrimary_BackingField;
      private readonly double _pointerId_BackingField;
      private readonly object _pointerType_BackingField;
      private readonly double _pressure_BackingField;
      private readonly double _rotation_BackingField;
      private readonly double _tiltX_BackingField;
      private readonly double _tiltY_BackingField;
      private readonly double _width_BackingField;

      public extern PointerEvent(string typeArg);

      public extern PointerEvent(string typeArg, dom.PointerEventInit eventInitDict);

      public static dom.PointerEvent prototype
      {
        get
        {
          return dom.PointerEvent._prototype_BackingField;
        }
        set
        {
          dom.PointerEvent._prototype_BackingField = value;
        }
      }

      public virtual object currentPoint
      {
        get
        {
          return this._currentPoint_BackingField;
        }
      }

      public virtual double height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual double hwTimestamp
      {
        get
        {
          return this._hwTimestamp_BackingField;
        }
      }

      public virtual object intermediatePoints
      {
        get
        {
          return this._intermediatePoints_BackingField;
        }
      }

      public virtual bool isPrimary
      {
        get
        {
          return this._isPrimary_BackingField;
        }
      }

      public virtual double pointerId
      {
        get
        {
          return this._pointerId_BackingField;
        }
      }

      public virtual object pointerType
      {
        get
        {
          return this._pointerType_BackingField;
        }
      }

      public virtual double pressure
      {
        get
        {
          return this._pressure_BackingField;
        }
      }

      public virtual double rotation
      {
        get
        {
          return this._rotation_BackingField;
        }
      }

      public virtual double tiltX
      {
        get
        {
          return this._tiltX_BackingField;
        }
      }

      public virtual double tiltY
      {
        get
        {
          return this._tiltY_BackingField;
        }
      }

      public virtual double width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual extern void getCurrentPoint(dom.Element element);

      public virtual extern void getIntermediatePoints(dom.Element element);

      public virtual extern void initPointerEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        double detailArg,
        double screenXArg,
        double screenYArg,
        double clientXArg,
        double clientYArg,
        bool ctrlKeyArg,
        bool altKeyArg,
        bool shiftKeyArg,
        bool metaKeyArg,
        double buttonArg,
        dom.EventTarget relatedTargetArg,
        double offsetXArg,
        double offsetYArg,
        double widthArg,
        double heightArg,
        double pressure,
        double rotation,
        double tiltX,
        double tiltY,
        double pointerIdArg,
        object pointerType,
        double hwTimestampArg,
        bool isPrimary);
    }

    [CombinedClass]
    [FormerInterface]
    public class PopStateEvent : dom.Event
    {
      private static dom.PopStateEvent _prototype_BackingField;
      private readonly object _state_BackingField;

      public extern PopStateEvent(string type);

      public extern PopStateEvent(string type, dom.PopStateEventInit eventInitDict);

      public static dom.PopStateEvent prototype
      {
        get
        {
          return dom.PopStateEvent._prototype_BackingField;
        }
        set
        {
          dom.PopStateEvent._prototype_BackingField = value;
        }
      }

      public virtual object state
      {
        get
        {
          return this._state_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Position : IObject
    {
      private static dom.Position _prototype_BackingField;
      private readonly dom.Coordinates _coords_BackingField;
      private readonly double _timestamp_BackingField;

      public static dom.Position prototype
      {
        get
        {
          return dom.Position._prototype_BackingField;
        }
        set
        {
          dom.Position._prototype_BackingField = value;
        }
      }

      public virtual dom.Coordinates coords
      {
        get
        {
          return this._coords_BackingField;
        }
      }

      public virtual double timestamp
      {
        get
        {
          return this._timestamp_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PositionError : IObject
    {
      private static dom.PositionError _prototype_BackingField;
      private static readonly double _PERMISSION_DENIED_Static_BackingField;
      private static readonly double _POSITION_UNAVAILABLE_Static_BackingField;
      private static readonly double _TIMEOUT_Static_BackingField;
      private readonly double _code_BackingField;
      private readonly string _message_BackingField;
      private readonly double _PERMISSION_DENIED_BackingField;
      private readonly double _POSITION_UNAVAILABLE_BackingField;
      private readonly double _TIMEOUT_BackingField;

      public static dom.PositionError prototype
      {
        get
        {
          return dom.PositionError._prototype_BackingField;
        }
        set
        {
          dom.PositionError._prototype_BackingField = value;
        }
      }

      [Name("PERMISSION_DENIED")]
      public static double PERMISSION_DENIED_Static
      {
        get
        {
          return dom.PositionError._PERMISSION_DENIED_Static_BackingField;
        }
      }

      [Name("POSITION_UNAVAILABLE")]
      public static double POSITION_UNAVAILABLE_Static
      {
        get
        {
          return dom.PositionError._POSITION_UNAVAILABLE_Static_BackingField;
        }
      }

      [Name("TIMEOUT")]
      public static double TIMEOUT_Static
      {
        get
        {
          return dom.PositionError._TIMEOUT_Static_BackingField;
        }
      }

      public virtual double code
      {
        get
        {
          return this._code_BackingField;
        }
      }

      public virtual string message
      {
        get
        {
          return this._message_BackingField;
        }
      }

      public virtual extern string toString();

      public virtual double PERMISSION_DENIED
      {
        get
        {
          return this._PERMISSION_DENIED_BackingField;
        }
      }

      public virtual double POSITION_UNAVAILABLE
      {
        get
        {
          return this._POSITION_UNAVAILABLE_BackingField;
        }
      }

      public virtual double TIMEOUT
      {
        get
        {
          return this._TIMEOUT_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ProcessingInstruction : dom.CharacterData
    {
      private static dom.ProcessingInstruction _prototype_BackingField;
      private readonly string _target_BackingField;

      public static dom.ProcessingInstruction prototype
      {
        get
        {
          return dom.ProcessingInstruction._prototype_BackingField;
        }
        set
        {
          dom.ProcessingInstruction._prototype_BackingField = value;
        }
      }

      public virtual string target
      {
        get
        {
          return this._target_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ProgressEvent : dom.Event
    {
      private static dom.ProgressEvent _prototype_BackingField;
      private readonly bool _lengthComputable_BackingField;
      private readonly ulong _loaded_BackingField;
      private readonly ulong _total_BackingField;

      public extern ProgressEvent(string typeArg);

      public extern ProgressEvent(string typeArg, dom.ProgressEventInit eventInitDict);

      public static dom.ProgressEvent prototype
      {
        get
        {
          return dom.ProgressEvent._prototype_BackingField;
        }
        set
        {
          dom.ProgressEvent._prototype_BackingField = value;
        }
      }

      public virtual bool lengthComputable
      {
        get
        {
          return this._lengthComputable_BackingField;
        }
      }

      public virtual ulong loaded
      {
        get
        {
          return this._loaded_BackingField;
        }
      }

      public virtual ulong total
      {
        get
        {
          return this._total_BackingField;
        }
      }

      public virtual extern void initProgressEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        bool lengthComputableArg,
        double loadedArg,
        double totalArg);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class PromiseRejectionEvent : dom.Event
    {
      public extern PromiseRejectionEvent(string typeArg);

      public abstract es5.PromiseLike<object> promise { get; }

      public abstract object reason { get; }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class PromiseRejectionEventInit : dom.EventInit
    {
      private es5.PromiseLike<object> _promise_BackingField;
      private object _reason_BackingField;

      public es5.PromiseLike<object> promise
      {
        get
        {
          return this._promise_BackingField;
        }
        set
        {
          this._promise_BackingField = value;
        }
      }

      public object reason
      {
        get
        {
          return this._reason_BackingField;
        }
        set
        {
          this._reason_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class PushManager : IObject
    {
      private static dom.PushManager _prototype_BackingField;
      private readonly es5.ReadonlyArray<string> _supportedContentEncodings_BackingField;

      public static dom.PushManager prototype
      {
        get
        {
          return dom.PushManager._prototype_BackingField;
        }
        set
        {
          dom.PushManager._prototype_BackingField = value;
        }
      }

      public virtual es5.ReadonlyArray<string> supportedContentEncodings
      {
        get
        {
          return this._supportedContentEncodings_BackingField;
        }
      }

      public virtual extern es5.Promise<dom.PushSubscription> getSubscription();

      public virtual extern es5.Promise<dom.PushPermissionState> permissionState();

      public virtual extern es5.Promise<dom.PushPermissionState> permissionState(
        dom.PushSubscriptionOptionsInit options);

      public virtual extern es5.Promise<dom.PushSubscription> subscribe();

      public virtual extern es5.Promise<dom.PushSubscription> subscribe(
        dom.PushSubscriptionOptionsInit options);
    }

    [CombinedClass]
    [FormerInterface]
    public class PushSubscription : IObject
    {
      private static dom.PushSubscription _prototype_BackingField;
      private readonly string _endpoint_BackingField;
      private readonly double? _expirationTime_BackingField;
      private readonly dom.PushSubscriptionOptions _options_BackingField;

      public static dom.PushSubscription prototype
      {
        get
        {
          return dom.PushSubscription._prototype_BackingField;
        }
        set
        {
          dom.PushSubscription._prototype_BackingField = value;
        }
      }

      public virtual string endpoint
      {
        get
        {
          return this._endpoint_BackingField;
        }
      }

      public virtual double? expirationTime
      {
        get
        {
          return this._expirationTime_BackingField;
        }
      }

      public virtual dom.PushSubscriptionOptions options
      {
        get
        {
          return this._options_BackingField;
        }
      }

      public virtual extern es5.ArrayBuffer getKey(dom.PushEncryptionKeyName name);

      public virtual extern object toJSON();

      public virtual extern es5.Promise<bool> unsubscribe();
    }

    [CombinedClass]
    [FormerInterface]
    public class PushSubscriptionOptions : IObject
    {
      private static dom.PushSubscriptionOptions _prototype_BackingField;
      private readonly es5.ArrayBuffer _applicationServerKey_BackingField;
      private readonly bool _userVisibleOnly_BackingField;

      public static dom.PushSubscriptionOptions prototype
      {
        get
        {
          return dom.PushSubscriptionOptions._prototype_BackingField;
        }
        set
        {
          dom.PushSubscriptionOptions._prototype_BackingField = value;
        }
      }

      public virtual es5.ArrayBuffer applicationServerKey
      {
        get
        {
          return this._applicationServerKey_BackingField;
        }
      }

      public virtual bool userVisibleOnly
      {
        get
        {
          return this._userVisibleOnly_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCDTMFToneChangeEvent : dom.Event
    {
      private static dom.RTCDTMFToneChangeEvent _prototype_BackingField;
      private readonly string _tone_BackingField;

      public extern RTCDTMFToneChangeEvent(
        string typeArg,
        dom.RTCDTMFToneChangeEventInit eventInitDict);

      public static dom.RTCDTMFToneChangeEvent prototype
      {
        get
        {
          return dom.RTCDTMFToneChangeEvent._prototype_BackingField;
        }
        set
        {
          dom.RTCDTMFToneChangeEvent._prototype_BackingField = value;
        }
      }

      public virtual string tone
      {
        get
        {
          return this._tone_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCDtlsTransportEventMap : IObject
    {
      private dom.RTCDtlsTransportStateChangedEvent _dtlsstatechange_BackingField;
      private dom.Event _error_BackingField;

      public dom.RTCDtlsTransportStateChangedEvent dtlsstatechange
      {
        get
        {
          return this._dtlsstatechange_BackingField;
        }
        set
        {
          this._dtlsstatechange_BackingField = value;
        }
      }

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"dtlsstatechange\"")]
        public static readonly KeyOf<dom.RTCDtlsTransportEventMap> dtlsstatechange;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.RTCDtlsTransportEventMap> error;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCDtlsTransport : dom.RTCStatsProvider
    {
      private static dom.RTCDtlsTransport _prototype_BackingField;
      private dom.RTCDtlsTransport.ondtlsstatechangeFn _ondtlsstatechange_BackingField;
      private dom.RTCDtlsTransport.onerrorFn _onerror_BackingField;
      private readonly dom.RTCDtlsTransportState _state_BackingField;
      private readonly dom.RTCIceTransport _transport_BackingField;

      public extern RTCDtlsTransport(dom.RTCIceTransport transport);

      public static dom.RTCDtlsTransport prototype
      {
        get
        {
          return dom.RTCDtlsTransport._prototype_BackingField;
        }
        set
        {
          dom.RTCDtlsTransport._prototype_BackingField = value;
        }
      }

      public virtual dom.RTCDtlsTransport.ondtlsstatechangeFn ondtlsstatechange
      {
        get
        {
          return this._ondtlsstatechange_BackingField;
        }
        set
        {
          this._ondtlsstatechange_BackingField = value;
        }
      }

      public virtual dom.RTCDtlsTransport.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.RTCDtlsTransportState state
      {
        get
        {
          return this._state_BackingField;
        }
      }

      public virtual dom.RTCIceTransport transport
      {
        get
        {
          return this._transport_BackingField;
        }
      }

      public virtual extern dom.RTCDtlsParameters getLocalParameters();

      public virtual extern es5.ArrayBuffer[] getRemoteCertificates();

      public virtual extern dom.RTCDtlsParameters getRemoteParameters();

      public virtual extern void start(dom.RTCDtlsParameters remoteParameters);

      public virtual extern void stop();

      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCDtlsTransport.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCDtlsTransport.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCDtlsTransport.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCDtlsTransport.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCDtlsTransport.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCDtlsTransport.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCDtlsTransport.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCDtlsTransport.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void ondtlsstatechangeFn(dom.RTCDtlsTransportStateChangedEvent ev);

      [Generated]
      public delegate void onerrorFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCDtlsTransportStateChangedEvent : dom.Event
    {
      private static dom.RTCDtlsTransportStateChangedEvent _prototype_BackingField;
      private readonly dom.RTCDtlsTransportState _state_BackingField;

      public static dom.RTCDtlsTransportStateChangedEvent prototype
      {
        get
        {
          return dom.RTCDtlsTransportStateChangedEvent._prototype_BackingField;
        }
        set
        {
          dom.RTCDtlsTransportStateChangedEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.RTCDtlsTransportState state
      {
        get
        {
          return this._state_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCDtmfSenderEventMap : IObject
    {
      private dom.RTCDTMFToneChangeEvent _tonechange_BackingField;

      public dom.RTCDTMFToneChangeEvent tonechange
      {
        get
        {
          return this._tonechange_BackingField;
        }
        set
        {
          this._tonechange_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"tonechange\"")]
        public static readonly KeyOf<dom.RTCDtmfSenderEventMap> tonechange;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCDtmfSender : dom.EventTarget
    {
      private static dom.RTCDtmfSender _prototype_BackingField;
      private readonly bool _canInsertDTMF_BackingField;
      private readonly double _duration_BackingField;
      private readonly double _interToneGap_BackingField;
      private dom.RTCDtmfSender.ontonechangeFn _ontonechange_BackingField;
      private readonly dom.RTCRtpSender _sender_BackingField;
      private readonly string _toneBuffer_BackingField;

      public extern RTCDtmfSender(dom.RTCRtpSender sender);

      public static dom.RTCDtmfSender prototype
      {
        get
        {
          return dom.RTCDtmfSender._prototype_BackingField;
        }
        set
        {
          dom.RTCDtmfSender._prototype_BackingField = value;
        }
      }

      public virtual bool canInsertDTMF
      {
        get
        {
          return this._canInsertDTMF_BackingField;
        }
      }

      public virtual double duration
      {
        get
        {
          return this._duration_BackingField;
        }
      }

      public virtual double interToneGap
      {
        get
        {
          return this._interToneGap_BackingField;
        }
      }

      public virtual dom.RTCDtmfSender.ontonechangeFn ontonechange
      {
        get
        {
          return this._ontonechange_BackingField;
        }
        set
        {
          this._ontonechange_BackingField = value;
        }
      }

      public virtual dom.RTCRtpSender sender
      {
        get
        {
          return this._sender_BackingField;
        }
      }

      public virtual string toneBuffer
      {
        get
        {
          return this._toneBuffer_BackingField;
        }
      }

      public virtual extern void insertDTMF(string tones);

      public virtual extern void insertDTMF(string tones, double duration);

      public virtual extern void insertDTMF(string tones, double duration, double interToneGap);

      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCDtmfSender.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCDtmfSender.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCDtmfSender.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCDtmfSender.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCDtmfSender.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCDtmfSender.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCDtmfSender.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCDtmfSender.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void ontonechangeFn(dom.RTCDTMFToneChangeEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCIceCandidate : IObject
    {
      private static dom.RTCIceCandidate _prototype_BackingField;
      private string _candidate_BackingField;
      private double? _sdpMLineIndex_BackingField;
      private string _sdpMid_BackingField;

      public extern RTCIceCandidate();

      public extern RTCIceCandidate(dom.RTCIceCandidateInit candidateInitDict);

      public static dom.RTCIceCandidate prototype
      {
        get
        {
          return dom.RTCIceCandidate._prototype_BackingField;
        }
        set
        {
          dom.RTCIceCandidate._prototype_BackingField = value;
        }
      }

      public virtual string candidate
      {
        get
        {
          return this._candidate_BackingField;
        }
        set
        {
          this._candidate_BackingField = value;
        }
      }

      public virtual double? sdpMLineIndex
      {
        get
        {
          return this._sdpMLineIndex_BackingField;
        }
        set
        {
          this._sdpMLineIndex_BackingField = value;
        }
      }

      public virtual string sdpMid
      {
        get
        {
          return this._sdpMid_BackingField;
        }
        set
        {
          this._sdpMid_BackingField = value;
        }
      }

      public virtual extern object toJSON();
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCIceCandidatePairChangedEvent : dom.Event
    {
      private static dom.RTCIceCandidatePairChangedEvent _prototype_BackingField;
      private readonly dom.RTCIceCandidatePair _pair_BackingField;

      public static dom.RTCIceCandidatePairChangedEvent prototype
      {
        get
        {
          return dom.RTCIceCandidatePairChangedEvent._prototype_BackingField;
        }
        set
        {
          dom.RTCIceCandidatePairChangedEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.RTCIceCandidatePair pair
      {
        get
        {
          return this._pair_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceGathererEventMap : IObject
    {
      private dom.Event _error_BackingField;
      private dom.RTCIceGathererEvent _localcandidate_BackingField;

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.RTCIceGathererEvent localcandidate
      {
        get
        {
          return this._localcandidate_BackingField;
        }
        set
        {
          this._localcandidate_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"error\"")]
        public static readonly KeyOf<dom.RTCIceGathererEventMap> error;
        [Template("\"localcandidate\"")]
        public static readonly KeyOf<dom.RTCIceGathererEventMap> localcandidate;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCIceGatherer : dom.RTCStatsProvider
    {
      private static dom.RTCIceGatherer _prototype_BackingField;
      private readonly dom.RTCIceComponent _component_BackingField;
      private dom.RTCIceGatherer.onerrorFn _onerror_BackingField;
      private dom.RTCIceGatherer.onlocalcandidateFn _onlocalcandidate_BackingField;

      public extern RTCIceGatherer(dom.RTCIceGatherOptions options);

      public static dom.RTCIceGatherer prototype
      {
        get
        {
          return dom.RTCIceGatherer._prototype_BackingField;
        }
        set
        {
          dom.RTCIceGatherer._prototype_BackingField = value;
        }
      }

      public virtual dom.RTCIceComponent component
      {
        get
        {
          return this._component_BackingField;
        }
      }

      public virtual dom.RTCIceGatherer.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.RTCIceGatherer.onlocalcandidateFn onlocalcandidate
      {
        get
        {
          return this._onlocalcandidate_BackingField;
        }
        set
        {
          this._onlocalcandidate_BackingField = value;
        }
      }

      public virtual extern dom.RTCIceGatherer createAssociatedGatherer();

      public virtual extern dom.RTCIceCandidateDictionary[] getLocalCandidates();

      public virtual extern dom.RTCIceParameters getLocalParameters();

      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCIceGatherer.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCIceGatherer.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCIceGatherer.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCIceGatherer.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCIceGatherer.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCIceGatherer.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCIceGatherer.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCIceGatherer.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onerrorFn(dom.Event ev);

      [Generated]
      public delegate void onlocalcandidateFn(dom.RTCIceGathererEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCIceGathererEvent : dom.Event
    {
      private static dom.RTCIceGathererEvent _prototype_BackingField;
      private readonly Union<dom.RTCIceCandidateDictionary, dom.RTCIceCandidateComplete> _candidate_BackingField;

      public static dom.RTCIceGathererEvent prototype
      {
        get
        {
          return dom.RTCIceGathererEvent._prototype_BackingField;
        }
        set
        {
          dom.RTCIceGathererEvent._prototype_BackingField = value;
        }
      }

      public virtual Union<dom.RTCIceCandidateDictionary, dom.RTCIceCandidateComplete> candidate
      {
        get
        {
          return this._candidate_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCIceTransportEventMap : IObject
    {
      private dom.RTCIceCandidatePairChangedEvent _candidatepairchange_BackingField;
      private dom.RTCIceTransportStateChangedEvent _icestatechange_BackingField;

      public dom.RTCIceCandidatePairChangedEvent candidatepairchange
      {
        get
        {
          return this._candidatepairchange_BackingField;
        }
        set
        {
          this._candidatepairchange_BackingField = value;
        }
      }

      public dom.RTCIceTransportStateChangedEvent icestatechange
      {
        get
        {
          return this._icestatechange_BackingField;
        }
        set
        {
          this._icestatechange_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"candidatepairchange\"")]
        public static readonly KeyOf<dom.RTCIceTransportEventMap> candidatepairchange;
        [Template("\"icestatechange\"")]
        public static readonly KeyOf<dom.RTCIceTransportEventMap> icestatechange;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCIceTransport : dom.RTCStatsProvider
    {
      private static dom.RTCIceTransport _prototype_BackingField;
      private readonly dom.RTCIceComponent _component_BackingField;
      private readonly dom.RTCIceGatherer _iceGatherer_BackingField;
      private dom.RTCIceTransport.oncandidatepairchangeFn _oncandidatepairchange_BackingField;
      private dom.RTCIceTransport.onicestatechangeFn _onicestatechange_BackingField;
      private readonly dom.RTCIceRole _role_BackingField;
      private readonly dom.RTCIceTransportState _state_BackingField;

      public static dom.RTCIceTransport prototype
      {
        get
        {
          return dom.RTCIceTransport._prototype_BackingField;
        }
        set
        {
          dom.RTCIceTransport._prototype_BackingField = value;
        }
      }

      public virtual dom.RTCIceComponent component
      {
        get
        {
          return this._component_BackingField;
        }
      }

      public virtual dom.RTCIceGatherer iceGatherer
      {
        get
        {
          return this._iceGatherer_BackingField;
        }
      }

      public virtual dom.RTCIceTransport.oncandidatepairchangeFn oncandidatepairchange
      {
        get
        {
          return this._oncandidatepairchange_BackingField;
        }
        set
        {
          this._oncandidatepairchange_BackingField = value;
        }
      }

      public virtual dom.RTCIceTransport.onicestatechangeFn onicestatechange
      {
        get
        {
          return this._onicestatechange_BackingField;
        }
        set
        {
          this._onicestatechange_BackingField = value;
        }
      }

      public virtual dom.RTCIceRole role
      {
        get
        {
          return this._role_BackingField;
        }
      }

      public virtual dom.RTCIceTransportState state
      {
        get
        {
          return this._state_BackingField;
        }
      }

      public virtual extern void addRemoteCandidate(
        Union<dom.RTCIceCandidateDictionary, dom.RTCIceCandidateComplete> remoteCandidate);

      public virtual extern void addRemoteCandidate(dom.RTCIceCandidateDictionary remoteCandidate);

      public virtual extern void addRemoteCandidate(dom.RTCIceCandidateComplete remoteCandidate);

      public virtual extern dom.RTCIceTransport createAssociatedTransport();

      public virtual extern dom.RTCIceCandidatePair getNominatedCandidatePair();

      public virtual extern dom.RTCIceCandidateDictionary[] getRemoteCandidates();

      public virtual extern dom.RTCIceParameters getRemoteParameters();

      public virtual extern void setRemoteCandidates(
        dom.RTCIceCandidateDictionary[] remoteCandidates);

      public virtual extern void start(
        dom.RTCIceGatherer gatherer,
        dom.RTCIceParameters remoteParameters);

      public virtual extern void start(
        dom.RTCIceGatherer gatherer,
        dom.RTCIceParameters remoteParameters,
        dom.RTCIceRole role);

      public virtual extern void stop();

      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCIceTransport.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCIceTransport.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCIceTransport.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCIceTransport.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCIceTransport.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCIceTransport.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCIceTransport.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCIceTransport.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void oncandidatepairchangeFn(dom.RTCIceCandidatePairChangedEvent ev);

      [Generated]
      public delegate void onicestatechangeFn(dom.RTCIceTransportStateChangedEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCIceTransportStateChangedEvent : dom.Event
    {
      private static dom.RTCIceTransportStateChangedEvent _prototype_BackingField;
      private readonly dom.RTCIceTransportState _state_BackingField;

      public static dom.RTCIceTransportStateChangedEvent prototype
      {
        get
        {
          return dom.RTCIceTransportStateChangedEvent._prototype_BackingField;
        }
        set
        {
          dom.RTCIceTransportStateChangedEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.RTCIceTransportState state
      {
        get
        {
          return this._state_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCPeerConnectionEventMap : IObject
    {
      private dom.MediaStreamEvent _addstream_BackingField;
      private dom.RTCPeerConnectionIceEvent _icecandidate_BackingField;
      private dom.Event _iceconnectionstatechange_BackingField;
      private dom.Event _icegatheringstatechange_BackingField;
      private dom.Event _negotiationneeded_BackingField;
      private dom.MediaStreamEvent _removestream_BackingField;
      private dom.Event _signalingstatechange_BackingField;

      public dom.MediaStreamEvent addstream
      {
        get
        {
          return this._addstream_BackingField;
        }
        set
        {
          this._addstream_BackingField = value;
        }
      }

      public dom.RTCPeerConnectionIceEvent icecandidate
      {
        get
        {
          return this._icecandidate_BackingField;
        }
        set
        {
          this._icecandidate_BackingField = value;
        }
      }

      public dom.Event iceconnectionstatechange
      {
        get
        {
          return this._iceconnectionstatechange_BackingField;
        }
        set
        {
          this._iceconnectionstatechange_BackingField = value;
        }
      }

      public dom.Event icegatheringstatechange
      {
        get
        {
          return this._icegatheringstatechange_BackingField;
        }
        set
        {
          this._icegatheringstatechange_BackingField = value;
        }
      }

      public dom.Event negotiationneeded
      {
        get
        {
          return this._negotiationneeded_BackingField;
        }
        set
        {
          this._negotiationneeded_BackingField = value;
        }
      }

      public dom.MediaStreamEvent removestream
      {
        get
        {
          return this._removestream_BackingField;
        }
        set
        {
          this._removestream_BackingField = value;
        }
      }

      public dom.Event signalingstatechange
      {
        get
        {
          return this._signalingstatechange_BackingField;
        }
        set
        {
          this._signalingstatechange_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"addstream\"")]
        public static readonly KeyOf<dom.RTCPeerConnectionEventMap> addstream;
        [Template("\"icecandidate\"")]
        public static readonly KeyOf<dom.RTCPeerConnectionEventMap> icecandidate;
        [Template("\"iceconnectionstatechange\"")]
        public static readonly KeyOf<dom.RTCPeerConnectionEventMap> iceconnectionstatechange;
        [Template("\"icegatheringstatechange\"")]
        public static readonly KeyOf<dom.RTCPeerConnectionEventMap> icegatheringstatechange;
        [Template("\"negotiationneeded\"")]
        public static readonly KeyOf<dom.RTCPeerConnectionEventMap> negotiationneeded;
        [Template("\"removestream\"")]
        public static readonly KeyOf<dom.RTCPeerConnectionEventMap> removestream;
        [Template("\"signalingstatechange\"")]
        public static readonly KeyOf<dom.RTCPeerConnectionEventMap> signalingstatechange;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCPeerConnection : dom.EventTarget
    {
      private static dom.RTCPeerConnection _prototype_BackingField;
      private readonly bool? _canTrickleIceCandidates_BackingField;
      private readonly dom.RTCIceConnectionState _iceConnectionState_BackingField;
      private readonly dom.RTCIceGatheringState _iceGatheringState_BackingField;
      private readonly dom.RTCSessionDescription _localDescription_BackingField;
      private dom.RTCPeerConnection.onaddstreamFn _onaddstream_BackingField;
      private dom.RTCPeerConnection.onicecandidateFn _onicecandidate_BackingField;
      private dom.RTCPeerConnection.oniceconnectionstatechangeFn _oniceconnectionstatechange_BackingField;
      private dom.RTCPeerConnection.oniceconnectionstatechangeFn _onicegatheringstatechange_BackingField;
      private dom.RTCPeerConnection.oniceconnectionstatechangeFn _onnegotiationneeded_BackingField;
      private dom.RTCPeerConnection.onaddstreamFn _onremovestream_BackingField;
      private dom.RTCPeerConnection.oniceconnectionstatechangeFn _onsignalingstatechange_BackingField;
      private readonly dom.RTCSessionDescription _remoteDescription_BackingField;
      private readonly dom.RTCSignalingState _signalingState_BackingField;

      public extern RTCPeerConnection(dom.RTCConfiguration configuration);

      public static dom.RTCPeerConnection prototype
      {
        get
        {
          return dom.RTCPeerConnection._prototype_BackingField;
        }
        set
        {
          dom.RTCPeerConnection._prototype_BackingField = value;
        }
      }

      public virtual bool? canTrickleIceCandidates
      {
        get
        {
          return this._canTrickleIceCandidates_BackingField;
        }
      }

      public virtual dom.RTCIceConnectionState iceConnectionState
      {
        get
        {
          return this._iceConnectionState_BackingField;
        }
      }

      public virtual dom.RTCIceGatheringState iceGatheringState
      {
        get
        {
          return this._iceGatheringState_BackingField;
        }
      }

      public virtual dom.RTCSessionDescription localDescription
      {
        get
        {
          return this._localDescription_BackingField;
        }
      }

      public virtual dom.RTCPeerConnection.onaddstreamFn onaddstream
      {
        get
        {
          return this._onaddstream_BackingField;
        }
        set
        {
          this._onaddstream_BackingField = value;
        }
      }

      public virtual dom.RTCPeerConnection.onicecandidateFn onicecandidate
      {
        get
        {
          return this._onicecandidate_BackingField;
        }
        set
        {
          this._onicecandidate_BackingField = value;
        }
      }

      public virtual dom.RTCPeerConnection.oniceconnectionstatechangeFn oniceconnectionstatechange
      {
        get
        {
          return this._oniceconnectionstatechange_BackingField;
        }
        set
        {
          this._oniceconnectionstatechange_BackingField = value;
        }
      }

      public virtual dom.RTCPeerConnection.oniceconnectionstatechangeFn onicegatheringstatechange
      {
        get
        {
          return this._onicegatheringstatechange_BackingField;
        }
        set
        {
          this._onicegatheringstatechange_BackingField = value;
        }
      }

      public virtual dom.RTCPeerConnection.oniceconnectionstatechangeFn onnegotiationneeded
      {
        get
        {
          return this._onnegotiationneeded_BackingField;
        }
        set
        {
          this._onnegotiationneeded_BackingField = value;
        }
      }

      public virtual dom.RTCPeerConnection.onaddstreamFn onremovestream
      {
        get
        {
          return this._onremovestream_BackingField;
        }
        set
        {
          this._onremovestream_BackingField = value;
        }
      }

      public virtual dom.RTCPeerConnection.oniceconnectionstatechangeFn onsignalingstatechange
      {
        get
        {
          return this._onsignalingstatechange_BackingField;
        }
        set
        {
          this._onsignalingstatechange_BackingField = value;
        }
      }

      public virtual dom.RTCSessionDescription remoteDescription
      {
        get
        {
          return this._remoteDescription_BackingField;
        }
      }

      public virtual dom.RTCSignalingState signalingState
      {
        get
        {
          return this._signalingState_BackingField;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> addIceCandidate(
        Union<dom.RTCIceCandidateInit, dom.RTCIceCandidate> candidate);

      public virtual extern es5.Promise<H5.Primitive.Void> addIceCandidate(
        dom.RTCIceCandidateInit candidate);

      public virtual extern es5.Promise<H5.Primitive.Void> addIceCandidate(
        dom.RTCIceCandidate candidate);

      public virtual extern void addStream(dom.MediaStream stream);

      public virtual extern void close();

      public virtual extern es5.Promise<dom.RTCSessionDescriptionInit> createAnswer();

      public virtual extern es5.Promise<dom.RTCSessionDescriptionInit> createAnswer(
        dom.RTCOfferOptions options);

      public virtual extern es5.Promise<dom.RTCSessionDescriptionInit> createOffer();

      public virtual extern es5.Promise<dom.RTCSessionDescriptionInit> createOffer(
        dom.RTCOfferOptions options);

      public virtual extern dom.RTCConfiguration getConfiguration();

      public virtual extern dom.MediaStream[] getLocalStreams();

      public virtual extern dom.MediaStream[] getRemoteStreams();

      public virtual extern es5.Promise<dom.RTCStatsReport> getStats(
        dom.MediaStreamTrack selector);

      public virtual extern es5.Promise<dom.RTCStatsReport> getStats(
        dom.MediaStreamTrack selector,
        dom.RTCStatsCallback successCallback);

      public virtual extern es5.Promise<dom.RTCStatsReport> getStats(
        dom.MediaStreamTrack selector,
        dom.RTCStatsCallback successCallback,
        dom.RTCPeerConnectionErrorCallback failureCallback);

      public virtual extern dom.MediaStream getStreamById(string streamId);

      public virtual extern void removeStream(dom.MediaStream stream);

      public virtual extern es5.Promise<H5.Primitive.Void> setLocalDescription(
        dom.RTCSessionDescriptionInit description);

      public virtual extern es5.Promise<H5.Primitive.Void> setRemoteDescription(
        dom.RTCSessionDescriptionInit description);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCPeerConnection.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCPeerConnection.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCPeerConnection.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCPeerConnection.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCPeerConnection.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCPeerConnection.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCPeerConnection.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCPeerConnection.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onaddstreamFn(dom.MediaStreamEvent ev);

      [Generated]
      public delegate void onicecandidateFn(dom.RTCPeerConnectionIceEvent ev);

      [Generated]
      public delegate void oniceconnectionstatechangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCPeerConnectionIceEvent : dom.Event
    {
      private static dom.RTCPeerConnectionIceEvent _prototype_BackingField;
      private readonly dom.RTCIceCandidate _candidate_BackingField;

      public extern RTCPeerConnectionIceEvent(
        string type,
        dom.RTCPeerConnectionIceEventInit eventInitDict);

      public static dom.RTCPeerConnectionIceEvent prototype
      {
        get
        {
          return dom.RTCPeerConnectionIceEvent._prototype_BackingField;
        }
        set
        {
          dom.RTCPeerConnectionIceEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.RTCIceCandidate candidate
      {
        get
        {
          return this._candidate_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpReceiverEventMap : IObject
    {
      private dom.Event _error_BackingField;
      private dom.Event _msdecodercapacitychange_BackingField;
      private dom.Event _msdsh_BackingField;

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.Event msdecodercapacitychange
      {
        get
        {
          return this._msdecodercapacitychange_BackingField;
        }
        set
        {
          this._msdecodercapacitychange_BackingField = value;
        }
      }

      public dom.Event msdsh
      {
        get
        {
          return this._msdsh_BackingField;
        }
        set
        {
          this._msdsh_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"error\"")]
        public static readonly KeyOf<dom.RTCRtpReceiverEventMap> error;
        [Template("\"msdecodercapacitychange\"")]
        public static readonly KeyOf<dom.RTCRtpReceiverEventMap> msdecodercapacitychange;
        [Template("\"msdsh\"")]
        public static readonly KeyOf<dom.RTCRtpReceiverEventMap> msdsh;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCRtpReceiver : dom.RTCStatsProvider
    {
      private static dom.RTCRtpReceiver _prototype_BackingField;
      private dom.RTCRtpReceiver.onerrorFn _onerror_BackingField;
      private dom.RTCRtpReceiver.onerrorFn _onmsdecodercapacitychange_BackingField;
      private dom.RTCRtpReceiver.onerrorFn _onmsdsh_BackingField;
      private readonly dom.RTCDtlsTransport _rtcpTransport_BackingField;
      private readonly dom.MediaStreamTrack _track_BackingField;
      private readonly Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> _transport_BackingField;

      public extern RTCRtpReceiver(
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
        string kind);

      public extern RTCRtpReceiver(dom.RTCDtlsTransport transport, string kind);

      public extern RTCRtpReceiver(dom.RTCSrtpSdesTransport transport, string kind);

      public extern RTCRtpReceiver(
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
        string kind,
        dom.RTCDtlsTransport rtcpTransport);

      public extern RTCRtpReceiver(
        dom.RTCDtlsTransport transport,
        string kind,
        dom.RTCDtlsTransport rtcpTransport);

      public extern RTCRtpReceiver(
        dom.RTCSrtpSdesTransport transport,
        string kind,
        dom.RTCDtlsTransport rtcpTransport);

      public static dom.RTCRtpReceiver prototype
      {
        get
        {
          return dom.RTCRtpReceiver._prototype_BackingField;
        }
        set
        {
          dom.RTCRtpReceiver._prototype_BackingField = value;
        }
      }

      public static extern dom.RTCRtpCapabilities getCapabilities();

      public static extern dom.RTCRtpCapabilities getCapabilities(string kind);

      public virtual dom.RTCRtpReceiver.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.RTCRtpReceiver.onerrorFn onmsdecodercapacitychange
      {
        get
        {
          return this._onmsdecodercapacitychange_BackingField;
        }
        set
        {
          this._onmsdecodercapacitychange_BackingField = value;
        }
      }

      public virtual dom.RTCRtpReceiver.onerrorFn onmsdsh
      {
        get
        {
          return this._onmsdsh_BackingField;
        }
        set
        {
          this._onmsdsh_BackingField = value;
        }
      }

      public virtual dom.RTCDtlsTransport rtcpTransport
      {
        get
        {
          return this._rtcpTransport_BackingField;
        }
      }

      public virtual dom.MediaStreamTrack track
      {
        get
        {
          return this._track_BackingField;
        }
      }

      public virtual Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport
      {
        get
        {
          return this._transport_BackingField;
        }
      }

      public virtual extern dom.RTCRtpContributingSource[] getContributingSources();

      public virtual extern void receive(dom.RTCRtpParameters parameters);

      public virtual extern void requestSendCSRC(double csrc);

      public virtual extern void setTransport(
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport);

      public virtual extern void setTransport(dom.RTCDtlsTransport transport);

      public virtual extern void setTransport(dom.RTCSrtpSdesTransport transport);

      public virtual extern void setTransport(
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
        dom.RTCDtlsTransport rtcpTransport);

      public virtual extern void setTransport(
        dom.RTCDtlsTransport transport,
        dom.RTCDtlsTransport rtcpTransport);

      public virtual extern void setTransport(
        dom.RTCSrtpSdesTransport transport,
        dom.RTCDtlsTransport rtcpTransport);

      public virtual extern void stop();

      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCRtpReceiver.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCRtpReceiver.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCRtpReceiver.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCRtpReceiver.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCRtpReceiver.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCRtpReceiver.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCRtpReceiver.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCRtpReceiver.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onerrorFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCRtpSenderEventMap : IObject
    {
      private dom.Event _error_BackingField;
      private dom.RTCSsrcConflictEvent _ssrcconflict_BackingField;

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.RTCSsrcConflictEvent ssrcconflict
      {
        get
        {
          return this._ssrcconflict_BackingField;
        }
        set
        {
          this._ssrcconflict_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"error\"")]
        public static readonly KeyOf<dom.RTCRtpSenderEventMap> error;
        [Template("\"ssrcconflict\"")]
        public static readonly KeyOf<dom.RTCRtpSenderEventMap> ssrcconflict;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCRtpSender : dom.RTCStatsProvider
    {
      private static dom.RTCRtpSender _prototype_BackingField;
      private dom.RTCRtpSender.onerrorFn _onerror_BackingField;
      private dom.RTCRtpSender.onssrcconflictFn _onssrcconflict_BackingField;
      private readonly dom.RTCDtlsTransport _rtcpTransport_BackingField;
      private readonly dom.MediaStreamTrack _track_BackingField;
      private readonly Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> _transport_BackingField;

      public extern RTCRtpSender(
        dom.MediaStreamTrack track,
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport);

      public extern RTCRtpSender(dom.MediaStreamTrack track, dom.RTCDtlsTransport transport);

      public extern RTCRtpSender(dom.MediaStreamTrack track, dom.RTCSrtpSdesTransport transport);

      public extern RTCRtpSender(
        dom.MediaStreamTrack track,
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
        dom.RTCDtlsTransport rtcpTransport);

      public extern RTCRtpSender(
        dom.MediaStreamTrack track,
        dom.RTCDtlsTransport transport,
        dom.RTCDtlsTransport rtcpTransport);

      public extern RTCRtpSender(
        dom.MediaStreamTrack track,
        dom.RTCSrtpSdesTransport transport,
        dom.RTCDtlsTransport rtcpTransport);

      public static dom.RTCRtpSender prototype
      {
        get
        {
          return dom.RTCRtpSender._prototype_BackingField;
        }
        set
        {
          dom.RTCRtpSender._prototype_BackingField = value;
        }
      }

      public static extern dom.RTCRtpCapabilities getCapabilities();

      public static extern dom.RTCRtpCapabilities getCapabilities(string kind);

      public virtual dom.RTCRtpSender.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.RTCRtpSender.onssrcconflictFn onssrcconflict
      {
        get
        {
          return this._onssrcconflict_BackingField;
        }
        set
        {
          this._onssrcconflict_BackingField = value;
        }
      }

      public virtual dom.RTCDtlsTransport rtcpTransport
      {
        get
        {
          return this._rtcpTransport_BackingField;
        }
      }

      public virtual dom.MediaStreamTrack track
      {
        get
        {
          return this._track_BackingField;
        }
      }

      public virtual Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport
      {
        get
        {
          return this._transport_BackingField;
        }
      }

      public virtual extern void send(dom.RTCRtpParameters parameters);

      public virtual extern void setTrack(dom.MediaStreamTrack track);

      public virtual extern void setTransport(
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport);

      public virtual extern void setTransport(dom.RTCDtlsTransport transport);

      public virtual extern void setTransport(dom.RTCSrtpSdesTransport transport);

      public virtual extern void setTransport(
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
        dom.RTCDtlsTransport rtcpTransport);

      public virtual extern void setTransport(
        dom.RTCDtlsTransport transport,
        dom.RTCDtlsTransport rtcpTransport);

      public virtual extern void setTransport(
        dom.RTCSrtpSdesTransport transport,
        dom.RTCDtlsTransport rtcpTransport);

      public virtual extern void stop();

      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCRtpSender.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCRtpSender.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCRtpSender.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCRtpSender.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCRtpSender.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCRtpSender.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCRtpSender.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCRtpSender.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onerrorFn(dom.Event ev);

      [Generated]
      public delegate void onssrcconflictFn(dom.RTCSsrcConflictEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCSessionDescription : IObject
    {
      private static dom.RTCSessionDescription _prototype_BackingField;
      private string _sdp_BackingField;
      private dom.RTCSdpType _type_BackingField;

      public extern RTCSessionDescription();

      public extern RTCSessionDescription(dom.RTCSessionDescriptionInit descriptionInitDict);

      public static dom.RTCSessionDescription prototype
      {
        get
        {
          return dom.RTCSessionDescription._prototype_BackingField;
        }
        set
        {
          dom.RTCSessionDescription._prototype_BackingField = value;
        }
      }

      public virtual string sdp
      {
        get
        {
          return this._sdp_BackingField;
        }
        set
        {
          this._sdp_BackingField = value;
        }
      }

      public virtual dom.RTCSdpType type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      public virtual extern object toJSON();
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class RTCSrtpSdesTransportEventMap : IObject
    {
      private dom.Event _error_BackingField;

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"error\"")]
        public static readonly KeyOf<dom.RTCSrtpSdesTransportEventMap> error;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCSrtpSdesTransport : dom.EventTarget
    {
      private static dom.RTCSrtpSdesTransport _prototype_BackingField;
      private dom.RTCSrtpSdesTransport.onerrorFn _onerror_BackingField;
      private readonly dom.RTCIceTransport _transport_BackingField;

      public extern RTCSrtpSdesTransport(
        dom.RTCIceTransport transport,
        dom.RTCSrtpSdesParameters encryptParameters,
        dom.RTCSrtpSdesParameters decryptParameters);

      public static dom.RTCSrtpSdesTransport prototype
      {
        get
        {
          return dom.RTCSrtpSdesTransport._prototype_BackingField;
        }
        set
        {
          dom.RTCSrtpSdesTransport._prototype_BackingField = value;
        }
      }

      public static extern dom.RTCSrtpSdesParameters[] getLocalParameters();

      public virtual dom.RTCSrtpSdesTransport.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.RTCIceTransport transport
      {
        get
        {
          return this._transport_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCSrtpSdesTransport.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCSrtpSdesTransport.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCSrtpSdesTransport.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.RTCSrtpSdesTransport.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCSrtpSdesTransport.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCSrtpSdesTransport.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCSrtpSdesTransport.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.RTCSrtpSdesTransport.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onerrorFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCSsrcConflictEvent : dom.Event
    {
      private static dom.RTCSsrcConflictEvent _prototype_BackingField;
      private readonly double _ssrc_BackingField;

      public static dom.RTCSsrcConflictEvent prototype
      {
        get
        {
          return dom.RTCSsrcConflictEvent._prototype_BackingField;
        }
        set
        {
          dom.RTCSsrcConflictEvent._prototype_BackingField = value;
        }
      }

      public virtual double ssrc
      {
        get
        {
          return this._ssrc_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class RTCStatsProvider : dom.EventTarget
    {
      private static dom.RTCStatsProvider _prototype_BackingField;

      public static dom.RTCStatsProvider prototype
      {
        get
        {
          return dom.RTCStatsProvider._prototype_BackingField;
        }
        set
        {
          dom.RTCStatsProvider._prototype_BackingField = value;
        }
      }

      public virtual extern es5.Promise<dom.RTCStatsReport> getStats();

      public virtual extern es5.Promise<dom.RTCStatsReport> msGetStats();
    }

    [CombinedClass]
    [FormerInterface]
    public class RandomSource : IObject
    {
      private static dom.RandomSource _prototype_BackingField;

      public static dom.RandomSource prototype
      {
        get
        {
          return dom.RandomSource._prototype_BackingField;
        }
        set
        {
          dom.RandomSource._prototype_BackingField = value;
        }
      }

      [Where("T", typeof (es5.Int8Array), EnableImplicitConversion = true)]
      [Where("T", typeof (es5.Uint8ClampedArray), EnableImplicitConversion = true)]
      [Where("T", typeof (es5.Uint8Array), EnableImplicitConversion = true)]
      [Where("T", typeof (es5.Int16Array), EnableImplicitConversion = true)]
      [Where("T", typeof (es5.Uint16Array), EnableImplicitConversion = true)]
      [Where("T", typeof (es5.Int32Array), EnableImplicitConversion = true)]
      [Where("T", typeof (es5.Uint32Array), EnableImplicitConversion = true)]
      public virtual extern T getRandomValues<T>(T array);
    }

    [CombinedClass]
    [FormerInterface]
    public class Range : IObject
    {
      private static dom.Range _prototype_BackingField;
      private static readonly ushort _END_TO_END_Static_BackingField;
      private static readonly ushort _END_TO_START_Static_BackingField;
      private static readonly ushort _START_TO_END_Static_BackingField;
      private static readonly ushort _START_TO_START_Static_BackingField;
      private readonly bool _collapsed_BackingField;
      private readonly dom.Node _commonAncestorContainer_BackingField;
      private readonly dom.Node _endContainer_BackingField;
      private readonly uint _endOffset_BackingField;
      private readonly dom.Node _startContainer_BackingField;
      private readonly uint _startOffset_BackingField;
      private readonly ushort _END_TO_END_BackingField;
      private readonly ushort _END_TO_START_BackingField;
      private readonly ushort _START_TO_END_BackingField;
      private readonly ushort _START_TO_START_BackingField;

      public static dom.Range prototype
      {
        get
        {
          return dom.Range._prototype_BackingField;
        }
        set
        {
          dom.Range._prototype_BackingField = value;
        }
      }

      [Name("END_TO_END")]
      public static ushort END_TO_END_Static
      {
        get
        {
          return dom.Range._END_TO_END_Static_BackingField;
        }
      }

      [Name("END_TO_START")]
      public static ushort END_TO_START_Static
      {
        get
        {
          return dom.Range._END_TO_START_Static_BackingField;
        }
      }

      [Name("START_TO_END")]
      public static ushort START_TO_END_Static
      {
        get
        {
          return dom.Range._START_TO_END_Static_BackingField;
        }
      }

      [Name("START_TO_START")]
      public static ushort START_TO_START_Static
      {
        get
        {
          return dom.Range._START_TO_START_Static_BackingField;
        }
      }

      public virtual bool collapsed
      {
        get
        {
          return this._collapsed_BackingField;
        }
      }

      public virtual dom.Node commonAncestorContainer
      {
        get
        {
          return this._commonAncestorContainer_BackingField;
        }
      }

      public virtual dom.Node endContainer
      {
        get
        {
          return this._endContainer_BackingField;
        }
      }

      public virtual uint endOffset
      {
        get
        {
          return this._endOffset_BackingField;
        }
      }

      public virtual dom.Node startContainer
      {
        get
        {
          return this._startContainer_BackingField;
        }
      }

      public virtual uint startOffset
      {
        get
        {
          return this._startOffset_BackingField;
        }
      }

      public virtual extern dom.DocumentFragment cloneContents();

      public virtual extern dom.Range cloneRange();

      public virtual extern void collapse();

      public virtual extern void collapse(bool toStart);

      public virtual extern short compareBoundaryPoints(ushort how, dom.Range sourceRange);

      public virtual extern dom.DocumentFragment createContextualFragment(string fragment);

      public virtual extern void deleteContents();

      public virtual extern void detach();

      public virtual extern bool expand(dom.ExpandGranularity Unit);

      public virtual extern dom.DocumentFragment extractContents();

      public virtual extern Union<dom.ClientRect, dom.DOMRect> getBoundingClientRect();

      public virtual extern Union<dom.ClientRectList, dom.DOMRectList> getClientRects();

      public virtual extern void insertNode(dom.Node node);

      public virtual extern bool isPointInRange(dom.Node node, uint offset);

      public virtual extern void selectNode(dom.Node node);

      public virtual extern void selectNodeContents(dom.Node node);

      public virtual extern void setEnd(dom.Node node, uint offset);

      public virtual extern void setEndAfter(dom.Node node);

      public virtual extern void setEndBefore(dom.Node node);

      public virtual extern void setStart(dom.Node node, uint offset);

      public virtual extern void setStartAfter(dom.Node node);

      public virtual extern void setStartBefore(dom.Node node);

      public virtual extern void surroundContents(dom.Node newParent);

      public virtual extern string toString();

      public virtual ushort END_TO_END
      {
        get
        {
          return this._END_TO_END_BackingField;
        }
      }

      public virtual ushort END_TO_START
      {
        get
        {
          return this._END_TO_START_BackingField;
        }
      }

      public virtual ushort START_TO_END
      {
        get
        {
          return this._START_TO_END_BackingField;
        }
      }

      public virtual ushort START_TO_START
      {
        get
        {
          return this._START_TO_START_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ReadableStream : IObject
    {
      private static dom.ReadableStream _prototype_BackingField;
      private readonly bool _locked_BackingField;

      public static dom.ReadableStream prototype
      {
        get
        {
          return dom.ReadableStream._prototype_BackingField;
        }
        set
        {
          dom.ReadableStream._prototype_BackingField = value;
        }
      }

      public virtual bool locked
      {
        get
        {
          return this._locked_BackingField;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> cancel();

      public virtual extern dom.ReadableStreamReader getReader();
    }

    [CombinedClass]
    [FormerInterface]
    public class ReadableStreamReader : IObject
    {
      private static dom.ReadableStreamReader _prototype_BackingField;

      public static dom.ReadableStreamReader prototype
      {
        get
        {
          return dom.ReadableStreamReader._prototype_BackingField;
        }
        set
        {
          dom.ReadableStreamReader._prototype_BackingField = value;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> cancel();

      public virtual extern es5.Promise<object> read();

      public virtual extern void releaseLock();
    }

    [CombinedClass]
    [FormerInterface]
    public class Request : dom.Body
    {
      private static dom.Request _prototype_BackingField;
      private readonly dom.RequestCache _cache_BackingField;
      private readonly dom.RequestCredentials _credentials_BackingField;
      private readonly dom.RequestDestination _destination_BackingField;
      private readonly dom.Headers _headers_BackingField;
      private readonly string _integrity_BackingField;
      private readonly bool _keepalive_BackingField;
      private readonly string _method_BackingField;
      private readonly dom.RequestMode _mode_BackingField;
      private readonly dom.RequestRedirect _redirect_BackingField;
      private readonly string _referrer_BackingField;
      private readonly dom.ReferrerPolicy _referrerPolicy_BackingField;
      private readonly dom.AbortSignal _signal_BackingField;
      private readonly dom.RequestType _type_BackingField;
      private readonly string _url_BackingField;

      public extern Request(Union<dom.Request, string> input);

      public extern Request(dom.Request input);

      public extern Request(string input);

      public extern Request(Union<dom.Request, string> input, dom.RequestInit init);

      public extern Request(dom.Request input, dom.RequestInit init);

      public extern Request(string input, dom.RequestInit init);

      public static dom.Request prototype
      {
        get
        {
          return dom.Request._prototype_BackingField;
        }
        set
        {
          dom.Request._prototype_BackingField = value;
        }
      }

      public virtual dom.RequestCache cache
      {
        get
        {
          return this._cache_BackingField;
        }
      }

      public virtual dom.RequestCredentials credentials
      {
        get
        {
          return this._credentials_BackingField;
        }
      }

      public virtual dom.RequestDestination destination
      {
        get
        {
          return this._destination_BackingField;
        }
      }

      public virtual dom.Headers headers
      {
        get
        {
          return this._headers_BackingField;
        }
      }

      public virtual string integrity
      {
        get
        {
          return this._integrity_BackingField;
        }
      }

      public virtual bool keepalive
      {
        get
        {
          return this._keepalive_BackingField;
        }
      }

      public virtual string method
      {
        get
        {
          return this._method_BackingField;
        }
      }

      public virtual dom.RequestMode mode
      {
        get
        {
          return this._mode_BackingField;
        }
      }

      public virtual dom.RequestRedirect redirect
      {
        get
        {
          return this._redirect_BackingField;
        }
      }

      public virtual string referrer
      {
        get
        {
          return this._referrer_BackingField;
        }
      }

      public virtual dom.ReferrerPolicy referrerPolicy
      {
        get
        {
          return this._referrerPolicy_BackingField;
        }
      }

      public virtual dom.AbortSignal signal
      {
        get
        {
          return this._signal_BackingField;
        }
      }

      public virtual dom.RequestType type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual string url
      {
        get
        {
          return this._url_BackingField;
        }
      }

      public virtual extern dom.Request clone();

      public override extern bool bodyUsed { get; }

      public override extern es5.Promise<es5.ArrayBuffer> arrayBuffer();

      public override extern es5.Promise<dom.Blob> blob();

      public override extern es5.Promise<dom.FormData> formData();

      public override extern es5.Promise<object> json();

      public override extern es5.Promise<string> text();
    }

    [CombinedClass]
    [FormerInterface]
    public class Response : dom.Body
    {
      private static dom.Response _prototype_BackingField;
      private readonly dom.ReadableStream _body_BackingField;
      private readonly dom.Headers _headers_BackingField;
      private readonly bool _ok_BackingField;
      private readonly bool _redirected_BackingField;
      private readonly ushort _status_BackingField;
      private readonly string _statusText_BackingField;
      private readonly dom.ResponseType _type_BackingField;
      private readonly string _url_BackingField;

      public extern Response();

      public extern Response(
        Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body);

      public extern Response(dom.Blob body);

      public extern Response(es5.Int8Array body);

      public extern Response(es5.Int16Array body);

      public extern Response(es5.Int32Array body);

      public extern Response(es5.Uint8Array body);

      public extern Response(es5.Uint16Array body);

      public extern Response(es5.Uint32Array body);

      public extern Response(es5.Uint8ClampedArray body);

      public extern Response(es5.Float32Array body);

      public extern Response(es5.Float64Array body);

      public extern Response(es5.DataView body);

      public extern Response(es5.ArrayBuffer body);

      public extern Response(dom.FormData body);

      public extern Response(string body);

      public extern Response(Null body);

      public extern Response(
        Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body,
        dom.ResponseInit init);

      public extern Response(dom.Blob body, dom.ResponseInit init);

      public extern Response(es5.Int8Array body, dom.ResponseInit init);

      public extern Response(es5.Int16Array body, dom.ResponseInit init);

      public extern Response(es5.Int32Array body, dom.ResponseInit init);

      public extern Response(es5.Uint8Array body, dom.ResponseInit init);

      public extern Response(es5.Uint16Array body, dom.ResponseInit init);

      public extern Response(es5.Uint32Array body, dom.ResponseInit init);

      public extern Response(es5.Uint8ClampedArray body, dom.ResponseInit init);

      public extern Response(es5.Float32Array body, dom.ResponseInit init);

      public extern Response(es5.Float64Array body, dom.ResponseInit init);

      public extern Response(es5.DataView body, dom.ResponseInit init);

      public extern Response(es5.ArrayBuffer body, dom.ResponseInit init);

      public extern Response(dom.FormData body, dom.ResponseInit init);

      public extern Response(string body, dom.ResponseInit init);

      public extern Response(Null body, dom.ResponseInit init);

      public static dom.Response prototype
      {
        get
        {
          return dom.Response._prototype_BackingField;
        }
        set
        {
          dom.Response._prototype_BackingField = value;
        }
      }

      public static extern dom.Response error();

      public static extern dom.Response redirect(string url);

      public static extern dom.Response redirect(string url, ushort status);

      public virtual dom.ReadableStream body
      {
        get
        {
          return this._body_BackingField;
        }
      }

      public virtual dom.Headers headers
      {
        get
        {
          return this._headers_BackingField;
        }
      }

      public virtual bool ok
      {
        get
        {
          return this._ok_BackingField;
        }
      }

      public virtual bool redirected
      {
        get
        {
          return this._redirected_BackingField;
        }
      }

      public virtual ushort status
      {
        get
        {
          return this._status_BackingField;
        }
      }

      public virtual string statusText
      {
        get
        {
          return this._statusText_BackingField;
        }
      }

      public virtual dom.ResponseType type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual string url
      {
        get
        {
          return this._url_BackingField;
        }
      }

      public virtual extern dom.Response clone();

      public override extern bool bodyUsed { get; }

      public override extern es5.Promise<es5.ArrayBuffer> arrayBuffer();

      public override extern es5.Promise<dom.Blob> blob();

      public override extern es5.Promise<dom.FormData> formData();

      public override extern es5.Promise<object> json();

      public override extern es5.Promise<string> text();
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAElement : dom.SVGGraphicsElement, dom.SVGURIReference.Interface, IObject
    {
      private static dom.SVGAElement _prototype_BackingField;
      private readonly dom.SVGAnimatedString _target_BackingField;
      private readonly dom.SVGAnimatedString _href_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"a\")")]
      public extern SVGAElement();

      public static dom.SVGAElement prototype
      {
        get
        {
          return dom.SVGAElement._prototype_BackingField;
        }
        set
        {
          dom.SVGAElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedString target
      {
        get
        {
          return this._target_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGAElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGAElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGAElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGAElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGAElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGAElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGAElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGAElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAngle : IObject
    {
      private static dom.SVGAngle _prototype_BackingField;
      private static readonly ushort _SVG_ANGLETYPE_DEG_Static_BackingField;
      private static readonly ushort _SVG_ANGLETYPE_GRAD_Static_BackingField;
      private static readonly ushort _SVG_ANGLETYPE_RAD_Static_BackingField;
      private static readonly ushort _SVG_ANGLETYPE_UNKNOWN_Static_BackingField;
      private static readonly ushort _SVG_ANGLETYPE_UNSPECIFIED_Static_BackingField;
      private readonly ushort _unitType_BackingField;
      private float _value_BackingField;
      private string _valueAsString_BackingField;
      private float _valueInSpecifiedUnits_BackingField;
      private readonly ushort _SVG_ANGLETYPE_DEG_BackingField;
      private readonly ushort _SVG_ANGLETYPE_GRAD_BackingField;
      private readonly ushort _SVG_ANGLETYPE_RAD_BackingField;
      private readonly ushort _SVG_ANGLETYPE_UNKNOWN_BackingField;
      private readonly ushort _SVG_ANGLETYPE_UNSPECIFIED_BackingField;

      public static dom.SVGAngle prototype
      {
        get
        {
          return dom.SVGAngle._prototype_BackingField;
        }
        set
        {
          dom.SVGAngle._prototype_BackingField = value;
        }
      }

      [Name("SVG_ANGLETYPE_DEG")]
      public static ushort SVG_ANGLETYPE_DEG_Static
      {
        get
        {
          return dom.SVGAngle._SVG_ANGLETYPE_DEG_Static_BackingField;
        }
      }

      [Name("SVG_ANGLETYPE_GRAD")]
      public static ushort SVG_ANGLETYPE_GRAD_Static
      {
        get
        {
          return dom.SVGAngle._SVG_ANGLETYPE_GRAD_Static_BackingField;
        }
      }

      [Name("SVG_ANGLETYPE_RAD")]
      public static ushort SVG_ANGLETYPE_RAD_Static
      {
        get
        {
          return dom.SVGAngle._SVG_ANGLETYPE_RAD_Static_BackingField;
        }
      }

      [Name("SVG_ANGLETYPE_UNKNOWN")]
      public static ushort SVG_ANGLETYPE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGAngle._SVG_ANGLETYPE_UNKNOWN_Static_BackingField;
        }
      }

      [Name("SVG_ANGLETYPE_UNSPECIFIED")]
      public static ushort SVG_ANGLETYPE_UNSPECIFIED_Static
      {
        get
        {
          return dom.SVGAngle._SVG_ANGLETYPE_UNSPECIFIED_Static_BackingField;
        }
      }

      public virtual ushort unitType
      {
        get
        {
          return this._unitType_BackingField;
        }
      }

      public virtual float value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      public virtual string valueAsString
      {
        get
        {
          return this._valueAsString_BackingField;
        }
        set
        {
          this._valueAsString_BackingField = value;
        }
      }

      public virtual float valueInSpecifiedUnits
      {
        get
        {
          return this._valueInSpecifiedUnits_BackingField;
        }
        set
        {
          this._valueInSpecifiedUnits_BackingField = value;
        }
      }

      public virtual extern void convertToSpecifiedUnits(ushort unitType);

      public virtual extern void newValueSpecifiedUnits(
        ushort unitType,
        float valueInSpecifiedUnits);

      public virtual ushort SVG_ANGLETYPE_DEG
      {
        get
        {
          return this._SVG_ANGLETYPE_DEG_BackingField;
        }
      }

      public virtual ushort SVG_ANGLETYPE_GRAD
      {
        get
        {
          return this._SVG_ANGLETYPE_GRAD_BackingField;
        }
      }

      public virtual ushort SVG_ANGLETYPE_RAD
      {
        get
        {
          return this._SVG_ANGLETYPE_RAD_BackingField;
        }
      }

      public virtual ushort SVG_ANGLETYPE_UNKNOWN
      {
        get
        {
          return this._SVG_ANGLETYPE_UNKNOWN_BackingField;
        }
      }

      public virtual ushort SVG_ANGLETYPE_UNSPECIFIED
      {
        get
        {
          return this._SVG_ANGLETYPE_UNSPECIFIED_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedAngle : IObject
    {
      private static dom.SVGAnimatedAngle _prototype_BackingField;
      private readonly dom.SVGAngle _animVal_BackingField;
      private readonly dom.SVGAngle _baseVal_BackingField;

      public static dom.SVGAnimatedAngle prototype
      {
        get
        {
          return dom.SVGAnimatedAngle._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedAngle._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAngle animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual dom.SVGAngle baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedBoolean : IObject
    {
      private static dom.SVGAnimatedBoolean _prototype_BackingField;
      private readonly bool _animVal_BackingField;
      private bool _baseVal_BackingField;

      public static dom.SVGAnimatedBoolean prototype
      {
        get
        {
          return dom.SVGAnimatedBoolean._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedBoolean._prototype_BackingField = value;
        }
      }

      public virtual bool animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual bool baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
        set
        {
          this._baseVal_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedEnumeration : IObject
    {
      private static dom.SVGAnimatedEnumeration _prototype_BackingField;
      private readonly ushort _animVal_BackingField;
      private ushort _baseVal_BackingField;

      public static dom.SVGAnimatedEnumeration prototype
      {
        get
        {
          return dom.SVGAnimatedEnumeration._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedEnumeration._prototype_BackingField = value;
        }
      }

      public virtual ushort animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual ushort baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
        set
        {
          this._baseVal_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedInteger : IObject
    {
      private static dom.SVGAnimatedInteger _prototype_BackingField;
      private readonly int _animVal_BackingField;
      private int _baseVal_BackingField;

      public static dom.SVGAnimatedInteger prototype
      {
        get
        {
          return dom.SVGAnimatedInteger._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedInteger._prototype_BackingField = value;
        }
      }

      public virtual int animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual int baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
        set
        {
          this._baseVal_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedLength : IObject
    {
      private static dom.SVGAnimatedLength _prototype_BackingField;
      private readonly dom.SVGLength _animVal_BackingField;
      private readonly dom.SVGLength _baseVal_BackingField;

      public static dom.SVGAnimatedLength prototype
      {
        get
        {
          return dom.SVGAnimatedLength._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedLength._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGLength animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual dom.SVGLength baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedLengthList : IObject
    {
      private static dom.SVGAnimatedLengthList _prototype_BackingField;
      private readonly dom.SVGLengthList _animVal_BackingField;
      private readonly dom.SVGLengthList _baseVal_BackingField;

      public static dom.SVGAnimatedLengthList prototype
      {
        get
        {
          return dom.SVGAnimatedLengthList._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedLengthList._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGLengthList animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual dom.SVGLengthList baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedNumber : IObject
    {
      private static dom.SVGAnimatedNumber _prototype_BackingField;
      private readonly float _animVal_BackingField;
      private float _baseVal_BackingField;

      public static dom.SVGAnimatedNumber prototype
      {
        get
        {
          return dom.SVGAnimatedNumber._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedNumber._prototype_BackingField = value;
        }
      }

      public virtual float animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual float baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
        set
        {
          this._baseVal_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedNumberList : IObject
    {
      private static dom.SVGAnimatedNumberList _prototype_BackingField;
      private readonly dom.SVGNumberList _animVal_BackingField;
      private readonly dom.SVGNumberList _baseVal_BackingField;

      public static dom.SVGAnimatedNumberList prototype
      {
        get
        {
          return dom.SVGAnimatedNumberList._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedNumberList._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGNumberList animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual dom.SVGNumberList baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class SVGAnimatedPoints : dom.SVGAnimatedPoints.Interface, IObject
    {
      private readonly dom.SVGPointList _animatedPoints_BackingField;
      private readonly dom.SVGPointList _points_BackingField;

      public dom.SVGPointList animatedPoints
      {
        get
        {
          return this._animatedPoints_BackingField;
        }
      }

      public dom.SVGPointList points
      {
        get
        {
          return this._points_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.SVGPointList animatedPoints { get; }

        dom.SVGPointList points { get; }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedPreserveAspectRatio : IObject
    {
      private static dom.SVGAnimatedPreserveAspectRatio _prototype_BackingField;
      private readonly dom.SVGPreserveAspectRatio _animVal_BackingField;
      private readonly dom.SVGPreserveAspectRatio _baseVal_BackingField;

      public static dom.SVGAnimatedPreserveAspectRatio prototype
      {
        get
        {
          return dom.SVGAnimatedPreserveAspectRatio._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedPreserveAspectRatio._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGPreserveAspectRatio animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual dom.SVGPreserveAspectRatio baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedRect : IObject
    {
      private static dom.SVGAnimatedRect _prototype_BackingField;
      private readonly dom.SVGRect _animVal_BackingField;
      private readonly dom.SVGRect _baseVal_BackingField;

      public static dom.SVGAnimatedRect prototype
      {
        get
        {
          return dom.SVGAnimatedRect._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedRect._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGRect animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual dom.SVGRect baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedString : IObject
    {
      private static dom.SVGAnimatedString _prototype_BackingField;
      private readonly string _animVal_BackingField;
      private string _baseVal_BackingField;

      public static dom.SVGAnimatedString prototype
      {
        get
        {
          return dom.SVGAnimatedString._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedString._prototype_BackingField = value;
        }
      }

      public virtual string animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual string baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
        set
        {
          this._baseVal_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGAnimatedTransformList : IObject
    {
      private static dom.SVGAnimatedTransformList _prototype_BackingField;
      private readonly dom.SVGTransformList _animVal_BackingField;
      private readonly dom.SVGTransformList _baseVal_BackingField;

      public static dom.SVGAnimatedTransformList prototype
      {
        get
        {
          return dom.SVGAnimatedTransformList._prototype_BackingField;
        }
        set
        {
          dom.SVGAnimatedTransformList._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGTransformList animVal
      {
        get
        {
          return this._animVal_BackingField;
        }
      }

      public virtual dom.SVGTransformList baseVal
      {
        get
        {
          return this._baseVal_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGCircleElement : dom.SVGGraphicsElement
    {
      private static dom.SVGCircleElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _cx_BackingField;
      private readonly dom.SVGAnimatedLength _cy_BackingField;
      private readonly dom.SVGAnimatedLength _r_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\")")]
      public extern SVGCircleElement();

      public static dom.SVGCircleElement prototype
      {
        get
        {
          return dom.SVGCircleElement._prototype_BackingField;
        }
        set
        {
          dom.SVGCircleElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength cx
      {
        get
        {
          return this._cx_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength cy
      {
        get
        {
          return this._cy_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength r
      {
        get
        {
          return this._r_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGCircleElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGCircleElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGCircleElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGCircleElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGCircleElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGCircleElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGCircleElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGCircleElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGClipPathElement : dom.SVGGraphicsElement, dom.SVGUnitTypes.Interface, IObject
    {
      private static dom.SVGClipPathElement _prototype_BackingField;
      private readonly dom.SVGAnimatedEnumeration _clipPathUnits_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_UNKNOWN_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"clipPath\")")]
      public extern SVGClipPathElement();

      public static dom.SVGClipPathElement prototype
      {
        get
        {
          return dom.SVGClipPathElement._prototype_BackingField;
        }
        set
        {
          dom.SVGClipPathElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedEnumeration clipPathUnits
      {
        get
        {
          return this._clipPathUnits_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGClipPathElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGClipPathElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGClipPathElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGClipPathElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGClipPathElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGClipPathElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGClipPathElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGClipPathElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual ushort SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
      {
        get
        {
          return this._SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_UNKNOWN
      {
        get
        {
          return this._SVG_UNIT_TYPE_UNKNOWN_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_USERSPACEONUSE
      {
        get
        {
          return this._SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGComponentTransferFunctionElement : dom.SVGElement
    {
      private static dom.SVGComponentTransferFunctionElement _prototype_BackingField;
      private static readonly double _SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE_Static_BackingField;
      private static readonly double _SVG_FECOMPONENTTRANSFER_TYPE_GAMMA_Static_BackingField;
      private static readonly double _SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY_Static_BackingField;
      private static readonly double _SVG_FECOMPONENTTRANSFER_TYPE_LINEAR_Static_BackingField;
      private static readonly double _SVG_FECOMPONENTTRANSFER_TYPE_TABLE_Static_BackingField;
      private static readonly double _SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedNumber _amplitude_BackingField;
      private readonly dom.SVGAnimatedNumber _exponent_BackingField;
      private readonly dom.SVGAnimatedNumber _intercept_BackingField;
      private readonly dom.SVGAnimatedNumber _offset_BackingField;
      private readonly dom.SVGAnimatedNumber _slope_BackingField;
      private readonly dom.SVGAnimatedNumberList _tableValues_BackingField;
      private readonly dom.SVGAnimatedEnumeration _type_BackingField;
      private readonly double _SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE_BackingField;
      private readonly double _SVG_FECOMPONENTTRANSFER_TYPE_GAMMA_BackingField;
      private readonly double _SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY_BackingField;
      private readonly double _SVG_FECOMPONENTTRANSFER_TYPE_LINEAR_BackingField;
      private readonly double _SVG_FECOMPONENTTRANSFER_TYPE_TABLE_BackingField;
      private readonly double _SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"componentTransferFunction\")")]
      public extern SVGComponentTransferFunctionElement();

      public static dom.SVGComponentTransferFunctionElement prototype
      {
        get
        {
          return dom.SVGComponentTransferFunctionElement._prototype_BackingField;
        }
        set
        {
          dom.SVGComponentTransferFunctionElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE")]
      public static double SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE_Static
      {
        get
        {
          return dom.SVGComponentTransferFunctionElement._SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPONENTTRANSFER_TYPE_GAMMA")]
      public static double SVG_FECOMPONENTTRANSFER_TYPE_GAMMA_Static
      {
        get
        {
          return dom.SVGComponentTransferFunctionElement._SVG_FECOMPONENTTRANSFER_TYPE_GAMMA_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY")]
      public static double SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY_Static
      {
        get
        {
          return dom.SVGComponentTransferFunctionElement._SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPONENTTRANSFER_TYPE_LINEAR")]
      public static double SVG_FECOMPONENTTRANSFER_TYPE_LINEAR_Static
      {
        get
        {
          return dom.SVGComponentTransferFunctionElement._SVG_FECOMPONENTTRANSFER_TYPE_LINEAR_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPONENTTRANSFER_TYPE_TABLE")]
      public static double SVG_FECOMPONENTTRANSFER_TYPE_TABLE_Static
      {
        get
        {
          return dom.SVGComponentTransferFunctionElement._SVG_FECOMPONENTTRANSFER_TYPE_TABLE_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN")]
      public static double SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGComponentTransferFunctionElement._SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber amplitude
      {
        get
        {
          return this._amplitude_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber exponent
      {
        get
        {
          return this._exponent_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber intercept
      {
        get
        {
          return this._intercept_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber offset
      {
        get
        {
          return this._offset_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber slope
      {
        get
        {
          return this._slope_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumberList tableValues
      {
        get
        {
          return this._tableValues_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual double SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE
      {
        get
        {
          return this._SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE_BackingField;
        }
      }

      public virtual double SVG_FECOMPONENTTRANSFER_TYPE_GAMMA
      {
        get
        {
          return this._SVG_FECOMPONENTTRANSFER_TYPE_GAMMA_BackingField;
        }
      }

      public virtual double SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY
      {
        get
        {
          return this._SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY_BackingField;
        }
      }

      public virtual double SVG_FECOMPONENTTRANSFER_TYPE_LINEAR
      {
        get
        {
          return this._SVG_FECOMPONENTTRANSFER_TYPE_LINEAR_BackingField;
        }
      }

      public virtual double SVG_FECOMPONENTTRANSFER_TYPE_TABLE
      {
        get
        {
          return this._SVG_FECOMPONENTTRANSFER_TYPE_TABLE_BackingField;
        }
      }

      public virtual double SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN
      {
        get
        {
          return this._SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGComponentTransferFunctionElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGComponentTransferFunctionElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGComponentTransferFunctionElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGComponentTransferFunctionElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGComponentTransferFunctionElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGComponentTransferFunctionElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGComponentTransferFunctionElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGComponentTransferFunctionElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGDefsElement : dom.SVGGraphicsElement
    {
      private static dom.SVGDefsElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\")")]
      public extern SVGDefsElement();

      public static dom.SVGDefsElement prototype
      {
        get
        {
          return dom.SVGDefsElement._prototype_BackingField;
        }
        set
        {
          dom.SVGDefsElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGDefsElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGDefsElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGDefsElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGDefsElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGDefsElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGDefsElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGDefsElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGDefsElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGDescElement : dom.SVGElement
    {
      private static dom.SVGDescElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"desc\")")]
      public extern SVGDescElement();

      public static dom.SVGDescElement prototype
      {
        get
        {
          return dom.SVGDescElement._prototype_BackingField;
        }
        set
        {
          dom.SVGDescElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGDescElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGDescElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGDescElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGDescElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGDescElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGDescElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGDescElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGDescElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class SVGElementEventMap : dom.ElementEventMap
    {
      private dom.MouseEvent _click_BackingField;
      private dom.MouseEvent _dblclick_BackingField;
      private dom.FocusEvent _focusin_BackingField;
      private dom.FocusEvent _focusout_BackingField;
      private dom.Event _load_BackingField;
      private dom.MouseEvent _mousedown_BackingField;
      private dom.MouseEvent _mousemove_BackingField;
      private dom.MouseEvent _mouseout_BackingField;
      private dom.MouseEvent _mouseover_BackingField;
      private dom.MouseEvent _mouseup_BackingField;

      public dom.MouseEvent click
      {
        get
        {
          return this._click_BackingField;
        }
        set
        {
          this._click_BackingField = value;
        }
      }

      public dom.MouseEvent dblclick
      {
        get
        {
          return this._dblclick_BackingField;
        }
        set
        {
          this._dblclick_BackingField = value;
        }
      }

      public dom.FocusEvent focusin
      {
        get
        {
          return this._focusin_BackingField;
        }
        set
        {
          this._focusin_BackingField = value;
        }
      }

      public dom.FocusEvent focusout
      {
        get
        {
          return this._focusout_BackingField;
        }
        set
        {
          this._focusout_BackingField = value;
        }
      }

      public dom.Event load
      {
        get
        {
          return this._load_BackingField;
        }
        set
        {
          this._load_BackingField = value;
        }
      }

      public dom.MouseEvent mousedown
      {
        get
        {
          return this._mousedown_BackingField;
        }
        set
        {
          this._mousedown_BackingField = value;
        }
      }

      public dom.MouseEvent mousemove
      {
        get
        {
          return this._mousemove_BackingField;
        }
        set
        {
          this._mousemove_BackingField = value;
        }
      }

      public dom.MouseEvent mouseout
      {
        get
        {
          return this._mouseout_BackingField;
        }
        set
        {
          this._mouseout_BackingField = value;
        }
      }

      public dom.MouseEvent mouseover
      {
        get
        {
          return this._mouseover_BackingField;
        }
        set
        {
          this._mouseover_BackingField = value;
        }
      }

      public dom.MouseEvent mouseup
      {
        get
        {
          return this._mouseup_BackingField;
        }
        set
        {
          this._mouseup_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"click\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> click;
        [Template("\"dblclick\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> dblclick;
        [Template("\"focusin\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> focusin;
        [Template("\"focusout\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> focusout;
        [Template("\"load\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> load;
        [Template("\"mousedown\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> mousedown;
        [Template("\"mousemove\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> mousemove;
        [Template("\"mouseout\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> mouseout;
        [Template("\"mouseover\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> mouseover;
        [Template("\"mouseup\"")]
        public static readonly KeyOf<dom.SVGElementEventMap> mouseup;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGElement : dom.Element, dom.ElementCSSInlineStyle.Interface, IObject
    {
      private static dom.SVGElement _prototype_BackingField;
      private readonly object _className_BackingField;
      private dom.SVGElement.onclickFn _onclick_BackingField;
      private dom.SVGElement.onclickFn _ondblclick_BackingField;
      private dom.SVGElement.onfocusinFn _onfocusin_BackingField;
      private dom.SVGElement.onfocusinFn _onfocusout_BackingField;
      private dom.SVGElement.onloadFn _onload_BackingField;
      private dom.SVGElement.onclickFn _onmousedown_BackingField;
      private dom.SVGElement.onclickFn _onmousemove_BackingField;
      private dom.SVGElement.onclickFn _onmouseout_BackingField;
      private dom.SVGElement.onclickFn _onmouseover_BackingField;
      private dom.SVGElement.onclickFn _onmouseup_BackingField;
      private readonly dom.SVGSVGElement _ownerSVGElement_BackingField;
      private readonly dom.SVGElement _viewportElement_BackingField;
      private string _xmlbase_BackingField;
      private readonly dom.CSSStyleDeclaration _style_BackingField;

      protected extern SVGElement();

      public static dom.SVGElement prototype
      {
        get
        {
          return dom.SVGElement._prototype_BackingField;
        }
        set
        {
          dom.SVGElement._prototype_BackingField = value;
        }
      }

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", {0})")]
      public extern SVGElement(string name);

      public virtual object className
      {
        get
        {
          return this._className_BackingField;
        }
      }

      public virtual dom.SVGElement.onclickFn onclick
      {
        get
        {
          return this._onclick_BackingField;
        }
        set
        {
          this._onclick_BackingField = value;
        }
      }

      public virtual dom.SVGElement.onclickFn ondblclick
      {
        get
        {
          return this._ondblclick_BackingField;
        }
        set
        {
          this._ondblclick_BackingField = value;
        }
      }

      public virtual dom.SVGElement.onfocusinFn onfocusin
      {
        get
        {
          return this._onfocusin_BackingField;
        }
        set
        {
          this._onfocusin_BackingField = value;
        }
      }

      public virtual dom.SVGElement.onfocusinFn onfocusout
      {
        get
        {
          return this._onfocusout_BackingField;
        }
        set
        {
          this._onfocusout_BackingField = value;
        }
      }

      public virtual dom.SVGElement.onloadFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual dom.SVGElement.onclickFn onmousedown
      {
        get
        {
          return this._onmousedown_BackingField;
        }
        set
        {
          this._onmousedown_BackingField = value;
        }
      }

      public virtual dom.SVGElement.onclickFn onmousemove
      {
        get
        {
          return this._onmousemove_BackingField;
        }
        set
        {
          this._onmousemove_BackingField = value;
        }
      }

      public virtual dom.SVGElement.onclickFn onmouseout
      {
        get
        {
          return this._onmouseout_BackingField;
        }
        set
        {
          this._onmouseout_BackingField = value;
        }
      }

      public virtual dom.SVGElement.onclickFn onmouseover
      {
        get
        {
          return this._onmouseover_BackingField;
        }
        set
        {
          this._onmouseover_BackingField = value;
        }
      }

      public virtual dom.SVGElement.onclickFn onmouseup
      {
        get
        {
          return this._onmouseup_BackingField;
        }
        set
        {
          this._onmouseup_BackingField = value;
        }
      }

      public virtual dom.SVGSVGElement ownerSVGElement
      {
        get
        {
          return this._ownerSVGElement_BackingField;
        }
      }

      public virtual dom.SVGElement viewportElement
      {
        get
        {
          return this._viewportElement_BackingField;
        }
      }

      public virtual string xmlbase
      {
        get
        {
          return this._xmlbase_BackingField;
        }
        set
        {
          this._xmlbase_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.CSSStyleDeclaration style
      {
        get
        {
          return this._style_BackingField;
        }
      }

      [Generated]
      public delegate void onclickFn(dom.MouseEvent ev);

      [Generated]
      public delegate void onfocusinFn(dom.FocusEvent ev);

      [Generated]
      public delegate void onloadFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGElementInstance : dom.EventTarget
    {
      private static dom.SVGElementInstance _prototype_BackingField;
      private readonly dom.SVGElementInstanceList _childNodes_BackingField;
      private readonly dom.SVGElement _correspondingElement_BackingField;
      private readonly dom.SVGUseElement _correspondingUseElement_BackingField;
      private readonly dom.SVGElementInstance _firstChild_BackingField;
      private readonly dom.SVGElementInstance _lastChild_BackingField;
      private readonly dom.SVGElementInstance _nextSibling_BackingField;
      private readonly dom.SVGElementInstance _parentNode_BackingField;
      private readonly dom.SVGElementInstance _previousSibling_BackingField;

      public static dom.SVGElementInstance prototype
      {
        get
        {
          return dom.SVGElementInstance._prototype_BackingField;
        }
        set
        {
          dom.SVGElementInstance._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGElementInstanceList childNodes
      {
        get
        {
          return this._childNodes_BackingField;
        }
      }

      public virtual dom.SVGElement correspondingElement
      {
        get
        {
          return this._correspondingElement_BackingField;
        }
      }

      public virtual dom.SVGUseElement correspondingUseElement
      {
        get
        {
          return this._correspondingUseElement_BackingField;
        }
      }

      public virtual dom.SVGElementInstance firstChild
      {
        get
        {
          return this._firstChild_BackingField;
        }
      }

      public virtual dom.SVGElementInstance lastChild
      {
        get
        {
          return this._lastChild_BackingField;
        }
      }

      public virtual dom.SVGElementInstance nextSibling
      {
        get
        {
          return this._nextSibling_BackingField;
        }
      }

      public virtual dom.SVGElementInstance parentNode
      {
        get
        {
          return this._parentNode_BackingField;
        }
      }

      public virtual dom.SVGElementInstance previousSibling
      {
        get
        {
          return this._previousSibling_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGElementInstanceList : IObject
    {
      private static dom.SVGElementInstanceList _prototype_BackingField;
      private readonly double _length_BackingField;

      public static dom.SVGElementInstanceList prototype
      {
        get
        {
          return dom.SVGElementInstanceList._prototype_BackingField;
        }
        set
        {
          dom.SVGElementInstanceList._prototype_BackingField = value;
        }
      }

      public virtual double length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.SVGElementInstance item(double index);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGEllipseElement : dom.SVGGraphicsElement
    {
      private static dom.SVGEllipseElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _cx_BackingField;
      private readonly dom.SVGAnimatedLength _cy_BackingField;
      private readonly dom.SVGAnimatedLength _rx_BackingField;
      private readonly dom.SVGAnimatedLength _ry_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\")")]
      public extern SVGEllipseElement();

      public static dom.SVGEllipseElement prototype
      {
        get
        {
          return dom.SVGEllipseElement._prototype_BackingField;
        }
        set
        {
          dom.SVGEllipseElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength cx
      {
        get
        {
          return this._cx_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength cy
      {
        get
        {
          return this._cy_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength rx
      {
        get
        {
          return this._rx_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength ry
      {
        get
        {
          return this._ry_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGEllipseElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGEllipseElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGEllipseElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGEllipseElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGEllipseElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGEllipseElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGEllipseElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGEllipseElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEBlendElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEBlendElement _prototype_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_COLOR_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_COLOR_BURN_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_COLOR_DODGE_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_DARKEN_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_DIFFERENCE_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_EXCLUSION_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_HARD_LIGHT_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_HUE_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_LIGHTEN_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_LUMINOSITY_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_MULTIPLY_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_NORMAL_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_OVERLAY_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_SATURATION_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_SCREEN_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_SOFT_LIGHT_Static_BackingField;
      private static readonly double _SVG_FEBLEND_MODE_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedString _in2_BackingField;
      private readonly dom.SVGAnimatedEnumeration _mode_BackingField;
      private readonly double _SVG_FEBLEND_MODE_COLOR_BackingField;
      private readonly double _SVG_FEBLEND_MODE_COLOR_BURN_BackingField;
      private readonly double _SVG_FEBLEND_MODE_COLOR_DODGE_BackingField;
      private readonly double _SVG_FEBLEND_MODE_DARKEN_BackingField;
      private readonly double _SVG_FEBLEND_MODE_DIFFERENCE_BackingField;
      private readonly double _SVG_FEBLEND_MODE_EXCLUSION_BackingField;
      private readonly double _SVG_FEBLEND_MODE_HARD_LIGHT_BackingField;
      private readonly double _SVG_FEBLEND_MODE_HUE_BackingField;
      private readonly double _SVG_FEBLEND_MODE_LIGHTEN_BackingField;
      private readonly double _SVG_FEBLEND_MODE_LUMINOSITY_BackingField;
      private readonly double _SVG_FEBLEND_MODE_MULTIPLY_BackingField;
      private readonly double _SVG_FEBLEND_MODE_NORMAL_BackingField;
      private readonly double _SVG_FEBLEND_MODE_OVERLAY_BackingField;
      private readonly double _SVG_FEBLEND_MODE_SATURATION_BackingField;
      private readonly double _SVG_FEBLEND_MODE_SCREEN_BackingField;
      private readonly double _SVG_FEBLEND_MODE_SOFT_LIGHT_BackingField;
      private readonly double _SVG_FEBLEND_MODE_UNKNOWN_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feBlend\")")]
      public extern SVGFEBlendElement();

      public static dom.SVGFEBlendElement prototype
      {
        get
        {
          return dom.SVGFEBlendElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEBlendElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_FEBLEND_MODE_COLOR")]
      public static double SVG_FEBLEND_MODE_COLOR_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_COLOR_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_COLOR_BURN")]
      public static double SVG_FEBLEND_MODE_COLOR_BURN_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_COLOR_BURN_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_COLOR_DODGE")]
      public static double SVG_FEBLEND_MODE_COLOR_DODGE_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_COLOR_DODGE_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_DARKEN")]
      public static double SVG_FEBLEND_MODE_DARKEN_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_DARKEN_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_DIFFERENCE")]
      public static double SVG_FEBLEND_MODE_DIFFERENCE_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_DIFFERENCE_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_EXCLUSION")]
      public static double SVG_FEBLEND_MODE_EXCLUSION_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_EXCLUSION_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_HARD_LIGHT")]
      public static double SVG_FEBLEND_MODE_HARD_LIGHT_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_HARD_LIGHT_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_HUE")]
      public static double SVG_FEBLEND_MODE_HUE_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_HUE_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_LIGHTEN")]
      public static double SVG_FEBLEND_MODE_LIGHTEN_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_LIGHTEN_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_LUMINOSITY")]
      public static double SVG_FEBLEND_MODE_LUMINOSITY_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_LUMINOSITY_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_MULTIPLY")]
      public static double SVG_FEBLEND_MODE_MULTIPLY_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_MULTIPLY_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_NORMAL")]
      public static double SVG_FEBLEND_MODE_NORMAL_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_NORMAL_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_OVERLAY")]
      public static double SVG_FEBLEND_MODE_OVERLAY_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_OVERLAY_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_SATURATION")]
      public static double SVG_FEBLEND_MODE_SATURATION_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_SATURATION_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_SCREEN")]
      public static double SVG_FEBLEND_MODE_SCREEN_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_SCREEN_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_SOFT_LIGHT")]
      public static double SVG_FEBLEND_MODE_SOFT_LIGHT_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_SOFT_LIGHT_Static_BackingField;
        }
      }

      [Name("SVG_FEBLEND_MODE_UNKNOWN")]
      public static double SVG_FEBLEND_MODE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGFEBlendElement._SVG_FEBLEND_MODE_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in2
      {
        get
        {
          return this._in2_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration mode
      {
        get
        {
          return this._mode_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_COLOR
      {
        get
        {
          return this._SVG_FEBLEND_MODE_COLOR_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_COLOR_BURN
      {
        get
        {
          return this._SVG_FEBLEND_MODE_COLOR_BURN_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_COLOR_DODGE
      {
        get
        {
          return this._SVG_FEBLEND_MODE_COLOR_DODGE_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_DARKEN
      {
        get
        {
          return this._SVG_FEBLEND_MODE_DARKEN_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_DIFFERENCE
      {
        get
        {
          return this._SVG_FEBLEND_MODE_DIFFERENCE_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_EXCLUSION
      {
        get
        {
          return this._SVG_FEBLEND_MODE_EXCLUSION_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_HARD_LIGHT
      {
        get
        {
          return this._SVG_FEBLEND_MODE_HARD_LIGHT_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_HUE
      {
        get
        {
          return this._SVG_FEBLEND_MODE_HUE_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_LIGHTEN
      {
        get
        {
          return this._SVG_FEBLEND_MODE_LIGHTEN_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_LUMINOSITY
      {
        get
        {
          return this._SVG_FEBLEND_MODE_LUMINOSITY_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_MULTIPLY
      {
        get
        {
          return this._SVG_FEBLEND_MODE_MULTIPLY_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_NORMAL
      {
        get
        {
          return this._SVG_FEBLEND_MODE_NORMAL_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_OVERLAY
      {
        get
        {
          return this._SVG_FEBLEND_MODE_OVERLAY_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_SATURATION
      {
        get
        {
          return this._SVG_FEBLEND_MODE_SATURATION_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_SCREEN
      {
        get
        {
          return this._SVG_FEBLEND_MODE_SCREEN_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_SOFT_LIGHT
      {
        get
        {
          return this._SVG_FEBLEND_MODE_SOFT_LIGHT_BackingField;
        }
      }

      public virtual double SVG_FEBLEND_MODE_UNKNOWN
      {
        get
        {
          return this._SVG_FEBLEND_MODE_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEBlendElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEBlendElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEBlendElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEBlendElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEBlendElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEBlendElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEBlendElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEBlendElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEColorMatrixElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEColorMatrixElement _prototype_BackingField;
      private static readonly double _SVG_FECOLORMATRIX_TYPE_HUEROTATE_Static_BackingField;
      private static readonly double _SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA_Static_BackingField;
      private static readonly double _SVG_FECOLORMATRIX_TYPE_MATRIX_Static_BackingField;
      private static readonly double _SVG_FECOLORMATRIX_TYPE_SATURATE_Static_BackingField;
      private static readonly double _SVG_FECOLORMATRIX_TYPE_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedEnumeration _type_BackingField;
      private readonly dom.SVGAnimatedNumberList _values_BackingField;
      private readonly double _SVG_FECOLORMATRIX_TYPE_HUEROTATE_BackingField;
      private readonly double _SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA_BackingField;
      private readonly double _SVG_FECOLORMATRIX_TYPE_MATRIX_BackingField;
      private readonly double _SVG_FECOLORMATRIX_TYPE_SATURATE_BackingField;
      private readonly double _SVG_FECOLORMATRIX_TYPE_UNKNOWN_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feColorMatrix\")")]
      public extern SVGFEColorMatrixElement();

      public static dom.SVGFEColorMatrixElement prototype
      {
        get
        {
          return dom.SVGFEColorMatrixElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEColorMatrixElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_FECOLORMATRIX_TYPE_HUEROTATE")]
      public static double SVG_FECOLORMATRIX_TYPE_HUEROTATE_Static
      {
        get
        {
          return dom.SVGFEColorMatrixElement._SVG_FECOLORMATRIX_TYPE_HUEROTATE_Static_BackingField;
        }
      }

      [Name("SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA")]
      public static double SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA_Static
      {
        get
        {
          return dom.SVGFEColorMatrixElement._SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA_Static_BackingField;
        }
      }

      [Name("SVG_FECOLORMATRIX_TYPE_MATRIX")]
      public static double SVG_FECOLORMATRIX_TYPE_MATRIX_Static
      {
        get
        {
          return dom.SVGFEColorMatrixElement._SVG_FECOLORMATRIX_TYPE_MATRIX_Static_BackingField;
        }
      }

      [Name("SVG_FECOLORMATRIX_TYPE_SATURATE")]
      public static double SVG_FECOLORMATRIX_TYPE_SATURATE_Static
      {
        get
        {
          return dom.SVGFEColorMatrixElement._SVG_FECOLORMATRIX_TYPE_SATURATE_Static_BackingField;
        }
      }

      [Name("SVG_FECOLORMATRIX_TYPE_UNKNOWN")]
      public static double SVG_FECOLORMATRIX_TYPE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGFEColorMatrixElement._SVG_FECOLORMATRIX_TYPE_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumberList values
      {
        get
        {
          return this._values_BackingField;
        }
      }

      public virtual double SVG_FECOLORMATRIX_TYPE_HUEROTATE
      {
        get
        {
          return this._SVG_FECOLORMATRIX_TYPE_HUEROTATE_BackingField;
        }
      }

      public virtual double SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA
      {
        get
        {
          return this._SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA_BackingField;
        }
      }

      public virtual double SVG_FECOLORMATRIX_TYPE_MATRIX
      {
        get
        {
          return this._SVG_FECOLORMATRIX_TYPE_MATRIX_BackingField;
        }
      }

      public virtual double SVG_FECOLORMATRIX_TYPE_SATURATE
      {
        get
        {
          return this._SVG_FECOLORMATRIX_TYPE_SATURATE_BackingField;
        }
      }

      public virtual double SVG_FECOLORMATRIX_TYPE_UNKNOWN
      {
        get
        {
          return this._SVG_FECOLORMATRIX_TYPE_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEColorMatrixElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEColorMatrixElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEColorMatrixElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEColorMatrixElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEColorMatrixElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEColorMatrixElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEColorMatrixElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEColorMatrixElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEComponentTransferElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEComponentTransferElement _prototype_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feComponentTransfer\")")]
      public extern SVGFEComponentTransferElement();

      public static dom.SVGFEComponentTransferElement prototype
      {
        get
        {
          return dom.SVGFEComponentTransferElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEComponentTransferElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEComponentTransferElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEComponentTransferElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEComponentTransferElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEComponentTransferElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEComponentTransferElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEComponentTransferElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEComponentTransferElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEComponentTransferElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFECompositeElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFECompositeElement _prototype_BackingField;
      private static readonly double _SVG_FECOMPOSITE_OPERATOR_ARITHMETIC_Static_BackingField;
      private static readonly double _SVG_FECOMPOSITE_OPERATOR_ATOP_Static_BackingField;
      private static readonly double _SVG_FECOMPOSITE_OPERATOR_IN_Static_BackingField;
      private static readonly double _SVG_FECOMPOSITE_OPERATOR_OUT_Static_BackingField;
      private static readonly double _SVG_FECOMPOSITE_OPERATOR_OVER_Static_BackingField;
      private static readonly double _SVG_FECOMPOSITE_OPERATOR_UNKNOWN_Static_BackingField;
      private static readonly double _SVG_FECOMPOSITE_OPERATOR_XOR_Static_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedString _in2_BackingField;
      private readonly dom.SVGAnimatedNumber _k1_BackingField;
      private readonly dom.SVGAnimatedNumber _k2_BackingField;
      private readonly dom.SVGAnimatedNumber _k3_BackingField;
      private readonly dom.SVGAnimatedNumber _k4_BackingField;
      private readonly dom.SVGAnimatedEnumeration _operator_BackingField;
      private readonly double _SVG_FECOMPOSITE_OPERATOR_ARITHMETIC_BackingField;
      private readonly double _SVG_FECOMPOSITE_OPERATOR_ATOP_BackingField;
      private readonly double _SVG_FECOMPOSITE_OPERATOR_IN_BackingField;
      private readonly double _SVG_FECOMPOSITE_OPERATOR_OUT_BackingField;
      private readonly double _SVG_FECOMPOSITE_OPERATOR_OVER_BackingField;
      private readonly double _SVG_FECOMPOSITE_OPERATOR_UNKNOWN_BackingField;
      private readonly double _SVG_FECOMPOSITE_OPERATOR_XOR_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feComposite\")")]
      public extern SVGFECompositeElement();

      public static dom.SVGFECompositeElement prototype
      {
        get
        {
          return dom.SVGFECompositeElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFECompositeElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_FECOMPOSITE_OPERATOR_ARITHMETIC")]
      public static double SVG_FECOMPOSITE_OPERATOR_ARITHMETIC_Static
      {
        get
        {
          return dom.SVGFECompositeElement._SVG_FECOMPOSITE_OPERATOR_ARITHMETIC_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPOSITE_OPERATOR_ATOP")]
      public static double SVG_FECOMPOSITE_OPERATOR_ATOP_Static
      {
        get
        {
          return dom.SVGFECompositeElement._SVG_FECOMPOSITE_OPERATOR_ATOP_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPOSITE_OPERATOR_IN")]
      public static double SVG_FECOMPOSITE_OPERATOR_IN_Static
      {
        get
        {
          return dom.SVGFECompositeElement._SVG_FECOMPOSITE_OPERATOR_IN_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPOSITE_OPERATOR_OUT")]
      public static double SVG_FECOMPOSITE_OPERATOR_OUT_Static
      {
        get
        {
          return dom.SVGFECompositeElement._SVG_FECOMPOSITE_OPERATOR_OUT_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPOSITE_OPERATOR_OVER")]
      public static double SVG_FECOMPOSITE_OPERATOR_OVER_Static
      {
        get
        {
          return dom.SVGFECompositeElement._SVG_FECOMPOSITE_OPERATOR_OVER_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPOSITE_OPERATOR_UNKNOWN")]
      public static double SVG_FECOMPOSITE_OPERATOR_UNKNOWN_Static
      {
        get
        {
          return dom.SVGFECompositeElement._SVG_FECOMPOSITE_OPERATOR_UNKNOWN_Static_BackingField;
        }
      }

      [Name("SVG_FECOMPOSITE_OPERATOR_XOR")]
      public static double SVG_FECOMPOSITE_OPERATOR_XOR_Static
      {
        get
        {
          return dom.SVGFECompositeElement._SVG_FECOMPOSITE_OPERATOR_XOR_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in2
      {
        get
        {
          return this._in2_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber k1
      {
        get
        {
          return this._k1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber k2
      {
        get
        {
          return this._k2_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber k3
      {
        get
        {
          return this._k3_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber k4
      {
        get
        {
          return this._k4_BackingField;
        }
      }

      [Name("operator")]
      public virtual dom.SVGAnimatedEnumeration @operator
      {
        get
        {
          return this._operator_BackingField;
        }
      }

      public virtual double SVG_FECOMPOSITE_OPERATOR_ARITHMETIC
      {
        get
        {
          return this._SVG_FECOMPOSITE_OPERATOR_ARITHMETIC_BackingField;
        }
      }

      public virtual double SVG_FECOMPOSITE_OPERATOR_ATOP
      {
        get
        {
          return this._SVG_FECOMPOSITE_OPERATOR_ATOP_BackingField;
        }
      }

      public virtual double SVG_FECOMPOSITE_OPERATOR_IN
      {
        get
        {
          return this._SVG_FECOMPOSITE_OPERATOR_IN_BackingField;
        }
      }

      public virtual double SVG_FECOMPOSITE_OPERATOR_OUT
      {
        get
        {
          return this._SVG_FECOMPOSITE_OPERATOR_OUT_BackingField;
        }
      }

      public virtual double SVG_FECOMPOSITE_OPERATOR_OVER
      {
        get
        {
          return this._SVG_FECOMPOSITE_OPERATOR_OVER_BackingField;
        }
      }

      public virtual double SVG_FECOMPOSITE_OPERATOR_UNKNOWN
      {
        get
        {
          return this._SVG_FECOMPOSITE_OPERATOR_UNKNOWN_BackingField;
        }
      }

      public virtual double SVG_FECOMPOSITE_OPERATOR_XOR
      {
        get
        {
          return this._SVG_FECOMPOSITE_OPERATOR_XOR_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFECompositeElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFECompositeElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFECompositeElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFECompositeElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFECompositeElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFECompositeElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFECompositeElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFECompositeElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEConvolveMatrixElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEConvolveMatrixElement _prototype_BackingField;
      private static readonly double _SVG_EDGEMODE_DUPLICATE_Static_BackingField;
      private static readonly double _SVG_EDGEMODE_NONE_Static_BackingField;
      private static readonly double _SVG_EDGEMODE_UNKNOWN_Static_BackingField;
      private static readonly double _SVG_EDGEMODE_WRAP_Static_BackingField;
      private readonly dom.SVGAnimatedNumber _bias_BackingField;
      private readonly dom.SVGAnimatedNumber _divisor_BackingField;
      private readonly dom.SVGAnimatedEnumeration _edgeMode_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedNumberList _kernelMatrix_BackingField;
      private readonly dom.SVGAnimatedNumber _kernelUnitLengthX_BackingField;
      private readonly dom.SVGAnimatedNumber _kernelUnitLengthY_BackingField;
      private readonly dom.SVGAnimatedInteger _orderX_BackingField;
      private readonly dom.SVGAnimatedInteger _orderY_BackingField;
      private readonly dom.SVGAnimatedBoolean _preserveAlpha_BackingField;
      private readonly dom.SVGAnimatedInteger _targetX_BackingField;
      private readonly dom.SVGAnimatedInteger _targetY_BackingField;
      private readonly double _SVG_EDGEMODE_DUPLICATE_BackingField;
      private readonly double _SVG_EDGEMODE_NONE_BackingField;
      private readonly double _SVG_EDGEMODE_UNKNOWN_BackingField;
      private readonly double _SVG_EDGEMODE_WRAP_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feConvolveMatrix\")")]
      public extern SVGFEConvolveMatrixElement();

      public static dom.SVGFEConvolveMatrixElement prototype
      {
        get
        {
          return dom.SVGFEConvolveMatrixElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEConvolveMatrixElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_EDGEMODE_DUPLICATE")]
      public static double SVG_EDGEMODE_DUPLICATE_Static
      {
        get
        {
          return dom.SVGFEConvolveMatrixElement._SVG_EDGEMODE_DUPLICATE_Static_BackingField;
        }
      }

      [Name("SVG_EDGEMODE_NONE")]
      public static double SVG_EDGEMODE_NONE_Static
      {
        get
        {
          return dom.SVGFEConvolveMatrixElement._SVG_EDGEMODE_NONE_Static_BackingField;
        }
      }

      [Name("SVG_EDGEMODE_UNKNOWN")]
      public static double SVG_EDGEMODE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGFEConvolveMatrixElement._SVG_EDGEMODE_UNKNOWN_Static_BackingField;
        }
      }

      [Name("SVG_EDGEMODE_WRAP")]
      public static double SVG_EDGEMODE_WRAP_Static
      {
        get
        {
          return dom.SVGFEConvolveMatrixElement._SVG_EDGEMODE_WRAP_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber bias
      {
        get
        {
          return this._bias_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber divisor
      {
        get
        {
          return this._divisor_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration edgeMode
      {
        get
        {
          return this._edgeMode_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumberList kernelMatrix
      {
        get
        {
          return this._kernelMatrix_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber kernelUnitLengthX
      {
        get
        {
          return this._kernelUnitLengthX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber kernelUnitLengthY
      {
        get
        {
          return this._kernelUnitLengthY_BackingField;
        }
      }

      public virtual dom.SVGAnimatedInteger orderX
      {
        get
        {
          return this._orderX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedInteger orderY
      {
        get
        {
          return this._orderY_BackingField;
        }
      }

      public virtual dom.SVGAnimatedBoolean preserveAlpha
      {
        get
        {
          return this._preserveAlpha_BackingField;
        }
      }

      public virtual dom.SVGAnimatedInteger targetX
      {
        get
        {
          return this._targetX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedInteger targetY
      {
        get
        {
          return this._targetY_BackingField;
        }
      }

      public virtual double SVG_EDGEMODE_DUPLICATE
      {
        get
        {
          return this._SVG_EDGEMODE_DUPLICATE_BackingField;
        }
      }

      public virtual double SVG_EDGEMODE_NONE
      {
        get
        {
          return this._SVG_EDGEMODE_NONE_BackingField;
        }
      }

      public virtual double SVG_EDGEMODE_UNKNOWN
      {
        get
        {
          return this._SVG_EDGEMODE_UNKNOWN_BackingField;
        }
      }

      public virtual double SVG_EDGEMODE_WRAP
      {
        get
        {
          return this._SVG_EDGEMODE_WRAP_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEConvolveMatrixElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEConvolveMatrixElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEConvolveMatrixElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEConvolveMatrixElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEConvolveMatrixElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEConvolveMatrixElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEConvolveMatrixElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEConvolveMatrixElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEDiffuseLightingElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEDiffuseLightingElement _prototype_BackingField;
      private readonly dom.SVGAnimatedNumber _diffuseConstant_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedNumber _kernelUnitLengthX_BackingField;
      private readonly dom.SVGAnimatedNumber _kernelUnitLengthY_BackingField;
      private readonly dom.SVGAnimatedNumber _surfaceScale_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feDiffuseLighting\")")]
      public extern SVGFEDiffuseLightingElement();

      public static dom.SVGFEDiffuseLightingElement prototype
      {
        get
        {
          return dom.SVGFEDiffuseLightingElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEDiffuseLightingElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedNumber diffuseConstant
      {
        get
        {
          return this._diffuseConstant_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber kernelUnitLengthX
      {
        get
        {
          return this._kernelUnitLengthX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber kernelUnitLengthY
      {
        get
        {
          return this._kernelUnitLengthY_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber surfaceScale
      {
        get
        {
          return this._surfaceScale_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDiffuseLightingElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDiffuseLightingElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDiffuseLightingElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDiffuseLightingElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDiffuseLightingElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDiffuseLightingElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDiffuseLightingElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDiffuseLightingElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEDisplacementMapElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEDisplacementMapElement _prototype_BackingField;
      private static readonly double _SVG_CHANNEL_A_Static_BackingField;
      private static readonly double _SVG_CHANNEL_B_Static_BackingField;
      private static readonly double _SVG_CHANNEL_G_Static_BackingField;
      private static readonly double _SVG_CHANNEL_R_Static_BackingField;
      private static readonly double _SVG_CHANNEL_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedString _in2_BackingField;
      private readonly dom.SVGAnimatedNumber _scale_BackingField;
      private readonly dom.SVGAnimatedEnumeration _xChannelSelector_BackingField;
      private readonly dom.SVGAnimatedEnumeration _yChannelSelector_BackingField;
      private readonly double _SVG_CHANNEL_A_BackingField;
      private readonly double _SVG_CHANNEL_B_BackingField;
      private readonly double _SVG_CHANNEL_G_BackingField;
      private readonly double _SVG_CHANNEL_R_BackingField;
      private readonly double _SVG_CHANNEL_UNKNOWN_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feDisplacementMap\")")]
      public extern SVGFEDisplacementMapElement();

      public static dom.SVGFEDisplacementMapElement prototype
      {
        get
        {
          return dom.SVGFEDisplacementMapElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEDisplacementMapElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_CHANNEL_A")]
      public static double SVG_CHANNEL_A_Static
      {
        get
        {
          return dom.SVGFEDisplacementMapElement._SVG_CHANNEL_A_Static_BackingField;
        }
      }

      [Name("SVG_CHANNEL_B")]
      public static double SVG_CHANNEL_B_Static
      {
        get
        {
          return dom.SVGFEDisplacementMapElement._SVG_CHANNEL_B_Static_BackingField;
        }
      }

      [Name("SVG_CHANNEL_G")]
      public static double SVG_CHANNEL_G_Static
      {
        get
        {
          return dom.SVGFEDisplacementMapElement._SVG_CHANNEL_G_Static_BackingField;
        }
      }

      [Name("SVG_CHANNEL_R")]
      public static double SVG_CHANNEL_R_Static
      {
        get
        {
          return dom.SVGFEDisplacementMapElement._SVG_CHANNEL_R_Static_BackingField;
        }
      }

      [Name("SVG_CHANNEL_UNKNOWN")]
      public static double SVG_CHANNEL_UNKNOWN_Static
      {
        get
        {
          return dom.SVGFEDisplacementMapElement._SVG_CHANNEL_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in2
      {
        get
        {
          return this._in2_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber scale
      {
        get
        {
          return this._scale_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration xChannelSelector
      {
        get
        {
          return this._xChannelSelector_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration yChannelSelector
      {
        get
        {
          return this._yChannelSelector_BackingField;
        }
      }

      public virtual double SVG_CHANNEL_A
      {
        get
        {
          return this._SVG_CHANNEL_A_BackingField;
        }
      }

      public virtual double SVG_CHANNEL_B
      {
        get
        {
          return this._SVG_CHANNEL_B_BackingField;
        }
      }

      public virtual double SVG_CHANNEL_G
      {
        get
        {
          return this._SVG_CHANNEL_G_BackingField;
        }
      }

      public virtual double SVG_CHANNEL_R
      {
        get
        {
          return this._SVG_CHANNEL_R_BackingField;
        }
      }

      public virtual double SVG_CHANNEL_UNKNOWN
      {
        get
        {
          return this._SVG_CHANNEL_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDisplacementMapElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDisplacementMapElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDisplacementMapElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDisplacementMapElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDisplacementMapElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDisplacementMapElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDisplacementMapElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDisplacementMapElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEDistantLightElement : dom.SVGElement
    {
      private static dom.SVGFEDistantLightElement _prototype_BackingField;
      private readonly dom.SVGAnimatedNumber _azimuth_BackingField;
      private readonly dom.SVGAnimatedNumber _elevation_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feDistantLight\")")]
      public extern SVGFEDistantLightElement();

      public static dom.SVGFEDistantLightElement prototype
      {
        get
        {
          return dom.SVGFEDistantLightElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEDistantLightElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedNumber azimuth
      {
        get
        {
          return this._azimuth_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber elevation
      {
        get
        {
          return this._elevation_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDistantLightElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDistantLightElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDistantLightElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEDistantLightElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDistantLightElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDistantLightElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDistantLightElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEDistantLightElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEFloodElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEFloodElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feFlood\")")]
      public extern SVGFEFloodElement();

      public static dom.SVGFEFloodElement prototype
      {
        get
        {
          return dom.SVGFEFloodElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEFloodElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFloodElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFloodElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFloodElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFloodElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFloodElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFloodElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFloodElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFloodElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEFuncAElement : dom.SVGComponentTransferFunctionElement
    {
      private static dom.SVGFEFuncAElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feFuncA\")")]
      public extern SVGFEFuncAElement();

      public static dom.SVGFEFuncAElement prototype
      {
        get
        {
          return dom.SVGFEFuncAElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEFuncAElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncAElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncAElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncAElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncAElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncAElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncAElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncAElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncAElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEFuncBElement : dom.SVGComponentTransferFunctionElement
    {
      private static dom.SVGFEFuncBElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feFuncB\")")]
      public extern SVGFEFuncBElement();

      public static dom.SVGFEFuncBElement prototype
      {
        get
        {
          return dom.SVGFEFuncBElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEFuncBElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncBElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncBElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncBElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncBElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncBElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncBElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncBElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncBElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEFuncGElement : dom.SVGComponentTransferFunctionElement
    {
      private static dom.SVGFEFuncGElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feFuncG\")")]
      public extern SVGFEFuncGElement();

      public static dom.SVGFEFuncGElement prototype
      {
        get
        {
          return dom.SVGFEFuncGElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEFuncGElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncGElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncGElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncGElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncGElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncGElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncGElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncGElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncGElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEFuncRElement : dom.SVGComponentTransferFunctionElement
    {
      private static dom.SVGFEFuncRElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feFuncR\")")]
      public extern SVGFEFuncRElement();

      public static dom.SVGFEFuncRElement prototype
      {
        get
        {
          return dom.SVGFEFuncRElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEFuncRElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncRElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncRElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncRElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEFuncRElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncRElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncRElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncRElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEFuncRElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEGaussianBlurElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEGaussianBlurElement _prototype_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedNumber _stdDeviationX_BackingField;
      private readonly dom.SVGAnimatedNumber _stdDeviationY_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feGaussianBlur\")")]
      public extern SVGFEGaussianBlurElement();

      public static dom.SVGFEGaussianBlurElement prototype
      {
        get
        {
          return dom.SVGFEGaussianBlurElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEGaussianBlurElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber stdDeviationX
      {
        get
        {
          return this._stdDeviationX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber stdDeviationY
      {
        get
        {
          return this._stdDeviationY_BackingField;
        }
      }

      public virtual extern void setStdDeviation(double stdDeviationX, double stdDeviationY);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEGaussianBlurElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEGaussianBlurElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEGaussianBlurElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEGaussianBlurElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEGaussianBlurElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEGaussianBlurElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEGaussianBlurElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEGaussianBlurElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEImageElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject, dom.SVGURIReference.Interface
    {
      private static dom.SVGFEImageElement _prototype_BackingField;
      private readonly dom.SVGAnimatedPreserveAspectRatio _preserveAspectRatio_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;
      private readonly dom.SVGAnimatedString _href_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feImage\")")]
      public extern SVGFEImageElement();

      public static dom.SVGFEImageElement prototype
      {
        get
        {
          return dom.SVGFEImageElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEImageElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedPreserveAspectRatio preserveAspectRatio
      {
        get
        {
          return this._preserveAspectRatio_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEImageElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEImageElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEImageElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEImageElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEImageElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEImageElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEImageElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEImageElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEMergeElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEMergeElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feMerge\")")]
      public extern SVGFEMergeElement();

      public static dom.SVGFEMergeElement prototype
      {
        get
        {
          return dom.SVGFEMergeElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEMergeElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMergeElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMergeElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMergeElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMergeElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMergeElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMergeElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMergeElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMergeElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEMergeNodeElement : dom.SVGElement
    {
      private static dom.SVGFEMergeNodeElement _prototype_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feMergeNode\")")]
      public extern SVGFEMergeNodeElement();

      public static dom.SVGFEMergeNodeElement prototype
      {
        get
        {
          return dom.SVGFEMergeNodeElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEMergeNodeElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMergeNodeElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMergeNodeElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMergeNodeElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMergeNodeElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMergeNodeElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMergeNodeElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMergeNodeElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMergeNodeElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEMorphologyElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEMorphologyElement _prototype_BackingField;
      private static readonly double _SVG_MORPHOLOGY_OPERATOR_DILATE_Static_BackingField;
      private static readonly double _SVG_MORPHOLOGY_OPERATOR_ERODE_Static_BackingField;
      private static readonly double _SVG_MORPHOLOGY_OPERATOR_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedEnumeration _operator_BackingField;
      private readonly dom.SVGAnimatedNumber _radiusX_BackingField;
      private readonly dom.SVGAnimatedNumber _radiusY_BackingField;
      private readonly double _SVG_MORPHOLOGY_OPERATOR_DILATE_BackingField;
      private readonly double _SVG_MORPHOLOGY_OPERATOR_ERODE_BackingField;
      private readonly double _SVG_MORPHOLOGY_OPERATOR_UNKNOWN_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feMorphology\")")]
      public extern SVGFEMorphologyElement();

      public static dom.SVGFEMorphologyElement prototype
      {
        get
        {
          return dom.SVGFEMorphologyElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEMorphologyElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_MORPHOLOGY_OPERATOR_DILATE")]
      public static double SVG_MORPHOLOGY_OPERATOR_DILATE_Static
      {
        get
        {
          return dom.SVGFEMorphologyElement._SVG_MORPHOLOGY_OPERATOR_DILATE_Static_BackingField;
        }
      }

      [Name("SVG_MORPHOLOGY_OPERATOR_ERODE")]
      public static double SVG_MORPHOLOGY_OPERATOR_ERODE_Static
      {
        get
        {
          return dom.SVGFEMorphologyElement._SVG_MORPHOLOGY_OPERATOR_ERODE_Static_BackingField;
        }
      }

      [Name("SVG_MORPHOLOGY_OPERATOR_UNKNOWN")]
      public static double SVG_MORPHOLOGY_OPERATOR_UNKNOWN_Static
      {
        get
        {
          return dom.SVGFEMorphologyElement._SVG_MORPHOLOGY_OPERATOR_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      [Name("operator")]
      public virtual dom.SVGAnimatedEnumeration @operator
      {
        get
        {
          return this._operator_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber radiusX
      {
        get
        {
          return this._radiusX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber radiusY
      {
        get
        {
          return this._radiusY_BackingField;
        }
      }

      public virtual double SVG_MORPHOLOGY_OPERATOR_DILATE
      {
        get
        {
          return this._SVG_MORPHOLOGY_OPERATOR_DILATE_BackingField;
        }
      }

      public virtual double SVG_MORPHOLOGY_OPERATOR_ERODE
      {
        get
        {
          return this._SVG_MORPHOLOGY_OPERATOR_ERODE_BackingField;
        }
      }

      public virtual double SVG_MORPHOLOGY_OPERATOR_UNKNOWN
      {
        get
        {
          return this._SVG_MORPHOLOGY_OPERATOR_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMorphologyElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMorphologyElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMorphologyElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEMorphologyElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMorphologyElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMorphologyElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMorphologyElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEMorphologyElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEOffsetElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFEOffsetElement _prototype_BackingField;
      private readonly dom.SVGAnimatedNumber _dx_BackingField;
      private readonly dom.SVGAnimatedNumber _dy_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feOffset\")")]
      public extern SVGFEOffsetElement();

      public static dom.SVGFEOffsetElement prototype
      {
        get
        {
          return dom.SVGFEOffsetElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEOffsetElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedNumber dx
      {
        get
        {
          return this._dx_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber dy
      {
        get
        {
          return this._dy_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEOffsetElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEOffsetElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEOffsetElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEOffsetElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEOffsetElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEOffsetElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEOffsetElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEOffsetElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFEPointLightElement : dom.SVGElement
    {
      private static dom.SVGFEPointLightElement _prototype_BackingField;
      private readonly dom.SVGAnimatedNumber _x_BackingField;
      private readonly dom.SVGAnimatedNumber _y_BackingField;
      private readonly dom.SVGAnimatedNumber _z_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"fePointLight\")")]
      public extern SVGFEPointLightElement();

      public static dom.SVGFEPointLightElement prototype
      {
        get
        {
          return dom.SVGFEPointLightElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFEPointLightElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedNumber x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber z
      {
        get
        {
          return this._z_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEPointLightElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEPointLightElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEPointLightElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFEPointLightElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEPointLightElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEPointLightElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEPointLightElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFEPointLightElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFESpecularLightingElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFESpecularLightingElement _prototype_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedNumber _kernelUnitLengthX_BackingField;
      private readonly dom.SVGAnimatedNumber _kernelUnitLengthY_BackingField;
      private readonly dom.SVGAnimatedNumber _specularConstant_BackingField;
      private readonly dom.SVGAnimatedNumber _specularExponent_BackingField;
      private readonly dom.SVGAnimatedNumber _surfaceScale_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feSpecularLighting\")")]
      public extern SVGFESpecularLightingElement();

      public static dom.SVGFESpecularLightingElement prototype
      {
        get
        {
          return dom.SVGFESpecularLightingElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFESpecularLightingElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber kernelUnitLengthX
      {
        get
        {
          return this._kernelUnitLengthX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber kernelUnitLengthY
      {
        get
        {
          return this._kernelUnitLengthY_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber specularConstant
      {
        get
        {
          return this._specularConstant_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber specularExponent
      {
        get
        {
          return this._specularExponent_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber surfaceScale
      {
        get
        {
          return this._surfaceScale_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFESpecularLightingElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFESpecularLightingElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFESpecularLightingElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFESpecularLightingElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFESpecularLightingElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFESpecularLightingElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFESpecularLightingElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFESpecularLightingElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFESpotLightElement : dom.SVGElement
    {
      private static dom.SVGFESpotLightElement _prototype_BackingField;
      private readonly dom.SVGAnimatedNumber _limitingConeAngle_BackingField;
      private readonly dom.SVGAnimatedNumber _pointsAtX_BackingField;
      private readonly dom.SVGAnimatedNumber _pointsAtY_BackingField;
      private readonly dom.SVGAnimatedNumber _pointsAtZ_BackingField;
      private readonly dom.SVGAnimatedNumber _specularExponent_BackingField;
      private readonly dom.SVGAnimatedNumber _x_BackingField;
      private readonly dom.SVGAnimatedNumber _y_BackingField;
      private readonly dom.SVGAnimatedNumber _z_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feSpotLight\")")]
      public extern SVGFESpotLightElement();

      public static dom.SVGFESpotLightElement prototype
      {
        get
        {
          return dom.SVGFESpotLightElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFESpotLightElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedNumber limitingConeAngle
      {
        get
        {
          return this._limitingConeAngle_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber pointsAtX
      {
        get
        {
          return this._pointsAtX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber pointsAtY
      {
        get
        {
          return this._pointsAtY_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber pointsAtZ
      {
        get
        {
          return this._pointsAtZ_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber specularExponent
      {
        get
        {
          return this._specularExponent_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber z
      {
        get
        {
          return this._z_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFESpotLightElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFESpotLightElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFESpotLightElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFESpotLightElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFESpotLightElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFESpotLightElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFESpotLightElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFESpotLightElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFETileElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFETileElement _prototype_BackingField;
      private readonly dom.SVGAnimatedString _in1_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feTile\")")]
      public extern SVGFETileElement();

      public static dom.SVGFETileElement prototype
      {
        get
        {
          return dom.SVGFETileElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFETileElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedString in1
      {
        get
        {
          return this._in1_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFETileElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFETileElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFETileElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFETileElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFETileElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFETileElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFETileElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFETileElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFETurbulenceElement : dom.SVGElement, dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private static dom.SVGFETurbulenceElement _prototype_BackingField;
      private static readonly double _SVG_STITCHTYPE_NOSTITCH_Static_BackingField;
      private static readonly double _SVG_STITCHTYPE_STITCH_Static_BackingField;
      private static readonly double _SVG_STITCHTYPE_UNKNOWN_Static_BackingField;
      private static readonly double _SVG_TURBULENCE_TYPE_FRACTALNOISE_Static_BackingField;
      private static readonly double _SVG_TURBULENCE_TYPE_TURBULENCE_Static_BackingField;
      private static readonly double _SVG_TURBULENCE_TYPE_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedNumber _baseFrequencyX_BackingField;
      private readonly dom.SVGAnimatedNumber _baseFrequencyY_BackingField;
      private readonly dom.SVGAnimatedInteger _numOctaves_BackingField;
      private readonly dom.SVGAnimatedNumber _seed_BackingField;
      private readonly dom.SVGAnimatedEnumeration _stitchTiles_BackingField;
      private readonly dom.SVGAnimatedEnumeration _type_BackingField;
      private readonly double _SVG_STITCHTYPE_NOSTITCH_BackingField;
      private readonly double _SVG_STITCHTYPE_STITCH_BackingField;
      private readonly double _SVG_STITCHTYPE_UNKNOWN_BackingField;
      private readonly double _SVG_TURBULENCE_TYPE_FRACTALNOISE_BackingField;
      private readonly double _SVG_TURBULENCE_TYPE_TURBULENCE_BackingField;
      private readonly double _SVG_TURBULENCE_TYPE_UNKNOWN_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"feTurbulence\")")]
      public extern SVGFETurbulenceElement();

      public static dom.SVGFETurbulenceElement prototype
      {
        get
        {
          return dom.SVGFETurbulenceElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFETurbulenceElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_STITCHTYPE_NOSTITCH")]
      public static double SVG_STITCHTYPE_NOSTITCH_Static
      {
        get
        {
          return dom.SVGFETurbulenceElement._SVG_STITCHTYPE_NOSTITCH_Static_BackingField;
        }
      }

      [Name("SVG_STITCHTYPE_STITCH")]
      public static double SVG_STITCHTYPE_STITCH_Static
      {
        get
        {
          return dom.SVGFETurbulenceElement._SVG_STITCHTYPE_STITCH_Static_BackingField;
        }
      }

      [Name("SVG_STITCHTYPE_UNKNOWN")]
      public static double SVG_STITCHTYPE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGFETurbulenceElement._SVG_STITCHTYPE_UNKNOWN_Static_BackingField;
        }
      }

      [Name("SVG_TURBULENCE_TYPE_FRACTALNOISE")]
      public static double SVG_TURBULENCE_TYPE_FRACTALNOISE_Static
      {
        get
        {
          return dom.SVGFETurbulenceElement._SVG_TURBULENCE_TYPE_FRACTALNOISE_Static_BackingField;
        }
      }

      [Name("SVG_TURBULENCE_TYPE_TURBULENCE")]
      public static double SVG_TURBULENCE_TYPE_TURBULENCE_Static
      {
        get
        {
          return dom.SVGFETurbulenceElement._SVG_TURBULENCE_TYPE_TURBULENCE_Static_BackingField;
        }
      }

      [Name("SVG_TURBULENCE_TYPE_UNKNOWN")]
      public static double SVG_TURBULENCE_TYPE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGFETurbulenceElement._SVG_TURBULENCE_TYPE_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber baseFrequencyX
      {
        get
        {
          return this._baseFrequencyX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber baseFrequencyY
      {
        get
        {
          return this._baseFrequencyY_BackingField;
        }
      }

      public virtual dom.SVGAnimatedInteger numOctaves
      {
        get
        {
          return this._numOctaves_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumber seed
      {
        get
        {
          return this._seed_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration stitchTiles
      {
        get
        {
          return this._stitchTiles_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual double SVG_STITCHTYPE_NOSTITCH
      {
        get
        {
          return this._SVG_STITCHTYPE_NOSTITCH_BackingField;
        }
      }

      public virtual double SVG_STITCHTYPE_STITCH
      {
        get
        {
          return this._SVG_STITCHTYPE_STITCH_BackingField;
        }
      }

      public virtual double SVG_STITCHTYPE_UNKNOWN
      {
        get
        {
          return this._SVG_STITCHTYPE_UNKNOWN_BackingField;
        }
      }

      public virtual double SVG_TURBULENCE_TYPE_FRACTALNOISE
      {
        get
        {
          return this._SVG_TURBULENCE_TYPE_FRACTALNOISE_BackingField;
        }
      }

      public virtual double SVG_TURBULENCE_TYPE_TURBULENCE
      {
        get
        {
          return this._SVG_TURBULENCE_TYPE_TURBULENCE_BackingField;
        }
      }

      public virtual double SVG_TURBULENCE_TYPE_UNKNOWN
      {
        get
        {
          return this._SVG_TURBULENCE_TYPE_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFETurbulenceElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFETurbulenceElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFETurbulenceElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFETurbulenceElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFETurbulenceElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFETurbulenceElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFETurbulenceElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFETurbulenceElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGFilterElement : dom.SVGElement, dom.SVGUnitTypes.Interface, IObject, dom.SVGURIReference.Interface
    {
      private static dom.SVGFilterElement _prototype_BackingField;
      private readonly dom.SVGAnimatedInteger _filterResX_BackingField;
      private readonly dom.SVGAnimatedInteger _filterResY_BackingField;
      private readonly dom.SVGAnimatedEnumeration _filterUnits_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedEnumeration _primitiveUnits_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_UNKNOWN_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;
      private readonly dom.SVGAnimatedString _href_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"filter\")")]
      public extern SVGFilterElement();

      public static dom.SVGFilterElement prototype
      {
        get
        {
          return dom.SVGFilterElement._prototype_BackingField;
        }
        set
        {
          dom.SVGFilterElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedInteger filterResX
      {
        get
        {
          return this._filterResX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedInteger filterResY
      {
        get
        {
          return this._filterResY_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration filterUnits
      {
        get
        {
          return this._filterUnits_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration primitiveUnits
      {
        get
        {
          return this._primitiveUnits_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      public virtual extern void setFilterRes(double filterResX, double filterResY);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFilterElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFilterElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFilterElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGFilterElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFilterElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFilterElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFilterElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGFilterElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual ushort SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
      {
        get
        {
          return this._SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_UNKNOWN
      {
        get
        {
          return this._SVG_UNIT_TYPE_UNKNOWN_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_USERSPACEONUSE
      {
        get
        {
          return this._SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class SVGFilterPrimitiveStandardAttributes : dom.SVGFilterPrimitiveStandardAttributes.Interface, IObject
    {
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedString _result_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      public dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public dom.SVGAnimatedString result
      {
        get
        {
          return this._result_BackingField;
        }
      }

      public dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.SVGAnimatedLength height { get; }

        dom.SVGAnimatedString result { get; }

        dom.SVGAnimatedLength width { get; }

        dom.SVGAnimatedLength x { get; }

        dom.SVGAnimatedLength y { get; }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class SVGFitToViewBox : dom.SVGFitToViewBox.Interface, IObject
    {
      private readonly dom.SVGAnimatedPreserveAspectRatio _preserveAspectRatio_BackingField;
      private readonly dom.SVGAnimatedRect _viewBox_BackingField;

      public dom.SVGAnimatedPreserveAspectRatio preserveAspectRatio
      {
        get
        {
          return this._preserveAspectRatio_BackingField;
        }
      }

      public dom.SVGAnimatedRect viewBox
      {
        get
        {
          return this._viewBox_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.SVGAnimatedPreserveAspectRatio preserveAspectRatio { get; }

        dom.SVGAnimatedRect viewBox { get; }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGForeignObjectElement : dom.SVGGraphicsElement
    {
      private static dom.SVGForeignObjectElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"foreignObject\")")]
      public extern SVGForeignObjectElement();

      public static dom.SVGForeignObjectElement prototype
      {
        get
        {
          return dom.SVGForeignObjectElement._prototype_BackingField;
        }
        set
        {
          dom.SVGForeignObjectElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGForeignObjectElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGForeignObjectElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGForeignObjectElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGForeignObjectElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGForeignObjectElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGForeignObjectElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGForeignObjectElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGForeignObjectElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGGElement : dom.SVGGraphicsElement
    {
      private static dom.SVGGElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")")]
      public extern SVGGElement();

      public static dom.SVGGElement prototype
      {
        get
        {
          return dom.SVGGElement._prototype_BackingField;
        }
        set
        {
          dom.SVGGElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGGradientElement : dom.SVGElement, dom.SVGUnitTypes.Interface, IObject, dom.SVGURIReference.Interface
    {
      private static dom.SVGGradientElement _prototype_BackingField;
      private static readonly ushort _SVG_SPREADMETHOD_PAD_Static_BackingField;
      private static readonly ushort _SVG_SPREADMETHOD_REFLECT_Static_BackingField;
      private static readonly ushort _SVG_SPREADMETHOD_REPEAT_Static_BackingField;
      private static readonly ushort _SVG_SPREADMETHOD_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedTransformList _gradientTransform_BackingField;
      private readonly dom.SVGAnimatedEnumeration _gradientUnits_BackingField;
      private readonly dom.SVGAnimatedEnumeration _spreadMethod_BackingField;
      private readonly ushort _SVG_SPREADMETHOD_PAD_BackingField;
      private readonly ushort _SVG_SPREADMETHOD_REFLECT_BackingField;
      private readonly ushort _SVG_SPREADMETHOD_REPEAT_BackingField;
      private readonly ushort _SVG_SPREADMETHOD_UNKNOWN_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_UNKNOWN_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;
      private readonly dom.SVGAnimatedString _href_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"gradient\")")]
      public extern SVGGradientElement();

      public static dom.SVGGradientElement prototype
      {
        get
        {
          return dom.SVGGradientElement._prototype_BackingField;
        }
        set
        {
          dom.SVGGradientElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_SPREADMETHOD_PAD")]
      public static ushort SVG_SPREADMETHOD_PAD_Static
      {
        get
        {
          return dom.SVGGradientElement._SVG_SPREADMETHOD_PAD_Static_BackingField;
        }
      }

      [Name("SVG_SPREADMETHOD_REFLECT")]
      public static ushort SVG_SPREADMETHOD_REFLECT_Static
      {
        get
        {
          return dom.SVGGradientElement._SVG_SPREADMETHOD_REFLECT_Static_BackingField;
        }
      }

      [Name("SVG_SPREADMETHOD_REPEAT")]
      public static ushort SVG_SPREADMETHOD_REPEAT_Static
      {
        get
        {
          return dom.SVGGradientElement._SVG_SPREADMETHOD_REPEAT_Static_BackingField;
        }
      }

      [Name("SVG_SPREADMETHOD_UNKNOWN")]
      public static ushort SVG_SPREADMETHOD_UNKNOWN_Static
      {
        get
        {
          return dom.SVGGradientElement._SVG_SPREADMETHOD_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedTransformList gradientTransform
      {
        get
        {
          return this._gradientTransform_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration gradientUnits
      {
        get
        {
          return this._gradientUnits_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration spreadMethod
      {
        get
        {
          return this._spreadMethod_BackingField;
        }
      }

      public virtual ushort SVG_SPREADMETHOD_PAD
      {
        get
        {
          return this._SVG_SPREADMETHOD_PAD_BackingField;
        }
      }

      public virtual ushort SVG_SPREADMETHOD_REFLECT
      {
        get
        {
          return this._SVG_SPREADMETHOD_REFLECT_BackingField;
        }
      }

      public virtual ushort SVG_SPREADMETHOD_REPEAT
      {
        get
        {
          return this._SVG_SPREADMETHOD_REPEAT_BackingField;
        }
      }

      public virtual ushort SVG_SPREADMETHOD_UNKNOWN
      {
        get
        {
          return this._SVG_SPREADMETHOD_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGradientElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGradientElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGradientElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGradientElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGradientElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGradientElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGradientElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGradientElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual ushort SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
      {
        get
        {
          return this._SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_UNKNOWN
      {
        get
        {
          return this._SVG_UNIT_TYPE_UNKNOWN_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_USERSPACEONUSE
      {
        get
        {
          return this._SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGGraphicsElement : dom.SVGElement, dom.SVGTests.Interface, IObject
    {
      private static dom.SVGGraphicsElement _prototype_BackingField;
      private readonly dom.SVGElement _farthestViewportElement_BackingField;
      private readonly dom.SVGElement _nearestViewportElement_BackingField;
      private readonly dom.SVGAnimatedTransformList _transform_BackingField;
      private readonly dom.SVGStringList _requiredExtensions_BackingField;
      private readonly dom.SVGStringList _requiredFeatures_BackingField;
      private readonly dom.SVGStringList _systemLanguage_BackingField;

      public static dom.SVGGraphicsElement prototype
      {
        get
        {
          return dom.SVGGraphicsElement._prototype_BackingField;
        }
        set
        {
          dom.SVGGraphicsElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGElement farthestViewportElement
      {
        get
        {
          return this._farthestViewportElement_BackingField;
        }
      }

      public virtual dom.SVGElement nearestViewportElement
      {
        get
        {
          return this._nearestViewportElement_BackingField;
        }
      }

      public virtual dom.SVGAnimatedTransformList transform
      {
        get
        {
          return this._transform_BackingField;
        }
      }

      public virtual extern dom.SVGRect getBBox();

      public virtual extern dom.SVGMatrix getCTM();

      public virtual extern dom.SVGMatrix getScreenCTM();

      public virtual extern dom.SVGMatrix getTransformToElement(dom.SVGElement element);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGraphicsElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGraphicsElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGraphicsElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGGraphicsElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGraphicsElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGraphicsElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGraphicsElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGGraphicsElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGStringList requiredExtensions
      {
        get
        {
          return this._requiredExtensions_BackingField;
        }
      }

      public virtual dom.SVGStringList requiredFeatures
      {
        get
        {
          return this._requiredFeatures_BackingField;
        }
      }

      public virtual dom.SVGStringList systemLanguage
      {
        get
        {
          return this._systemLanguage_BackingField;
        }
      }

      public virtual extern bool hasExtension(string extension);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGImageElement : dom.SVGGraphicsElement, dom.SVGURIReference.Interface, IObject
    {
      private static dom.SVGImageElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedPreserveAspectRatio _preserveAspectRatio_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;
      private readonly dom.SVGAnimatedString _href_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"image\")")]
      public extern SVGImageElement();

      public static dom.SVGImageElement prototype
      {
        get
        {
          return dom.SVGImageElement._prototype_BackingField;
        }
        set
        {
          dom.SVGImageElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedPreserveAspectRatio preserveAspectRatio
      {
        get
        {
          return this._preserveAspectRatio_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGImageElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGImageElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGImageElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGImageElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGImageElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGImageElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGImageElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGImageElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGLength : IObject
    {
      private static dom.SVGLength _prototype_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_CM_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_EMS_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_EXS_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_IN_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_MM_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_NUMBER_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_PC_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_PERCENTAGE_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_PT_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_PX_Static_BackingField;
      private static readonly ushort _SVG_LENGTHTYPE_UNKNOWN_Static_BackingField;
      private readonly ushort _unitType_BackingField;
      private float _value_BackingField;
      private string _valueAsString_BackingField;
      private float _valueInSpecifiedUnits_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_CM_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_EMS_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_EXS_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_IN_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_MM_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_NUMBER_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_PC_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_PERCENTAGE_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_PT_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_PX_BackingField;
      private readonly ushort _SVG_LENGTHTYPE_UNKNOWN_BackingField;

      public static dom.SVGLength prototype
      {
        get
        {
          return dom.SVGLength._prototype_BackingField;
        }
        set
        {
          dom.SVGLength._prototype_BackingField = value;
        }
      }

      [Name("SVG_LENGTHTYPE_CM")]
      public static ushort SVG_LENGTHTYPE_CM_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_CM_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_EMS")]
      public static ushort SVG_LENGTHTYPE_EMS_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_EMS_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_EXS")]
      public static ushort SVG_LENGTHTYPE_EXS_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_EXS_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_IN")]
      public static ushort SVG_LENGTHTYPE_IN_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_IN_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_MM")]
      public static ushort SVG_LENGTHTYPE_MM_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_MM_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_NUMBER")]
      public static ushort SVG_LENGTHTYPE_NUMBER_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_NUMBER_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_PC")]
      public static ushort SVG_LENGTHTYPE_PC_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_PC_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_PERCENTAGE")]
      public static ushort SVG_LENGTHTYPE_PERCENTAGE_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_PERCENTAGE_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_PT")]
      public static ushort SVG_LENGTHTYPE_PT_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_PT_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_PX")]
      public static ushort SVG_LENGTHTYPE_PX_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_PX_Static_BackingField;
        }
      }

      [Name("SVG_LENGTHTYPE_UNKNOWN")]
      public static ushort SVG_LENGTHTYPE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGLength._SVG_LENGTHTYPE_UNKNOWN_Static_BackingField;
        }
      }

      public virtual ushort unitType
      {
        get
        {
          return this._unitType_BackingField;
        }
      }

      public virtual float value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }

      public virtual string valueAsString
      {
        get
        {
          return this._valueAsString_BackingField;
        }
        set
        {
          this._valueAsString_BackingField = value;
        }
      }

      public virtual float valueInSpecifiedUnits
      {
        get
        {
          return this._valueInSpecifiedUnits_BackingField;
        }
        set
        {
          this._valueInSpecifiedUnits_BackingField = value;
        }
      }

      public virtual extern void convertToSpecifiedUnits(ushort unitType);

      public virtual extern void newValueSpecifiedUnits(
        ushort unitType,
        float valueInSpecifiedUnits);

      public virtual ushort SVG_LENGTHTYPE_CM
      {
        get
        {
          return this._SVG_LENGTHTYPE_CM_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_EMS
      {
        get
        {
          return this._SVG_LENGTHTYPE_EMS_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_EXS
      {
        get
        {
          return this._SVG_LENGTHTYPE_EXS_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_IN
      {
        get
        {
          return this._SVG_LENGTHTYPE_IN_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_MM
      {
        get
        {
          return this._SVG_LENGTHTYPE_MM_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_NUMBER
      {
        get
        {
          return this._SVG_LENGTHTYPE_NUMBER_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_PC
      {
        get
        {
          return this._SVG_LENGTHTYPE_PC_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_PERCENTAGE
      {
        get
        {
          return this._SVG_LENGTHTYPE_PERCENTAGE_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_PT
      {
        get
        {
          return this._SVG_LENGTHTYPE_PT_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_PX
      {
        get
        {
          return this._SVG_LENGTHTYPE_PX_BackingField;
        }
      }

      public virtual ushort SVG_LENGTHTYPE_UNKNOWN
      {
        get
        {
          return this._SVG_LENGTHTYPE_UNKNOWN_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGLengthList : IEnumerable<dom.SVGLength>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.SVGLengthList _prototype_BackingField;
      private readonly uint _numberOfItems_BackingField;

      public static dom.SVGLengthList prototype
      {
        get
        {
          return dom.SVGLengthList._prototype_BackingField;
        }
        set
        {
          dom.SVGLengthList._prototype_BackingField = value;
        }
      }

      public virtual uint numberOfItems
      {
        get
        {
          return this._numberOfItems_BackingField;
        }
      }

      public virtual extern dom.SVGLength appendItem(dom.SVGLength newItem);

      public virtual extern void clear();

      public virtual extern dom.SVGLength getItem(uint index);

      public virtual extern dom.SVGLength initialize(dom.SVGLength newItem);

      public virtual extern dom.SVGLength insertItemBefore(dom.SVGLength newItem, uint index);

      public virtual extern dom.SVGLength removeItem(uint index);

      public virtual extern dom.SVGLength replaceItem(dom.SVGLength newItem, uint index);

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.SVGLength> IEnumerable<dom.SVGLength>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGLineElement : dom.SVGGraphicsElement
    {
      private static dom.SVGLineElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _x1_BackingField;
      private readonly dom.SVGAnimatedLength _x2_BackingField;
      private readonly dom.SVGAnimatedLength _y1_BackingField;
      private readonly dom.SVGAnimatedLength _y2_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\")")]
      public extern SVGLineElement();

      public static dom.SVGLineElement prototype
      {
        get
        {
          return dom.SVGLineElement._prototype_BackingField;
        }
        set
        {
          dom.SVGLineElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength x1
      {
        get
        {
          return this._x1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x2
      {
        get
        {
          return this._x2_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y1
      {
        get
        {
          return this._y1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y2
      {
        get
        {
          return this._y2_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGLineElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGLineElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGLineElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGLineElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGLineElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGLineElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGLineElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGLineElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGLinearGradientElement : dom.SVGGradientElement
    {
      private static dom.SVGLinearGradientElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _x1_BackingField;
      private readonly dom.SVGAnimatedLength _x2_BackingField;
      private readonly dom.SVGAnimatedLength _y1_BackingField;
      private readonly dom.SVGAnimatedLength _y2_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"linearGradient\")")]
      public extern SVGLinearGradientElement();

      public static dom.SVGLinearGradientElement prototype
      {
        get
        {
          return dom.SVGLinearGradientElement._prototype_BackingField;
        }
        set
        {
          dom.SVGLinearGradientElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength x1
      {
        get
        {
          return this._x1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x2
      {
        get
        {
          return this._x2_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y1
      {
        get
        {
          return this._y1_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y2
      {
        get
        {
          return this._y2_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGLinearGradientElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGLinearGradientElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGLinearGradientElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGLinearGradientElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGLinearGradientElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGLinearGradientElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGLinearGradientElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGLinearGradientElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGMarkerElement : dom.SVGElement, dom.SVGFitToViewBox.Interface, IObject
    {
      private static dom.SVGMarkerElement _prototype_BackingField;
      private static readonly ushort _SVG_MARKERUNITS_STROKEWIDTH_Static_BackingField;
      private static readonly ushort _SVG_MARKERUNITS_UNKNOWN_Static_BackingField;
      private static readonly ushort _SVG_MARKERUNITS_USERSPACEONUSE_Static_BackingField;
      private static readonly ushort _SVG_MARKER_ORIENT_ANGLE_Static_BackingField;
      private static readonly ushort _SVG_MARKER_ORIENT_AUTO_Static_BackingField;
      private static readonly ushort _SVG_MARKER_ORIENT_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedLength _markerHeight_BackingField;
      private readonly dom.SVGAnimatedEnumeration _markerUnits_BackingField;
      private readonly dom.SVGAnimatedLength _markerWidth_BackingField;
      private readonly dom.SVGAnimatedAngle _orientAngle_BackingField;
      private readonly dom.SVGAnimatedEnumeration _orientType_BackingField;
      private readonly dom.SVGAnimatedLength _refX_BackingField;
      private readonly dom.SVGAnimatedLength _refY_BackingField;
      private readonly ushort _SVG_MARKERUNITS_STROKEWIDTH_BackingField;
      private readonly ushort _SVG_MARKERUNITS_UNKNOWN_BackingField;
      private readonly ushort _SVG_MARKERUNITS_USERSPACEONUSE_BackingField;
      private readonly ushort _SVG_MARKER_ORIENT_ANGLE_BackingField;
      private readonly ushort _SVG_MARKER_ORIENT_AUTO_BackingField;
      private readonly ushort _SVG_MARKER_ORIENT_UNKNOWN_BackingField;
      private readonly dom.SVGAnimatedPreserveAspectRatio _preserveAspectRatio_BackingField;
      private readonly dom.SVGAnimatedRect _viewBox_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"marker\")")]
      public extern SVGMarkerElement();

      public static dom.SVGMarkerElement prototype
      {
        get
        {
          return dom.SVGMarkerElement._prototype_BackingField;
        }
        set
        {
          dom.SVGMarkerElement._prototype_BackingField = value;
        }
      }

      [Name("SVG_MARKERUNITS_STROKEWIDTH")]
      public static ushort SVG_MARKERUNITS_STROKEWIDTH_Static
      {
        get
        {
          return dom.SVGMarkerElement._SVG_MARKERUNITS_STROKEWIDTH_Static_BackingField;
        }
      }

      [Name("SVG_MARKERUNITS_UNKNOWN")]
      public static ushort SVG_MARKERUNITS_UNKNOWN_Static
      {
        get
        {
          return dom.SVGMarkerElement._SVG_MARKERUNITS_UNKNOWN_Static_BackingField;
        }
      }

      [Name("SVG_MARKERUNITS_USERSPACEONUSE")]
      public static ushort SVG_MARKERUNITS_USERSPACEONUSE_Static
      {
        get
        {
          return dom.SVGMarkerElement._SVG_MARKERUNITS_USERSPACEONUSE_Static_BackingField;
        }
      }

      [Name("SVG_MARKER_ORIENT_ANGLE")]
      public static ushort SVG_MARKER_ORIENT_ANGLE_Static
      {
        get
        {
          return dom.SVGMarkerElement._SVG_MARKER_ORIENT_ANGLE_Static_BackingField;
        }
      }

      [Name("SVG_MARKER_ORIENT_AUTO")]
      public static ushort SVG_MARKER_ORIENT_AUTO_Static
      {
        get
        {
          return dom.SVGMarkerElement._SVG_MARKER_ORIENT_AUTO_Static_BackingField;
        }
      }

      [Name("SVG_MARKER_ORIENT_UNKNOWN")]
      public static ushort SVG_MARKER_ORIENT_UNKNOWN_Static
      {
        get
        {
          return dom.SVGMarkerElement._SVG_MARKER_ORIENT_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength markerHeight
      {
        get
        {
          return this._markerHeight_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration markerUnits
      {
        get
        {
          return this._markerUnits_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength markerWidth
      {
        get
        {
          return this._markerWidth_BackingField;
        }
      }

      public virtual dom.SVGAnimatedAngle orientAngle
      {
        get
        {
          return this._orientAngle_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration orientType
      {
        get
        {
          return this._orientType_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength refX
      {
        get
        {
          return this._refX_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength refY
      {
        get
        {
          return this._refY_BackingField;
        }
      }

      public virtual extern void setOrientToAngle(dom.SVGAngle angle);

      public virtual extern void setOrientToAuto();

      public virtual ushort SVG_MARKERUNITS_STROKEWIDTH
      {
        get
        {
          return this._SVG_MARKERUNITS_STROKEWIDTH_BackingField;
        }
      }

      public virtual ushort SVG_MARKERUNITS_UNKNOWN
      {
        get
        {
          return this._SVG_MARKERUNITS_UNKNOWN_BackingField;
        }
      }

      public virtual ushort SVG_MARKERUNITS_USERSPACEONUSE
      {
        get
        {
          return this._SVG_MARKERUNITS_USERSPACEONUSE_BackingField;
        }
      }

      public virtual ushort SVG_MARKER_ORIENT_ANGLE
      {
        get
        {
          return this._SVG_MARKER_ORIENT_ANGLE_BackingField;
        }
      }

      public virtual ushort SVG_MARKER_ORIENT_AUTO
      {
        get
        {
          return this._SVG_MARKER_ORIENT_AUTO_BackingField;
        }
      }

      public virtual ushort SVG_MARKER_ORIENT_UNKNOWN
      {
        get
        {
          return this._SVG_MARKER_ORIENT_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMarkerElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMarkerElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMarkerElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMarkerElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMarkerElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMarkerElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMarkerElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMarkerElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedPreserveAspectRatio preserveAspectRatio
      {
        get
        {
          return this._preserveAspectRatio_BackingField;
        }
      }

      public virtual dom.SVGAnimatedRect viewBox
      {
        get
        {
          return this._viewBox_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGMaskElement : dom.SVGElement, dom.SVGTests.Interface, IObject, dom.SVGUnitTypes.Interface
    {
      private static dom.SVGMaskElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedEnumeration _maskContentUnits_BackingField;
      private readonly dom.SVGAnimatedEnumeration _maskUnits_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;
      private readonly dom.SVGStringList _requiredExtensions_BackingField;
      private readonly dom.SVGStringList _requiredFeatures_BackingField;
      private readonly dom.SVGStringList _systemLanguage_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_UNKNOWN_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"mask\")")]
      public extern SVGMaskElement();

      public static dom.SVGMaskElement prototype
      {
        get
        {
          return dom.SVGMaskElement._prototype_BackingField;
        }
        set
        {
          dom.SVGMaskElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration maskContentUnits
      {
        get
        {
          return this._maskContentUnits_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration maskUnits
      {
        get
        {
          return this._maskUnits_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMaskElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMaskElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMaskElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMaskElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMaskElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMaskElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMaskElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMaskElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGStringList requiredExtensions
      {
        get
        {
          return this._requiredExtensions_BackingField;
        }
      }

      public virtual dom.SVGStringList requiredFeatures
      {
        get
        {
          return this._requiredFeatures_BackingField;
        }
      }

      public virtual dom.SVGStringList systemLanguage
      {
        get
        {
          return this._systemLanguage_BackingField;
        }
      }

      public virtual extern bool hasExtension(string extension);

      public virtual ushort SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
      {
        get
        {
          return this._SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_UNKNOWN
      {
        get
        {
          return this._SVG_UNIT_TYPE_UNKNOWN_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_USERSPACEONUSE
      {
        get
        {
          return this._SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGMatrix : IObject
    {
      private static dom.SVGMatrix _prototype_BackingField;
      private double _a_BackingField;
      private double _b_BackingField;
      private double _c_BackingField;
      private double _d_BackingField;
      private double _e_BackingField;
      private double _f_BackingField;

      public static dom.SVGMatrix prototype
      {
        get
        {
          return dom.SVGMatrix._prototype_BackingField;
        }
        set
        {
          dom.SVGMatrix._prototype_BackingField = value;
        }
      }

      public virtual double a
      {
        get
        {
          return this._a_BackingField;
        }
        set
        {
          this._a_BackingField = value;
        }
      }

      public virtual double b
      {
        get
        {
          return this._b_BackingField;
        }
        set
        {
          this._b_BackingField = value;
        }
      }

      public virtual double c
      {
        get
        {
          return this._c_BackingField;
        }
        set
        {
          this._c_BackingField = value;
        }
      }

      public virtual double d
      {
        get
        {
          return this._d_BackingField;
        }
        set
        {
          this._d_BackingField = value;
        }
      }

      public virtual double e
      {
        get
        {
          return this._e_BackingField;
        }
        set
        {
          this._e_BackingField = value;
        }
      }

      public virtual double f
      {
        get
        {
          return this._f_BackingField;
        }
        set
        {
          this._f_BackingField = value;
        }
      }

      public virtual extern dom.SVGMatrix flipX();

      public virtual extern dom.SVGMatrix flipY();

      public virtual extern dom.SVGMatrix inverse();

      public virtual extern dom.SVGMatrix multiply(dom.SVGMatrix secondMatrix);

      public virtual extern dom.SVGMatrix rotate(double angle);

      public virtual extern dom.SVGMatrix rotateFromVector(double x, double y);

      public virtual extern dom.SVGMatrix scale(double scaleFactor);

      public virtual extern dom.SVGMatrix scaleNonUniform(
        double scaleFactorX,
        double scaleFactorY);

      public virtual extern dom.SVGMatrix skewX(double angle);

      public virtual extern dom.SVGMatrix skewY(double angle);

      public virtual extern dom.SVGMatrix translate(double x, double y);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGMetadataElement : dom.SVGElement
    {
      private static dom.SVGMetadataElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"metadata\")")]
      public extern SVGMetadataElement();

      public static dom.SVGMetadataElement prototype
      {
        get
        {
          return dom.SVGMetadataElement._prototype_BackingField;
        }
        set
        {
          dom.SVGMetadataElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMetadataElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMetadataElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMetadataElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGMetadataElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMetadataElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMetadataElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMetadataElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGMetadataElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGNumber : IObject
    {
      private static dom.SVGNumber _prototype_BackingField;
      private float _value_BackingField;

      public static dom.SVGNumber prototype
      {
        get
        {
          return dom.SVGNumber._prototype_BackingField;
        }
        set
        {
          dom.SVGNumber._prototype_BackingField = value;
        }
      }

      public virtual float value
      {
        get
        {
          return this._value_BackingField;
        }
        set
        {
          this._value_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGNumberList : IEnumerable<dom.SVGNumber>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.SVGNumberList _prototype_BackingField;
      private readonly uint _numberOfItems_BackingField;

      public static dom.SVGNumberList prototype
      {
        get
        {
          return dom.SVGNumberList._prototype_BackingField;
        }
        set
        {
          dom.SVGNumberList._prototype_BackingField = value;
        }
      }

      public virtual uint numberOfItems
      {
        get
        {
          return this._numberOfItems_BackingField;
        }
      }

      public virtual extern dom.SVGNumber appendItem(dom.SVGNumber newItem);

      public virtual extern void clear();

      public virtual extern dom.SVGNumber getItem(uint index);

      public virtual extern dom.SVGNumber initialize(dom.SVGNumber newItem);

      public virtual extern dom.SVGNumber insertItemBefore(dom.SVGNumber newItem, uint index);

      public virtual extern dom.SVGNumber removeItem(uint index);

      public virtual extern dom.SVGNumber replaceItem(dom.SVGNumber newItem, uint index);

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.SVGNumber> IEnumerable<dom.SVGNumber>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathElement : dom.SVGGraphicsElement
    {
      private static dom.SVGPathElement _prototype_BackingField;
      private readonly dom.SVGPathSegList _pathSegList_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\")")]
      public extern SVGPathElement();

      public static dom.SVGPathElement prototype
      {
        get
        {
          return dom.SVGPathElement._prototype_BackingField;
        }
        set
        {
          dom.SVGPathElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGPathSegList pathSegList
      {
        get
        {
          return this._pathSegList_BackingField;
        }
      }

      public virtual extern dom.SVGPathSegArcAbs createSVGPathSegArcAbs(
        double x,
        double y,
        double r1,
        double r2,
        double angle,
        bool largeArcFlag,
        bool sweepFlag);

      public virtual extern dom.SVGPathSegArcRel createSVGPathSegArcRel(
        double x,
        double y,
        double r1,
        double r2,
        double angle,
        bool largeArcFlag,
        bool sweepFlag);

      public virtual extern dom.SVGPathSegClosePath createSVGPathSegClosePath();

      public virtual extern dom.SVGPathSegCurvetoCubicAbs createSVGPathSegCurvetoCubicAbs(
        double x,
        double y,
        double x1,
        double y1,
        double x2,
        double y2);

      public virtual extern dom.SVGPathSegCurvetoCubicRel createSVGPathSegCurvetoCubicRel(
        double x,
        double y,
        double x1,
        double y1,
        double x2,
        double y2);

      public virtual extern dom.SVGPathSegCurvetoCubicSmoothAbs createSVGPathSegCurvetoCubicSmoothAbs(
        double x,
        double y,
        double x2,
        double y2);

      public virtual extern dom.SVGPathSegCurvetoCubicSmoothRel createSVGPathSegCurvetoCubicSmoothRel(
        double x,
        double y,
        double x2,
        double y2);

      public virtual extern dom.SVGPathSegCurvetoQuadraticAbs createSVGPathSegCurvetoQuadraticAbs(
        double x,
        double y,
        double x1,
        double y1);

      public virtual extern dom.SVGPathSegCurvetoQuadraticRel createSVGPathSegCurvetoQuadraticRel(
        double x,
        double y,
        double x1,
        double y1);

      public virtual extern dom.SVGPathSegCurvetoQuadraticSmoothAbs createSVGPathSegCurvetoQuadraticSmoothAbs(
        double x,
        double y);

      public virtual extern dom.SVGPathSegCurvetoQuadraticSmoothRel createSVGPathSegCurvetoQuadraticSmoothRel(
        double x,
        double y);

      public virtual extern dom.SVGPathSegLinetoAbs createSVGPathSegLinetoAbs(double x, double y);

      public virtual extern dom.SVGPathSegLinetoHorizontalAbs createSVGPathSegLinetoHorizontalAbs(
        double x);

      public virtual extern dom.SVGPathSegLinetoHorizontalRel createSVGPathSegLinetoHorizontalRel(
        double x);

      public virtual extern dom.SVGPathSegLinetoRel createSVGPathSegLinetoRel(double x, double y);

      public virtual extern dom.SVGPathSegLinetoVerticalAbs createSVGPathSegLinetoVerticalAbs(
        double y);

      public virtual extern dom.SVGPathSegLinetoVerticalRel createSVGPathSegLinetoVerticalRel(
        double y);

      public virtual extern dom.SVGPathSegMovetoAbs createSVGPathSegMovetoAbs(double x, double y);

      public virtual extern dom.SVGPathSegMovetoRel createSVGPathSegMovetoRel(double x, double y);

      public virtual extern double getPathSegAtLength(double distance);

      public virtual extern dom.SVGPoint getPointAtLength(double distance);

      public virtual extern double getTotalLength();

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPathElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPathElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPathElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPathElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPathElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPathElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPathElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPathElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSeg : IObject
    {
      private static dom.SVGPathSeg _prototype_BackingField;
      private static readonly double _PATHSEG_ARC_ABS_Static_BackingField;
      private static readonly double _PATHSEG_ARC_REL_Static_BackingField;
      private static readonly double _PATHSEG_CLOSEPATH_Static_BackingField;
      private static readonly double _PATHSEG_CURVETO_CUBIC_ABS_Static_BackingField;
      private static readonly double _PATHSEG_CURVETO_CUBIC_REL_Static_BackingField;
      private static readonly double _PATHSEG_CURVETO_CUBIC_SMOOTH_ABS_Static_BackingField;
      private static readonly double _PATHSEG_CURVETO_CUBIC_SMOOTH_REL_Static_BackingField;
      private static readonly double _PATHSEG_CURVETO_QUADRATIC_ABS_Static_BackingField;
      private static readonly double _PATHSEG_CURVETO_QUADRATIC_REL_Static_BackingField;
      private static readonly double _PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS_Static_BackingField;
      private static readonly double _PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL_Static_BackingField;
      private static readonly double _PATHSEG_LINETO_ABS_Static_BackingField;
      private static readonly double _PATHSEG_LINETO_HORIZONTAL_ABS_Static_BackingField;
      private static readonly double _PATHSEG_LINETO_HORIZONTAL_REL_Static_BackingField;
      private static readonly double _PATHSEG_LINETO_REL_Static_BackingField;
      private static readonly double _PATHSEG_LINETO_VERTICAL_ABS_Static_BackingField;
      private static readonly double _PATHSEG_LINETO_VERTICAL_REL_Static_BackingField;
      private static readonly double _PATHSEG_MOVETO_ABS_Static_BackingField;
      private static readonly double _PATHSEG_MOVETO_REL_Static_BackingField;
      private static readonly double _PATHSEG_UNKNOWN_Static_BackingField;
      private readonly double _pathSegType_BackingField;
      private readonly string _pathSegTypeAsLetter_BackingField;
      private readonly double _PATHSEG_ARC_ABS_BackingField;
      private readonly double _PATHSEG_ARC_REL_BackingField;
      private readonly double _PATHSEG_CLOSEPATH_BackingField;
      private readonly double _PATHSEG_CURVETO_CUBIC_ABS_BackingField;
      private readonly double _PATHSEG_CURVETO_CUBIC_REL_BackingField;
      private readonly double _PATHSEG_CURVETO_CUBIC_SMOOTH_ABS_BackingField;
      private readonly double _PATHSEG_CURVETO_CUBIC_SMOOTH_REL_BackingField;
      private readonly double _PATHSEG_CURVETO_QUADRATIC_ABS_BackingField;
      private readonly double _PATHSEG_CURVETO_QUADRATIC_REL_BackingField;
      private readonly double _PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS_BackingField;
      private readonly double _PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL_BackingField;
      private readonly double _PATHSEG_LINETO_ABS_BackingField;
      private readonly double _PATHSEG_LINETO_HORIZONTAL_ABS_BackingField;
      private readonly double _PATHSEG_LINETO_HORIZONTAL_REL_BackingField;
      private readonly double _PATHSEG_LINETO_REL_BackingField;
      private readonly double _PATHSEG_LINETO_VERTICAL_ABS_BackingField;
      private readonly double _PATHSEG_LINETO_VERTICAL_REL_BackingField;
      private readonly double _PATHSEG_MOVETO_ABS_BackingField;
      private readonly double _PATHSEG_MOVETO_REL_BackingField;
      private readonly double _PATHSEG_UNKNOWN_BackingField;

      public static dom.SVGPathSeg prototype
      {
        get
        {
          return dom.SVGPathSeg._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSeg._prototype_BackingField = value;
        }
      }

      [Name("PATHSEG_ARC_ABS")]
      public static double PATHSEG_ARC_ABS_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_ARC_ABS_Static_BackingField;
        }
      }

      [Name("PATHSEG_ARC_REL")]
      public static double PATHSEG_ARC_REL_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_ARC_REL_Static_BackingField;
        }
      }

      [Name("PATHSEG_CLOSEPATH")]
      public static double PATHSEG_CLOSEPATH_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_CLOSEPATH_Static_BackingField;
        }
      }

      [Name("PATHSEG_CURVETO_CUBIC_ABS")]
      public static double PATHSEG_CURVETO_CUBIC_ABS_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_CURVETO_CUBIC_ABS_Static_BackingField;
        }
      }

      [Name("PATHSEG_CURVETO_CUBIC_REL")]
      public static double PATHSEG_CURVETO_CUBIC_REL_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_CURVETO_CUBIC_REL_Static_BackingField;
        }
      }

      [Name("PATHSEG_CURVETO_CUBIC_SMOOTH_ABS")]
      public static double PATHSEG_CURVETO_CUBIC_SMOOTH_ABS_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_CURVETO_CUBIC_SMOOTH_ABS_Static_BackingField;
        }
      }

      [Name("PATHSEG_CURVETO_CUBIC_SMOOTH_REL")]
      public static double PATHSEG_CURVETO_CUBIC_SMOOTH_REL_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_CURVETO_CUBIC_SMOOTH_REL_Static_BackingField;
        }
      }

      [Name("PATHSEG_CURVETO_QUADRATIC_ABS")]
      public static double PATHSEG_CURVETO_QUADRATIC_ABS_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_CURVETO_QUADRATIC_ABS_Static_BackingField;
        }
      }

      [Name("PATHSEG_CURVETO_QUADRATIC_REL")]
      public static double PATHSEG_CURVETO_QUADRATIC_REL_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_CURVETO_QUADRATIC_REL_Static_BackingField;
        }
      }

      [Name("PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS")]
      public static double PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS_Static_BackingField;
        }
      }

      [Name("PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL")]
      public static double PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL_Static_BackingField;
        }
      }

      [Name("PATHSEG_LINETO_ABS")]
      public static double PATHSEG_LINETO_ABS_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_LINETO_ABS_Static_BackingField;
        }
      }

      [Name("PATHSEG_LINETO_HORIZONTAL_ABS")]
      public static double PATHSEG_LINETO_HORIZONTAL_ABS_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_LINETO_HORIZONTAL_ABS_Static_BackingField;
        }
      }

      [Name("PATHSEG_LINETO_HORIZONTAL_REL")]
      public static double PATHSEG_LINETO_HORIZONTAL_REL_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_LINETO_HORIZONTAL_REL_Static_BackingField;
        }
      }

      [Name("PATHSEG_LINETO_REL")]
      public static double PATHSEG_LINETO_REL_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_LINETO_REL_Static_BackingField;
        }
      }

      [Name("PATHSEG_LINETO_VERTICAL_ABS")]
      public static double PATHSEG_LINETO_VERTICAL_ABS_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_LINETO_VERTICAL_ABS_Static_BackingField;
        }
      }

      [Name("PATHSEG_LINETO_VERTICAL_REL")]
      public static double PATHSEG_LINETO_VERTICAL_REL_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_LINETO_VERTICAL_REL_Static_BackingField;
        }
      }

      [Name("PATHSEG_MOVETO_ABS")]
      public static double PATHSEG_MOVETO_ABS_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_MOVETO_ABS_Static_BackingField;
        }
      }

      [Name("PATHSEG_MOVETO_REL")]
      public static double PATHSEG_MOVETO_REL_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_MOVETO_REL_Static_BackingField;
        }
      }

      [Name("PATHSEG_UNKNOWN")]
      public static double PATHSEG_UNKNOWN_Static
      {
        get
        {
          return dom.SVGPathSeg._PATHSEG_UNKNOWN_Static_BackingField;
        }
      }

      public virtual double pathSegType
      {
        get
        {
          return this._pathSegType_BackingField;
        }
      }

      public virtual string pathSegTypeAsLetter
      {
        get
        {
          return this._pathSegTypeAsLetter_BackingField;
        }
      }

      public virtual double PATHSEG_ARC_ABS
      {
        get
        {
          return this._PATHSEG_ARC_ABS_BackingField;
        }
      }

      public virtual double PATHSEG_ARC_REL
      {
        get
        {
          return this._PATHSEG_ARC_REL_BackingField;
        }
      }

      public virtual double PATHSEG_CLOSEPATH
      {
        get
        {
          return this._PATHSEG_CLOSEPATH_BackingField;
        }
      }

      public virtual double PATHSEG_CURVETO_CUBIC_ABS
      {
        get
        {
          return this._PATHSEG_CURVETO_CUBIC_ABS_BackingField;
        }
      }

      public virtual double PATHSEG_CURVETO_CUBIC_REL
      {
        get
        {
          return this._PATHSEG_CURVETO_CUBIC_REL_BackingField;
        }
      }

      public virtual double PATHSEG_CURVETO_CUBIC_SMOOTH_ABS
      {
        get
        {
          return this._PATHSEG_CURVETO_CUBIC_SMOOTH_ABS_BackingField;
        }
      }

      public virtual double PATHSEG_CURVETO_CUBIC_SMOOTH_REL
      {
        get
        {
          return this._PATHSEG_CURVETO_CUBIC_SMOOTH_REL_BackingField;
        }
      }

      public virtual double PATHSEG_CURVETO_QUADRATIC_ABS
      {
        get
        {
          return this._PATHSEG_CURVETO_QUADRATIC_ABS_BackingField;
        }
      }

      public virtual double PATHSEG_CURVETO_QUADRATIC_REL
      {
        get
        {
          return this._PATHSEG_CURVETO_QUADRATIC_REL_BackingField;
        }
      }

      public virtual double PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS
      {
        get
        {
          return this._PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS_BackingField;
        }
      }

      public virtual double PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL
      {
        get
        {
          return this._PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL_BackingField;
        }
      }

      public virtual double PATHSEG_LINETO_ABS
      {
        get
        {
          return this._PATHSEG_LINETO_ABS_BackingField;
        }
      }

      public virtual double PATHSEG_LINETO_HORIZONTAL_ABS
      {
        get
        {
          return this._PATHSEG_LINETO_HORIZONTAL_ABS_BackingField;
        }
      }

      public virtual double PATHSEG_LINETO_HORIZONTAL_REL
      {
        get
        {
          return this._PATHSEG_LINETO_HORIZONTAL_REL_BackingField;
        }
      }

      public virtual double PATHSEG_LINETO_REL
      {
        get
        {
          return this._PATHSEG_LINETO_REL_BackingField;
        }
      }

      public virtual double PATHSEG_LINETO_VERTICAL_ABS
      {
        get
        {
          return this._PATHSEG_LINETO_VERTICAL_ABS_BackingField;
        }
      }

      public virtual double PATHSEG_LINETO_VERTICAL_REL
      {
        get
        {
          return this._PATHSEG_LINETO_VERTICAL_REL_BackingField;
        }
      }

      public virtual double PATHSEG_MOVETO_ABS
      {
        get
        {
          return this._PATHSEG_MOVETO_ABS_BackingField;
        }
      }

      public virtual double PATHSEG_MOVETO_REL
      {
        get
        {
          return this._PATHSEG_MOVETO_REL_BackingField;
        }
      }

      public virtual double PATHSEG_UNKNOWN
      {
        get
        {
          return this._PATHSEG_UNKNOWN_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegArcAbs : dom.SVGPathSeg
    {
      private static dom.SVGPathSegArcAbs _prototype_BackingField;
      private double _angle_BackingField;
      private bool _largeArcFlag_BackingField;
      private double _r1_BackingField;
      private double _r2_BackingField;
      private bool _sweepFlag_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegArcAbs prototype
      {
        get
        {
          return dom.SVGPathSegArcAbs._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegArcAbs._prototype_BackingField = value;
        }
      }

      public virtual double angle
      {
        get
        {
          return this._angle_BackingField;
        }
        set
        {
          this._angle_BackingField = value;
        }
      }

      public virtual bool largeArcFlag
      {
        get
        {
          return this._largeArcFlag_BackingField;
        }
        set
        {
          this._largeArcFlag_BackingField = value;
        }
      }

      public virtual double r1
      {
        get
        {
          return this._r1_BackingField;
        }
        set
        {
          this._r1_BackingField = value;
        }
      }

      public virtual double r2
      {
        get
        {
          return this._r2_BackingField;
        }
        set
        {
          this._r2_BackingField = value;
        }
      }

      public virtual bool sweepFlag
      {
        get
        {
          return this._sweepFlag_BackingField;
        }
        set
        {
          this._sweepFlag_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegArcRel : dom.SVGPathSeg
    {
      private static dom.SVGPathSegArcRel _prototype_BackingField;
      private double _angle_BackingField;
      private bool _largeArcFlag_BackingField;
      private double _r1_BackingField;
      private double _r2_BackingField;
      private bool _sweepFlag_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegArcRel prototype
      {
        get
        {
          return dom.SVGPathSegArcRel._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegArcRel._prototype_BackingField = value;
        }
      }

      public virtual double angle
      {
        get
        {
          return this._angle_BackingField;
        }
        set
        {
          this._angle_BackingField = value;
        }
      }

      public virtual bool largeArcFlag
      {
        get
        {
          return this._largeArcFlag_BackingField;
        }
        set
        {
          this._largeArcFlag_BackingField = value;
        }
      }

      public virtual double r1
      {
        get
        {
          return this._r1_BackingField;
        }
        set
        {
          this._r1_BackingField = value;
        }
      }

      public virtual double r2
      {
        get
        {
          return this._r2_BackingField;
        }
        set
        {
          this._r2_BackingField = value;
        }
      }

      public virtual bool sweepFlag
      {
        get
        {
          return this._sweepFlag_BackingField;
        }
        set
        {
          this._sweepFlag_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegClosePath : dom.SVGPathSeg
    {
      private static dom.SVGPathSegClosePath _prototype_BackingField;

      public static dom.SVGPathSegClosePath prototype
      {
        get
        {
          return dom.SVGPathSegClosePath._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegClosePath._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegCurvetoCubicAbs : dom.SVGPathSeg
    {
      private static dom.SVGPathSegCurvetoCubicAbs _prototype_BackingField;
      private double _x_BackingField;
      private double _x1_BackingField;
      private double _x2_BackingField;
      private double _y_BackingField;
      private double _y1_BackingField;
      private double _y2_BackingField;

      public static dom.SVGPathSegCurvetoCubicAbs prototype
      {
        get
        {
          return dom.SVGPathSegCurvetoCubicAbs._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegCurvetoCubicAbs._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double x1
      {
        get
        {
          return this._x1_BackingField;
        }
        set
        {
          this._x1_BackingField = value;
        }
      }

      public virtual double x2
      {
        get
        {
          return this._x2_BackingField;
        }
        set
        {
          this._x2_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }

      public virtual double y1
      {
        get
        {
          return this._y1_BackingField;
        }
        set
        {
          this._y1_BackingField = value;
        }
      }

      public virtual double y2
      {
        get
        {
          return this._y2_BackingField;
        }
        set
        {
          this._y2_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegCurvetoCubicRel : dom.SVGPathSeg
    {
      private static dom.SVGPathSegCurvetoCubicRel _prototype_BackingField;
      private double _x_BackingField;
      private double _x1_BackingField;
      private double _x2_BackingField;
      private double _y_BackingField;
      private double _y1_BackingField;
      private double _y2_BackingField;

      public static dom.SVGPathSegCurvetoCubicRel prototype
      {
        get
        {
          return dom.SVGPathSegCurvetoCubicRel._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegCurvetoCubicRel._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double x1
      {
        get
        {
          return this._x1_BackingField;
        }
        set
        {
          this._x1_BackingField = value;
        }
      }

      public virtual double x2
      {
        get
        {
          return this._x2_BackingField;
        }
        set
        {
          this._x2_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }

      public virtual double y1
      {
        get
        {
          return this._y1_BackingField;
        }
        set
        {
          this._y1_BackingField = value;
        }
      }

      public virtual double y2
      {
        get
        {
          return this._y2_BackingField;
        }
        set
        {
          this._y2_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegCurvetoCubicSmoothAbs : dom.SVGPathSeg
    {
      private static dom.SVGPathSegCurvetoCubicSmoothAbs _prototype_BackingField;
      private double _x_BackingField;
      private double _x2_BackingField;
      private double _y_BackingField;
      private double _y2_BackingField;

      public static dom.SVGPathSegCurvetoCubicSmoothAbs prototype
      {
        get
        {
          return dom.SVGPathSegCurvetoCubicSmoothAbs._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegCurvetoCubicSmoothAbs._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double x2
      {
        get
        {
          return this._x2_BackingField;
        }
        set
        {
          this._x2_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }

      public virtual double y2
      {
        get
        {
          return this._y2_BackingField;
        }
        set
        {
          this._y2_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegCurvetoCubicSmoothRel : dom.SVGPathSeg
    {
      private static dom.SVGPathSegCurvetoCubicSmoothRel _prototype_BackingField;
      private double _x_BackingField;
      private double _x2_BackingField;
      private double _y_BackingField;
      private double _y2_BackingField;

      public static dom.SVGPathSegCurvetoCubicSmoothRel prototype
      {
        get
        {
          return dom.SVGPathSegCurvetoCubicSmoothRel._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegCurvetoCubicSmoothRel._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double x2
      {
        get
        {
          return this._x2_BackingField;
        }
        set
        {
          this._x2_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }

      public virtual double y2
      {
        get
        {
          return this._y2_BackingField;
        }
        set
        {
          this._y2_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegCurvetoQuadraticAbs : dom.SVGPathSeg
    {
      private static dom.SVGPathSegCurvetoQuadraticAbs _prototype_BackingField;
      private double _x_BackingField;
      private double _x1_BackingField;
      private double _y_BackingField;
      private double _y1_BackingField;

      public static dom.SVGPathSegCurvetoQuadraticAbs prototype
      {
        get
        {
          return dom.SVGPathSegCurvetoQuadraticAbs._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegCurvetoQuadraticAbs._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double x1
      {
        get
        {
          return this._x1_BackingField;
        }
        set
        {
          this._x1_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }

      public virtual double y1
      {
        get
        {
          return this._y1_BackingField;
        }
        set
        {
          this._y1_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegCurvetoQuadraticRel : dom.SVGPathSeg
    {
      private static dom.SVGPathSegCurvetoQuadraticRel _prototype_BackingField;
      private double _x_BackingField;
      private double _x1_BackingField;
      private double _y_BackingField;
      private double _y1_BackingField;

      public static dom.SVGPathSegCurvetoQuadraticRel prototype
      {
        get
        {
          return dom.SVGPathSegCurvetoQuadraticRel._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegCurvetoQuadraticRel._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double x1
      {
        get
        {
          return this._x1_BackingField;
        }
        set
        {
          this._x1_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }

      public virtual double y1
      {
        get
        {
          return this._y1_BackingField;
        }
        set
        {
          this._y1_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegCurvetoQuadraticSmoothAbs : dom.SVGPathSeg
    {
      private static dom.SVGPathSegCurvetoQuadraticSmoothAbs _prototype_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegCurvetoQuadraticSmoothAbs prototype
      {
        get
        {
          return dom.SVGPathSegCurvetoQuadraticSmoothAbs._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegCurvetoQuadraticSmoothAbs._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegCurvetoQuadraticSmoothRel : dom.SVGPathSeg
    {
      private static dom.SVGPathSegCurvetoQuadraticSmoothRel _prototype_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegCurvetoQuadraticSmoothRel prototype
      {
        get
        {
          return dom.SVGPathSegCurvetoQuadraticSmoothRel._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegCurvetoQuadraticSmoothRel._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegLinetoAbs : dom.SVGPathSeg
    {
      private static dom.SVGPathSegLinetoAbs _prototype_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegLinetoAbs prototype
      {
        get
        {
          return dom.SVGPathSegLinetoAbs._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegLinetoAbs._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegLinetoHorizontalAbs : dom.SVGPathSeg
    {
      private static dom.SVGPathSegLinetoHorizontalAbs _prototype_BackingField;
      private double _x_BackingField;

      public static dom.SVGPathSegLinetoHorizontalAbs prototype
      {
        get
        {
          return dom.SVGPathSegLinetoHorizontalAbs._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegLinetoHorizontalAbs._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegLinetoHorizontalRel : dom.SVGPathSeg
    {
      private static dom.SVGPathSegLinetoHorizontalRel _prototype_BackingField;
      private double _x_BackingField;

      public static dom.SVGPathSegLinetoHorizontalRel prototype
      {
        get
        {
          return dom.SVGPathSegLinetoHorizontalRel._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegLinetoHorizontalRel._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegLinetoRel : dom.SVGPathSeg
    {
      private static dom.SVGPathSegLinetoRel _prototype_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegLinetoRel prototype
      {
        get
        {
          return dom.SVGPathSegLinetoRel._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegLinetoRel._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegLinetoVerticalAbs : dom.SVGPathSeg
    {
      private static dom.SVGPathSegLinetoVerticalAbs _prototype_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegLinetoVerticalAbs prototype
      {
        get
        {
          return dom.SVGPathSegLinetoVerticalAbs._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegLinetoVerticalAbs._prototype_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegLinetoVerticalRel : dom.SVGPathSeg
    {
      private static dom.SVGPathSegLinetoVerticalRel _prototype_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegLinetoVerticalRel prototype
      {
        get
        {
          return dom.SVGPathSegLinetoVerticalRel._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegLinetoVerticalRel._prototype_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegList : IEnumerable<dom.SVGPathSeg>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.SVGPathSegList _prototype_BackingField;
      private readonly double _numberOfItems_BackingField;

      public static dom.SVGPathSegList prototype
      {
        get
        {
          return dom.SVGPathSegList._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegList._prototype_BackingField = value;
        }
      }

      public virtual double numberOfItems
      {
        get
        {
          return this._numberOfItems_BackingField;
        }
      }

      public virtual extern dom.SVGPathSeg appendItem(dom.SVGPathSeg newItem);

      public virtual extern void clear();

      public virtual extern dom.SVGPathSeg getItem(double index);

      public virtual extern dom.SVGPathSeg initialize(dom.SVGPathSeg newItem);

      public virtual extern dom.SVGPathSeg insertItemBefore(dom.SVGPathSeg newItem, double index);

      public virtual extern dom.SVGPathSeg removeItem(double index);

      public virtual extern dom.SVGPathSeg replaceItem(dom.SVGPathSeg newItem, double index);

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.SVGPathSeg> IEnumerable<dom.SVGPathSeg>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegMovetoAbs : dom.SVGPathSeg
    {
      private static dom.SVGPathSegMovetoAbs _prototype_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegMovetoAbs prototype
      {
        get
        {
          return dom.SVGPathSegMovetoAbs._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegMovetoAbs._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPathSegMovetoRel : dom.SVGPathSeg
    {
      private static dom.SVGPathSegMovetoRel _prototype_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGPathSegMovetoRel prototype
      {
        get
        {
          return dom.SVGPathSegMovetoRel._prototype_BackingField;
        }
        set
        {
          dom.SVGPathSegMovetoRel._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPatternElement : dom.SVGElement, dom.SVGTests.Interface, IObject, dom.SVGUnitTypes.Interface, dom.SVGFitToViewBox.Interface, dom.SVGURIReference.Interface
    {
      private static dom.SVGPatternElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedEnumeration _patternContentUnits_BackingField;
      private readonly dom.SVGAnimatedTransformList _patternTransform_BackingField;
      private readonly dom.SVGAnimatedEnumeration _patternUnits_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;
      private readonly dom.SVGStringList _requiredExtensions_BackingField;
      private readonly dom.SVGStringList _requiredFeatures_BackingField;
      private readonly dom.SVGStringList _systemLanguage_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_UNKNOWN_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;
      private readonly dom.SVGAnimatedPreserveAspectRatio _preserveAspectRatio_BackingField;
      private readonly dom.SVGAnimatedRect _viewBox_BackingField;
      private readonly dom.SVGAnimatedString _href_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"pattern\")")]
      public extern SVGPatternElement();

      public static dom.SVGPatternElement prototype
      {
        get
        {
          return dom.SVGPatternElement._prototype_BackingField;
        }
        set
        {
          dom.SVGPatternElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration patternContentUnits
      {
        get
        {
          return this._patternContentUnits_BackingField;
        }
      }

      public virtual dom.SVGAnimatedTransformList patternTransform
      {
        get
        {
          return this._patternTransform_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration patternUnits
      {
        get
        {
          return this._patternUnits_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPatternElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPatternElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPatternElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPatternElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPatternElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPatternElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPatternElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPatternElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGStringList requiredExtensions
      {
        get
        {
          return this._requiredExtensions_BackingField;
        }
      }

      public virtual dom.SVGStringList requiredFeatures
      {
        get
        {
          return this._requiredFeatures_BackingField;
        }
      }

      public virtual dom.SVGStringList systemLanguage
      {
        get
        {
          return this._systemLanguage_BackingField;
        }
      }

      public virtual extern bool hasExtension(string extension);

      public virtual ushort SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
      {
        get
        {
          return this._SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_UNKNOWN
      {
        get
        {
          return this._SVG_UNIT_TYPE_UNKNOWN_BackingField;
        }
      }

      public virtual ushort SVG_UNIT_TYPE_USERSPACEONUSE
      {
        get
        {
          return this._SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;
        }
      }

      public virtual dom.SVGAnimatedPreserveAspectRatio preserveAspectRatio
      {
        get
        {
          return this._preserveAspectRatio_BackingField;
        }
      }

      public virtual dom.SVGAnimatedRect viewBox
      {
        get
        {
          return this._viewBox_BackingField;
        }
      }

      public virtual dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPoint : IObject
    {
      private static dom.SVGPoint _prototype_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGPoint prototype
      {
        get
        {
          return dom.SVGPoint._prototype_BackingField;
        }
        set
        {
          dom.SVGPoint._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }

      public virtual extern dom.SVGPoint matrixTransform(dom.SVGMatrix matrix);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPointList : IEnumerable<dom.SVGPoint>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.SVGPointList _prototype_BackingField;
      private readonly uint _numberOfItems_BackingField;

      public static dom.SVGPointList prototype
      {
        get
        {
          return dom.SVGPointList._prototype_BackingField;
        }
        set
        {
          dom.SVGPointList._prototype_BackingField = value;
        }
      }

      public virtual uint numberOfItems
      {
        get
        {
          return this._numberOfItems_BackingField;
        }
      }

      public virtual extern dom.SVGPoint appendItem(dom.SVGPoint newItem);

      public virtual extern void clear();

      public virtual extern dom.SVGPoint getItem(uint index);

      public virtual extern dom.SVGPoint initialize(dom.SVGPoint newItem);

      public virtual extern dom.SVGPoint insertItemBefore(dom.SVGPoint newItem, uint index);

      public virtual extern dom.SVGPoint removeItem(uint index);

      public virtual extern dom.SVGPoint replaceItem(dom.SVGPoint newItem, uint index);

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.SVGPoint> IEnumerable<dom.SVGPoint>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPolygonElement : dom.SVGGraphicsElement, dom.SVGAnimatedPoints.Interface, IObject
    {
      private static dom.SVGPolygonElement _prototype_BackingField;
      private readonly dom.SVGPointList _animatedPoints_BackingField;
      private readonly dom.SVGPointList _points_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\")")]
      public extern SVGPolygonElement();

      public static dom.SVGPolygonElement prototype
      {
        get
        {
          return dom.SVGPolygonElement._prototype_BackingField;
        }
        set
        {
          dom.SVGPolygonElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPolygonElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPolygonElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPolygonElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPolygonElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPolygonElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPolygonElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPolygonElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPolygonElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGPointList animatedPoints
      {
        get
        {
          return this._animatedPoints_BackingField;
        }
      }

      public virtual dom.SVGPointList points
      {
        get
        {
          return this._points_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPolylineElement : dom.SVGGraphicsElement, dom.SVGAnimatedPoints.Interface, IObject
    {
      private static dom.SVGPolylineElement _prototype_BackingField;
      private readonly dom.SVGPointList _animatedPoints_BackingField;
      private readonly dom.SVGPointList _points_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\")")]
      public extern SVGPolylineElement();

      public static dom.SVGPolylineElement prototype
      {
        get
        {
          return dom.SVGPolylineElement._prototype_BackingField;
        }
        set
        {
          dom.SVGPolylineElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPolylineElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPolylineElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPolylineElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGPolylineElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPolylineElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPolylineElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPolylineElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGPolylineElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGPointList animatedPoints
      {
        get
        {
          return this._animatedPoints_BackingField;
        }
      }

      public virtual dom.SVGPointList points
      {
        get
        {
          return this._points_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGPreserveAspectRatio : IObject
    {
      private static dom.SVGPreserveAspectRatio _prototype_BackingField;
      private static readonly ushort _SVG_MEETORSLICE_MEET_Static_BackingField;
      private static readonly ushort _SVG_MEETORSLICE_SLICE_Static_BackingField;
      private static readonly ushort _SVG_MEETORSLICE_UNKNOWN_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_NONE_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_UNKNOWN_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_XMAXYMAX_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_XMAXYMID_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_XMAXYMIN_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_XMIDYMAX_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_XMIDYMID_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_XMIDYMIN_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_XMINYMAX_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_XMINYMID_Static_BackingField;
      private static readonly ushort _SVG_PRESERVEASPECTRATIO_XMINYMIN_Static_BackingField;
      private ushort _align_BackingField;
      private ushort _meetOrSlice_BackingField;
      private readonly ushort _SVG_MEETORSLICE_MEET_BackingField;
      private readonly ushort _SVG_MEETORSLICE_SLICE_BackingField;
      private readonly ushort _SVG_MEETORSLICE_UNKNOWN_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_NONE_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_UNKNOWN_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_XMAXYMAX_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_XMAXYMID_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_XMAXYMIN_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_XMIDYMAX_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_XMIDYMID_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_XMIDYMIN_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_XMINYMAX_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_XMINYMID_BackingField;
      private readonly ushort _SVG_PRESERVEASPECTRATIO_XMINYMIN_BackingField;

      public static dom.SVGPreserveAspectRatio prototype
      {
        get
        {
          return dom.SVGPreserveAspectRatio._prototype_BackingField;
        }
        set
        {
          dom.SVGPreserveAspectRatio._prototype_BackingField = value;
        }
      }

      [Name("SVG_MEETORSLICE_MEET")]
      public static ushort SVG_MEETORSLICE_MEET_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_MEETORSLICE_MEET_Static_BackingField;
        }
      }

      [Name("SVG_MEETORSLICE_SLICE")]
      public static ushort SVG_MEETORSLICE_SLICE_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_MEETORSLICE_SLICE_Static_BackingField;
        }
      }

      [Name("SVG_MEETORSLICE_UNKNOWN")]
      public static ushort SVG_MEETORSLICE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_MEETORSLICE_UNKNOWN_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_NONE")]
      public static ushort SVG_PRESERVEASPECTRATIO_NONE_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_NONE_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_UNKNOWN")]
      public static ushort SVG_PRESERVEASPECTRATIO_UNKNOWN_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_UNKNOWN_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_XMAXYMAX")]
      public static ushort SVG_PRESERVEASPECTRATIO_XMAXYMAX_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_XMAXYMAX_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_XMAXYMID")]
      public static ushort SVG_PRESERVEASPECTRATIO_XMAXYMID_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_XMAXYMID_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_XMAXYMIN")]
      public static ushort SVG_PRESERVEASPECTRATIO_XMAXYMIN_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_XMAXYMIN_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_XMIDYMAX")]
      public static ushort SVG_PRESERVEASPECTRATIO_XMIDYMAX_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_XMIDYMAX_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_XMIDYMID")]
      public static ushort SVG_PRESERVEASPECTRATIO_XMIDYMID_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_XMIDYMID_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_XMIDYMIN")]
      public static ushort SVG_PRESERVEASPECTRATIO_XMIDYMIN_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_XMIDYMIN_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_XMINYMAX")]
      public static ushort SVG_PRESERVEASPECTRATIO_XMINYMAX_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_XMINYMAX_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_XMINYMID")]
      public static ushort SVG_PRESERVEASPECTRATIO_XMINYMID_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_XMINYMID_Static_BackingField;
        }
      }

      [Name("SVG_PRESERVEASPECTRATIO_XMINYMIN")]
      public static ushort SVG_PRESERVEASPECTRATIO_XMINYMIN_Static
      {
        get
        {
          return dom.SVGPreserveAspectRatio._SVG_PRESERVEASPECTRATIO_XMINYMIN_Static_BackingField;
        }
      }

      public virtual ushort align
      {
        get
        {
          return this._align_BackingField;
        }
        set
        {
          this._align_BackingField = value;
        }
      }

      public virtual ushort meetOrSlice
      {
        get
        {
          return this._meetOrSlice_BackingField;
        }
        set
        {
          this._meetOrSlice_BackingField = value;
        }
      }

      public virtual ushort SVG_MEETORSLICE_MEET
      {
        get
        {
          return this._SVG_MEETORSLICE_MEET_BackingField;
        }
      }

      public virtual ushort SVG_MEETORSLICE_SLICE
      {
        get
        {
          return this._SVG_MEETORSLICE_SLICE_BackingField;
        }
      }

      public virtual ushort SVG_MEETORSLICE_UNKNOWN
      {
        get
        {
          return this._SVG_MEETORSLICE_UNKNOWN_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_NONE
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_NONE_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_UNKNOWN
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_UNKNOWN_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_XMAXYMAX
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_XMAXYMAX_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_XMAXYMID
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_XMAXYMID_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_XMAXYMIN
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_XMAXYMIN_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_XMIDYMAX
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_XMIDYMAX_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_XMIDYMID
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_XMIDYMID_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_XMIDYMIN
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_XMIDYMIN_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_XMINYMAX
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_XMINYMAX_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_XMINYMID
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_XMINYMID_BackingField;
        }
      }

      public virtual ushort SVG_PRESERVEASPECTRATIO_XMINYMIN
      {
        get
        {
          return this._SVG_PRESERVEASPECTRATIO_XMINYMIN_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGRadialGradientElement : dom.SVGGradientElement
    {
      private static dom.SVGRadialGradientElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _cx_BackingField;
      private readonly dom.SVGAnimatedLength _cy_BackingField;
      private readonly dom.SVGAnimatedLength _fx_BackingField;
      private readonly dom.SVGAnimatedLength _fy_BackingField;
      private readonly dom.SVGAnimatedLength _r_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"radialGradient\")")]
      public extern SVGRadialGradientElement();

      public static dom.SVGRadialGradientElement prototype
      {
        get
        {
          return dom.SVGRadialGradientElement._prototype_BackingField;
        }
        set
        {
          dom.SVGRadialGradientElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength cx
      {
        get
        {
          return this._cx_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength cy
      {
        get
        {
          return this._cy_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength fx
      {
        get
        {
          return this._fx_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength fy
      {
        get
        {
          return this._fy_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength r
      {
        get
        {
          return this._r_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGRadialGradientElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGRadialGradientElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGRadialGradientElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGRadialGradientElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGRadialGradientElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGRadialGradientElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGRadialGradientElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGRadialGradientElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGRect : IObject
    {
      private static dom.SVGRect _prototype_BackingField;
      private double _height_BackingField;
      private double _width_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public static dom.SVGRect prototype
      {
        get
        {
          return dom.SVGRect._prototype_BackingField;
        }
        set
        {
          dom.SVGRect._prototype_BackingField = value;
        }
      }

      public virtual double height
      {
        get
        {
          return this._height_BackingField;
        }
        set
        {
          this._height_BackingField = value;
        }
      }

      public virtual double width
      {
        get
        {
          return this._width_BackingField;
        }
        set
        {
          this._width_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGRectElement : dom.SVGGraphicsElement
    {
      private static dom.SVGRectElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGAnimatedLength _rx_BackingField;
      private readonly dom.SVGAnimatedLength _ry_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\")")]
      public extern SVGRectElement();

      public static dom.SVGRectElement prototype
      {
        get
        {
          return dom.SVGRectElement._prototype_BackingField;
        }
        set
        {
          dom.SVGRectElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength rx
      {
        get
        {
          return this._rx_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength ry
      {
        get
        {
          return this._ry_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGRectElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGRectElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGRectElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGRectElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGRectElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGRectElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGRectElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGRectElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class SVGSVGElementEventMap : dom.SVGElementEventMap
    {
      private dom.Event _SVGAbort_BackingField;
      private dom.Event _SVGError_BackingField;
      private dom.UIEvent _resize_BackingField;
      private dom.UIEvent _scroll_BackingField;
      private dom.Event _SVGUnload_BackingField;
      private dom.SVGZoomEvent _SVGZoom_BackingField;

      public dom.Event SVGAbort
      {
        get
        {
          return this._SVGAbort_BackingField;
        }
        set
        {
          this._SVGAbort_BackingField = value;
        }
      }

      public dom.Event SVGError
      {
        get
        {
          return this._SVGError_BackingField;
        }
        set
        {
          this._SVGError_BackingField = value;
        }
      }

      public dom.UIEvent resize
      {
        get
        {
          return this._resize_BackingField;
        }
        set
        {
          this._resize_BackingField = value;
        }
      }

      public dom.UIEvent scroll
      {
        get
        {
          return this._scroll_BackingField;
        }
        set
        {
          this._scroll_BackingField = value;
        }
      }

      public dom.Event SVGUnload
      {
        get
        {
          return this._SVGUnload_BackingField;
        }
        set
        {
          this._SVGUnload_BackingField = value;
        }
      }

      public dom.SVGZoomEvent SVGZoom
      {
        get
        {
          return this._SVGZoom_BackingField;
        }
        set
        {
          this._SVGZoom_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"SVGAbort\"")]
        public static readonly KeyOf<dom.SVGSVGElementEventMap> SVGAbort;
        [Template("\"SVGError\"")]
        public static readonly KeyOf<dom.SVGSVGElementEventMap> SVGError;
        [Template("\"resize\"")]
        public static readonly KeyOf<dom.SVGSVGElementEventMap> resize;
        [Template("\"scroll\"")]
        public static readonly KeyOf<dom.SVGSVGElementEventMap> scroll;
        [Template("\"SVGUnload\"")]
        public static readonly KeyOf<dom.SVGSVGElementEventMap> SVGUnload;
        [Template("\"SVGZoom\"")]
        public static readonly KeyOf<dom.SVGSVGElementEventMap> SVGZoom;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGSVGElement : dom.SVGGraphicsElement, dom.DocumentEvent.Interface, IObject, dom.SVGFitToViewBox.Interface, dom.SVGZoomAndPan.Interface
    {
      private static dom.SVGSVGElement _prototype_BackingField;
      private string _contentScriptType_BackingField;
      private string _contentStyleType_BackingField;
      private float _currentScale_BackingField;
      private readonly dom.SVGPoint _currentTranslate_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private dom.SVGSVGElement.onabortFn _onabort_BackingField;
      private dom.SVGSVGElement.onabortFn _onerror_BackingField;
      private dom.SVGSVGElement.onresizeFn _onresize_BackingField;
      private dom.SVGSVGElement.onresizeFn _onscroll_BackingField;
      private dom.SVGSVGElement.onabortFn _onunload_BackingField;
      private dom.SVGSVGElement.onzoomFn _onzoom_BackingField;
      private readonly double _pixelUnitToMillimeterX_BackingField;
      private readonly double _pixelUnitToMillimeterY_BackingField;
      private readonly double _screenPixelToMillimeterX_BackingField;
      private readonly double _screenPixelToMillimeterY_BackingField;
      private readonly dom.SVGRect _viewport_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;
      private readonly dom.SVGAnimatedPreserveAspectRatio _preserveAspectRatio_BackingField;
      private readonly dom.SVGAnimatedRect _viewBox_BackingField;
      private readonly ushort _zoomAndPan_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")")]
      public extern SVGSVGElement();

      public static dom.SVGSVGElement prototype
      {
        get
        {
          return dom.SVGSVGElement._prototype_BackingField;
        }
        set
        {
          dom.SVGSVGElement._prototype_BackingField = value;
        }
      }

      public virtual string contentScriptType
      {
        get
        {
          return this._contentScriptType_BackingField;
        }
        set
        {
          this._contentScriptType_BackingField = value;
        }
      }

      public virtual string contentStyleType
      {
        get
        {
          return this._contentStyleType_BackingField;
        }
        set
        {
          this._contentStyleType_BackingField = value;
        }
      }

      public virtual float currentScale
      {
        get
        {
          return this._currentScale_BackingField;
        }
        set
        {
          this._currentScale_BackingField = value;
        }
      }

      public virtual dom.SVGPoint currentTranslate
      {
        get
        {
          return this._currentTranslate_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGSVGElement.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.SVGSVGElement.onabortFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.SVGSVGElement.onresizeFn onresize
      {
        get
        {
          return this._onresize_BackingField;
        }
        set
        {
          this._onresize_BackingField = value;
        }
      }

      public virtual dom.SVGSVGElement.onresizeFn onscroll
      {
        get
        {
          return this._onscroll_BackingField;
        }
        set
        {
          this._onscroll_BackingField = value;
        }
      }

      public virtual dom.SVGSVGElement.onabortFn onunload
      {
        get
        {
          return this._onunload_BackingField;
        }
        set
        {
          this._onunload_BackingField = value;
        }
      }

      public virtual dom.SVGSVGElement.onzoomFn onzoom
      {
        get
        {
          return this._onzoom_BackingField;
        }
        set
        {
          this._onzoom_BackingField = value;
        }
      }

      public virtual double pixelUnitToMillimeterX
      {
        get
        {
          return this._pixelUnitToMillimeterX_BackingField;
        }
      }

      public virtual double pixelUnitToMillimeterY
      {
        get
        {
          return this._pixelUnitToMillimeterY_BackingField;
        }
      }

      public virtual double screenPixelToMillimeterX
      {
        get
        {
          return this._screenPixelToMillimeterX_BackingField;
        }
      }

      public virtual double screenPixelToMillimeterY
      {
        get
        {
          return this._screenPixelToMillimeterY_BackingField;
        }
      }

      public virtual dom.SVGRect viewport
      {
        get
        {
          return this._viewport_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      public virtual extern bool checkEnclosure(dom.SVGElement element, dom.SVGRect rect);

      public virtual extern bool checkIntersection(dom.SVGElement element, dom.SVGRect rect);

      public virtual extern dom.SVGAngle createSVGAngle();

      public virtual extern dom.SVGLength createSVGLength();

      public virtual extern dom.SVGMatrix createSVGMatrix();

      public virtual extern dom.SVGNumber createSVGNumber();

      public virtual extern dom.SVGPoint createSVGPoint();

      public virtual extern dom.SVGRect createSVGRect();

      public virtual extern dom.SVGTransform createSVGTransform();

      public virtual extern dom.SVGTransform createSVGTransformFromMatrix(dom.SVGMatrix matrix);

      public virtual extern void deselectAll();

      public virtual extern void forceRedraw();

      public virtual extern dom.CSSStyleDeclaration getComputedStyle(dom.Element elt);

      public virtual extern dom.CSSStyleDeclaration getComputedStyle(
        dom.Element elt,
        string pseudoElt);

      public virtual extern double getCurrentTime();

      public virtual extern dom.Element getElementById(string elementId);

      public virtual extern dom.NodeListOf<dom.SVGGraphicsElement> getEnclosureList(
        dom.SVGRect rect,
        dom.SVGElement referenceElement);

      public virtual extern dom.NodeListOf<dom.SVGGraphicsElement> getIntersectionList(
        dom.SVGRect rect,
        dom.SVGElement referenceElement);

      public virtual extern void pauseAnimations();

      public virtual extern void setCurrentTime(double seconds);

      public virtual extern uint suspendRedraw(uint maxWaitMilliseconds);

      public virtual extern void unpauseAnimations();

      public virtual extern void unsuspendRedraw(uint suspendHandleID);

      public virtual extern void unsuspendRedrawAll();

      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSVGElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSVGElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSVGElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSVGElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSVGElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSVGElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSVGElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSVGElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern dom.AnimationEvent createEvent(
        dom.Literals.Types.AnimationEvent eventInterface);

      public virtual extern dom.AnimationPlaybackEvent createEvent(
        dom.Literals.Types.AnimationPlaybackEvent eventInterface);

      public virtual extern dom.AudioProcessingEvent createEvent(
        dom.Literals.Types.AudioProcessingEvent eventInterface);

      public virtual extern dom.BeforeUnloadEvent createEvent(
        dom.Literals.Types.BeforeUnloadEvent eventInterface);

      public virtual extern dom.ClipboardEvent createEvent(
        dom.Literals.Types.ClipboardEvent eventInterface);

      public virtual extern dom.CloseEvent createEvent(
        dom.Literals.Types.CloseEvent eventInterface);

      public virtual extern dom.CompositionEvent createEvent(
        dom.Literals.Types.CompositionEvent eventInterface);

      public virtual extern dom.CustomEvent<object> createEvent(
        dom.Literals.Types.CustomEvent eventInterface);

      public virtual extern dom.DeviceLightEvent createEvent(
        dom.Literals.Types.DeviceLightEvent eventInterface);

      public virtual extern dom.DeviceMotionEvent createEvent(
        dom.Literals.Types.DeviceMotionEvent eventInterface);

      public virtual extern dom.DeviceOrientationEvent createEvent(
        dom.Literals.Types.DeviceOrientationEvent eventInterface);

      public virtual extern dom.DragEvent createEvent(dom.Literals.Types.DragEvent eventInterface);

      public virtual extern dom.ErrorEvent createEvent(
        dom.Literals.Types.ErrorEvent eventInterface);

      public virtual extern dom.Event createEvent(dom.Literals.Types.Event eventInterface);

      public virtual extern dom.Event createEvent(dom.Literals.Types.Events eventInterface);

      public virtual extern dom.FocusEvent createEvent(
        dom.Literals.Types.FocusEvent eventInterface);

      public virtual extern dom.FocusNavigationEvent createEvent(
        dom.Literals.Types.FocusNavigationEvent eventInterface);

      public virtual extern dom.GamepadEvent createEvent(
        dom.Literals.Types.GamepadEvent eventInterface);

      public virtual extern dom.HashChangeEvent createEvent(
        dom.Literals.Types.HashChangeEvent eventInterface);

      public virtual extern dom.IDBVersionChangeEvent createEvent(
        dom.Literals.Types.IDBVersionChangeEvent eventInterface);

      public virtual extern dom.KeyboardEvent createEvent(
        dom.Literals.Types.KeyboardEvent eventInterface);

      public virtual extern dom.ListeningStateChangedEvent createEvent(
        dom.Literals.Types.ListeningStateChangedEvent eventInterface);

      public virtual extern dom.MSDCCEvent createEvent(
        dom.Literals.Types.MSDCCEvent eventInterface);

      public virtual extern dom.MSDSHEvent createEvent(
        dom.Literals.Types.MSDSHEvent eventInterface);

      public virtual extern dom.MSMediaKeyMessageEvent createEvent(
        dom.Literals.Types.MSMediaKeyMessageEvent eventInterface);

      public virtual extern dom.MSMediaKeyNeededEvent createEvent(
        dom.Literals.Types.MSMediaKeyNeededEvent eventInterface);

      public virtual extern dom.MediaEncryptedEvent createEvent(
        dom.Literals.Types.MediaEncryptedEvent eventInterface);

      public virtual extern dom.MediaKeyMessageEvent createEvent(
        dom.Literals.Types.MediaKeyMessageEvent eventInterface);

      public virtual extern dom.MediaStreamErrorEvent createEvent(
        dom.Literals.Types.MediaStreamErrorEvent eventInterface);

      public virtual extern dom.MediaStreamEvent createEvent(
        dom.Literals.Types.MediaStreamEvent eventInterface);

      public virtual extern dom.MediaStreamTrackEvent createEvent(
        dom.Literals.Types.MediaStreamTrackEvent eventInterface);

      public virtual extern dom.MessageEvent createEvent(
        dom.Literals.Types.MessageEvent eventInterface);

      public virtual extern dom.MouseEvent createEvent(
        dom.Literals.Types.MouseEvent eventInterface);

      public virtual extern dom.MouseEvent createEvent(
        dom.Literals.Types.MouseEvents eventInterface);

      public virtual extern dom.MutationEvent createEvent(
        dom.Literals.Types.MutationEvent eventInterface);

      public virtual extern dom.MutationEvent createEvent(
        dom.Literals.Types.MutationEvents eventInterface);

      public virtual extern dom.OfflineAudioCompletionEvent createEvent(
        dom.Literals.Types.OfflineAudioCompletionEvent eventInterface);

      public virtual extern dom.OverflowEvent createEvent(
        dom.Literals.Types.OverflowEvent eventInterface);

      public virtual extern dom.PageTransitionEvent createEvent(
        dom.Literals.Types.PageTransitionEvent eventInterface);

      public virtual extern dom.PaymentRequestUpdateEvent createEvent(
        dom.Literals.Types.PaymentRequestUpdateEvent eventInterface);

      public virtual extern dom.PermissionRequestedEvent createEvent(
        dom.Literals.Types.PermissionRequestedEvent eventInterface);

      public virtual extern dom.PointerEvent createEvent(
        dom.Literals.Types.PointerEvent eventInterface);

      public virtual extern dom.PopStateEvent createEvent(
        dom.Literals.Types.PopStateEvent eventInterface);

      public virtual extern dom.ProgressEvent createEvent(
        dom.Literals.Types.ProgressEvent eventInterface);

      public virtual extern dom.PromiseRejectionEvent createEvent(
        dom.Literals.Types.PromiseRejectionEvent eventInterface);

      public virtual extern dom.RTCDTMFToneChangeEvent createEvent(
        dom.Literals.Types.RTCDTMFToneChangeEvent eventInterface);

      public virtual extern dom.RTCDtlsTransportStateChangedEvent createEvent(
        dom.Literals.Types.RTCDtlsTransportStateChangedEvent eventInterface);

      public virtual extern dom.RTCIceCandidatePairChangedEvent createEvent(
        dom.Literals.Types.RTCIceCandidatePairChangedEvent eventInterface);

      public virtual extern dom.RTCIceGathererEvent createEvent(
        dom.Literals.Types.RTCIceGathererEvent eventInterface);

      public virtual extern dom.RTCIceTransportStateChangedEvent createEvent(
        dom.Literals.Types.RTCIceTransportStateChangedEvent eventInterface);

      public virtual extern dom.RTCPeerConnectionIceEvent createEvent(
        dom.Literals.Types.RTCPeerConnectionIceEvent eventInterface);

      public virtual extern dom.RTCSsrcConflictEvent createEvent(
        dom.Literals.Types.RTCSsrcConflictEvent eventInterface);

      public virtual extern dom.SVGZoomEvent createEvent(
        dom.Literals.Types.SVGZoomEvent eventInterface);

      public virtual extern dom.SVGZoomEvent createEvent(
        dom.Literals.Types.SVGZoomEvents eventInterface);

      public virtual extern dom.SecurityPolicyViolationEvent createEvent(
        dom.Literals.Types.SecurityPolicyViolationEvent eventInterface);

      public virtual extern dom.ServiceWorkerMessageEvent createEvent(
        dom.Literals.Types.ServiceWorkerMessageEvent eventInterface);

      public virtual extern dom.SpeechSynthesisEvent createEvent(
        dom.Literals.Types.SpeechSynthesisEvent eventInterface);

      public virtual extern dom.StorageEvent createEvent(
        dom.Literals.Types.StorageEvent eventInterface);

      public virtual extern dom.TextEvent createEvent(dom.Literals.Types.TextEvent eventInterface);

      public virtual extern dom.TouchEvent createEvent(
        dom.Literals.Types.TouchEvent eventInterface);

      public virtual extern dom.TrackEvent createEvent(
        dom.Literals.Types.TrackEvent eventInterface);

      public virtual extern dom.TransitionEvent createEvent(
        dom.Literals.Types.TransitionEvent eventInterface);

      public virtual extern dom.UIEvent createEvent(dom.Literals.Types.UIEvent eventInterface);

      public virtual extern dom.UIEvent createEvent(dom.Literals.Types.UIEvents eventInterface);

      public virtual extern dom.VRDisplayEvent createEvent(
        dom.Literals.Types.VRDisplayEvent eventInterface);

      public virtual extern dom.VRDisplayEvent createEvent(
        dom.Literals.Types.VRDisplayEvent_ eventInterface);

      public virtual extern dom.WebGLContextEvent createEvent(
        dom.Literals.Types.WebGLContextEvent eventInterface);

      public virtual extern dom.WheelEvent createEvent(
        dom.Literals.Types.WheelEvent eventInterface);

      public virtual extern dom.Event createEvent(string eventInterface);

      public virtual dom.SVGAnimatedPreserveAspectRatio preserveAspectRatio
      {
        get
        {
          return this._preserveAspectRatio_BackingField;
        }
      }

      public virtual dom.SVGAnimatedRect viewBox
      {
        get
        {
          return this._viewBox_BackingField;
        }
      }

      public virtual ushort zoomAndPan
      {
        get
        {
          return this._zoomAndPan_BackingField;
        }
      }

      [Generated]
      public delegate void onabortFn(dom.Event ev);

      [Generated]
      public delegate void onresizeFn(dom.UIEvent ev);

      [Generated]
      public delegate void onzoomFn(dom.SVGZoomEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGSVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGScriptElement : dom.SVGElement, dom.SVGURIReference.Interface, IObject
    {
      private static dom.SVGScriptElement _prototype_BackingField;
      private string _type_BackingField;
      private readonly dom.SVGAnimatedString _href_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"script\")")]
      public extern SVGScriptElement();

      public static dom.SVGScriptElement prototype
      {
        get
        {
          return dom.SVGScriptElement._prototype_BackingField;
        }
        set
        {
          dom.SVGScriptElement._prototype_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGScriptElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGScriptElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGScriptElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGScriptElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGScriptElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGScriptElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGScriptElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGScriptElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGStopElement : dom.SVGElement
    {
      private static dom.SVGStopElement _prototype_BackingField;
      private readonly dom.SVGAnimatedNumber _offset_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"stop\")")]
      public extern SVGStopElement();

      public static dom.SVGStopElement prototype
      {
        get
        {
          return dom.SVGStopElement._prototype_BackingField;
        }
        set
        {
          dom.SVGStopElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedNumber offset
      {
        get
        {
          return this._offset_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGStopElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGStopElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGStopElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGStopElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGStopElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGStopElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGStopElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGStopElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGStringList : IEnumerable<string>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.SVGStringList _prototype_BackingField;
      private readonly uint _numberOfItems_BackingField;

      public static dom.SVGStringList prototype
      {
        get
        {
          return dom.SVGStringList._prototype_BackingField;
        }
        set
        {
          dom.SVGStringList._prototype_BackingField = value;
        }
      }

      public virtual uint numberOfItems
      {
        get
        {
          return this._numberOfItems_BackingField;
        }
      }

      public virtual extern string appendItem(string newItem);

      public virtual extern void clear();

      public virtual extern string getItem(uint index);

      public virtual extern string initialize(string newItem);

      public virtual extern string insertItemBefore(string newItem, uint index);

      public virtual extern string removeItem(uint index);

      public virtual extern string replaceItem(string newItem, uint index);

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<string> IEnumerable<string>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGStylable : IObject
    {
      private static dom.SVGStylable _prototype_BackingField;
      private object _className_BackingField;

      public static dom.SVGStylable prototype
      {
        get
        {
          return dom.SVGStylable._prototype_BackingField;
        }
        set
        {
          dom.SVGStylable._prototype_BackingField = value;
        }
      }

      public virtual object className
      {
        get
        {
          return this._className_BackingField;
        }
        set
        {
          this._className_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGStyleElement : dom.SVGElement
    {
      private static dom.SVGStyleElement _prototype_BackingField;
      private bool _disabled_BackingField;
      private string _media_BackingField;
      private string _title_BackingField;
      private string _type_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\")")]
      public extern SVGStyleElement();

      public static dom.SVGStyleElement prototype
      {
        get
        {
          return dom.SVGStyleElement._prototype_BackingField;
        }
        set
        {
          dom.SVGStyleElement._prototype_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual string media
      {
        get
        {
          return this._media_BackingField;
        }
        set
        {
          this._media_BackingField = value;
        }
      }

      public virtual string title
      {
        get
        {
          return this._title_BackingField;
        }
        set
        {
          this._title_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
        set
        {
          this._type_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGStyleElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGStyleElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGStyleElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGStyleElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGStyleElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGStyleElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGStyleElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGStyleElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGSwitchElement : dom.SVGGraphicsElement
    {
      private static dom.SVGSwitchElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"switch\")")]
      public extern SVGSwitchElement();

      public static dom.SVGSwitchElement prototype
      {
        get
        {
          return dom.SVGSwitchElement._prototype_BackingField;
        }
        set
        {
          dom.SVGSwitchElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSwitchElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSwitchElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSwitchElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSwitchElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSwitchElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSwitchElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSwitchElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSwitchElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGSymbolElement : dom.SVGElement, dom.SVGFitToViewBox.Interface, IObject
    {
      private static dom.SVGSymbolElement _prototype_BackingField;
      private readonly dom.SVGAnimatedPreserveAspectRatio _preserveAspectRatio_BackingField;
      private readonly dom.SVGAnimatedRect _viewBox_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"symbol\")")]
      public extern SVGSymbolElement();

      public static dom.SVGSymbolElement prototype
      {
        get
        {
          return dom.SVGSymbolElement._prototype_BackingField;
        }
        set
        {
          dom.SVGSymbolElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSymbolElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSymbolElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSymbolElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGSymbolElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSymbolElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSymbolElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSymbolElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGSymbolElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedPreserveAspectRatio preserveAspectRatio
      {
        get
        {
          return this._preserveAspectRatio_BackingField;
        }
      }

      public virtual dom.SVGAnimatedRect viewBox
      {
        get
        {
          return this._viewBox_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGTSpanElement : dom.SVGTextPositioningElement
    {
      private static dom.SVGTSpanElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\")")]
      public extern SVGTSpanElement();

      public static dom.SVGTSpanElement prototype
      {
        get
        {
          return dom.SVGTSpanElement._prototype_BackingField;
        }
        set
        {
          dom.SVGTSpanElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTSpanElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTSpanElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTSpanElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTSpanElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTSpanElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTSpanElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTSpanElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTSpanElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class SVGTests : dom.SVGTests.Interface, IObject
    {
      public abstract dom.SVGStringList requiredExtensions { get; }

      public abstract dom.SVGStringList requiredFeatures { get; }

      public abstract dom.SVGStringList systemLanguage { get; }

      public abstract bool hasExtension(string extension);

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.SVGStringList requiredExtensions { get; }

        dom.SVGStringList requiredFeatures { get; }

        dom.SVGStringList systemLanguage { get; }

        bool hasExtension(string extension);
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGTextContentElement : dom.SVGGraphicsElement
    {
      private static dom.SVGTextContentElement _prototype_BackingField;
      private static readonly ushort _LENGTHADJUST_SPACING_Static_BackingField;
      private static readonly ushort _LENGTHADJUST_SPACINGANDGLYPHS_Static_BackingField;
      private static readonly ushort _LENGTHADJUST_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedEnumeration _lengthAdjust_BackingField;
      private readonly dom.SVGAnimatedLength _textLength_BackingField;
      private readonly ushort _LENGTHADJUST_SPACING_BackingField;
      private readonly ushort _LENGTHADJUST_SPACINGANDGLYPHS_BackingField;
      private readonly ushort _LENGTHADJUST_UNKNOWN_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"textContent\")")]
      public extern SVGTextContentElement();

      public static dom.SVGTextContentElement prototype
      {
        get
        {
          return dom.SVGTextContentElement._prototype_BackingField;
        }
        set
        {
          dom.SVGTextContentElement._prototype_BackingField = value;
        }
      }

      [Name("LENGTHADJUST_SPACING")]
      public static ushort LENGTHADJUST_SPACING_Static
      {
        get
        {
          return dom.SVGTextContentElement._LENGTHADJUST_SPACING_Static_BackingField;
        }
      }

      [Name("LENGTHADJUST_SPACINGANDGLYPHS")]
      public static ushort LENGTHADJUST_SPACINGANDGLYPHS_Static
      {
        get
        {
          return dom.SVGTextContentElement._LENGTHADJUST_SPACINGANDGLYPHS_Static_BackingField;
        }
      }

      [Name("LENGTHADJUST_UNKNOWN")]
      public static ushort LENGTHADJUST_UNKNOWN_Static
      {
        get
        {
          return dom.SVGTextContentElement._LENGTHADJUST_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration lengthAdjust
      {
        get
        {
          return this._lengthAdjust_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength textLength
      {
        get
        {
          return this._textLength_BackingField;
        }
      }

      public virtual extern int getCharNumAtPosition(dom.SVGPoint point);

      public virtual extern float getComputedTextLength();

      public virtual extern dom.SVGPoint getEndPositionOfChar(uint charnum);

      public virtual extern dom.SVGRect getExtentOfChar(uint charnum);

      public virtual extern int getNumberOfChars();

      public virtual extern float getRotationOfChar(uint charnum);

      public virtual extern dom.SVGPoint getStartPositionOfChar(uint charnum);

      public virtual extern float getSubStringLength(uint charnum, uint nchars);

      public virtual extern void selectSubString(uint charnum, uint nchars);

      public virtual ushort LENGTHADJUST_SPACING
      {
        get
        {
          return this._LENGTHADJUST_SPACING_BackingField;
        }
      }

      public virtual ushort LENGTHADJUST_SPACINGANDGLYPHS
      {
        get
        {
          return this._LENGTHADJUST_SPACINGANDGLYPHS_BackingField;
        }
      }

      public virtual ushort LENGTHADJUST_UNKNOWN
      {
        get
        {
          return this._LENGTHADJUST_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextContentElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextContentElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextContentElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextContentElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextContentElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextContentElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextContentElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextContentElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGTextElement : dom.SVGTextPositioningElement
    {
      private static dom.SVGTextElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\")")]
      public extern SVGTextElement();

      public static dom.SVGTextElement prototype
      {
        get
        {
          return dom.SVGTextElement._prototype_BackingField;
        }
        set
        {
          dom.SVGTextElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGTextPathElement : dom.SVGTextContentElement, dom.SVGURIReference.Interface, IObject
    {
      private static dom.SVGTextPathElement _prototype_BackingField;
      private static readonly ushort _TEXTPATH_METHODTYPE_ALIGN_Static_BackingField;
      private static readonly ushort _TEXTPATH_METHODTYPE_STRETCH_Static_BackingField;
      private static readonly ushort _TEXTPATH_METHODTYPE_UNKNOWN_Static_BackingField;
      private static readonly ushort _TEXTPATH_SPACINGTYPE_AUTO_Static_BackingField;
      private static readonly ushort _TEXTPATH_SPACINGTYPE_EXACT_Static_BackingField;
      private static readonly ushort _TEXTPATH_SPACINGTYPE_UNKNOWN_Static_BackingField;
      private readonly dom.SVGAnimatedEnumeration _method_BackingField;
      private readonly dom.SVGAnimatedEnumeration _spacing_BackingField;
      private readonly dom.SVGAnimatedLength _startOffset_BackingField;
      private readonly ushort _TEXTPATH_METHODTYPE_ALIGN_BackingField;
      private readonly ushort _TEXTPATH_METHODTYPE_STRETCH_BackingField;
      private readonly ushort _TEXTPATH_METHODTYPE_UNKNOWN_BackingField;
      private readonly ushort _TEXTPATH_SPACINGTYPE_AUTO_BackingField;
      private readonly ushort _TEXTPATH_SPACINGTYPE_EXACT_BackingField;
      private readonly ushort _TEXTPATH_SPACINGTYPE_UNKNOWN_BackingField;
      private readonly dom.SVGAnimatedString _href_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"textPath\")")]
      public extern SVGTextPathElement();

      public static dom.SVGTextPathElement prototype
      {
        get
        {
          return dom.SVGTextPathElement._prototype_BackingField;
        }
        set
        {
          dom.SVGTextPathElement._prototype_BackingField = value;
        }
      }

      [Name("TEXTPATH_METHODTYPE_ALIGN")]
      public static ushort TEXTPATH_METHODTYPE_ALIGN_Static
      {
        get
        {
          return dom.SVGTextPathElement._TEXTPATH_METHODTYPE_ALIGN_Static_BackingField;
        }
      }

      [Name("TEXTPATH_METHODTYPE_STRETCH")]
      public static ushort TEXTPATH_METHODTYPE_STRETCH_Static
      {
        get
        {
          return dom.SVGTextPathElement._TEXTPATH_METHODTYPE_STRETCH_Static_BackingField;
        }
      }

      [Name("TEXTPATH_METHODTYPE_UNKNOWN")]
      public static ushort TEXTPATH_METHODTYPE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGTextPathElement._TEXTPATH_METHODTYPE_UNKNOWN_Static_BackingField;
        }
      }

      [Name("TEXTPATH_SPACINGTYPE_AUTO")]
      public static ushort TEXTPATH_SPACINGTYPE_AUTO_Static
      {
        get
        {
          return dom.SVGTextPathElement._TEXTPATH_SPACINGTYPE_AUTO_Static_BackingField;
        }
      }

      [Name("TEXTPATH_SPACINGTYPE_EXACT")]
      public static ushort TEXTPATH_SPACINGTYPE_EXACT_Static
      {
        get
        {
          return dom.SVGTextPathElement._TEXTPATH_SPACINGTYPE_EXACT_Static_BackingField;
        }
      }

      [Name("TEXTPATH_SPACINGTYPE_UNKNOWN")]
      public static ushort TEXTPATH_SPACINGTYPE_UNKNOWN_Static
      {
        get
        {
          return dom.SVGTextPathElement._TEXTPATH_SPACINGTYPE_UNKNOWN_Static_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration method
      {
        get
        {
          return this._method_BackingField;
        }
      }

      public virtual dom.SVGAnimatedEnumeration spacing
      {
        get
        {
          return this._spacing_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength startOffset
      {
        get
        {
          return this._startOffset_BackingField;
        }
      }

      public virtual ushort TEXTPATH_METHODTYPE_ALIGN
      {
        get
        {
          return this._TEXTPATH_METHODTYPE_ALIGN_BackingField;
        }
      }

      public virtual ushort TEXTPATH_METHODTYPE_STRETCH
      {
        get
        {
          return this._TEXTPATH_METHODTYPE_STRETCH_BackingField;
        }
      }

      public virtual ushort TEXTPATH_METHODTYPE_UNKNOWN
      {
        get
        {
          return this._TEXTPATH_METHODTYPE_UNKNOWN_BackingField;
        }
      }

      public virtual ushort TEXTPATH_SPACINGTYPE_AUTO
      {
        get
        {
          return this._TEXTPATH_SPACINGTYPE_AUTO_BackingField;
        }
      }

      public virtual ushort TEXTPATH_SPACINGTYPE_EXACT
      {
        get
        {
          return this._TEXTPATH_SPACINGTYPE_EXACT_BackingField;
        }
      }

      public virtual ushort TEXTPATH_SPACINGTYPE_UNKNOWN
      {
        get
        {
          return this._TEXTPATH_SPACINGTYPE_UNKNOWN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextPathElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextPathElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextPathElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextPathElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextPathElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextPathElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextPathElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextPathElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGTextPositioningElement : dom.SVGTextContentElement
    {
      private static dom.SVGTextPositioningElement _prototype_BackingField;
      private readonly dom.SVGAnimatedLengthList _dx_BackingField;
      private readonly dom.SVGAnimatedLengthList _dy_BackingField;
      private readonly dom.SVGAnimatedNumberList _rotate_BackingField;
      private readonly dom.SVGAnimatedLengthList _x_BackingField;
      private readonly dom.SVGAnimatedLengthList _y_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"textPositioning\")")]
      public extern SVGTextPositioningElement();

      public static dom.SVGTextPositioningElement prototype
      {
        get
        {
          return dom.SVGTextPositioningElement._prototype_BackingField;
        }
        set
        {
          dom.SVGTextPositioningElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGAnimatedLengthList dx
      {
        get
        {
          return this._dx_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLengthList dy
      {
        get
        {
          return this._dy_BackingField;
        }
      }

      public virtual dom.SVGAnimatedNumberList rotate
      {
        get
        {
          return this._rotate_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLengthList x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLengthList y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextPositioningElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextPositioningElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextPositioningElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTextPositioningElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextPositioningElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextPositioningElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextPositioningElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTextPositioningElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGTitleElement : dom.SVGElement
    {
      private static dom.SVGTitleElement _prototype_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"title\")")]
      public extern SVGTitleElement();

      public static dom.SVGTitleElement prototype
      {
        get
        {
          return dom.SVGTitleElement._prototype_BackingField;
        }
        set
        {
          dom.SVGTitleElement._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTitleElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTitleElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTitleElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGTitleElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTitleElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTitleElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTitleElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGTitleElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGTransform : IObject
    {
      private static dom.SVGTransform _prototype_BackingField;
      private static readonly ushort _SVG_TRANSFORM_MATRIX_Static_BackingField;
      private static readonly ushort _SVG_TRANSFORM_ROTATE_Static_BackingField;
      private static readonly ushort _SVG_TRANSFORM_SCALE_Static_BackingField;
      private static readonly ushort _SVG_TRANSFORM_SKEWX_Static_BackingField;
      private static readonly ushort _SVG_TRANSFORM_SKEWY_Static_BackingField;
      private static readonly ushort _SVG_TRANSFORM_TRANSLATE_Static_BackingField;
      private static readonly ushort _SVG_TRANSFORM_UNKNOWN_Static_BackingField;
      private readonly float _angle_BackingField;
      private readonly dom.SVGMatrix _matrix_BackingField;
      private readonly ushort _type_BackingField;
      private readonly ushort _SVG_TRANSFORM_MATRIX_BackingField;
      private readonly ushort _SVG_TRANSFORM_ROTATE_BackingField;
      private readonly ushort _SVG_TRANSFORM_SCALE_BackingField;
      private readonly ushort _SVG_TRANSFORM_SKEWX_BackingField;
      private readonly ushort _SVG_TRANSFORM_SKEWY_BackingField;
      private readonly ushort _SVG_TRANSFORM_TRANSLATE_BackingField;
      private readonly ushort _SVG_TRANSFORM_UNKNOWN_BackingField;

      public static dom.SVGTransform prototype
      {
        get
        {
          return dom.SVGTransform._prototype_BackingField;
        }
        set
        {
          dom.SVGTransform._prototype_BackingField = value;
        }
      }

      [Name("SVG_TRANSFORM_MATRIX")]
      public static ushort SVG_TRANSFORM_MATRIX_Static
      {
        get
        {
          return dom.SVGTransform._SVG_TRANSFORM_MATRIX_Static_BackingField;
        }
      }

      [Name("SVG_TRANSFORM_ROTATE")]
      public static ushort SVG_TRANSFORM_ROTATE_Static
      {
        get
        {
          return dom.SVGTransform._SVG_TRANSFORM_ROTATE_Static_BackingField;
        }
      }

      [Name("SVG_TRANSFORM_SCALE")]
      public static ushort SVG_TRANSFORM_SCALE_Static
      {
        get
        {
          return dom.SVGTransform._SVG_TRANSFORM_SCALE_Static_BackingField;
        }
      }

      [Name("SVG_TRANSFORM_SKEWX")]
      public static ushort SVG_TRANSFORM_SKEWX_Static
      {
        get
        {
          return dom.SVGTransform._SVG_TRANSFORM_SKEWX_Static_BackingField;
        }
      }

      [Name("SVG_TRANSFORM_SKEWY")]
      public static ushort SVG_TRANSFORM_SKEWY_Static
      {
        get
        {
          return dom.SVGTransform._SVG_TRANSFORM_SKEWY_Static_BackingField;
        }
      }

      [Name("SVG_TRANSFORM_TRANSLATE")]
      public static ushort SVG_TRANSFORM_TRANSLATE_Static
      {
        get
        {
          return dom.SVGTransform._SVG_TRANSFORM_TRANSLATE_Static_BackingField;
        }
      }

      [Name("SVG_TRANSFORM_UNKNOWN")]
      public static ushort SVG_TRANSFORM_UNKNOWN_Static
      {
        get
        {
          return dom.SVGTransform._SVG_TRANSFORM_UNKNOWN_Static_BackingField;
        }
      }

      public virtual float angle
      {
        get
        {
          return this._angle_BackingField;
        }
      }

      public virtual dom.SVGMatrix matrix
      {
        get
        {
          return this._matrix_BackingField;
        }
      }

      public virtual ushort type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual extern void setMatrix(dom.SVGMatrix matrix);

      public virtual extern void setRotate(float angle, float cx, float cy);

      public virtual extern void setScale(float sx, float sy);

      public virtual extern void setSkewX(float angle);

      public virtual extern void setSkewY(float angle);

      public virtual extern void setTranslate(float tx, float ty);

      public virtual ushort SVG_TRANSFORM_MATRIX
      {
        get
        {
          return this._SVG_TRANSFORM_MATRIX_BackingField;
        }
      }

      public virtual ushort SVG_TRANSFORM_ROTATE
      {
        get
        {
          return this._SVG_TRANSFORM_ROTATE_BackingField;
        }
      }

      public virtual ushort SVG_TRANSFORM_SCALE
      {
        get
        {
          return this._SVG_TRANSFORM_SCALE_BackingField;
        }
      }

      public virtual ushort SVG_TRANSFORM_SKEWX
      {
        get
        {
          return this._SVG_TRANSFORM_SKEWX_BackingField;
        }
      }

      public virtual ushort SVG_TRANSFORM_SKEWY
      {
        get
        {
          return this._SVG_TRANSFORM_SKEWY_BackingField;
        }
      }

      public virtual ushort SVG_TRANSFORM_TRANSLATE
      {
        get
        {
          return this._SVG_TRANSFORM_TRANSLATE_BackingField;
        }
      }

      public virtual ushort SVG_TRANSFORM_UNKNOWN
      {
        get
        {
          return this._SVG_TRANSFORM_UNKNOWN_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGTransformList : IEnumerable<dom.SVGTransform>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.SVGTransformList _prototype_BackingField;
      private readonly uint _numberOfItems_BackingField;

      public static dom.SVGTransformList prototype
      {
        get
        {
          return dom.SVGTransformList._prototype_BackingField;
        }
        set
        {
          dom.SVGTransformList._prototype_BackingField = value;
        }
      }

      public virtual uint numberOfItems
      {
        get
        {
          return this._numberOfItems_BackingField;
        }
      }

      public virtual extern dom.SVGTransform appendItem(dom.SVGTransform newItem);

      public virtual extern void clear();

      public virtual extern dom.SVGTransform consolidate();

      public virtual extern dom.SVGTransform createSVGTransformFromMatrix(dom.SVGMatrix matrix);

      public virtual extern dom.SVGTransform getItem(uint index);

      public virtual extern dom.SVGTransform initialize(dom.SVGTransform newItem);

      public virtual extern dom.SVGTransform insertItemBefore(
        dom.SVGTransform newItem,
        uint index);

      public virtual extern dom.SVGTransform removeItem(uint index);

      public virtual extern dom.SVGTransform replaceItem(dom.SVGTransform newItem, uint index);

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.SVGTransform> IEnumerable<dom.SVGTransform>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class SVGURIReference : dom.SVGURIReference.Interface, IObject
    {
      private readonly dom.SVGAnimatedString _href_BackingField;

      public dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.SVGAnimatedString href { get; }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class SVGUnitTypes : dom.SVGUnitTypes.Interface, IObject
    {
      private readonly ushort _SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_UNKNOWN_BackingField;
      private readonly ushort _SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;

      public ushort SVG_UNIT_TYPE_OBJECTBOUNDINGBOX
      {
        get
        {
          return this._SVG_UNIT_TYPE_OBJECTBOUNDINGBOX_BackingField;
        }
      }

      public ushort SVG_UNIT_TYPE_UNKNOWN
      {
        get
        {
          return this._SVG_UNIT_TYPE_UNKNOWN_BackingField;
        }
      }

      public ushort SVG_UNIT_TYPE_USERSPACEONUSE
      {
        get
        {
          return this._SVG_UNIT_TYPE_USERSPACEONUSE_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        ushort SVG_UNIT_TYPE_OBJECTBOUNDINGBOX { get; }

        ushort SVG_UNIT_TYPE_UNKNOWN { get; }

        ushort SVG_UNIT_TYPE_USERSPACEONUSE { get; }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGUseElement : dom.SVGGraphicsElement, dom.SVGURIReference.Interface, IObject
    {
      private static dom.SVGUseElement _prototype_BackingField;
      private readonly dom.SVGElementInstance _animatedInstanceRoot_BackingField;
      private readonly dom.SVGAnimatedLength _height_BackingField;
      private readonly dom.SVGElementInstance _instanceRoot_BackingField;
      private readonly dom.SVGAnimatedLength _width_BackingField;
      private readonly dom.SVGAnimatedLength _x_BackingField;
      private readonly dom.SVGAnimatedLength _y_BackingField;
      private readonly dom.SVGAnimatedString _href_BackingField;

      [Template("document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\")")]
      public extern SVGUseElement();

      public static dom.SVGUseElement prototype
      {
        get
        {
          return dom.SVGUseElement._prototype_BackingField;
        }
        set
        {
          dom.SVGUseElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGElementInstance animatedInstanceRoot
      {
        get
        {
          return this._animatedInstanceRoot_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual dom.SVGElementInstance instanceRoot
      {
        get
        {
          return this._instanceRoot_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength x
      {
        get
        {
          return this._x_BackingField;
        }
      }

      public virtual dom.SVGAnimatedLength y
      {
        get
        {
          return this._y_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGUseElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGUseElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGUseElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGUseElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGUseElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGUseElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGUseElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGUseElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedString href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGViewElement : dom.SVGElement, dom.SVGFitToViewBox.Interface, IObject, dom.SVGZoomAndPan.Interface
    {
      private static dom.SVGViewElement _prototype_BackingField;
      private readonly dom.SVGStringList _viewTarget_BackingField;
      private readonly dom.SVGAnimatedPreserveAspectRatio _preserveAspectRatio_BackingField;
      private readonly dom.SVGAnimatedRect _viewBox_BackingField;
      private readonly ushort _zoomAndPan_BackingField;

      public static dom.SVGViewElement prototype
      {
        get
        {
          return dom.SVGViewElement._prototype_BackingField;
        }
        set
        {
          dom.SVGViewElement._prototype_BackingField = value;
        }
      }

      public virtual dom.SVGStringList viewTarget
      {
        get
        {
          return this._viewTarget_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGViewElement.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGViewElement.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGViewElement.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SVGViewElement.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGViewElement.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGViewElement.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGViewElement.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SVGViewElement.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.SVGAnimatedPreserveAspectRatio preserveAspectRatio
      {
        get
        {
          return this._preserveAspectRatio_BackingField;
        }
      }

      public virtual dom.SVGAnimatedRect viewBox
      {
        get
        {
          return this._viewBox_BackingField;
        }
      }

      public virtual ushort zoomAndPan
      {
        get
        {
          return this._zoomAndPan_BackingField;
        }
      }

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SVGElementEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class SVGZoomAndPan : dom.SVGZoomAndPan.Interface, IObject
    {
      private readonly ushort _zoomAndPan_BackingField;

      public ushort zoomAndPan
      {
        get
        {
          return this._zoomAndPan_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        ushort zoomAndPan { get; }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SVGZoomEvent : dom.UIEvent
    {
      private static dom.SVGZoomEvent _prototype_BackingField;
      private readonly double _newScale_BackingField;
      private readonly dom.SVGPoint _newTranslate_BackingField;
      private readonly double _previousScale_BackingField;
      private readonly dom.SVGPoint _previousTranslate_BackingField;
      private readonly dom.SVGRect _zoomRectScreen_BackingField;

      public static dom.SVGZoomEvent prototype
      {
        get
        {
          return dom.SVGZoomEvent._prototype_BackingField;
        }
        set
        {
          dom.SVGZoomEvent._prototype_BackingField = value;
        }
      }

      public virtual double newScale
      {
        get
        {
          return this._newScale_BackingField;
        }
      }

      public virtual dom.SVGPoint newTranslate
      {
        get
        {
          return this._newTranslate_BackingField;
        }
      }

      public virtual double previousScale
      {
        get
        {
          return this._previousScale_BackingField;
        }
      }

      public virtual dom.SVGPoint previousTranslate
      {
        get
        {
          return this._previousTranslate_BackingField;
        }
      }

      public virtual dom.SVGRect zoomRectScreen
      {
        get
        {
          return this._zoomRectScreen_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ScopedCredential : IObject
    {
      private static dom.ScopedCredential _prototype_BackingField;
      private readonly es5.ArrayBuffer _id_BackingField;
      private readonly dom.ScopedCredentialType _type_BackingField;

      public static dom.ScopedCredential prototype
      {
        get
        {
          return dom.ScopedCredential._prototype_BackingField;
        }
        set
        {
          dom.ScopedCredential._prototype_BackingField = value;
        }
      }

      public virtual es5.ArrayBuffer id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual dom.ScopedCredentialType type
      {
        get
        {
          return this._type_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ScopedCredentialInfo : IObject
    {
      private static dom.ScopedCredentialInfo _prototype_BackingField;
      private readonly dom.ScopedCredential _credential_BackingField;
      private readonly dom.CryptoKey _publicKey_BackingField;

      public static dom.ScopedCredentialInfo prototype
      {
        get
        {
          return dom.ScopedCredentialInfo._prototype_BackingField;
        }
        set
        {
          dom.ScopedCredentialInfo._prototype_BackingField = value;
        }
      }

      public virtual dom.ScopedCredential credential
      {
        get
        {
          return this._credential_BackingField;
        }
      }

      public virtual dom.CryptoKey publicKey
      {
        get
        {
          return this._publicKey_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ScreenEventMap : IObject
    {
      private dom.Event _MSOrientationChange_BackingField;

      public dom.Event MSOrientationChange
      {
        get
        {
          return this._MSOrientationChange_BackingField;
        }
        set
        {
          this._MSOrientationChange_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"MSOrientationChange\"")]
        public static readonly KeyOf<dom.ScreenEventMap> MSOrientationChange;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Screen : dom.EventTarget
    {
      private static dom.Screen _prototype_BackingField;
      private readonly int _availHeight_BackingField;
      private readonly int _availWidth_BackingField;
      private double _bufferDepth_BackingField;
      private readonly uint _colorDepth_BackingField;
      private readonly double _deviceXDPI_BackingField;
      private readonly double _deviceYDPI_BackingField;
      private readonly bool _fontSmoothingEnabled_BackingField;
      private readonly int _height_BackingField;
      private readonly double _logicalXDPI_BackingField;
      private readonly double _logicalYDPI_BackingField;
      private readonly string _msOrientation_BackingField;
      private dom.Screen.onmsorientationchangeFn _onmsorientationchange_BackingField;
      private readonly uint _pixelDepth_BackingField;
      private readonly double _systemXDPI_BackingField;
      private readonly double _systemYDPI_BackingField;
      private readonly int _width_BackingField;

      public static dom.Screen prototype
      {
        get
        {
          return dom.Screen._prototype_BackingField;
        }
        set
        {
          dom.Screen._prototype_BackingField = value;
        }
      }

      public virtual int availHeight
      {
        get
        {
          return this._availHeight_BackingField;
        }
      }

      public virtual int availWidth
      {
        get
        {
          return this._availWidth_BackingField;
        }
      }

      public virtual double bufferDepth
      {
        get
        {
          return this._bufferDepth_BackingField;
        }
        set
        {
          this._bufferDepth_BackingField = value;
        }
      }

      public virtual uint colorDepth
      {
        get
        {
          return this._colorDepth_BackingField;
        }
      }

      public virtual double deviceXDPI
      {
        get
        {
          return this._deviceXDPI_BackingField;
        }
      }

      public virtual double deviceYDPI
      {
        get
        {
          return this._deviceYDPI_BackingField;
        }
      }

      public virtual bool fontSmoothingEnabled
      {
        get
        {
          return this._fontSmoothingEnabled_BackingField;
        }
      }

      public virtual int height
      {
        get
        {
          return this._height_BackingField;
        }
      }

      public virtual double logicalXDPI
      {
        get
        {
          return this._logicalXDPI_BackingField;
        }
      }

      public virtual double logicalYDPI
      {
        get
        {
          return this._logicalYDPI_BackingField;
        }
      }

      public virtual string msOrientation
      {
        get
        {
          return this._msOrientation_BackingField;
        }
      }

      public virtual dom.Screen.onmsorientationchangeFn onmsorientationchange
      {
        get
        {
          return this._onmsorientationchange_BackingField;
        }
        set
        {
          this._onmsorientationchange_BackingField = value;
        }
      }

      public virtual uint pixelDepth
      {
        get
        {
          return this._pixelDepth_BackingField;
        }
      }

      public virtual double systemXDPI
      {
        get
        {
          return this._systemXDPI_BackingField;
        }
      }

      public virtual double systemYDPI
      {
        get
        {
          return this._systemYDPI_BackingField;
        }
      }

      public virtual int width
      {
        get
        {
          return this._width_BackingField;
        }
      }

      public virtual extern bool lockOrientation(
        Union<dom.OrientationLockType, dom.OrientationLockType[]> orientations);

      public virtual extern bool lockOrientation(dom.OrientationLockType orientations);

      public virtual extern bool lockOrientation(dom.OrientationLockType[] orientations);

      public virtual extern bool msLockOrientation(Union<string, string[]> orientations);

      public virtual extern bool msLockOrientation(string orientations);

      public virtual extern bool msLockOrientation(string[] orientations);

      public virtual extern void msUnlockOrientation();

      public virtual extern void unlockOrientation();

      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Screen.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Screen.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Screen.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Screen.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Screen.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Screen.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Screen.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Screen.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onmsorientationchangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ScriptProcessorNodeEventMap : IObject
    {
      private dom.AudioProcessingEvent _audioprocess_BackingField;

      public dom.AudioProcessingEvent audioprocess
      {
        get
        {
          return this._audioprocess_BackingField;
        }
        set
        {
          this._audioprocess_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"audioprocess\"")]
        public static readonly KeyOf<dom.ScriptProcessorNodeEventMap> audioprocess;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ScriptProcessorNode : dom.AudioNode
    {
      private static dom.ScriptProcessorNode _prototype_BackingField;
      private readonly double _bufferSize_BackingField;
      private dom.ScriptProcessorNode.onaudioprocessFn _onaudioprocess_BackingField;

      public static dom.ScriptProcessorNode prototype
      {
        get
        {
          return dom.ScriptProcessorNode._prototype_BackingField;
        }
        set
        {
          dom.ScriptProcessorNode._prototype_BackingField = value;
        }
      }

      public virtual double bufferSize
      {
        get
        {
          return this._bufferSize_BackingField;
        }
      }

      public virtual dom.ScriptProcessorNode.onaudioprocessFn onaudioprocess
      {
        get
        {
          return this._onaudioprocess_BackingField;
        }
        set
        {
          this._onaudioprocess_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ScriptProcessorNode.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ScriptProcessorNode.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ScriptProcessorNode.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ScriptProcessorNode.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void addEventListener(string type, dom.EventListener listener);

      public override extern void addEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public override extern void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ScriptProcessorNode.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ScriptProcessorNode.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ScriptProcessorNode.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ScriptProcessorNode.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public override extern void removeEventListener(string type, dom.EventListener listener);

      public override extern void removeEventListener(string type, dom.EventListenerObject listener);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public override extern void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onaudioprocessFn(dom.AudioProcessingEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ScrollIntoViewOptions : dom.ScrollOptions
    {
      private dom.ScrollLogicalPosition _block_BackingField;
      private dom.ScrollLogicalPosition _inline_BackingField;

      public dom.ScrollLogicalPosition block
      {
        get
        {
          return this._block_BackingField;
        }
        set
        {
          this._block_BackingField = value;
        }
      }

      public dom.ScrollLogicalPosition inline
      {
        get
        {
          return this._inline_BackingField;
        }
        set
        {
          this._inline_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ScrollOptions : IObject
    {
      private dom.ScrollBehavior _behavior_BackingField;

      public dom.ScrollBehavior behavior
      {
        get
        {
          return this._behavior_BackingField;
        }
        set
        {
          this._behavior_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ScrollToOptions : dom.ScrollOptions
    {
      private double? _left_BackingField;
      private double? _top_BackingField;

      public double? left
      {
        get
        {
          return this._left_BackingField;
        }
        set
        {
          this._left_BackingField = value;
        }
      }

      public double? top
      {
        get
        {
          return this._top_BackingField;
        }
        set
        {
          this._top_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SecurityPolicyViolationEvent : dom.Event
    {
      private static dom.SecurityPolicyViolationEvent _prototype_BackingField;
      private readonly string _blockedURI_BackingField;
      private readonly double _columnNumber_BackingField;
      private readonly string _documentURI_BackingField;
      private readonly string _effectiveDirective_BackingField;
      private readonly double _lineNumber_BackingField;
      private readonly string _originalPolicy_BackingField;
      private readonly string _referrer_BackingField;
      private readonly string _sourceFile_BackingField;
      private readonly double _statusCode_BackingField;
      private readonly string _violatedDirective_BackingField;

      public extern SecurityPolicyViolationEvent(string type);

      public extern SecurityPolicyViolationEvent(
        string type,
        dom.SecurityPolicyViolationEventInit eventInitDict);

      public static dom.SecurityPolicyViolationEvent prototype
      {
        get
        {
          return dom.SecurityPolicyViolationEvent._prototype_BackingField;
        }
        set
        {
          dom.SecurityPolicyViolationEvent._prototype_BackingField = value;
        }
      }

      public virtual string blockedURI
      {
        get
        {
          return this._blockedURI_BackingField;
        }
      }

      public virtual double columnNumber
      {
        get
        {
          return this._columnNumber_BackingField;
        }
      }

      public virtual string documentURI
      {
        get
        {
          return this._documentURI_BackingField;
        }
      }

      public virtual string effectiveDirective
      {
        get
        {
          return this._effectiveDirective_BackingField;
        }
      }

      public virtual double lineNumber
      {
        get
        {
          return this._lineNumber_BackingField;
        }
      }

      public virtual string originalPolicy
      {
        get
        {
          return this._originalPolicy_BackingField;
        }
      }

      public virtual string referrer
      {
        get
        {
          return this._referrer_BackingField;
        }
      }

      public virtual string sourceFile
      {
        get
        {
          return this._sourceFile_BackingField;
        }
      }

      public virtual double statusCode
      {
        get
        {
          return this._statusCode_BackingField;
        }
      }

      public virtual string violatedDirective
      {
        get
        {
          return this._violatedDirective_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Selection : IObject
    {
      private static dom.Selection _prototype_BackingField;
      private readonly dom.Node _anchorNode_BackingField;
      private readonly double _anchorOffset_BackingField;
      private readonly dom.Node _baseNode_BackingField;
      private readonly double _baseOffset_BackingField;
      private readonly dom.Node _extentNode_BackingField;
      private readonly double _extentOffset_BackingField;
      private readonly dom.Node _focusNode_BackingField;
      private readonly double _focusOffset_BackingField;
      private readonly bool _isCollapsed_BackingField;
      private readonly double _rangeCount_BackingField;
      private readonly string _type_BackingField;

      public static dom.Selection prototype
      {
        get
        {
          return dom.Selection._prototype_BackingField;
        }
        set
        {
          dom.Selection._prototype_BackingField = value;
        }
      }

      public virtual dom.Node anchorNode
      {
        get
        {
          return this._anchorNode_BackingField;
        }
      }

      public virtual double anchorOffset
      {
        get
        {
          return this._anchorOffset_BackingField;
        }
      }

      public virtual dom.Node baseNode
      {
        get
        {
          return this._baseNode_BackingField;
        }
      }

      public virtual double baseOffset
      {
        get
        {
          return this._baseOffset_BackingField;
        }
      }

      public virtual dom.Node extentNode
      {
        get
        {
          return this._extentNode_BackingField;
        }
      }

      public virtual double extentOffset
      {
        get
        {
          return this._extentOffset_BackingField;
        }
      }

      public virtual dom.Node focusNode
      {
        get
        {
          return this._focusNode_BackingField;
        }
      }

      public virtual double focusOffset
      {
        get
        {
          return this._focusOffset_BackingField;
        }
      }

      public virtual bool isCollapsed
      {
        get
        {
          return this._isCollapsed_BackingField;
        }
      }

      public virtual double rangeCount
      {
        get
        {
          return this._rangeCount_BackingField;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual extern void addRange(dom.Range range);

      public virtual extern void collapse(dom.Node parentNode, double offset);

      public virtual extern void collapseToEnd();

      public virtual extern void collapseToStart();

      public virtual extern bool containsNode(dom.Node node, bool partlyContained);

      public virtual extern void deleteFromDocument();

      public virtual extern void empty();

      public virtual extern void extend(dom.Node newNode, double offset);

      public virtual extern dom.Range getRangeAt(double index);

      public virtual extern void removeAllRanges();

      public virtual extern void removeRange(dom.Range range);

      public virtual extern void selectAllChildren(dom.Node parentNode);

      public virtual extern void setBaseAndExtent(
        dom.Node baseNode,
        double baseOffset,
        dom.Node extentNode,
        double extentOffset);

      public virtual extern void setPosition(dom.Node parentNode, double offset);

      public virtual extern string toString();
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class ServiceUIFrameContext : IObject
    {
      public abstract string getCachedFrameMessage(string key);

      public abstract void postFrameMessage(string key, string data);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ServiceWorkerEventMap : dom.AbstractWorkerEventMap
    {
      private dom.Event _statechange_BackingField;

      public dom.Event statechange
      {
        get
        {
          return this._statechange_BackingField;
        }
        set
        {
          this._statechange_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"statechange\"")]
        public static readonly KeyOf<dom.ServiceWorkerEventMap> statechange;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ServiceWorker : dom.EventTarget, dom.AbstractWorker.Interface, IObject
    {
      private static dom.ServiceWorker _prototype_BackingField;
      private dom.ServiceWorker.onstatechangeFn _onstatechange_BackingField;
      private readonly string _scriptURL_BackingField;
      private readonly dom.ServiceWorkerState _state_BackingField;
      private dom.AbstractWorker.onerrorFn _onerror_BackingField;

      public static dom.ServiceWorker prototype
      {
        get
        {
          return dom.ServiceWorker._prototype_BackingField;
        }
        set
        {
          dom.ServiceWorker._prototype_BackingField = value;
        }
      }

      public virtual dom.ServiceWorker.onstatechangeFn onstatechange
      {
        get
        {
          return this._onstatechange_BackingField;
        }
        set
        {
          this._onstatechange_BackingField = value;
        }
      }

      public virtual string scriptURL
      {
        get
        {
          return this._scriptURL_BackingField;
        }
      }

      public virtual dom.ServiceWorkerState state
      {
        get
        {
          return this._state_BackingField;
        }
      }

      public virtual extern void postMessage(object message);

      public virtual extern void postMessage(object message, object[] transfer);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorker.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorker.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorker.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorker.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorker.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorker.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorker.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorker.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual dom.AbstractWorker.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onstatechangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ServiceWorkerContainerEventMap : IObject
    {
      private dom.Event _controllerchange_BackingField;
      private dom.ServiceWorkerMessageEvent _message_BackingField;
      private dom.MessageEvent _messageerror_BackingField;

      public dom.Event controllerchange
      {
        get
        {
          return this._controllerchange_BackingField;
        }
        set
        {
          this._controllerchange_BackingField = value;
        }
      }

      public dom.ServiceWorkerMessageEvent message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      public dom.MessageEvent messageerror
      {
        get
        {
          return this._messageerror_BackingField;
        }
        set
        {
          this._messageerror_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"controllerchange\"")]
        public static readonly KeyOf<dom.ServiceWorkerContainerEventMap> controllerchange;
        [Template("\"message\"")]
        public static readonly KeyOf<dom.ServiceWorkerContainerEventMap> message;
        [Template("\"messageerror\"")]
        public static readonly KeyOf<dom.ServiceWorkerContainerEventMap> messageerror;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ServiceWorkerContainer : dom.EventTarget
    {
      private static dom.ServiceWorkerContainer _prototype_BackingField;
      private readonly dom.ServiceWorker _controller_BackingField;
      private dom.ServiceWorkerContainer.oncontrollerchangeFn _oncontrollerchange_BackingField;
      private dom.ServiceWorkerContainer.onmessageFn _onmessage_BackingField;
      private dom.ServiceWorkerContainer.onmessageerrorFn _onmessageerror_BackingField;
      private readonly es5.Promise<dom.ServiceWorkerRegistration> _ready_BackingField;

      public static dom.ServiceWorkerContainer prototype
      {
        get
        {
          return dom.ServiceWorkerContainer._prototype_BackingField;
        }
        set
        {
          dom.ServiceWorkerContainer._prototype_BackingField = value;
        }
      }

      public virtual dom.ServiceWorker controller
      {
        get
        {
          return this._controller_BackingField;
        }
      }

      public virtual dom.ServiceWorkerContainer.oncontrollerchangeFn oncontrollerchange
      {
        get
        {
          return this._oncontrollerchange_BackingField;
        }
        set
        {
          this._oncontrollerchange_BackingField = value;
        }
      }

      public virtual dom.ServiceWorkerContainer.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual dom.ServiceWorkerContainer.onmessageerrorFn onmessageerror
      {
        get
        {
          return this._onmessageerror_BackingField;
        }
        set
        {
          this._onmessageerror_BackingField = value;
        }
      }

      public virtual es5.Promise<dom.ServiceWorkerRegistration> ready
      {
        get
        {
          return this._ready_BackingField;
        }
      }

      public virtual extern es5.Promise<Union<dom.ServiceWorkerRegistration, Undefined>> getRegistration();

      public virtual extern es5.Promise<Union<dom.ServiceWorkerRegistration, Undefined>> getRegistration(
        string clientURL);

      public virtual extern es5.Promise<dom.ServiceWorkerRegistration[]> getRegistrations();

      public virtual extern es5.Promise<dom.ServiceWorkerRegistration> register(
        string scriptURL);

      public virtual extern es5.Promise<dom.ServiceWorkerRegistration> register(
        string scriptURL,
        dom.RegistrationOptions options);

      public virtual extern void startMessages();

      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorkerContainer.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorkerContainer.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorkerContainer.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorkerContainer.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorkerContainer.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorkerContainer.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorkerContainer.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorkerContainer.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void oncontrollerchangeFn(dom.Event ev);

      [Generated]
      public delegate void onmessageFn(dom.ServiceWorkerMessageEvent ev);

      [Generated]
      public delegate void onmessageerrorFn(dom.MessageEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class ServiceWorkerMessageEvent : dom.Event
    {
      private static dom.ServiceWorkerMessageEvent _prototype_BackingField;
      private readonly object _data_BackingField;
      private readonly string _lastEventId_BackingField;
      private readonly string _origin_BackingField;
      private readonly es5.ReadonlyArray<dom.MessagePort> _ports_BackingField;
      private readonly Union<dom.ServiceWorker, dom.MessagePort, Null> _source_BackingField;

      public extern ServiceWorkerMessageEvent(string type);

      public extern ServiceWorkerMessageEvent(
        string type,
        dom.ServiceWorkerMessageEventInit eventInitDict);

      public static dom.ServiceWorkerMessageEvent prototype
      {
        get
        {
          return dom.ServiceWorkerMessageEvent._prototype_BackingField;
        }
        set
        {
          dom.ServiceWorkerMessageEvent._prototype_BackingField = value;
        }
      }

      public virtual object data
      {
        get
        {
          return this._data_BackingField;
        }
      }

      public virtual string lastEventId
      {
        get
        {
          return this._lastEventId_BackingField;
        }
      }

      public virtual string origin
      {
        get
        {
          return this._origin_BackingField;
        }
      }

      public virtual es5.ReadonlyArray<dom.MessagePort> ports
      {
        get
        {
          return this._ports_BackingField;
        }
      }

      public virtual Union<dom.ServiceWorker, dom.MessagePort, Null> source
      {
        get
        {
          return this._source_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ServiceWorkerRegistrationEventMap : IObject
    {
      private dom.Event _updatefound_BackingField;

      public dom.Event updatefound
      {
        get
        {
          return this._updatefound_BackingField;
        }
        set
        {
          this._updatefound_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"updatefound\"")]
        public static readonly KeyOf<dom.ServiceWorkerRegistrationEventMap> updatefound;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ServiceWorkerRegistration : dom.EventTarget
    {
      private static dom.ServiceWorkerRegistration _prototype_BackingField;
      private readonly dom.ServiceWorker _active_BackingField;
      private readonly dom.ServiceWorker _installing_BackingField;
      private dom.ServiceWorkerRegistration.onupdatefoundFn _onupdatefound_BackingField;
      private readonly dom.PushManager _pushManager_BackingField;
      private readonly string _scope_BackingField;
      private readonly dom.SyncManager _sync_BackingField;
      private readonly dom.ServiceWorker _waiting_BackingField;

      public static dom.ServiceWorkerRegistration prototype
      {
        get
        {
          return dom.ServiceWorkerRegistration._prototype_BackingField;
        }
        set
        {
          dom.ServiceWorkerRegistration._prototype_BackingField = value;
        }
      }

      public virtual dom.ServiceWorker active
      {
        get
        {
          return this._active_BackingField;
        }
      }

      public virtual dom.ServiceWorker installing
      {
        get
        {
          return this._installing_BackingField;
        }
      }

      public virtual dom.ServiceWorkerRegistration.onupdatefoundFn onupdatefound
      {
        get
        {
          return this._onupdatefound_BackingField;
        }
        set
        {
          this._onupdatefound_BackingField = value;
        }
      }

      public virtual dom.PushManager pushManager
      {
        get
        {
          return this._pushManager_BackingField;
        }
      }

      public virtual string scope
      {
        get
        {
          return this._scope_BackingField;
        }
      }

      public virtual dom.SyncManager sync
      {
        get
        {
          return this._sync_BackingField;
        }
      }

      public virtual dom.ServiceWorker waiting
      {
        get
        {
          return this._waiting_BackingField;
        }
      }

      public virtual extern es5.Promise<dom.Notification[]> getNotifications();

      public virtual extern es5.Promise<dom.Notification[]> getNotifications(
        dom.GetNotificationOptions filter);

      public virtual extern es5.Promise<H5.Primitive.Void> showNotification(string title);

      public virtual extern es5.Promise<H5.Primitive.Void> showNotification(
        string title,
        dom.NotificationOptions options);

      public virtual extern es5.Promise<bool> unregister();

      public virtual extern es5.Promise<H5.Primitive.Void> update();

      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorkerRegistration.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorkerRegistration.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorkerRegistration.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.ServiceWorkerRegistration.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorkerRegistration.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorkerRegistration.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorkerRegistration.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.ServiceWorkerRegistration.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onupdatefoundFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class ShadowRoot : dom.DocumentOrShadowRoot, dom.DocumentFragment.Interface, dom.Node.Interface, dom.EventTarget.Interface, IObject, dom.ParentNode.Interface
    {
      private string _innerHTML_BackingField;
      private string _nodeValue_BackingField;
      private string _textContent_BackingField;

      public abstract dom.Element host { get; }

      public virtual string innerHTML
      {
        get
        {
          return this._innerHTML_BackingField;
        }
        set
        {
          this._innerHTML_BackingField = value;
        }
      }

      public abstract dom.HTMLElement getElementById(string elementId);

      public abstract string baseURI { get; }

      public abstract dom.NodeListOf<Intersection<dom.Node, dom.ChildNode>> childNodes { get; }

      public abstract dom.Node firstChild { get; }

      public abstract bool isConnected { get; }

      public abstract dom.Node lastChild { get; }

      public abstract string localName { get; }

      public abstract string namespaceURI { get; }

      public abstract dom.Node nextSibling { get; }

      public abstract string nodeName { get; }

      public abstract ushort nodeType { get; }

      public virtual string nodeValue
      {
        get
        {
          return this._nodeValue_BackingField;
        }
        set
        {
          this._nodeValue_BackingField = value;
        }
      }

      public abstract dom.Document ownerDocument { get; }

      public abstract dom.HTMLElement parentElement { get; }

      public abstract dom.Node parentNode { get; }

      public abstract dom.Node previousSibling { get; }

      public virtual string textContent
      {
        get
        {
          return this._textContent_BackingField;
        }
        set
        {
          this._textContent_BackingField = value;
        }
      }

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public abstract T appendChild<T>(T newChild);

      public abstract dom.Node cloneNode();

      public abstract dom.Node cloneNode(bool deep);

      public abstract ushort compareDocumentPosition(dom.Node other);

      public abstract bool contains(dom.Node child);

      public abstract bool hasChildNodes();

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public abstract T insertBefore<T>(T newChild, dom.Node refChild);

      public abstract bool isDefaultNamespace(string namespaceURI);

      public abstract bool isEqualNode(dom.Node arg);

      public abstract bool isSameNode(dom.Node other);

      public abstract string lookupNamespaceURI(string prefix);

      public abstract string lookupPrefix(string namespaceURI);

      public abstract void normalize();

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public abstract T removeChild<T>(T oldChild);

      [Where("T", typeof (dom.Node.Interface), EnableImplicitConversion = true)]
      public abstract T replaceChild<T>(dom.Node newChild, T oldChild);

      public abstract ushort ATTRIBUTE_NODE { get; }

      public abstract ushort CDATA_SECTION_NODE { get; }

      public abstract ushort COMMENT_NODE { get; }

      public abstract ushort DOCUMENT_FRAGMENT_NODE { get; }

      public abstract ushort DOCUMENT_NODE { get; }

      public abstract ushort DOCUMENT_POSITION_CONTAINED_BY { get; }

      public abstract ushort DOCUMENT_POSITION_CONTAINS { get; }

      public abstract ushort DOCUMENT_POSITION_DISCONNECTED { get; }

      public abstract ushort DOCUMENT_POSITION_FOLLOWING { get; }

      public abstract ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC { get; }

      public abstract ushort DOCUMENT_POSITION_PRECEDING { get; }

      public abstract ushort DOCUMENT_TYPE_NODE { get; }

      public abstract ushort ELEMENT_NODE { get; }

      public abstract ushort ENTITY_NODE { get; }

      public abstract ushort ENTITY_REFERENCE_NODE { get; }

      public abstract ushort NOTATION_NODE { get; }

      public abstract ushort PROCESSING_INSTRUCTION_NODE { get; }

      public abstract ushort TEXT_NODE { get; }

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void addEventListener(string type, dom.EventListener listener);

      public abstract void addEventListener(string type, dom.EventListenerObject listener);

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(string type, dom.EventListener listener, bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public abstract bool dispatchEvent(dom.Event evt);

      public abstract void removeEventListener(string type);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void removeEventListener(string type, dom.EventListener listener);

      public abstract void removeEventListener(string type, dom.EventListenerObject listener);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<dom.EventListenerOptions, bool> options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract uint childElementCount { get; }

      public abstract dom.Element firstElementChild { get; }

      public abstract dom.Element lastElementChild { get; }

      public abstract dom.HTMLCollection children { get; }

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract object querySelector<K>(K selectors);

      [Name("querySelector")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract object querySelector2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public abstract Union<E, Null> querySelector<E>(string selectors);

      [Where("K", typeof (KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

      [Name("querySelectorAll")]
      [Where("K", typeof (KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
      public abstract dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

      [Where("E", typeof (dom.Element), EnableImplicitConversion = true)]
      public abstract dom.NodeListOf<E> querySelectorAll<E>(string selectors);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ShadowRootInit : IObject
    {
      private bool? _delegatesFocus_BackingField;
      private dom.Literals.Options.mode _mode_BackingField;

      public bool? delegatesFocus
      {
        get
        {
          return this._delegatesFocus_BackingField;
        }
        set
        {
          this._delegatesFocus_BackingField = value;
        }
      }

      public dom.Literals.Options.mode mode
      {
        get
        {
          return this._mode_BackingField;
        }
        set
        {
          this._mode_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SourceBuffer : dom.EventTarget
    {
      private static dom.SourceBuffer _prototype_BackingField;
      private double _appendWindowEnd_BackingField;
      private double _appendWindowStart_BackingField;
      private readonly dom.AudioTrackList _audioTracks_BackingField;
      private readonly dom.TimeRanges _buffered_BackingField;
      private dom.AppendMode _mode_BackingField;
      private double _timestampOffset_BackingField;
      private readonly bool _updating_BackingField;
      private readonly dom.VideoTrackList _videoTracks_BackingField;

      public static dom.SourceBuffer prototype
      {
        get
        {
          return dom.SourceBuffer._prototype_BackingField;
        }
        set
        {
          dom.SourceBuffer._prototype_BackingField = value;
        }
      }

      public virtual double appendWindowEnd
      {
        get
        {
          return this._appendWindowEnd_BackingField;
        }
        set
        {
          this._appendWindowEnd_BackingField = value;
        }
      }

      public virtual double appendWindowStart
      {
        get
        {
          return this._appendWindowStart_BackingField;
        }
        set
        {
          this._appendWindowStart_BackingField = value;
        }
      }

      public virtual dom.AudioTrackList audioTracks
      {
        get
        {
          return this._audioTracks_BackingField;
        }
      }

      public virtual dom.TimeRanges buffered
      {
        get
        {
          return this._buffered_BackingField;
        }
      }

      public virtual dom.AppendMode mode
      {
        get
        {
          return this._mode_BackingField;
        }
        set
        {
          this._mode_BackingField = value;
        }
      }

      public virtual double timestampOffset
      {
        get
        {
          return this._timestampOffset_BackingField;
        }
        set
        {
          this._timestampOffset_BackingField = value;
        }
      }

      public virtual bool updating
      {
        get
        {
          return this._updating_BackingField;
        }
      }

      public virtual dom.VideoTrackList videoTracks
      {
        get
        {
          return this._videoTracks_BackingField;
        }
      }

      public virtual extern void abort();

      public virtual extern void appendBuffer(
        Union<es5.ArrayBuffer, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> data);

      public virtual extern void appendBuffer(es5.ArrayBuffer data);

      public virtual extern void appendBuffer(es5.Int8Array data);

      public virtual extern void appendBuffer(es5.Int16Array data);

      public virtual extern void appendBuffer(es5.Int32Array data);

      public virtual extern void appendBuffer(es5.Uint8Array data);

      public virtual extern void appendBuffer(es5.Uint16Array data);

      public virtual extern void appendBuffer(es5.Uint32Array data);

      public virtual extern void appendBuffer(es5.Uint8ClampedArray data);

      public virtual extern void appendBuffer(es5.Float32Array data);

      public virtual extern void appendBuffer(es5.Float64Array data);

      public virtual extern void appendBuffer(es5.DataView data);

      public virtual extern void appendBuffer(Null data);

      public virtual extern void appendStream(dom.MSStream stream);

      public virtual extern void appendStream(dom.MSStream stream, double maxSize);

      public virtual extern void remove(double start, double end);
    }

    [CombinedClass]
    [FormerInterface]
    public class SourceBufferList : dom.EventTarget
    {
      private static dom.SourceBufferList _prototype_BackingField;
      private readonly double _length_BackingField;

      public static dom.SourceBufferList prototype
      {
        get
        {
          return dom.SourceBufferList._prototype_BackingField;
        }
        set
        {
          dom.SourceBufferList._prototype_BackingField = value;
        }
      }

      public virtual double length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.SourceBuffer item(double index);

      public virtual extern dom.SourceBuffer this[double index] { get; set; }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class SpeechSynthesisEventMap : IObject
    {
      private dom.Event _voiceschanged_BackingField;

      public dom.Event voiceschanged
      {
        get
        {
          return this._voiceschanged_BackingField;
        }
        set
        {
          this._voiceschanged_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"voiceschanged\"")]
        public static readonly KeyOf<dom.SpeechSynthesisEventMap> voiceschanged;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SpeechSynthesis : dom.EventTarget
    {
      private static dom.SpeechSynthesis _prototype_BackingField;
      private dom.SpeechSynthesis.onvoiceschangedFn _onvoiceschanged_BackingField;
      private readonly bool _paused_BackingField;
      private readonly bool _pending_BackingField;
      private readonly bool _speaking_BackingField;

      public static dom.SpeechSynthesis prototype
      {
        get
        {
          return dom.SpeechSynthesis._prototype_BackingField;
        }
        set
        {
          dom.SpeechSynthesis._prototype_BackingField = value;
        }
      }

      public virtual dom.SpeechSynthesis.onvoiceschangedFn onvoiceschanged
      {
        get
        {
          return this._onvoiceschanged_BackingField;
        }
        set
        {
          this._onvoiceschanged_BackingField = value;
        }
      }

      public virtual bool paused
      {
        get
        {
          return this._paused_BackingField;
        }
      }

      public virtual bool pending
      {
        get
        {
          return this._pending_BackingField;
        }
      }

      public virtual bool speaking
      {
        get
        {
          return this._speaking_BackingField;
        }
      }

      public virtual extern void cancel();

      public virtual extern dom.SpeechSynthesisVoice[] getVoices();

      public virtual extern void pause();

      public virtual extern void resume();

      public virtual extern void speak(dom.SpeechSynthesisUtterance utterance);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SpeechSynthesis.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SpeechSynthesis.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SpeechSynthesis.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SpeechSynthesis.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SpeechSynthesis.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SpeechSynthesis.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SpeechSynthesis.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SpeechSynthesis.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onvoiceschangedFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SpeechSynthesisEvent : dom.Event
    {
      private static dom.SpeechSynthesisEvent _prototype_BackingField;
      private readonly double _charIndex_BackingField;
      private readonly double _charLength_BackingField;
      private readonly double _elapsedTime_BackingField;
      private readonly string _name_BackingField;
      private readonly dom.SpeechSynthesisUtterance _utterance_BackingField;

      public extern SpeechSynthesisEvent(string type);

      public extern SpeechSynthesisEvent(string type, dom.SpeechSynthesisEventInit eventInitDict);

      public static dom.SpeechSynthesisEvent prototype
      {
        get
        {
          return dom.SpeechSynthesisEvent._prototype_BackingField;
        }
        set
        {
          dom.SpeechSynthesisEvent._prototype_BackingField = value;
        }
      }

      public virtual double charIndex
      {
        get
        {
          return this._charIndex_BackingField;
        }
      }

      public virtual double charLength
      {
        get
        {
          return this._charLength_BackingField;
        }
      }

      public virtual double elapsedTime
      {
        get
        {
          return this._elapsedTime_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual dom.SpeechSynthesisUtterance utterance
      {
        get
        {
          return this._utterance_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class SpeechSynthesisUtteranceEventMap : IObject
    {
      private dom.Event _boundary_BackingField;
      private dom.Event _end_BackingField;
      private dom.Event _error_BackingField;
      private dom.Event _mark_BackingField;
      private dom.Event _pause_BackingField;
      private dom.Event _resume_BackingField;
      private dom.Event _start_BackingField;

      public dom.Event boundary
      {
        get
        {
          return this._boundary_BackingField;
        }
        set
        {
          this._boundary_BackingField = value;
        }
      }

      public dom.Event end
      {
        get
        {
          return this._end_BackingField;
        }
        set
        {
          this._end_BackingField = value;
        }
      }

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.Event mark
      {
        get
        {
          return this._mark_BackingField;
        }
        set
        {
          this._mark_BackingField = value;
        }
      }

      public dom.Event pause
      {
        get
        {
          return this._pause_BackingField;
        }
        set
        {
          this._pause_BackingField = value;
        }
      }

      public dom.Event resume
      {
        get
        {
          return this._resume_BackingField;
        }
        set
        {
          this._resume_BackingField = value;
        }
      }

      public dom.Event start
      {
        get
        {
          return this._start_BackingField;
        }
        set
        {
          this._start_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"boundary\"")]
        public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> boundary;
        [Template("\"end\"")]
        public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> end;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> error;
        [Template("\"mark\"")]
        public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> mark;
        [Template("\"pause\"")]
        public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> pause;
        [Template("\"resume\"")]
        public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> resume;
        [Template("\"start\"")]
        public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> start;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class SpeechSynthesisUtterance : dom.EventTarget
    {
      private static dom.SpeechSynthesisUtterance _prototype_BackingField;
      private string _lang_BackingField;
      private dom.SpeechSynthesisUtterance.onboundaryFn _onboundary_BackingField;
      private dom.SpeechSynthesisUtterance.onboundaryFn _onend_BackingField;
      private dom.SpeechSynthesisUtterance.onboundaryFn _onerror_BackingField;
      private dom.SpeechSynthesisUtterance.onboundaryFn _onmark_BackingField;
      private dom.SpeechSynthesisUtterance.onboundaryFn _onpause_BackingField;
      private dom.SpeechSynthesisUtterance.onboundaryFn _onresume_BackingField;
      private dom.SpeechSynthesisUtterance.onboundaryFn _onstart_BackingField;
      private double _pitch_BackingField;
      private double _rate_BackingField;
      private string _text_BackingField;
      private dom.SpeechSynthesisVoice _voice_BackingField;
      private double _volume_BackingField;

      public extern SpeechSynthesisUtterance();

      public extern SpeechSynthesisUtterance(string text);

      public static dom.SpeechSynthesisUtterance prototype
      {
        get
        {
          return dom.SpeechSynthesisUtterance._prototype_BackingField;
        }
        set
        {
          dom.SpeechSynthesisUtterance._prototype_BackingField = value;
        }
      }

      public virtual string lang
      {
        get
        {
          return this._lang_BackingField;
        }
        set
        {
          this._lang_BackingField = value;
        }
      }

      public virtual dom.SpeechSynthesisUtterance.onboundaryFn onboundary
      {
        get
        {
          return this._onboundary_BackingField;
        }
        set
        {
          this._onboundary_BackingField = value;
        }
      }

      public virtual dom.SpeechSynthesisUtterance.onboundaryFn onend
      {
        get
        {
          return this._onend_BackingField;
        }
        set
        {
          this._onend_BackingField = value;
        }
      }

      public virtual dom.SpeechSynthesisUtterance.onboundaryFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.SpeechSynthesisUtterance.onboundaryFn onmark
      {
        get
        {
          return this._onmark_BackingField;
        }
        set
        {
          this._onmark_BackingField = value;
        }
      }

      public virtual dom.SpeechSynthesisUtterance.onboundaryFn onpause
      {
        get
        {
          return this._onpause_BackingField;
        }
        set
        {
          this._onpause_BackingField = value;
        }
      }

      public virtual dom.SpeechSynthesisUtterance.onboundaryFn onresume
      {
        get
        {
          return this._onresume_BackingField;
        }
        set
        {
          this._onresume_BackingField = value;
        }
      }

      public virtual dom.SpeechSynthesisUtterance.onboundaryFn onstart
      {
        get
        {
          return this._onstart_BackingField;
        }
        set
        {
          this._onstart_BackingField = value;
        }
      }

      public virtual double pitch
      {
        get
        {
          return this._pitch_BackingField;
        }
        set
        {
          this._pitch_BackingField = value;
        }
      }

      public virtual double rate
      {
        get
        {
          return this._rate_BackingField;
        }
        set
        {
          this._rate_BackingField = value;
        }
      }

      public virtual string text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }

      public virtual dom.SpeechSynthesisVoice voice
      {
        get
        {
          return this._voice_BackingField;
        }
        set
        {
          this._voice_BackingField = value;
        }
      }

      public virtual double volume
      {
        get
        {
          return this._volume_BackingField;
        }
        set
        {
          this._volume_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SpeechSynthesisUtterance.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SpeechSynthesisUtterance.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SpeechSynthesisUtterance.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.SpeechSynthesisUtterance.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SpeechSynthesisUtterance.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SpeechSynthesisUtterance.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SpeechSynthesisUtterance.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.SpeechSynthesisUtterance.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onboundaryFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class SpeechSynthesisVoice : IObject
    {
      private static dom.SpeechSynthesisVoice _prototype_BackingField;
      private readonly bool _default_BackingField;
      private readonly string _lang_BackingField;
      private readonly bool _localService_BackingField;
      private readonly string _name_BackingField;
      private readonly string _voiceURI_BackingField;

      public static dom.SpeechSynthesisVoice prototype
      {
        get
        {
          return dom.SpeechSynthesisVoice._prototype_BackingField;
        }
        set
        {
          dom.SpeechSynthesisVoice._prototype_BackingField = value;
        }
      }

      [Name("default")]
      public virtual bool @default
      {
        get
        {
          return this._default_BackingField;
        }
      }

      public virtual string lang
      {
        get
        {
          return this._lang_BackingField;
        }
      }

      public virtual bool localService
      {
        get
        {
          return this._localService_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual string voiceURI
      {
        get
        {
          return this._voiceURI_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class StereoPannerNode : dom.AudioNode
    {
      private static dom.StereoPannerNode _prototype_BackingField;
      private readonly dom.AudioParam _pan_BackingField;

      public static dom.StereoPannerNode prototype
      {
        get
        {
          return dom.StereoPannerNode._prototype_BackingField;
        }
        set
        {
          dom.StereoPannerNode._prototype_BackingField = value;
        }
      }

      public virtual dom.AudioParam pan
      {
        get
        {
          return this._pan_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Storage : IObject
    {
      private static dom.Storage _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.Storage prototype
      {
        get
        {
          return dom.Storage._prototype_BackingField;
        }
        set
        {
          dom.Storage._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern void clear();

      public virtual extern string getItem(string key);

      public virtual extern string key(uint index);

      public virtual extern void removeItem(string key);

      public virtual extern void setItem(string key, string value);
    }

    [CombinedClass]
    [FormerInterface]
    public class StorageEvent : dom.Event
    {
      private static dom.StorageEvent _prototype_BackingField;
      private readonly string _key_BackingField;
      private readonly string _newValue_BackingField;
      private readonly string _oldValue_BackingField;
      private readonly dom.Storage _storageArea_BackingField;
      private readonly string _url_BackingField;

      public extern StorageEvent(string type);

      public extern StorageEvent(string type, dom.StorageEventInit eventInitDict);

      public static dom.StorageEvent prototype
      {
        get
        {
          return dom.StorageEvent._prototype_BackingField;
        }
        set
        {
          dom.StorageEvent._prototype_BackingField = value;
        }
      }

      public virtual string key
      {
        get
        {
          return this._key_BackingField;
        }
      }

      public virtual string newValue
      {
        get
        {
          return this._newValue_BackingField;
        }
      }

      public virtual string oldValue
      {
        get
        {
          return this._oldValue_BackingField;
        }
      }

      public virtual dom.Storage storageArea
      {
        get
        {
          return this._storageArea_BackingField;
        }
      }

      public virtual string url
      {
        get
        {
          return this._url_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class StorageEventInit : dom.EventInit
    {
      private string _key_BackingField;
      private string _newValue_BackingField;
      private string _oldValue_BackingField;
      private dom.Storage _storageArea_BackingField;
      private string _url_BackingField;

      public string key
      {
        get
        {
          return this._key_BackingField;
        }
        set
        {
          this._key_BackingField = value;
        }
      }

      public string newValue
      {
        get
        {
          return this._newValue_BackingField;
        }
        set
        {
          this._newValue_BackingField = value;
        }
      }

      public string oldValue
      {
        get
        {
          return this._oldValue_BackingField;
        }
        set
        {
          this._oldValue_BackingField = value;
        }
      }

      public dom.Storage storageArea
      {
        get
        {
          return this._storageArea_BackingField;
        }
        set
        {
          this._storageArea_BackingField = value;
        }
      }

      public string url
      {
        get
        {
          return this._url_BackingField;
        }
        set
        {
          this._url_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class StyleMedia : IObject
    {
      private static dom.StyleMedia _prototype_BackingField;
      private readonly string _type_BackingField;

      public static dom.StyleMedia prototype
      {
        get
        {
          return dom.StyleMedia._prototype_BackingField;
        }
        set
        {
          dom.StyleMedia._prototype_BackingField = value;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }

      public virtual extern bool matchMedium(string mediaquery);
    }

    [CombinedClass]
    [FormerInterface]
    public class StyleSheet : IObject
    {
      private static dom.StyleSheet _prototype_BackingField;
      private bool _disabled_BackingField;
      private readonly string _href_BackingField;
      private readonly dom.MediaList _media_BackingField;
      private readonly dom.Node _ownerNode_BackingField;
      private readonly dom.StyleSheet _parentStyleSheet_BackingField;
      private readonly string _title_BackingField;
      private readonly string _type_BackingField;

      public static dom.StyleSheet prototype
      {
        get
        {
          return dom.StyleSheet._prototype_BackingField;
        }
        set
        {
          dom.StyleSheet._prototype_BackingField = value;
        }
      }

      public virtual bool disabled
      {
        get
        {
          return this._disabled_BackingField;
        }
        set
        {
          this._disabled_BackingField = value;
        }
      }

      public virtual string href
      {
        get
        {
          return this._href_BackingField;
        }
      }

      public virtual dom.MediaList media
      {
        get
        {
          return this._media_BackingField;
        }
      }

      public virtual dom.Node ownerNode
      {
        get
        {
          return this._ownerNode_BackingField;
        }
      }

      public virtual dom.StyleSheet parentStyleSheet
      {
        get
        {
          return this._parentStyleSheet_BackingField;
        }
      }

      public virtual string title
      {
        get
        {
          return this._title_BackingField;
        }
      }

      public virtual string type
      {
        get
        {
          return this._type_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class StyleSheetList : IEnumerable<dom.StyleSheet>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.StyleSheetList _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.StyleSheetList prototype
      {
        get
        {
          return dom.StyleSheetList._prototype_BackingField;
        }
        set
        {
          dom.StyleSheetList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.StyleSheet item(uint index);

      public virtual extern dom.StyleSheet this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.StyleSheet> IEnumerable<dom.StyleSheet>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class SubtleCrypto : IObject
    {
      private static dom.SubtleCrypto _prototype_BackingField;

      public static dom.SubtleCrypto prototype
      {
        get
        {
          return dom.SubtleCrypto._prototype_BackingField;
        }
        set
        {
          dom.SubtleCrypto._prototype_BackingField = value;
        }
      }

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> decrypt(
        Union<string, dom.RsaOaepParams, dom.AesCtrParams, dom.AesCbcParams, dom.AesCmacParams, dom.AesGcmParams, dom.AesCfbParams> algorithm,
        dom.CryptoKey key,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
        Union<string, dom.EcdhKeyDeriveParams, dom.DhKeyDeriveParams, dom.ConcatParams, dom.HkdfCtrParams, dom.Pbkdf2Params> algorithm,
        dom.CryptoKey baseKey,
        double length);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
        string algorithm,
        dom.CryptoKey baseKey,
        double length);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
        dom.EcdhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        double length);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
        dom.DhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        double length);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
        dom.ConcatParams algorithm,
        dom.CryptoKey baseKey,
        double length);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
        dom.HkdfCtrParams algorithm,
        dom.CryptoKey baseKey,
        double length);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
        dom.Pbkdf2Params algorithm,
        dom.CryptoKey baseKey,
        double length);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        Union<string, dom.EcdhKeyDeriveParams, dom.DhKeyDeriveParams, dom.ConcatParams, dom.HkdfCtrParams, dom.Pbkdf2Params> algorithm,
        dom.CryptoKey baseKey,
        Union<string, dom.AesDerivedKeyParams, dom.HmacImportParams, dom.ConcatParams, dom.HkdfCtrParams, dom.Pbkdf2Params> derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        string algorithm,
        dom.CryptoKey baseKey,
        string derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        string algorithm,
        dom.CryptoKey baseKey,
        dom.AesDerivedKeyParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        string algorithm,
        dom.CryptoKey baseKey,
        dom.HmacImportParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        string algorithm,
        dom.CryptoKey baseKey,
        dom.ConcatParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        string algorithm,
        dom.CryptoKey baseKey,
        dom.HkdfCtrParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        string algorithm,
        dom.CryptoKey baseKey,
        dom.Pbkdf2Params derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.EcdhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        string derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.EcdhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.AesDerivedKeyParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.EcdhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.HmacImportParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.EcdhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.ConcatParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.EcdhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.HkdfCtrParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.EcdhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.Pbkdf2Params derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.DhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        string derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.DhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.AesDerivedKeyParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.DhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.HmacImportParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.DhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.ConcatParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.DhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.HkdfCtrParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.DhKeyDeriveParams algorithm,
        dom.CryptoKey baseKey,
        dom.Pbkdf2Params derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.ConcatParams algorithm,
        dom.CryptoKey baseKey,
        string derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.ConcatParams algorithm,
        dom.CryptoKey baseKey,
        dom.AesDerivedKeyParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.ConcatParams algorithm,
        dom.CryptoKey baseKey,
        dom.HmacImportParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.ConcatParams algorithm,
        dom.CryptoKey baseKey,
        dom.ConcatParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.ConcatParams algorithm,
        dom.CryptoKey baseKey,
        dom.HkdfCtrParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.ConcatParams algorithm,
        dom.CryptoKey baseKey,
        dom.Pbkdf2Params derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.HkdfCtrParams algorithm,
        dom.CryptoKey baseKey,
        string derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.HkdfCtrParams algorithm,
        dom.CryptoKey baseKey,
        dom.AesDerivedKeyParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.HkdfCtrParams algorithm,
        dom.CryptoKey baseKey,
        dom.HmacImportParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.HkdfCtrParams algorithm,
        dom.CryptoKey baseKey,
        dom.ConcatParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.HkdfCtrParams algorithm,
        dom.CryptoKey baseKey,
        dom.HkdfCtrParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.HkdfCtrParams algorithm,
        dom.CryptoKey baseKey,
        dom.Pbkdf2Params derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.Pbkdf2Params algorithm,
        dom.CryptoKey baseKey,
        string derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.Pbkdf2Params algorithm,
        dom.CryptoKey baseKey,
        dom.AesDerivedKeyParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.Pbkdf2Params algorithm,
        dom.CryptoKey baseKey,
        dom.HmacImportParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.Pbkdf2Params algorithm,
        dom.CryptoKey baseKey,
        dom.ConcatParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.Pbkdf2Params algorithm,
        dom.CryptoKey baseKey,
        dom.HkdfCtrParams derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
        dom.Pbkdf2Params algorithm,
        dom.CryptoKey baseKey,
        dom.Pbkdf2Params derivedKeyType,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        Union<string, dom.Algorithm> algorithm,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.Int8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.Int16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.Int32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.Uint8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.Uint16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.Uint32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.Uint8ClampedArray data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.Float32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.Float64Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.DataView data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        string algorithm,
        es5.ArrayBuffer data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.Int8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.Int16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.Int32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.Uint8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.Uint16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.Uint32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.Uint8ClampedArray data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.Float32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.Float64Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.DataView data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
        dom.Algorithm algorithm,
        es5.ArrayBuffer data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> encrypt(
        Union<string, dom.RsaOaepParams, dom.AesCtrParams, dom.AesCbcParams, dom.AesCmacParams, dom.AesGcmParams, dom.AesCfbParams> algorithm,
        dom.CryptoKey key,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

      public virtual extern es5.PromiseLike<dom.JsonWebKey> exportKey(
        dom.Literals.Types.jwk format,
        dom.CryptoKey key);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> exportKey(
        dom.Literals.Options.format format,
        dom.CryptoKey key);

      public virtual extern es5.PromiseLike<Union<dom.JsonWebKey, es5.ArrayBuffer>> exportKey(
        string format,
        dom.CryptoKey key);

      public virtual extern es5.PromiseLike<Union<dom.CryptoKeyPair, dom.CryptoKey>> generateKey(
        string algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKeyPair> generateKey(
        Union<dom.RsaHashedKeyGenParams, dom.EcKeyGenParams, dom.DhKeyGenParams> algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKeyPair> generateKey(
        dom.RsaHashedKeyGenParams algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKeyPair> generateKey(
        dom.EcKeyGenParams algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKeyPair> generateKey(
        dom.DhKeyGenParams algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> generateKey(
        Union<dom.AesKeyGenParams, dom.HmacKeyGenParams, dom.Pbkdf2Params> algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> generateKey(
        dom.AesKeyGenParams algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> generateKey(
        dom.HmacKeyGenParams algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> generateKey(
        dom.Pbkdf2Params algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
        dom.Literals.Types.jwk format,
        dom.JsonWebKey keyData,
        Union<string, dom.RsaHashedImportParams, dom.EcKeyImportParams, dom.HmacImportParams, dom.DhImportKeyParams> algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
        dom.Literals.Types.jwk format,
        dom.JsonWebKey keyData,
        string algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
        dom.Literals.Types.jwk format,
        dom.JsonWebKey keyData,
        dom.RsaHashedImportParams algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
        dom.Literals.Types.jwk format,
        dom.JsonWebKey keyData,
        dom.EcKeyImportParams algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
        dom.Literals.Types.jwk format,
        dom.JsonWebKey keyData,
        dom.HmacImportParams algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
        dom.Literals.Types.jwk format,
        dom.JsonWebKey keyData,
        dom.DhImportKeyParams algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
        dom.Literals.Options.format format,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> keyData,
        Union<string, dom.RsaHashedImportParams, dom.EcKeyImportParams, dom.HmacImportParams, dom.DhImportKeyParams> algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
        string format,
        Union<dom.JsonWebKey, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> keyData,
        Union<string, dom.RsaHashedImportParams, dom.EcKeyImportParams, dom.HmacImportParams, dom.DhImportKeyParams> algorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        Union<string, dom.RsaPssParams, dom.EcdsaParams, dom.AesCmacParams> algorithm,
        dom.CryptoKey key,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.Int8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.Int16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.Int32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.Uint8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.Uint16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.Uint32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.Uint8ClampedArray data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.Float32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.Float64Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.DataView data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        string algorithm,
        dom.CryptoKey key,
        es5.ArrayBuffer data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.Int8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.Int16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.Int32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.Uint8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.Uint16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.Uint32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.Uint8ClampedArray data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.Float32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.Float64Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.DataView data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.RsaPssParams algorithm,
        dom.CryptoKey key,
        es5.ArrayBuffer data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.Int8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.Int16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.Int32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.Uint8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.Uint16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.Uint32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.Uint8ClampedArray data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.Float32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.Float64Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.DataView data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.EcdsaParams algorithm,
        dom.CryptoKey key,
        es5.ArrayBuffer data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.Int8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.Int16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.Int32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.Uint8Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.Uint16Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.Uint32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.Uint8ClampedArray data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.Float32Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.Float64Array data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.DataView data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
        dom.AesCmacParams algorithm,
        dom.CryptoKey key,
        es5.ArrayBuffer data);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> wrappedKey,
        dom.CryptoKey unwrappingKey,
        Union<string, dom.Algorithm> unwrapAlgorithm,
        Union<string, dom.Algorithm> unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int8Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int8Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int8Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int8Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int16Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int16Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int16Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int16Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Int32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint8Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint8Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint8Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint8Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint16Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint16Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint16Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint16Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint8ClampedArray wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint8ClampedArray wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint8ClampedArray wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Uint8ClampedArray wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Float32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Float32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Float32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Float32Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Float64Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Float64Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Float64Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.Float64Array wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.DataView wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.DataView wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.DataView wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.DataView wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.ArrayBuffer wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.ArrayBuffer wrappedKey,
        dom.CryptoKey unwrappingKey,
        string unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.ArrayBuffer wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        string unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
        string format,
        es5.ArrayBuffer wrappedKey,
        dom.CryptoKey unwrappingKey,
        dom.Algorithm unwrapAlgorithm,
        dom.Algorithm unwrappedKeyAlgorithm,
        bool extractable,
        string[] keyUsages);

      public virtual extern es5.PromiseLike<bool> verify(
        Union<string, dom.RsaPssParams, dom.EcdsaParams, dom.AesCmacParams> algorithm,
        dom.CryptoKey key,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> signature,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> wrapKey(
        string format,
        dom.CryptoKey key,
        dom.CryptoKey wrappingKey,
        Union<string, dom.Algorithm> wrapAlgorithm);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> wrapKey(
        string format,
        dom.CryptoKey key,
        dom.CryptoKey wrappingKey,
        string wrapAlgorithm);

      public virtual extern es5.PromiseLike<es5.ArrayBuffer> wrapKey(
        string format,
        dom.CryptoKey key,
        dom.CryptoKey wrappingKey,
        dom.Algorithm wrapAlgorithm);
    }

    [CombinedClass]
    [FormerInterface]
    public class SyncManager : IObject
    {
      private static dom.SyncManager _prototype_BackingField;

      public static dom.SyncManager prototype
      {
        get
        {
          return dom.SyncManager._prototype_BackingField;
        }
        set
        {
          dom.SyncManager._prototype_BackingField = value;
        }
      }

      public virtual extern es5.Promise<string[]> getTags();

      public virtual extern es5.Promise<H5.Primitive.Void> register(string tag);
    }

    [CombinedClass]
    [FormerInterface]
    public class Text : dom.CharacterData
    {
      private static dom.Text _prototype_BackingField;
      private readonly dom.HTMLSlotElement _assignedSlot_BackingField;
      private readonly string _wholeText_BackingField;

      public extern Text();

      public extern Text(string data);

      public static dom.Text prototype
      {
        get
        {
          return dom.Text._prototype_BackingField;
        }
        set
        {
          dom.Text._prototype_BackingField = value;
        }
      }

      public virtual dom.HTMLSlotElement assignedSlot
      {
        get
        {
          return this._assignedSlot_BackingField;
        }
      }

      public virtual string wholeText
      {
        get
        {
          return this._wholeText_BackingField;
        }
      }

      public virtual extern dom.Text splitText(uint offset);
    }

    [CombinedClass]
    [FormerInterface]
    public class TextDecoder : IObject
    {
      private static dom.TextDecoder _prototype_BackingField;
      private readonly string _encoding_BackingField;
      private readonly bool _fatal_BackingField;
      private readonly bool _ignoreBOM_BackingField;

      public extern TextDecoder();

      public extern TextDecoder(string label);

      public extern TextDecoder(string label, dom.TextDecoderOptions options);

      public static dom.TextDecoder prototype
      {
        get
        {
          return dom.TextDecoder._prototype_BackingField;
        }
        set
        {
          dom.TextDecoder._prototype_BackingField = value;
        }
      }

      public virtual string encoding
      {
        get
        {
          return this._encoding_BackingField;
        }
      }

      public virtual bool fatal
      {
        get
        {
          return this._fatal_BackingField;
        }
      }

      public virtual bool ignoreBOM
      {
        get
        {
          return this._ignoreBOM_BackingField;
        }
      }

      public virtual extern string decode();

      public virtual extern string decode(
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> input);

      public virtual extern string decode(es5.Int8Array input);

      public virtual extern string decode(es5.Int16Array input);

      public virtual extern string decode(es5.Int32Array input);

      public virtual extern string decode(es5.Uint8Array input);

      public virtual extern string decode(es5.Uint16Array input);

      public virtual extern string decode(es5.Uint32Array input);

      public virtual extern string decode(es5.Uint8ClampedArray input);

      public virtual extern string decode(es5.Float32Array input);

      public virtual extern string decode(es5.Float64Array input);

      public virtual extern string decode(es5.DataView input);

      public virtual extern string decode(es5.ArrayBuffer input);

      public virtual extern string decode(Null input);

      public virtual extern string decode(
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> input,
        dom.TextDecodeOptions options);

      public virtual extern string decode(es5.Int8Array input, dom.TextDecodeOptions options);

      public virtual extern string decode(es5.Int16Array input, dom.TextDecodeOptions options);

      public virtual extern string decode(es5.Int32Array input, dom.TextDecodeOptions options);

      public virtual extern string decode(es5.Uint8Array input, dom.TextDecodeOptions options);

      public virtual extern string decode(es5.Uint16Array input, dom.TextDecodeOptions options);

      public virtual extern string decode(es5.Uint32Array input, dom.TextDecodeOptions options);

      public virtual extern string decode(
        es5.Uint8ClampedArray input,
        dom.TextDecodeOptions options);

      public virtual extern string decode(es5.Float32Array input, dom.TextDecodeOptions options);

      public virtual extern string decode(es5.Float64Array input, dom.TextDecodeOptions options);

      public virtual extern string decode(es5.DataView input, dom.TextDecodeOptions options);

      public virtual extern string decode(es5.ArrayBuffer input, dom.TextDecodeOptions options);

      public virtual extern string decode(Null input, dom.TextDecodeOptions options);
    }

    [CombinedClass]
    [FormerInterface]
    public class TextEncoder : IObject
    {
      private static dom.TextEncoder _prototype_BackingField;
      private readonly string _encoding_BackingField;

      public static dom.TextEncoder prototype
      {
        get
        {
          return dom.TextEncoder._prototype_BackingField;
        }
        set
        {
          dom.TextEncoder._prototype_BackingField = value;
        }
      }

      public virtual string encoding
      {
        get
        {
          return this._encoding_BackingField;
        }
      }

      public virtual extern es5.Uint8Array encode();

      public virtual extern es5.Uint8Array encode(string input);
    }

    [CombinedClass]
    [FormerInterface]
    public class TextEvent : dom.UIEvent
    {
      private static dom.TextEvent _prototype_BackingField;
      private static readonly double _DOM_INPUT_METHOD_DROP_Static_BackingField;
      private static readonly double _DOM_INPUT_METHOD_HANDWRITING_Static_BackingField;
      private static readonly double _DOM_INPUT_METHOD_IME_Static_BackingField;
      private static readonly double _DOM_INPUT_METHOD_KEYBOARD_Static_BackingField;
      private static readonly double _DOM_INPUT_METHOD_MULTIMODAL_Static_BackingField;
      private static readonly double _DOM_INPUT_METHOD_OPTION_Static_BackingField;
      private static readonly double _DOM_INPUT_METHOD_PASTE_Static_BackingField;
      private static readonly double _DOM_INPUT_METHOD_SCRIPT_Static_BackingField;
      private static readonly double _DOM_INPUT_METHOD_UNKNOWN_Static_BackingField;
      private static readonly double _DOM_INPUT_METHOD_VOICE_Static_BackingField;
      private readonly string _data_BackingField;
      private readonly double _DOM_INPUT_METHOD_DROP_BackingField;
      private readonly double _DOM_INPUT_METHOD_HANDWRITING_BackingField;
      private readonly double _DOM_INPUT_METHOD_IME_BackingField;
      private readonly double _DOM_INPUT_METHOD_KEYBOARD_BackingField;
      private readonly double _DOM_INPUT_METHOD_MULTIMODAL_BackingField;
      private readonly double _DOM_INPUT_METHOD_OPTION_BackingField;
      private readonly double _DOM_INPUT_METHOD_PASTE_BackingField;
      private readonly double _DOM_INPUT_METHOD_SCRIPT_BackingField;
      private readonly double _DOM_INPUT_METHOD_UNKNOWN_BackingField;
      private readonly double _DOM_INPUT_METHOD_VOICE_BackingField;

      public static dom.TextEvent prototype
      {
        get
        {
          return dom.TextEvent._prototype_BackingField;
        }
        set
        {
          dom.TextEvent._prototype_BackingField = value;
        }
      }

      [Name("DOM_INPUT_METHOD_DROP")]
      public static double DOM_INPUT_METHOD_DROP_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_DROP_Static_BackingField;
        }
      }

      [Name("DOM_INPUT_METHOD_HANDWRITING")]
      public static double DOM_INPUT_METHOD_HANDWRITING_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_HANDWRITING_Static_BackingField;
        }
      }

      [Name("DOM_INPUT_METHOD_IME")]
      public static double DOM_INPUT_METHOD_IME_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_IME_Static_BackingField;
        }
      }

      [Name("DOM_INPUT_METHOD_KEYBOARD")]
      public static double DOM_INPUT_METHOD_KEYBOARD_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_KEYBOARD_Static_BackingField;
        }
      }

      [Name("DOM_INPUT_METHOD_MULTIMODAL")]
      public static double DOM_INPUT_METHOD_MULTIMODAL_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_MULTIMODAL_Static_BackingField;
        }
      }

      [Name("DOM_INPUT_METHOD_OPTION")]
      public static double DOM_INPUT_METHOD_OPTION_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_OPTION_Static_BackingField;
        }
      }

      [Name("DOM_INPUT_METHOD_PASTE")]
      public static double DOM_INPUT_METHOD_PASTE_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_PASTE_Static_BackingField;
        }
      }

      [Name("DOM_INPUT_METHOD_SCRIPT")]
      public static double DOM_INPUT_METHOD_SCRIPT_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_SCRIPT_Static_BackingField;
        }
      }

      [Name("DOM_INPUT_METHOD_UNKNOWN")]
      public static double DOM_INPUT_METHOD_UNKNOWN_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_UNKNOWN_Static_BackingField;
        }
      }

      [Name("DOM_INPUT_METHOD_VOICE")]
      public static double DOM_INPUT_METHOD_VOICE_Static
      {
        get
        {
          return dom.TextEvent._DOM_INPUT_METHOD_VOICE_Static_BackingField;
        }
      }

      public virtual string data
      {
        get
        {
          return this._data_BackingField;
        }
      }

      public virtual extern void initTextEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        string dataArg,
        double inputMethod,
        string locale);

      public virtual double DOM_INPUT_METHOD_DROP
      {
        get
        {
          return this._DOM_INPUT_METHOD_DROP_BackingField;
        }
      }

      public virtual double DOM_INPUT_METHOD_HANDWRITING
      {
        get
        {
          return this._DOM_INPUT_METHOD_HANDWRITING_BackingField;
        }
      }

      public virtual double DOM_INPUT_METHOD_IME
      {
        get
        {
          return this._DOM_INPUT_METHOD_IME_BackingField;
        }
      }

      public virtual double DOM_INPUT_METHOD_KEYBOARD
      {
        get
        {
          return this._DOM_INPUT_METHOD_KEYBOARD_BackingField;
        }
      }

      public virtual double DOM_INPUT_METHOD_MULTIMODAL
      {
        get
        {
          return this._DOM_INPUT_METHOD_MULTIMODAL_BackingField;
        }
      }

      public virtual double DOM_INPUT_METHOD_OPTION
      {
        get
        {
          return this._DOM_INPUT_METHOD_OPTION_BackingField;
        }
      }

      public virtual double DOM_INPUT_METHOD_PASTE
      {
        get
        {
          return this._DOM_INPUT_METHOD_PASTE_BackingField;
        }
      }

      public virtual double DOM_INPUT_METHOD_SCRIPT
      {
        get
        {
          return this._DOM_INPUT_METHOD_SCRIPT_BackingField;
        }
      }

      public virtual double DOM_INPUT_METHOD_UNKNOWN
      {
        get
        {
          return this._DOM_INPUT_METHOD_UNKNOWN_BackingField;
        }
      }

      public virtual double DOM_INPUT_METHOD_VOICE
      {
        get
        {
          return this._DOM_INPUT_METHOD_VOICE_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class TextMetrics : IObject
    {
      private static dom.TextMetrics _prototype_BackingField;
      private readonly double _width_BackingField;

      public static dom.TextMetrics prototype
      {
        get
        {
          return dom.TextMetrics._prototype_BackingField;
        }
        set
        {
          dom.TextMetrics._prototype_BackingField = value;
        }
      }

      public virtual double width
      {
        get
        {
          return this._width_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class TextTrackEventMap : IObject
    {
      private dom.Event _cuechange_BackingField;
      private dom.Event _error_BackingField;
      private dom.Event _load_BackingField;

      public dom.Event cuechange
      {
        get
        {
          return this._cuechange_BackingField;
        }
        set
        {
          this._cuechange_BackingField = value;
        }
      }

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.Event load
      {
        get
        {
          return this._load_BackingField;
        }
        set
        {
          this._load_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"cuechange\"")]
        public static readonly KeyOf<dom.TextTrackEventMap> cuechange;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.TextTrackEventMap> error;
        [Template("\"load\"")]
        public static readonly KeyOf<dom.TextTrackEventMap> load;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class TextTrack : dom.EventTarget
    {
      private static dom.TextTrack _prototype_BackingField;
      private static readonly double _DISABLED_Static_BackingField;
      private static readonly double _ERROR_Static_BackingField;
      private static readonly double _HIDDEN_Static_BackingField;
      private static readonly double _LOADED_Static_BackingField;
      private static readonly double _LOADING_Static_BackingField;
      private static readonly double _NONE_Static_BackingField;
      private static readonly double _SHOWING_Static_BackingField;
      private readonly dom.TextTrackCueList _activeCues_BackingField;
      private readonly dom.TextTrackCueList _cues_BackingField;
      private readonly string _inBandMetadataTrackDispatchType_BackingField;
      private readonly string _kind_BackingField;
      private readonly string _label_BackingField;
      private readonly string _language_BackingField;
      private Union<dom.TextTrackMode, double> _mode_BackingField;
      private dom.TextTrack.oncuechangeFn _oncuechange_BackingField;
      private dom.TextTrack.oncuechangeFn _onerror_BackingField;
      private dom.TextTrack.oncuechangeFn _onload_BackingField;
      private readonly double _readyState_BackingField;
      private readonly double _DISABLED_BackingField;
      private readonly double _ERROR_BackingField;
      private readonly double _HIDDEN_BackingField;
      private readonly double _LOADED_BackingField;
      private readonly double _LOADING_BackingField;
      private readonly double _NONE_BackingField;
      private readonly double _SHOWING_BackingField;

      public static dom.TextTrack prototype
      {
        get
        {
          return dom.TextTrack._prototype_BackingField;
        }
        set
        {
          dom.TextTrack._prototype_BackingField = value;
        }
      }

      [Name("DISABLED")]
      public static double DISABLED_Static
      {
        get
        {
          return dom.TextTrack._DISABLED_Static_BackingField;
        }
      }

      [Name("ERROR")]
      public static double ERROR_Static
      {
        get
        {
          return dom.TextTrack._ERROR_Static_BackingField;
        }
      }

      [Name("HIDDEN")]
      public static double HIDDEN_Static
      {
        get
        {
          return dom.TextTrack._HIDDEN_Static_BackingField;
        }
      }

      [Name("LOADED")]
      public static double LOADED_Static
      {
        get
        {
          return dom.TextTrack._LOADED_Static_BackingField;
        }
      }

      [Name("LOADING")]
      public static double LOADING_Static
      {
        get
        {
          return dom.TextTrack._LOADING_Static_BackingField;
        }
      }

      [Name("NONE")]
      public static double NONE_Static
      {
        get
        {
          return dom.TextTrack._NONE_Static_BackingField;
        }
      }

      [Name("SHOWING")]
      public static double SHOWING_Static
      {
        get
        {
          return dom.TextTrack._SHOWING_Static_BackingField;
        }
      }

      public virtual dom.TextTrackCueList activeCues
      {
        get
        {
          return this._activeCues_BackingField;
        }
      }

      public virtual dom.TextTrackCueList cues
      {
        get
        {
          return this._cues_BackingField;
        }
      }

      public virtual string inBandMetadataTrackDispatchType
      {
        get
        {
          return this._inBandMetadataTrackDispatchType_BackingField;
        }
      }

      public virtual string kind
      {
        get
        {
          return this._kind_BackingField;
        }
      }

      public virtual string label
      {
        get
        {
          return this._label_BackingField;
        }
      }

      public virtual string language
      {
        get
        {
          return this._language_BackingField;
        }
      }

      public virtual Union<dom.TextTrackMode, double> mode
      {
        get
        {
          return this._mode_BackingField;
        }
        set
        {
          this._mode_BackingField = value;
        }
      }

      public virtual dom.TextTrack.oncuechangeFn oncuechange
      {
        get
        {
          return this._oncuechange_BackingField;
        }
        set
        {
          this._oncuechange_BackingField = value;
        }
      }

      public virtual dom.TextTrack.oncuechangeFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.TextTrack.oncuechangeFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual double readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual extern void addCue(dom.TextTrackCue cue);

      public virtual extern void removeCue(dom.TextTrackCue cue);

      public virtual double DISABLED
      {
        get
        {
          return this._DISABLED_BackingField;
        }
      }

      public virtual double ERROR
      {
        get
        {
          return this._ERROR_BackingField;
        }
      }

      public virtual double HIDDEN
      {
        get
        {
          return this._HIDDEN_BackingField;
        }
      }

      public virtual double LOADED
      {
        get
        {
          return this._LOADED_BackingField;
        }
      }

      public virtual double LOADING
      {
        get
        {
          return this._LOADING_BackingField;
        }
      }

      public virtual double NONE
      {
        get
        {
          return this._NONE_BackingField;
        }
      }

      public virtual double SHOWING
      {
        get
        {
          return this._SHOWING_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrack.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrack.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrack.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrack.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrack.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrack.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrack.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrack.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void oncuechangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class TextTrackCueEventMap : IObject
    {
      private dom.Event _enter_BackingField;
      private dom.Event _exit_BackingField;

      public dom.Event enter
      {
        get
        {
          return this._enter_BackingField;
        }
        set
        {
          this._enter_BackingField = value;
        }
      }

      public dom.Event exit
      {
        get
        {
          return this._exit_BackingField;
        }
        set
        {
          this._exit_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"enter\"")]
        public static readonly KeyOf<dom.TextTrackCueEventMap> enter;
        [Template("\"exit\"")]
        public static readonly KeyOf<dom.TextTrackCueEventMap> exit;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class TextTrackCue : dom.EventTarget
    {
      private static dom.TextTrackCue _prototype_BackingField;
      private double _endTime_BackingField;
      private string _id_BackingField;
      private dom.TextTrackCue.onenterFn _onenter_BackingField;
      private dom.TextTrackCue.onenterFn _onexit_BackingField;
      private bool _pauseOnExit_BackingField;
      private double _startTime_BackingField;
      private string _text_BackingField;
      private readonly dom.TextTrack _track_BackingField;

      public extern TextTrackCue();
      public extern TextTrackCue(double startTime, double endTime, string text);

      public static dom.TextTrackCue prototype
      {
        get
        {
          return dom.TextTrackCue._prototype_BackingField;
        }
        set
        {
          dom.TextTrackCue._prototype_BackingField = value;
        }
      }

      public virtual double endTime
      {
        get
        {
          return this._endTime_BackingField;
        }
        set
        {
          this._endTime_BackingField = value;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
        set
        {
          this._id_BackingField = value;
        }
      }

      public virtual dom.TextTrackCue.onenterFn onenter
      {
        get
        {
          return this._onenter_BackingField;
        }
        set
        {
          this._onenter_BackingField = value;
        }
      }

      public virtual dom.TextTrackCue.onenterFn onexit
      {
        get
        {
          return this._onexit_BackingField;
        }
        set
        {
          this._onexit_BackingField = value;
        }
      }

      public virtual bool pauseOnExit
      {
        get
        {
          return this._pauseOnExit_BackingField;
        }
        set
        {
          this._pauseOnExit_BackingField = value;
        }
      }

      public virtual double startTime
      {
        get
        {
          return this._startTime_BackingField;
        }
        set
        {
          this._startTime_BackingField = value;
        }
      }

      public virtual string text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }

      public virtual dom.TextTrack track
      {
        get
        {
          return this._track_BackingField;
        }
      }

      public virtual extern dom.DocumentFragment getCueAsHTML();

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrackCue.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrackCue.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrackCue.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrackCue.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrackCue.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrackCue.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrackCue.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrackCue.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onenterFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class TextTrackCueList : IEnumerable<dom.TextTrackCue>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.TextTrackCueList _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.TextTrackCueList prototype
      {
        get
        {
          return dom.TextTrackCueList._prototype_BackingField;
        }
        set
        {
          dom.TextTrackCueList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.TextTrackCue getCueById(string id);

      public virtual extern dom.TextTrackCue item(double index);

      public virtual extern dom.TextTrackCue this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.TextTrackCue> IEnumerable<dom.TextTrackCue>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class TextTrackListEventMap : IObject
    {
      private dom.TrackEvent _addtrack_BackingField;

      public dom.TrackEvent addtrack
      {
        get
        {
          return this._addtrack_BackingField;
        }
        set
        {
          this._addtrack_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"addtrack\"")]
        public static readonly KeyOf<dom.TextTrackListEventMap> addtrack;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class TextTrackList : dom.EventTarget, IEnumerable<dom.TextTrack>, IEnumerable, IHighFiveClass
    {
      private static dom.TextTrackList _prototype_BackingField;
      private readonly uint _length_BackingField;
      private dom.TextTrackList.onaddtrackFn _onaddtrack_BackingField;

      public static dom.TextTrackList prototype
      {
        get
        {
          return dom.TextTrackList._prototype_BackingField;
        }
        set
        {
          dom.TextTrackList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual dom.TextTrackList.onaddtrackFn onaddtrack
      {
        get
        {
          return this._onaddtrack_BackingField;
        }
        set
        {
          this._onaddtrack_BackingField = value;
        }
      }

      public virtual extern dom.TextTrack item(double index);

      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrackList.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrackList.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrackList.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.TextTrackList.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrackList.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrackList.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrackList.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.TextTrackList.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual extern dom.TextTrack this[uint index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.TextTrack> IEnumerable<dom.TextTrack>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();

      [Generated]
      public delegate void onaddtrackFn(dom.TrackEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class TimeRanges : IObject
    {
      private static dom.TimeRanges _prototype_BackingField;
      private readonly uint _length_BackingField;

      public static dom.TimeRanges prototype
      {
        get
        {
          return dom.TimeRanges._prototype_BackingField;
        }
        set
        {
          dom.TimeRanges._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern double end(uint index);

      public virtual extern double start(uint index);
    }

    [CombinedClass]
    [FormerInterface]
    public class Touch : IObject
    {
      private static dom.Touch _prototype_BackingField;
      private readonly double _clientX_BackingField;
      private readonly double _clientY_BackingField;
      private readonly double _identifier_BackingField;
      private readonly double _pageX_BackingField;
      private readonly double _pageY_BackingField;
      private readonly double _screenX_BackingField;
      private readonly double _screenY_BackingField;
      private readonly dom.EventTarget _target_BackingField;

      public static dom.Touch prototype
      {
        get
        {
          return dom.Touch._prototype_BackingField;
        }
        set
        {
          dom.Touch._prototype_BackingField = value;
        }
      }

      public virtual double clientX
      {
        get
        {
          return this._clientX_BackingField;
        }
      }

      public virtual double clientY
      {
        get
        {
          return this._clientY_BackingField;
        }
      }

      public virtual double identifier
      {
        get
        {
          return this._identifier_BackingField;
        }
      }

      public virtual double pageX
      {
        get
        {
          return this._pageX_BackingField;
        }
      }

      public virtual double pageY
      {
        get
        {
          return this._pageY_BackingField;
        }
      }

      public virtual double screenX
      {
        get
        {
          return this._screenX_BackingField;
        }
      }

      public virtual double screenY
      {
        get
        {
          return this._screenY_BackingField;
        }
      }

      public virtual dom.EventTarget target
      {
        get
        {
          return this._target_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class TouchEvent : dom.UIEvent
    {
      private static dom.TouchEvent _prototype_BackingField;
      private readonly bool _altKey_BackingField;
      private readonly dom.TouchList _changedTouches_BackingField;
      private readonly double _charCode_BackingField;
      private readonly bool _ctrlKey_BackingField;
      private readonly double _keyCode_BackingField;
      private readonly bool _metaKey_BackingField;
      private readonly bool _shiftKey_BackingField;
      private readonly dom.TouchList _targetTouches_BackingField;
      private readonly dom.TouchList _touches_BackingField;
      private readonly double _which_BackingField;

      public extern TouchEvent(string type);

      public extern TouchEvent(string type, dom.TouchEventInit touchEventInit);

      public static dom.TouchEvent prototype
      {
        get
        {
          return dom.TouchEvent._prototype_BackingField;
        }
        set
        {
          dom.TouchEvent._prototype_BackingField = value;
        }
      }

      public virtual bool altKey
      {
        get
        {
          return this._altKey_BackingField;
        }
      }

      public virtual dom.TouchList changedTouches
      {
        get
        {
          return this._changedTouches_BackingField;
        }
      }

      public virtual double charCode
      {
        get
        {
          return this._charCode_BackingField;
        }
      }

      public virtual bool ctrlKey
      {
        get
        {
          return this._ctrlKey_BackingField;
        }
      }

      public virtual double keyCode
      {
        get
        {
          return this._keyCode_BackingField;
        }
      }

      public virtual bool metaKey
      {
        get
        {
          return this._metaKey_BackingField;
        }
      }

      public virtual bool shiftKey
      {
        get
        {
          return this._shiftKey_BackingField;
        }
      }

      public virtual dom.TouchList targetTouches
      {
        get
        {
          return this._targetTouches_BackingField;
        }
      }

      public virtual dom.TouchList touches
      {
        get
        {
          return this._touches_BackingField;
        }
      }

      public virtual double which
      {
        get
        {
          return this._which_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class TouchEventInit : dom.EventModifierInit
    {
      private dom.Touch[] _changedTouches_BackingField;
      private dom.Touch[] _targetTouches_BackingField;
      private dom.Touch[] _touches_BackingField;

      public dom.Touch[] changedTouches
      {
        get
        {
          return this._changedTouches_BackingField;
        }
        set
        {
          this._changedTouches_BackingField = value;
        }
      }

      public dom.Touch[] targetTouches
      {
        get
        {
          return this._targetTouches_BackingField;
        }
        set
        {
          this._targetTouches_BackingField = value;
        }
      }

      public dom.Touch[] touches
      {
        get
        {
          return this._touches_BackingField;
        }
        set
        {
          this._touches_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class TouchList : IEnumerable<dom.Touch>, IEnumerable, IHighFiveClass, IObject
    {
      private static dom.TouchList _prototype_BackingField;
      private readonly double _length_BackingField;

      public static dom.TouchList prototype
      {
        get
        {
          return dom.TouchList._prototype_BackingField;
        }
        set
        {
          dom.TouchList._prototype_BackingField = value;
        }
      }

      public virtual double length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual extern dom.Touch item(double index);

      public virtual extern dom.Touch this[double index] { get; set; }

      [Template("HighFive.getEnumerator({this}, {T})")]
      extern IEnumerator<dom.Touch> IEnumerable<dom.Touch>.GetEnumerator();

      [Template("HighFive.getEnumerator({this})")]
      extern IEnumerator IEnumerable.GetEnumerator();
    }

    [CombinedClass]
    [FormerInterface]
    public class TrackEvent : dom.Event
    {
      private static dom.TrackEvent _prototype_BackingField;
      private readonly Union<dom.VideoTrack, dom.AudioTrack, dom.TextTrack, Null> _track_BackingField;

      public extern TrackEvent(string typeArg);

      public extern TrackEvent(string typeArg, dom.TrackEventInit eventInitDict);

      public static dom.TrackEvent prototype
      {
        get
        {
          return dom.TrackEvent._prototype_BackingField;
        }
        set
        {
          dom.TrackEvent._prototype_BackingField = value;
        }
      }

      public virtual Union<dom.VideoTrack, dom.AudioTrack, dom.TextTrack, Null> track
      {
        get
        {
          return this._track_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class TransitionEvent : dom.Event
    {
      private static dom.TransitionEvent _prototype_BackingField;
      private readonly double _elapsedTime_BackingField;
      private readonly string _propertyName_BackingField;

      public extern TransitionEvent(string typeArg);

      public extern TransitionEvent(string typeArg, dom.TransitionEventInit eventInitDict);

      public static dom.TransitionEvent prototype
      {
        get
        {
          return dom.TransitionEvent._prototype_BackingField;
        }
        set
        {
          dom.TransitionEvent._prototype_BackingField = value;
        }
      }

      public virtual double elapsedTime
      {
        get
        {
          return this._elapsedTime_BackingField;
        }
      }

      public virtual string propertyName
      {
        get
        {
          return this._propertyName_BackingField;
        }
      }

      public virtual extern void initTransitionEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        string propertyNameArg,
        double elapsedTimeArg);
    }

    [CombinedClass]
    [FormerInterface]
    public class TreeWalker : IObject
    {
      private static dom.TreeWalker _prototype_BackingField;
      private dom.Node _currentNode_BackingField;
      private readonly bool _expandEntityReferences_BackingField;
      private readonly dom.NodeFilter _filter_BackingField;
      private readonly dom.Node _root_BackingField;
      private readonly uint _whatToShow_BackingField;

      public static dom.TreeWalker prototype
      {
        get
        {
          return dom.TreeWalker._prototype_BackingField;
        }
        set
        {
          dom.TreeWalker._prototype_BackingField = value;
        }
      }

      public virtual dom.Node currentNode
      {
        get
        {
          return this._currentNode_BackingField;
        }
        set
        {
          this._currentNode_BackingField = value;
        }
      }

      public virtual bool expandEntityReferences
      {
        get
        {
          return this._expandEntityReferences_BackingField;
        }
      }

      public virtual dom.NodeFilter filter
      {
        get
        {
          return this._filter_BackingField;
        }
      }

      public virtual dom.Node root
      {
        get
        {
          return this._root_BackingField;
        }
      }

      public virtual uint whatToShow
      {
        get
        {
          return this._whatToShow_BackingField;
        }
      }

      public virtual extern dom.Node firstChild();

      public virtual extern dom.Node lastChild();

      public virtual extern dom.Node nextNode();

      public virtual extern dom.Node nextSibling();

      public virtual extern dom.Node parentNode();

      public virtual extern dom.Node previousNode();

      public virtual extern dom.Node previousSibling();
    }

    [CombinedClass]
    [FormerInterface]
    public class UIEvent : dom.Event
    {
      private static dom.UIEvent _prototype_BackingField;
      private readonly int _detail_BackingField;
      private readonly dom.Window _view_BackingField;

      public extern UIEvent();

      public extern UIEvent(string typeArg);

      public extern UIEvent(string typeArg, dom.UIEventInit eventInitDict);

      public static dom.UIEvent prototype
      {
        get
        {
          return dom.UIEvent._prototype_BackingField;
        }
        set
        {
          dom.UIEvent._prototype_BackingField = value;
        }
      }

      public virtual int detail
      {
        get
        {
          return this._detail_BackingField;
        }
      }

      public virtual dom.Window view
      {
        get
        {
          return this._view_BackingField;
        }
      }

      public virtual extern void initUIEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        double detailArg);
    }

    [CombinedClass]
    [FormerInterface]
    public class URL : IObject
    {
      private static dom.URL _prototype_BackingField;
      private string _hash_BackingField;
      private string _host_BackingField;
      private string _hostname_BackingField;
      private string _href_BackingField;
      private readonly string _origin_BackingField;
      private string _password_BackingField;
      private string _pathname_BackingField;
      private string _port_BackingField;
      private string _protocol_BackingField;
      private string _search_BackingField;
      private readonly dom.URLSearchParams _searchParams_BackingField;
      private string _username_BackingField;

      public extern URL(string url);

      public extern URL(string url, Union<string, dom.URL> @base);

      public extern URL(string url, string @base);

      public extern URL(string url, dom.URL @base);

      public static dom.URL prototype
      {
        get
        {
          return dom.URL._prototype_BackingField;
        }
        set
        {
          dom.URL._prototype_BackingField = value;
        }
      }

      public static extern string createObjectURL(object @object);

      public static extern string createObjectURL(object @object, dom.ObjectURLOptions options);

      public static extern void revokeObjectURL(string url);

      public virtual string hash
      {
        get
        {
          return this._hash_BackingField;
        }
        set
        {
          this._hash_BackingField = value;
        }
      }

      public virtual string host
      {
        get
        {
          return this._host_BackingField;
        }
        set
        {
          this._host_BackingField = value;
        }
      }

      public virtual string hostname
      {
        get
        {
          return this._hostname_BackingField;
        }
        set
        {
          this._hostname_BackingField = value;
        }
      }

      public virtual string href
      {
        get
        {
          return this._href_BackingField;
        }
        set
        {
          this._href_BackingField = value;
        }
      }

      public virtual string origin
      {
        get
        {
          return this._origin_BackingField;
        }
      }

      public virtual string password
      {
        get
        {
          return this._password_BackingField;
        }
        set
        {
          this._password_BackingField = value;
        }
      }

      public virtual string pathname
      {
        get
        {
          return this._pathname_BackingField;
        }
        set
        {
          this._pathname_BackingField = value;
        }
      }

      public virtual string port
      {
        get
        {
          return this._port_BackingField;
        }
        set
        {
          this._port_BackingField = value;
        }
      }

      public virtual string protocol
      {
        get
        {
          return this._protocol_BackingField;
        }
        set
        {
          this._protocol_BackingField = value;
        }
      }

      public virtual string search
      {
        get
        {
          return this._search_BackingField;
        }
        set
        {
          this._search_BackingField = value;
        }
      }

      public virtual dom.URLSearchParams searchParams
      {
        get
        {
          return this._searchParams_BackingField;
        }
      }

      public virtual string username
      {
        get
        {
          return this._username_BackingField;
        }
        set
        {
          this._username_BackingField = value;
        }
      }

      public virtual extern string toString();
    }

    [CombinedClass]
    [FormerInterface]
    public class URLSearchParams : IObject
    {
      private static dom.URLSearchParams _prototype_BackingField;

      public extern URLSearchParams();

      public extern URLSearchParams(Union<string, dom.URLSearchParams> init);

      public extern URLSearchParams(string init);

      public extern URLSearchParams(dom.URLSearchParams init);

      public static dom.URLSearchParams prototype
      {
        get
        {
          return dom.URLSearchParams._prototype_BackingField;
        }
        set
        {
          dom.URLSearchParams._prototype_BackingField = value;
        }
      }

      public virtual extern void append(string name, string value);

      public virtual extern void delete(string name);

      public virtual extern string get(string name);

      public virtual extern string[] getAll(string name);

      public virtual extern bool has(string name);

      public virtual extern void set(string name, string value);
    }

    [CombinedClass]
    [FormerInterface]
    public class VRDisplay : dom.EventTarget
    {
      private static dom.VRDisplay _prototype_BackingField;
      private readonly dom.VRDisplayCapabilities _capabilities_BackingField;
      private double _depthFar_BackingField;
      private double _depthNear_BackingField;
      private readonly double _displayId_BackingField;
      private readonly string _displayName_BackingField;
      private readonly bool _isConnected_BackingField;
      private readonly bool _isPresenting_BackingField;
      private readonly dom.VRStageParameters _stageParameters_BackingField;

      public static dom.VRDisplay prototype
      {
        get
        {
          return dom.VRDisplay._prototype_BackingField;
        }
        set
        {
          dom.VRDisplay._prototype_BackingField = value;
        }
      }

      public virtual dom.VRDisplayCapabilities capabilities
      {
        get
        {
          return this._capabilities_BackingField;
        }
      }

      public virtual double depthFar
      {
        get
        {
          return this._depthFar_BackingField;
        }
        set
        {
          this._depthFar_BackingField = value;
        }
      }

      public virtual double depthNear
      {
        get
        {
          return this._depthNear_BackingField;
        }
        set
        {
          this._depthNear_BackingField = value;
        }
      }

      public virtual double displayId
      {
        get
        {
          return this._displayId_BackingField;
        }
      }

      public virtual string displayName
      {
        get
        {
          return this._displayName_BackingField;
        }
      }

      public virtual bool isConnected
      {
        get
        {
          return this._isConnected_BackingField;
        }
      }

      public virtual bool isPresenting
      {
        get
        {
          return this._isPresenting_BackingField;
        }
      }

      public virtual dom.VRStageParameters stageParameters
      {
        get
        {
          return this._stageParameters_BackingField;
        }
      }

      public virtual extern void cancelAnimationFrame(double handle);

      public virtual extern es5.Promise<H5.Primitive.Void> exitPresent();

      public virtual extern dom.VREyeParameters getEyeParameters(string whichEye);

      public virtual extern bool getFrameData(dom.VRFrameData frameData);

      public virtual extern dom.VRLayer[] getLayers();

      public virtual extern dom.VRPose getPose();

      public virtual extern double requestAnimationFrame(dom.FrameRequestCallback callback);

      public virtual extern es5.Promise<H5.Primitive.Void> requestPresent(
        dom.VRLayer[] layers);

      public virtual extern void resetPose();

      public virtual extern void submitFrame();

      public virtual extern void submitFrame(dom.VRPose pose);
    }

    [CombinedClass]
    [FormerInterface]
    public class VRDisplayCapabilities : IObject
    {
      private static dom.VRDisplayCapabilities _prototype_BackingField;
      private readonly bool _canPresent_BackingField;
      private readonly bool _hasExternalDisplay_BackingField;
      private readonly bool _hasOrientation_BackingField;
      private readonly bool _hasPosition_BackingField;
      private readonly double _maxLayers_BackingField;

      public static dom.VRDisplayCapabilities prototype
      {
        get
        {
          return dom.VRDisplayCapabilities._prototype_BackingField;
        }
        set
        {
          dom.VRDisplayCapabilities._prototype_BackingField = value;
        }
      }

      public virtual bool canPresent
      {
        get
        {
          return this._canPresent_BackingField;
        }
      }

      public virtual bool hasExternalDisplay
      {
        get
        {
          return this._hasExternalDisplay_BackingField;
        }
      }

      public virtual bool hasOrientation
      {
        get
        {
          return this._hasOrientation_BackingField;
        }
      }

      public virtual bool hasPosition
      {
        get
        {
          return this._hasPosition_BackingField;
        }
      }

      public virtual double maxLayers
      {
        get
        {
          return this._maxLayers_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class VRDisplayEvent : dom.Event
    {
      private static dom.VRDisplayEvent _prototype_BackingField;
      private readonly dom.VRDisplay _display_BackingField;
      private readonly dom.VRDisplayEventReason _reason_BackingField;

      public extern VRDisplayEvent(string type, dom.VRDisplayEventInit eventInitDict);

      public static dom.VRDisplayEvent prototype
      {
        get
        {
          return dom.VRDisplayEvent._prototype_BackingField;
        }
        set
        {
          dom.VRDisplayEvent._prototype_BackingField = value;
        }
      }

      public virtual dom.VRDisplay display
      {
        get
        {
          return this._display_BackingField;
        }
      }

      public virtual dom.VRDisplayEventReason reason
      {
        get
        {
          return this._reason_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class VREyeParameters : IObject
    {
      private static dom.VREyeParameters _prototype_BackingField;
      private readonly dom.VRFieldOfView _fieldOfView_BackingField;
      private readonly es5.Float32Array _offset_BackingField;
      private readonly double _renderHeight_BackingField;
      private readonly double _renderWidth_BackingField;

      public static dom.VREyeParameters prototype
      {
        get
        {
          return dom.VREyeParameters._prototype_BackingField;
        }
        set
        {
          dom.VREyeParameters._prototype_BackingField = value;
        }
      }

      public virtual dom.VRFieldOfView fieldOfView
      {
        get
        {
          return this._fieldOfView_BackingField;
        }
      }

      public virtual es5.Float32Array offset
      {
        get
        {
          return this._offset_BackingField;
        }
      }

      public virtual double renderHeight
      {
        get
        {
          return this._renderHeight_BackingField;
        }
      }

      public virtual double renderWidth
      {
        get
        {
          return this._renderWidth_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class VRFieldOfView : IObject
    {
      private static dom.VRFieldOfView _prototype_BackingField;
      private readonly double _downDegrees_BackingField;
      private readonly double _leftDegrees_BackingField;
      private readonly double _rightDegrees_BackingField;
      private readonly double _upDegrees_BackingField;

      public static dom.VRFieldOfView prototype
      {
        get
        {
          return dom.VRFieldOfView._prototype_BackingField;
        }
        set
        {
          dom.VRFieldOfView._prototype_BackingField = value;
        }
      }

      public virtual double downDegrees
      {
        get
        {
          return this._downDegrees_BackingField;
        }
      }

      public virtual double leftDegrees
      {
        get
        {
          return this._leftDegrees_BackingField;
        }
      }

      public virtual double rightDegrees
      {
        get
        {
          return this._rightDegrees_BackingField;
        }
      }

      public virtual double upDegrees
      {
        get
        {
          return this._upDegrees_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class VRFrameData : IObject
    {
      private static dom.VRFrameData _prototype_BackingField;
      private readonly es5.Float32Array _leftProjectionMatrix_BackingField;
      private readonly es5.Float32Array _leftViewMatrix_BackingField;
      private readonly dom.VRPose _pose_BackingField;
      private readonly es5.Float32Array _rightProjectionMatrix_BackingField;
      private readonly es5.Float32Array _rightViewMatrix_BackingField;
      private readonly double _timestamp_BackingField;

      public static dom.VRFrameData prototype
      {
        get
        {
          return dom.VRFrameData._prototype_BackingField;
        }
        set
        {
          dom.VRFrameData._prototype_BackingField = value;
        }
      }

      public virtual es5.Float32Array leftProjectionMatrix
      {
        get
        {
          return this._leftProjectionMatrix_BackingField;
        }
      }

      public virtual es5.Float32Array leftViewMatrix
      {
        get
        {
          return this._leftViewMatrix_BackingField;
        }
      }

      public virtual dom.VRPose pose
      {
        get
        {
          return this._pose_BackingField;
        }
      }

      public virtual es5.Float32Array rightProjectionMatrix
      {
        get
        {
          return this._rightProjectionMatrix_BackingField;
        }
      }

      public virtual es5.Float32Array rightViewMatrix
      {
        get
        {
          return this._rightViewMatrix_BackingField;
        }
      }

      public virtual double timestamp
      {
        get
        {
          return this._timestamp_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class VRPose : IObject
    {
      private static dom.VRPose _prototype_BackingField;
      private readonly es5.Float32Array _angularAcceleration_BackingField;
      private readonly es5.Float32Array _angularVelocity_BackingField;
      private readonly es5.Float32Array _linearAcceleration_BackingField;
      private readonly es5.Float32Array _linearVelocity_BackingField;
      private readonly es5.Float32Array _orientation_BackingField;
      private readonly es5.Float32Array _position_BackingField;
      private readonly double _timestamp_BackingField;

      public static dom.VRPose prototype
      {
        get
        {
          return dom.VRPose._prototype_BackingField;
        }
        set
        {
          dom.VRPose._prototype_BackingField = value;
        }
      }

      public virtual es5.Float32Array angularAcceleration
      {
        get
        {
          return this._angularAcceleration_BackingField;
        }
      }

      public virtual es5.Float32Array angularVelocity
      {
        get
        {
          return this._angularVelocity_BackingField;
        }
      }

      public virtual es5.Float32Array linearAcceleration
      {
        get
        {
          return this._linearAcceleration_BackingField;
        }
      }

      public virtual es5.Float32Array linearVelocity
      {
        get
        {
          return this._linearVelocity_BackingField;
        }
      }

      public virtual es5.Float32Array orientation
      {
        get
        {
          return this._orientation_BackingField;
        }
      }

      public virtual es5.Float32Array position
      {
        get
        {
          return this._position_BackingField;
        }
      }

      public virtual double timestamp
      {
        get
        {
          return this._timestamp_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class ValidityState : IObject
    {
      private static dom.ValidityState _prototype_BackingField;
      private readonly bool _badInput_BackingField;
      private readonly bool _customError_BackingField;
      private readonly bool _patternMismatch_BackingField;
      private readonly bool _rangeOverflow_BackingField;
      private readonly bool _rangeUnderflow_BackingField;
      private readonly bool _stepMismatch_BackingField;
      private readonly bool _tooLong_BackingField;
      private readonly bool _tooShort_BackingField;
      private readonly bool _typeMismatch_BackingField;
      private readonly bool _valid_BackingField;
      private readonly bool _valueMissing_BackingField;

      public static dom.ValidityState prototype
      {
        get
        {
          return dom.ValidityState._prototype_BackingField;
        }
        set
        {
          dom.ValidityState._prototype_BackingField = value;
        }
      }

      public virtual bool badInput
      {
        get
        {
          return this._badInput_BackingField;
        }
      }

      public virtual bool customError
      {
        get
        {
          return this._customError_BackingField;
        }
      }

      public virtual bool patternMismatch
      {
        get
        {
          return this._patternMismatch_BackingField;
        }
      }

      public virtual bool rangeOverflow
      {
        get
        {
          return this._rangeOverflow_BackingField;
        }
      }

      public virtual bool rangeUnderflow
      {
        get
        {
          return this._rangeUnderflow_BackingField;
        }
      }

      public virtual bool stepMismatch
      {
        get
        {
          return this._stepMismatch_BackingField;
        }
      }

      public virtual bool tooLong
      {
        get
        {
          return this._tooLong_BackingField;
        }
      }

      public virtual bool tooShort
      {
        get
        {
          return this._tooShort_BackingField;
        }
      }

      public virtual bool typeMismatch
      {
        get
        {
          return this._typeMismatch_BackingField;
        }
      }

      public virtual bool valid
      {
        get
        {
          return this._valid_BackingField;
        }
      }

      public virtual bool valueMissing
      {
        get
        {
          return this._valueMissing_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class VideoPlaybackQuality : IObject
    {
      private static dom.VideoPlaybackQuality _prototype_BackingField;
      private readonly double _corruptedVideoFrames_BackingField;
      private readonly double _creationTime_BackingField;
      private readonly double _droppedVideoFrames_BackingField;
      private readonly double _totalFrameDelay_BackingField;
      private readonly double _totalVideoFrames_BackingField;

      public static dom.VideoPlaybackQuality prototype
      {
        get
        {
          return dom.VideoPlaybackQuality._prototype_BackingField;
        }
        set
        {
          dom.VideoPlaybackQuality._prototype_BackingField = value;
        }
      }

      public virtual double corruptedVideoFrames
      {
        get
        {
          return this._corruptedVideoFrames_BackingField;
        }
      }

      public virtual double creationTime
      {
        get
        {
          return this._creationTime_BackingField;
        }
      }

      public virtual double droppedVideoFrames
      {
        get
        {
          return this._droppedVideoFrames_BackingField;
        }
      }

      public virtual double totalFrameDelay
      {
        get
        {
          return this._totalFrameDelay_BackingField;
        }
      }

      public virtual double totalVideoFrames
      {
        get
        {
          return this._totalVideoFrames_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class VideoTrack : IObject
    {
      private static dom.VideoTrack _prototype_BackingField;
      private readonly string _id_BackingField;
      private string _kind_BackingField;
      private readonly string _label_BackingField;
      private string _language_BackingField;
      private bool _selected_BackingField;
      private readonly dom.SourceBuffer _sourceBuffer_BackingField;

      public static dom.VideoTrack prototype
      {
        get
        {
          return dom.VideoTrack._prototype_BackingField;
        }
        set
        {
          dom.VideoTrack._prototype_BackingField = value;
        }
      }

      public virtual string id
      {
        get
        {
          return this._id_BackingField;
        }
      }

      public virtual string kind
      {
        get
        {
          return this._kind_BackingField;
        }
        set
        {
          this._kind_BackingField = value;
        }
      }

      public virtual string label
      {
        get
        {
          return this._label_BackingField;
        }
      }

      public virtual string language
      {
        get
        {
          return this._language_BackingField;
        }
        set
        {
          this._language_BackingField = value;
        }
      }

      public virtual bool selected
      {
        get
        {
          return this._selected_BackingField;
        }
        set
        {
          this._selected_BackingField = value;
        }
      }

      public virtual dom.SourceBuffer sourceBuffer
      {
        get
        {
          return this._sourceBuffer_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class VideoTrackListEventMap : IObject
    {
      private dom.TrackEvent _addtrack_BackingField;
      private dom.Event _change_BackingField;
      private dom.TrackEvent _removetrack_BackingField;

      public dom.TrackEvent addtrack
      {
        get
        {
          return this._addtrack_BackingField;
        }
        set
        {
          this._addtrack_BackingField = value;
        }
      }

      public dom.Event change
      {
        get
        {
          return this._change_BackingField;
        }
        set
        {
          this._change_BackingField = value;
        }
      }

      public dom.TrackEvent removetrack
      {
        get
        {
          return this._removetrack_BackingField;
        }
        set
        {
          this._removetrack_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"addtrack\"")]
        public static readonly KeyOf<dom.VideoTrackListEventMap> addtrack;
        [Template("\"change\"")]
        public static readonly KeyOf<dom.VideoTrackListEventMap> change;
        [Template("\"removetrack\"")]
        public static readonly KeyOf<dom.VideoTrackListEventMap> removetrack;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class VideoTrackList : dom.EventTarget
    {
      private static dom.VideoTrackList _prototype_BackingField;
      private readonly uint _length_BackingField;
      private dom.VideoTrackList.onaddtrackFn _onaddtrack_BackingField;
      private dom.VideoTrackList.onchangeFn _onchange_BackingField;
      private dom.VideoTrackList.onaddtrackFn _onremovetrack_BackingField;
      private readonly int _selectedIndex_BackingField;

      public static dom.VideoTrackList prototype
      {
        get
        {
          return dom.VideoTrackList._prototype_BackingField;
        }
        set
        {
          dom.VideoTrackList._prototype_BackingField = value;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual dom.VideoTrackList.onaddtrackFn onaddtrack
      {
        get
        {
          return this._onaddtrack_BackingField;
        }
        set
        {
          this._onaddtrack_BackingField = value;
        }
      }

      public virtual dom.VideoTrackList.onchangeFn onchange
      {
        get
        {
          return this._onchange_BackingField;
        }
        set
        {
          this._onchange_BackingField = value;
        }
      }

      public virtual dom.VideoTrackList.onaddtrackFn onremovetrack
      {
        get
        {
          return this._onremovetrack_BackingField;
        }
        set
        {
          this._onremovetrack_BackingField = value;
        }
      }

      public virtual int selectedIndex
      {
        get
        {
          return this._selectedIndex_BackingField;
        }
      }

      public virtual extern dom.VideoTrack getTrackById(string id);

      public virtual extern dom.VideoTrack item(double index);

      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.VideoTrackList.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.VideoTrackList.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.VideoTrackList.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.VideoTrackList.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.VideoTrackList.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.VideoTrackList.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.VideoTrackList.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.VideoTrackList.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual extern dom.VideoTrack this[uint index] { get; set; }

      [Generated]
      public delegate void onaddtrackFn(dom.TrackEvent ev);

      [Generated]
      public delegate void onchangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WEBGL_color_buffer_float : IObject
    {
      private readonly double _FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT_BackingField;
      private readonly double _RGB32F_EXT_BackingField;
      private readonly double _RGBA32F_EXT_BackingField;
      private readonly double _UNSIGNED_NORMALIZED_EXT_BackingField;

      public double FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT
      {
        get
        {
          return this._FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT_BackingField;
        }
      }

      public double RGB32F_EXT
      {
        get
        {
          return this._RGB32F_EXT_BackingField;
        }
      }

      public double RGBA32F_EXT
      {
        get
        {
          return this._RGBA32F_EXT_BackingField;
        }
      }

      public double UNSIGNED_NORMALIZED_EXT
      {
        get
        {
          return this._UNSIGNED_NORMALIZED_EXT_BackingField;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class WEBGL_compressed_texture_astc : IObject
    {
      public abstract double COMPRESSED_RGBA_ASTC_10x10_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_10x5_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_10x6_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_10x8_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_12x10_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_12x12_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_4x4_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_5x4_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_5x5_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_6x5_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_6x6_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_8x5_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_8x6_KHR { get; }

      public abstract double COMPRESSED_RGBA_ASTC_8x8_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR { get; }

      public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR { get; }

      public abstract string[] getSupportedProfiles();
    }

    [CombinedClass]
    [FormerInterface]
    public class WEBGL_compressed_texture_s3tc : IObject
    {
      private static dom.WEBGL_compressed_texture_s3tc _prototype_BackingField;
      private static readonly double _COMPRESSED_RGBA_S3TC_DXT1_EXT_Static_BackingField;
      private static readonly double _COMPRESSED_RGBA_S3TC_DXT3_EXT_Static_BackingField;
      private static readonly double _COMPRESSED_RGBA_S3TC_DXT5_EXT_Static_BackingField;
      private static readonly double _COMPRESSED_RGB_S3TC_DXT1_EXT_Static_BackingField;
      private readonly double _COMPRESSED_RGBA_S3TC_DXT1_EXT_BackingField;
      private readonly double _COMPRESSED_RGBA_S3TC_DXT3_EXT_BackingField;
      private readonly double _COMPRESSED_RGBA_S3TC_DXT5_EXT_BackingField;
      private readonly double _COMPRESSED_RGB_S3TC_DXT1_EXT_BackingField;

      public static dom.WEBGL_compressed_texture_s3tc prototype
      {
        get
        {
          return dom.WEBGL_compressed_texture_s3tc._prototype_BackingField;
        }
        set
        {
          dom.WEBGL_compressed_texture_s3tc._prototype_BackingField = value;
        }
      }

      [Name("COMPRESSED_RGBA_S3TC_DXT1_EXT")]
      public static double COMPRESSED_RGBA_S3TC_DXT1_EXT_Static
      {
        get
        {
          return dom.WEBGL_compressed_texture_s3tc._COMPRESSED_RGBA_S3TC_DXT1_EXT_Static_BackingField;
        }
      }

      [Name("COMPRESSED_RGBA_S3TC_DXT3_EXT")]
      public static double COMPRESSED_RGBA_S3TC_DXT3_EXT_Static
      {
        get
        {
          return dom.WEBGL_compressed_texture_s3tc._COMPRESSED_RGBA_S3TC_DXT3_EXT_Static_BackingField;
        }
      }

      [Name("COMPRESSED_RGBA_S3TC_DXT5_EXT")]
      public static double COMPRESSED_RGBA_S3TC_DXT5_EXT_Static
      {
        get
        {
          return dom.WEBGL_compressed_texture_s3tc._COMPRESSED_RGBA_S3TC_DXT5_EXT_Static_BackingField;
        }
      }

      [Name("COMPRESSED_RGB_S3TC_DXT1_EXT")]
      public static double COMPRESSED_RGB_S3TC_DXT1_EXT_Static
      {
        get
        {
          return dom.WEBGL_compressed_texture_s3tc._COMPRESSED_RGB_S3TC_DXT1_EXT_Static_BackingField;
        }
      }

      public virtual double COMPRESSED_RGBA_S3TC_DXT1_EXT
      {
        get
        {
          return this._COMPRESSED_RGBA_S3TC_DXT1_EXT_BackingField;
        }
      }

      public virtual double COMPRESSED_RGBA_S3TC_DXT3_EXT
      {
        get
        {
          return this._COMPRESSED_RGBA_S3TC_DXT3_EXT_BackingField;
        }
      }

      public virtual double COMPRESSED_RGBA_S3TC_DXT5_EXT
      {
        get
        {
          return this._COMPRESSED_RGBA_S3TC_DXT5_EXT_BackingField;
        }
      }

      public virtual double COMPRESSED_RGB_S3TC_DXT1_EXT
      {
        get
        {
          return this._COMPRESSED_RGB_S3TC_DXT1_EXT_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WEBGL_compressed_texture_s3tc_srgb : IObject
    {
      private readonly double _COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT_BackingField;
      private readonly double _COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT_BackingField;
      private readonly double _COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT_BackingField;
      private readonly double _COMPRESSED_SRGB_S3TC_DXT1_EXT_BackingField;

      public double COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
      {
        get
        {
          return this._COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT_BackingField;
        }
      }

      public double COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
      {
        get
        {
          return this._COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT_BackingField;
        }
      }

      public double COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
      {
        get
        {
          return this._COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT_BackingField;
        }
      }

      public double COMPRESSED_SRGB_S3TC_DXT1_EXT
      {
        get
        {
          return this._COMPRESSED_SRGB_S3TC_DXT1_EXT_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WEBGL_debug_renderer_info : IObject
    {
      private static dom.WEBGL_debug_renderer_info _prototype_BackingField;
      private static readonly double _UNMASKED_RENDERER_WEBGL_Static_BackingField;
      private static readonly double _UNMASKED_VENDOR_WEBGL_Static_BackingField;
      private readonly double _UNMASKED_RENDERER_WEBGL_BackingField;
      private readonly double _UNMASKED_VENDOR_WEBGL_BackingField;

      public static dom.WEBGL_debug_renderer_info prototype
      {
        get
        {
          return dom.WEBGL_debug_renderer_info._prototype_BackingField;
        }
        set
        {
          dom.WEBGL_debug_renderer_info._prototype_BackingField = value;
        }
      }

      [Name("UNMASKED_RENDERER_WEBGL")]
      public static double UNMASKED_RENDERER_WEBGL_Static
      {
        get
        {
          return dom.WEBGL_debug_renderer_info._UNMASKED_RENDERER_WEBGL_Static_BackingField;
        }
      }

      [Name("UNMASKED_VENDOR_WEBGL")]
      public static double UNMASKED_VENDOR_WEBGL_Static
      {
        get
        {
          return dom.WEBGL_debug_renderer_info._UNMASKED_VENDOR_WEBGL_Static_BackingField;
        }
      }

      public virtual double UNMASKED_RENDERER_WEBGL
      {
        get
        {
          return this._UNMASKED_RENDERER_WEBGL_BackingField;
        }
      }

      public virtual double UNMASKED_VENDOR_WEBGL
      {
        get
        {
          return this._UNMASKED_VENDOR_WEBGL_BackingField;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class WEBGL_debug_shaders : IObject
    {
      public abstract string getTranslatedShaderSource(dom.WebGLShader shader);
    }

    [CombinedClass]
    [FormerInterface]
    public class WEBGL_depth_texture : IObject
    {
      private static dom.WEBGL_depth_texture _prototype_BackingField;
      private static readonly double _UNSIGNED_INT_24_8_WEBGL_Static_BackingField;
      private readonly double _UNSIGNED_INT_24_8_WEBGL_BackingField;

      public static dom.WEBGL_depth_texture prototype
      {
        get
        {
          return dom.WEBGL_depth_texture._prototype_BackingField;
        }
        set
        {
          dom.WEBGL_depth_texture._prototype_BackingField = value;
        }
      }

      [Name("UNSIGNED_INT_24_8_WEBGL")]
      public static double UNSIGNED_INT_24_8_WEBGL_Static
      {
        get
        {
          return dom.WEBGL_depth_texture._UNSIGNED_INT_24_8_WEBGL_Static_BackingField;
        }
      }

      public virtual double UNSIGNED_INT_24_8_WEBGL
      {
        get
        {
          return this._UNSIGNED_INT_24_8_WEBGL_BackingField;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class WEBGL_draw_buffers : IObject
    {
      public abstract double COLOR_ATTACHMENT0_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT10_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT11_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT12_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT13_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT14_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT15_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT1_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT2_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT3_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT4_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT5_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT6_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT7_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT8_WEBGL { get; }

      public abstract double COLOR_ATTACHMENT9_WEBGL { get; }

      public abstract double DRAW_BUFFER0_WEBGL { get; }

      public abstract double DRAW_BUFFER10_WEBGL { get; }

      public abstract double DRAW_BUFFER11_WEBGL { get; }

      public abstract double DRAW_BUFFER12_WEBGL { get; }

      public abstract double DRAW_BUFFER13_WEBGL { get; }

      public abstract double DRAW_BUFFER14_WEBGL { get; }

      public abstract double DRAW_BUFFER15_WEBGL { get; }

      public abstract double DRAW_BUFFER1_WEBGL { get; }

      public abstract double DRAW_BUFFER2_WEBGL { get; }

      public abstract double DRAW_BUFFER3_WEBGL { get; }

      public abstract double DRAW_BUFFER4_WEBGL { get; }

      public abstract double DRAW_BUFFER5_WEBGL { get; }

      public abstract double DRAW_BUFFER6_WEBGL { get; }

      public abstract double DRAW_BUFFER7_WEBGL { get; }

      public abstract double DRAW_BUFFER8_WEBGL { get; }

      public abstract double DRAW_BUFFER9_WEBGL { get; }

      public abstract double MAX_COLOR_ATTACHMENTS_WEBGL { get; }

      public abstract double MAX_DRAW_BUFFERS_WEBGL { get; }

      public abstract void drawBuffersWEBGL(double[] buffers);
    }

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public abstract class WEBGL_lose_context : IObject
    {
      public abstract void loseContext();

      public abstract void restoreContext();
    }

    [CombinedClass]
    [FormerInterface]
    public class WaveShaperNode : dom.AudioNode
    {
      private static dom.WaveShaperNode _prototype_BackingField;
      private es5.Float32Array _curve_BackingField;
      private dom.OverSampleType _oversample_BackingField;

      public static dom.WaveShaperNode prototype
      {
        get
        {
          return dom.WaveShaperNode._prototype_BackingField;
        }
        set
        {
          dom.WaveShaperNode._prototype_BackingField = value;
        }
      }

      public virtual es5.Float32Array curve
      {
        get
        {
          return this._curve_BackingField;
        }
        set
        {
          this._curve_BackingField = value;
        }
      }

      public virtual dom.OverSampleType oversample
      {
        get
        {
          return this._oversample_BackingField;
        }
        set
        {
          this._oversample_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebAuthentication : IObject
    {
      private static dom.WebAuthentication _prototype_BackingField;

      public static dom.WebAuthentication prototype
      {
        get
        {
          return dom.WebAuthentication._prototype_BackingField;
        }
        set
        {
          dom.WebAuthentication._prototype_BackingField = value;
        }
      }

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Int8Array assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Int16Array assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Int32Array assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Uint8Array assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Uint16Array assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Uint32Array assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Uint8ClampedArray assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Float32Array assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Float64Array assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.DataView assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.ArrayBuffer assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        Null assertionChallenge);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Int8Array assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Int16Array assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Int32Array assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Uint8Array assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Uint16Array assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Uint32Array assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Uint8ClampedArray assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Float32Array assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.Float64Array assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.DataView assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        es5.ArrayBuffer assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
        Null assertionChallenge,
        dom.AssertionOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Int8Array attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Int16Array attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Int32Array attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Uint8Array attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Uint16Array attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Uint32Array attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Uint8ClampedArray attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Float32Array attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Float64Array attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.DataView attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.ArrayBuffer attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        Null attestationChallenge);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Int8Array attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Int16Array attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Int32Array attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Uint8Array attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Uint16Array attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Uint32Array attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Uint8ClampedArray attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Float32Array attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.Float64Array attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.DataView attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        es5.ArrayBuffer attestationChallenge,
        dom.ScopedCredentialOptions options);

      public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
        dom.Account accountInformation,
        dom.ScopedCredentialParameters[] cryptoParameters,
        Null attestationChallenge,
        dom.ScopedCredentialOptions options);
    }

    [CombinedClass]
    [FormerInterface]
    public class WebAuthnAssertion : IObject
    {
      private static dom.WebAuthnAssertion _prototype_BackingField;
      private readonly es5.ArrayBuffer _authenticatorData_BackingField;
      private readonly es5.ArrayBuffer _clientData_BackingField;
      private readonly dom.ScopedCredential _credential_BackingField;
      private readonly es5.ArrayBuffer _signature_BackingField;

      public static dom.WebAuthnAssertion prototype
      {
        get
        {
          return dom.WebAuthnAssertion._prototype_BackingField;
        }
        set
        {
          dom.WebAuthnAssertion._prototype_BackingField = value;
        }
      }

      public virtual es5.ArrayBuffer authenticatorData
      {
        get
        {
          return this._authenticatorData_BackingField;
        }
      }

      public virtual es5.ArrayBuffer clientData
      {
        get
        {
          return this._clientData_BackingField;
        }
      }

      public virtual dom.ScopedCredential credential
      {
        get
        {
          return this._credential_BackingField;
        }
      }

      public virtual es5.ArrayBuffer signature
      {
        get
        {
          return this._signature_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLActiveInfo : IObject
    {
      private static dom.WebGLActiveInfo _prototype_BackingField;
      private readonly string _name_BackingField;
      private readonly int _size_BackingField;
      private readonly uint _type_BackingField;

      public static dom.WebGLActiveInfo prototype
      {
        get
        {
          return dom.WebGLActiveInfo._prototype_BackingField;
        }
        set
        {
          dom.WebGLActiveInfo._prototype_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual int size
      {
        get
        {
          return this._size_BackingField;
        }
      }

      public virtual uint type
      {
        get
        {
          return this._type_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLBuffer : dom.WebGLObject
    {
      private static dom.WebGLBuffer _prototype_BackingField;

      public static dom.WebGLBuffer prototype
      {
        get
        {
          return dom.WebGLBuffer._prototype_BackingField;
        }
        set
        {
          dom.WebGLBuffer._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLContextEvent : dom.Event
    {
      private static dom.WebGLContextEvent _prototype_BackingField;
      private readonly string _statusMessage_BackingField;

      public extern WebGLContextEvent(string typeArg);

      public extern WebGLContextEvent(string typeArg, dom.WebGLContextEventInit eventInitDict);

      public static dom.WebGLContextEvent prototype
      {
        get
        {
          return dom.WebGLContextEvent._prototype_BackingField;
        }
        set
        {
          dom.WebGLContextEvent._prototype_BackingField = value;
        }
      }

      public virtual string statusMessage
      {
        get
        {
          return this._statusMessage_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLFramebuffer : dom.WebGLObject
    {
      private static dom.WebGLFramebuffer _prototype_BackingField;

      public static dom.WebGLFramebuffer prototype
      {
        get
        {
          return dom.WebGLFramebuffer._prototype_BackingField;
        }
        set
        {
          dom.WebGLFramebuffer._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLObject : IObject
    {
      private static dom.WebGLObject _prototype_BackingField;

      public static dom.WebGLObject prototype
      {
        get
        {
          return dom.WebGLObject._prototype_BackingField;
        }
        set
        {
          dom.WebGLObject._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLProgram : dom.WebGLObject
    {
      private static dom.WebGLProgram _prototype_BackingField;

      public static dom.WebGLProgram prototype
      {
        get
        {
          return dom.WebGLProgram._prototype_BackingField;
        }
        set
        {
          dom.WebGLProgram._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLRenderbuffer : dom.WebGLObject
    {
      private static dom.WebGLRenderbuffer _prototype_BackingField;

      public static dom.WebGLRenderbuffer prototype
      {
        get
        {
          return dom.WebGLRenderbuffer._prototype_BackingField;
        }
        set
        {
          dom.WebGLRenderbuffer._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLRenderingContext : IObject
    {
      private static dom.WebGLRenderingContext _prototype_BackingField;
      private static readonly uint _ACTIVE_ATTRIBUTES_Static_BackingField;
      private static readonly uint _ACTIVE_TEXTURE_Static_BackingField;
      private static readonly uint _ACTIVE_UNIFORMS_Static_BackingField;
      private static readonly uint _ALIASED_LINE_WIDTH_RANGE_Static_BackingField;
      private static readonly uint _ALIASED_POINT_SIZE_RANGE_Static_BackingField;
      private static readonly uint _ALPHA_Static_BackingField;
      private static readonly uint _ALPHA_BITS_Static_BackingField;
      private static readonly uint _ALWAYS_Static_BackingField;
      private static readonly uint _ARRAY_BUFFER_Static_BackingField;
      private static readonly uint _ARRAY_BUFFER_BINDING_Static_BackingField;
      private static readonly uint _ATTACHED_SHADERS_Static_BackingField;
      private static readonly uint _BACK_Static_BackingField;
      private static readonly uint _BLEND_Static_BackingField;
      private static readonly uint _BLEND_COLOR_Static_BackingField;
      private static readonly uint _BLEND_DST_ALPHA_Static_BackingField;
      private static readonly uint _BLEND_DST_RGB_Static_BackingField;
      private static readonly uint _BLEND_EQUATION_Static_BackingField;
      private static readonly uint _BLEND_EQUATION_ALPHA_Static_BackingField;
      private static readonly uint _BLEND_EQUATION_RGB_Static_BackingField;
      private static readonly uint _BLEND_SRC_ALPHA_Static_BackingField;
      private static readonly uint _BLEND_SRC_RGB_Static_BackingField;
      private static readonly uint _BLUE_BITS_Static_BackingField;
      private static readonly uint _BOOL_Static_BackingField;
      private static readonly uint _BOOL_VEC2_Static_BackingField;
      private static readonly uint _BOOL_VEC3_Static_BackingField;
      private static readonly uint _BOOL_VEC4_Static_BackingField;
      private static readonly uint _BROWSER_DEFAULT_WEBGL_Static_BackingField;
      private static readonly uint _BUFFER_SIZE_Static_BackingField;
      private static readonly uint _BUFFER_USAGE_Static_BackingField;
      private static readonly uint _BYTE_Static_BackingField;
      private static readonly uint _CCW_Static_BackingField;
      private static readonly uint _CLAMP_TO_EDGE_Static_BackingField;
      private static readonly uint _COLOR_ATTACHMENT0_Static_BackingField;
      private static readonly uint _COLOR_BUFFER_BIT_Static_BackingField;
      private static readonly uint _COLOR_CLEAR_VALUE_Static_BackingField;
      private static readonly uint _COLOR_WRITEMASK_Static_BackingField;
      private static readonly uint _COMPILE_STATUS_Static_BackingField;
      private static readonly uint _COMPRESSED_TEXTURE_FORMATS_Static_BackingField;
      private static readonly uint _CONSTANT_ALPHA_Static_BackingField;
      private static readonly uint _CONSTANT_COLOR_Static_BackingField;
      private static readonly uint _CONTEXT_LOST_WEBGL_Static_BackingField;
      private static readonly uint _CULL_FACE_Static_BackingField;
      private static readonly uint _CULL_FACE_MODE_Static_BackingField;
      private static readonly uint _CURRENT_PROGRAM_Static_BackingField;
      private static readonly uint _CURRENT_VERTEX_ATTRIB_Static_BackingField;
      private static readonly uint _CW_Static_BackingField;
      private static readonly uint _DECR_Static_BackingField;
      private static readonly uint _DECR_WRAP_Static_BackingField;
      private static readonly uint _DELETE_STATUS_Static_BackingField;
      private static readonly uint _DEPTH_ATTACHMENT_Static_BackingField;
      private static readonly uint _DEPTH_BITS_Static_BackingField;
      private static readonly uint _DEPTH_BUFFER_BIT_Static_BackingField;
      private static readonly uint _DEPTH_CLEAR_VALUE_Static_BackingField;
      private static readonly uint _DEPTH_COMPONENT_Static_BackingField;
      private static readonly uint _DEPTH_COMPONENT16_Static_BackingField;
      private static readonly uint _DEPTH_FUNC_Static_BackingField;
      private static readonly uint _DEPTH_RANGE_Static_BackingField;
      private static readonly uint _DEPTH_STENCIL_Static_BackingField;
      private static readonly uint _DEPTH_STENCIL_ATTACHMENT_Static_BackingField;
      private static readonly uint _DEPTH_TEST_Static_BackingField;
      private static readonly uint _DEPTH_WRITEMASK_Static_BackingField;
      private static readonly uint _DITHER_Static_BackingField;
      private static readonly uint _DONT_CARE_Static_BackingField;
      private static readonly uint _DST_ALPHA_Static_BackingField;
      private static readonly uint _DST_COLOR_Static_BackingField;
      private static readonly uint _DYNAMIC_DRAW_Static_BackingField;
      private static readonly uint _ELEMENT_ARRAY_BUFFER_Static_BackingField;
      private static readonly uint _ELEMENT_ARRAY_BUFFER_BINDING_Static_BackingField;
      private static readonly uint _EQUAL_Static_BackingField;
      private static readonly uint _FASTEST_Static_BackingField;
      private static readonly uint _FLOAT_Static_BackingField;
      private static readonly uint _FLOAT_MAT2_Static_BackingField;
      private static readonly uint _FLOAT_MAT3_Static_BackingField;
      private static readonly uint _FLOAT_MAT4_Static_BackingField;
      private static readonly uint _FLOAT_VEC2_Static_BackingField;
      private static readonly uint _FLOAT_VEC3_Static_BackingField;
      private static readonly uint _FLOAT_VEC4_Static_BackingField;
      private static readonly uint _FRAGMENT_SHADER_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_BINDING_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_COMPLETE_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_INCOMPLETE_ATTACHMENT_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_INCOMPLETE_DIMENSIONS_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_Static_BackingField;
      private static readonly uint _FRAMEBUFFER_UNSUPPORTED_Static_BackingField;
      private static readonly uint _FRONT_Static_BackingField;
      private static readonly uint _FRONT_AND_BACK_Static_BackingField;
      private static readonly uint _FRONT_FACE_Static_BackingField;
      private static readonly uint _FUNC_ADD_Static_BackingField;
      private static readonly uint _FUNC_REVERSE_SUBTRACT_Static_BackingField;
      private static readonly uint _FUNC_SUBTRACT_Static_BackingField;
      private static readonly uint _GENERATE_MIPMAP_HINT_Static_BackingField;
      private static readonly uint _GEQUAL_Static_BackingField;
      private static readonly uint _GREATER_Static_BackingField;
      private static readonly uint _GREEN_BITS_Static_BackingField;
      private static readonly uint _HIGH_FLOAT_Static_BackingField;
      private static readonly uint _HIGH_INT_Static_BackingField;
      private static readonly uint _IMPLEMENTATION_COLOR_READ_FORMAT_Static_BackingField;
      private static readonly uint _IMPLEMENTATION_COLOR_READ_TYPE_Static_BackingField;
      private static readonly uint _INCR_Static_BackingField;
      private static readonly uint _INCR_WRAP_Static_BackingField;
      private static readonly uint _INT_Static_BackingField;
      private static readonly uint _INT_VEC2_Static_BackingField;
      private static readonly uint _INT_VEC3_Static_BackingField;
      private static readonly uint _INT_VEC4_Static_BackingField;
      private static readonly uint _INVALID_ENUM_Static_BackingField;
      private static readonly uint _INVALID_FRAMEBUFFER_OPERATION_Static_BackingField;
      private static readonly uint _INVALID_OPERATION_Static_BackingField;
      private static readonly uint _INVALID_VALUE_Static_BackingField;
      private static readonly uint _INVERT_Static_BackingField;
      private static readonly uint _KEEP_Static_BackingField;
      private static readonly uint _LEQUAL_Static_BackingField;
      private static readonly uint _LESS_Static_BackingField;
      private static readonly uint _LINEAR_Static_BackingField;
      private static readonly uint _LINEAR_MIPMAP_LINEAR_Static_BackingField;
      private static readonly uint _LINEAR_MIPMAP_NEAREST_Static_BackingField;
      private static readonly uint _LINES_Static_BackingField;
      private static readonly uint _LINE_LOOP_Static_BackingField;
      private static readonly uint _LINE_STRIP_Static_BackingField;
      private static readonly uint _LINE_WIDTH_Static_BackingField;
      private static readonly uint _LINK_STATUS_Static_BackingField;
      private static readonly uint _LOW_FLOAT_Static_BackingField;
      private static readonly uint _LOW_INT_Static_BackingField;
      private static readonly uint _LUMINANCE_Static_BackingField;
      private static readonly uint _LUMINANCE_ALPHA_Static_BackingField;
      private static readonly uint _MAX_COMBINED_TEXTURE_IMAGE_UNITS_Static_BackingField;
      private static readonly uint _MAX_CUBE_MAP_TEXTURE_SIZE_Static_BackingField;
      private static readonly uint _MAX_FRAGMENT_UNIFORM_VECTORS_Static_BackingField;
      private static readonly uint _MAX_RENDERBUFFER_SIZE_Static_BackingField;
      private static readonly uint _MAX_TEXTURE_IMAGE_UNITS_Static_BackingField;
      private static readonly uint _MAX_TEXTURE_SIZE_Static_BackingField;
      private static readonly uint _MAX_VARYING_VECTORS_Static_BackingField;
      private static readonly uint _MAX_VERTEX_ATTRIBS_Static_BackingField;
      private static readonly uint _MAX_VERTEX_TEXTURE_IMAGE_UNITS_Static_BackingField;
      private static readonly uint _MAX_VERTEX_UNIFORM_VECTORS_Static_BackingField;
      private static readonly uint _MAX_VIEWPORT_DIMS_Static_BackingField;
      private static readonly uint _MEDIUM_FLOAT_Static_BackingField;
      private static readonly uint _MEDIUM_INT_Static_BackingField;
      private static readonly uint _MIRRORED_REPEAT_Static_BackingField;
      private static readonly uint _NEAREST_Static_BackingField;
      private static readonly uint _NEAREST_MIPMAP_LINEAR_Static_BackingField;
      private static readonly uint _NEAREST_MIPMAP_NEAREST_Static_BackingField;
      private static readonly uint _NEVER_Static_BackingField;
      private static readonly uint _NICEST_Static_BackingField;
      private static readonly uint _NONE_Static_BackingField;
      private static readonly uint _NOTEQUAL_Static_BackingField;
      private static readonly uint _NO_ERROR_Static_BackingField;
      private static readonly uint _ONE_Static_BackingField;
      private static readonly uint _ONE_MINUS_CONSTANT_ALPHA_Static_BackingField;
      private static readonly uint _ONE_MINUS_CONSTANT_COLOR_Static_BackingField;
      private static readonly uint _ONE_MINUS_DST_ALPHA_Static_BackingField;
      private static readonly uint _ONE_MINUS_DST_COLOR_Static_BackingField;
      private static readonly uint _ONE_MINUS_SRC_ALPHA_Static_BackingField;
      private static readonly uint _ONE_MINUS_SRC_COLOR_Static_BackingField;
      private static readonly uint _OUT_OF_MEMORY_Static_BackingField;
      private static readonly uint _PACK_ALIGNMENT_Static_BackingField;
      private static readonly uint _POINTS_Static_BackingField;
      private static readonly uint _POLYGON_OFFSET_FACTOR_Static_BackingField;
      private static readonly uint _POLYGON_OFFSET_FILL_Static_BackingField;
      private static readonly uint _POLYGON_OFFSET_UNITS_Static_BackingField;
      private static readonly uint _RED_BITS_Static_BackingField;
      private static readonly uint _RENDERBUFFER_Static_BackingField;
      private static readonly uint _RENDERBUFFER_ALPHA_SIZE_Static_BackingField;
      private static readonly uint _RENDERBUFFER_BINDING_Static_BackingField;
      private static readonly uint _RENDERBUFFER_BLUE_SIZE_Static_BackingField;
      private static readonly uint _RENDERBUFFER_DEPTH_SIZE_Static_BackingField;
      private static readonly uint _RENDERBUFFER_GREEN_SIZE_Static_BackingField;
      private static readonly uint _RENDERBUFFER_HEIGHT_Static_BackingField;
      private static readonly uint _RENDERBUFFER_INTERNAL_FORMAT_Static_BackingField;
      private static readonly uint _RENDERBUFFER_RED_SIZE_Static_BackingField;
      private static readonly uint _RENDERBUFFER_STENCIL_SIZE_Static_BackingField;
      private static readonly uint _RENDERBUFFER_WIDTH_Static_BackingField;
      private static readonly uint _RENDERER_Static_BackingField;
      private static readonly uint _REPEAT_Static_BackingField;
      private static readonly uint _REPLACE_Static_BackingField;
      private static readonly uint _RGB_Static_BackingField;
      private static readonly uint _RGB565_Static_BackingField;
      private static readonly uint _RGB5_A1_Static_BackingField;
      private static readonly uint _RGBA_Static_BackingField;
      private static readonly uint _RGBA4_Static_BackingField;
      private static readonly uint _SAMPLER_2D_Static_BackingField;
      private static readonly uint _SAMPLER_CUBE_Static_BackingField;
      private static readonly uint _SAMPLES_Static_BackingField;
      private static readonly uint _SAMPLE_ALPHA_TO_COVERAGE_Static_BackingField;
      private static readonly uint _SAMPLE_BUFFERS_Static_BackingField;
      private static readonly uint _SAMPLE_COVERAGE_Static_BackingField;
      private static readonly uint _SAMPLE_COVERAGE_INVERT_Static_BackingField;
      private static readonly uint _SAMPLE_COVERAGE_VALUE_Static_BackingField;
      private static readonly uint _SCISSOR_BOX_Static_BackingField;
      private static readonly uint _SCISSOR_TEST_Static_BackingField;
      private static readonly uint _SHADER_TYPE_Static_BackingField;
      private static readonly uint _SHADING_LANGUAGE_VERSION_Static_BackingField;
      private static readonly uint _SHORT_Static_BackingField;
      private static readonly uint _SRC_ALPHA_Static_BackingField;
      private static readonly uint _SRC_ALPHA_SATURATE_Static_BackingField;
      private static readonly uint _SRC_COLOR_Static_BackingField;
      private static readonly uint _STATIC_DRAW_Static_BackingField;
      private static readonly uint _STENCIL_ATTACHMENT_Static_BackingField;
      private static readonly uint _STENCIL_BACK_FAIL_Static_BackingField;
      private static readonly uint _STENCIL_BACK_FUNC_Static_BackingField;
      private static readonly uint _STENCIL_BACK_PASS_DEPTH_FAIL_Static_BackingField;
      private static readonly uint _STENCIL_BACK_PASS_DEPTH_PASS_Static_BackingField;
      private static readonly uint _STENCIL_BACK_REF_Static_BackingField;
      private static readonly uint _STENCIL_BACK_VALUE_MASK_Static_BackingField;
      private static readonly uint _STENCIL_BACK_WRITEMASK_Static_BackingField;
      private static readonly uint _STENCIL_BITS_Static_BackingField;
      private static readonly uint _STENCIL_BUFFER_BIT_Static_BackingField;
      private static readonly uint _STENCIL_CLEAR_VALUE_Static_BackingField;
      private static readonly uint _STENCIL_FAIL_Static_BackingField;
      private static readonly uint _STENCIL_FUNC_Static_BackingField;
      private static readonly uint _STENCIL_INDEX_Static_BackingField;
      private static readonly uint _STENCIL_INDEX8_Static_BackingField;
      private static readonly uint _STENCIL_PASS_DEPTH_FAIL_Static_BackingField;
      private static readonly uint _STENCIL_PASS_DEPTH_PASS_Static_BackingField;
      private static readonly uint _STENCIL_REF_Static_BackingField;
      private static readonly uint _STENCIL_TEST_Static_BackingField;
      private static readonly uint _STENCIL_VALUE_MASK_Static_BackingField;
      private static readonly uint _STENCIL_WRITEMASK_Static_BackingField;
      private static readonly uint _STREAM_DRAW_Static_BackingField;
      private static readonly uint _SUBPIXEL_BITS_Static_BackingField;
      private static readonly uint _TEXTURE_Static_BackingField;
      private static readonly uint _TEXTURE0_Static_BackingField;
      private static readonly uint _TEXTURE1_Static_BackingField;
      private static readonly uint _TEXTURE10_Static_BackingField;
      private static readonly uint _TEXTURE11_Static_BackingField;
      private static readonly uint _TEXTURE12_Static_BackingField;
      private static readonly uint _TEXTURE13_Static_BackingField;
      private static readonly uint _TEXTURE14_Static_BackingField;
      private static readonly uint _TEXTURE15_Static_BackingField;
      private static readonly uint _TEXTURE16_Static_BackingField;
      private static readonly uint _TEXTURE17_Static_BackingField;
      private static readonly uint _TEXTURE18_Static_BackingField;
      private static readonly uint _TEXTURE19_Static_BackingField;
      private static readonly uint _TEXTURE2_Static_BackingField;
      private static readonly uint _TEXTURE20_Static_BackingField;
      private static readonly uint _TEXTURE21_Static_BackingField;
      private static readonly uint _TEXTURE22_Static_BackingField;
      private static readonly uint _TEXTURE23_Static_BackingField;
      private static readonly uint _TEXTURE24_Static_BackingField;
      private static readonly uint _TEXTURE25_Static_BackingField;
      private static readonly uint _TEXTURE26_Static_BackingField;
      private static readonly uint _TEXTURE27_Static_BackingField;
      private static readonly uint _TEXTURE28_Static_BackingField;
      private static readonly uint _TEXTURE29_Static_BackingField;
      private static readonly uint _TEXTURE3_Static_BackingField;
      private static readonly uint _TEXTURE30_Static_BackingField;
      private static readonly uint _TEXTURE31_Static_BackingField;
      private static readonly uint _TEXTURE4_Static_BackingField;
      private static readonly uint _TEXTURE5_Static_BackingField;
      private static readonly uint _TEXTURE6_Static_BackingField;
      private static readonly uint _TEXTURE7_Static_BackingField;
      private static readonly uint _TEXTURE8_Static_BackingField;
      private static readonly uint _TEXTURE9_Static_BackingField;
      private static readonly uint _TEXTURE_2D_Static_BackingField;
      private static readonly uint _TEXTURE_BINDING_2D_Static_BackingField;
      private static readonly uint _TEXTURE_BINDING_CUBE_MAP_Static_BackingField;
      private static readonly uint _TEXTURE_CUBE_MAP_Static_BackingField;
      private static readonly uint _TEXTURE_CUBE_MAP_NEGATIVE_X_Static_BackingField;
      private static readonly uint _TEXTURE_CUBE_MAP_NEGATIVE_Y_Static_BackingField;
      private static readonly uint _TEXTURE_CUBE_MAP_NEGATIVE_Z_Static_BackingField;
      private static readonly uint _TEXTURE_CUBE_MAP_POSITIVE_X_Static_BackingField;
      private static readonly uint _TEXTURE_CUBE_MAP_POSITIVE_Y_Static_BackingField;
      private static readonly uint _TEXTURE_CUBE_MAP_POSITIVE_Z_Static_BackingField;
      private static readonly uint _TEXTURE_MAG_FILTER_Static_BackingField;
      private static readonly uint _TEXTURE_MIN_FILTER_Static_BackingField;
      private static readonly uint _TEXTURE_WRAP_S_Static_BackingField;
      private static readonly uint _TEXTURE_WRAP_T_Static_BackingField;
      private static readonly uint _TRIANGLES_Static_BackingField;
      private static readonly uint _TRIANGLE_FAN_Static_BackingField;
      private static readonly uint _TRIANGLE_STRIP_Static_BackingField;
      private static readonly uint _UNPACK_ALIGNMENT_Static_BackingField;
      private static readonly uint _UNPACK_COLORSPACE_CONVERSION_WEBGL_Static_BackingField;
      private static readonly uint _UNPACK_FLIP_Y_WEBGL_Static_BackingField;
      private static readonly uint _UNPACK_PREMULTIPLY_ALPHA_WEBGL_Static_BackingField;
      private static readonly uint _UNSIGNED_BYTE_Static_BackingField;
      private static readonly uint _UNSIGNED_INT_Static_BackingField;
      private static readonly uint _UNSIGNED_SHORT_Static_BackingField;
      private static readonly uint _UNSIGNED_SHORT_4_4_4_4_Static_BackingField;
      private static readonly uint _UNSIGNED_SHORT_5_5_5_1_Static_BackingField;
      private static readonly uint _UNSIGNED_SHORT_5_6_5_Static_BackingField;
      private static readonly uint _VALIDATE_STATUS_Static_BackingField;
      private static readonly uint _VENDOR_Static_BackingField;
      private static readonly uint _VERSION_Static_BackingField;
      private static readonly uint _VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_Static_BackingField;
      private static readonly uint _VERTEX_ATTRIB_ARRAY_ENABLED_Static_BackingField;
      private static readonly uint _VERTEX_ATTRIB_ARRAY_NORMALIZED_Static_BackingField;
      private static readonly uint _VERTEX_ATTRIB_ARRAY_POINTER_Static_BackingField;
      private static readonly uint _VERTEX_ATTRIB_ARRAY_SIZE_Static_BackingField;
      private static readonly uint _VERTEX_ATTRIB_ARRAY_STRIDE_Static_BackingField;
      private static readonly uint _VERTEX_ATTRIB_ARRAY_TYPE_Static_BackingField;
      private static readonly uint _VERTEX_SHADER_Static_BackingField;
      private static readonly uint _VIEWPORT_Static_BackingField;
      private static readonly uint _ZERO_Static_BackingField;
      private readonly dom.HTMLCanvasElement _canvas_BackingField;
      private readonly double _drawingBufferHeight_BackingField;
      private readonly double _drawingBufferWidth_BackingField;
      private readonly uint _ACTIVE_ATTRIBUTES_BackingField;
      private readonly uint _ACTIVE_TEXTURE_BackingField;
      private readonly uint _ACTIVE_UNIFORMS_BackingField;
      private readonly uint _ALIASED_LINE_WIDTH_RANGE_BackingField;
      private readonly uint _ALIASED_POINT_SIZE_RANGE_BackingField;
      private readonly uint _ALPHA_BackingField;
      private readonly uint _ALPHA_BITS_BackingField;
      private readonly uint _ALWAYS_BackingField;
      private readonly uint _ARRAY_BUFFER_BackingField;
      private readonly uint _ARRAY_BUFFER_BINDING_BackingField;
      private readonly uint _ATTACHED_SHADERS_BackingField;
      private readonly uint _BACK_BackingField;
      private readonly uint _BLEND_BackingField;
      private readonly uint _BLEND_COLOR_BackingField;
      private readonly uint _BLEND_DST_ALPHA_BackingField;
      private readonly uint _BLEND_DST_RGB_BackingField;
      private readonly uint _BLEND_EQUATION_BackingField;
      private readonly uint _BLEND_EQUATION_ALPHA_BackingField;
      private readonly uint _BLEND_EQUATION_RGB_BackingField;
      private readonly uint _BLEND_SRC_ALPHA_BackingField;
      private readonly uint _BLEND_SRC_RGB_BackingField;
      private readonly uint _BLUE_BITS_BackingField;
      private readonly uint _BOOL_BackingField;
      private readonly uint _BOOL_VEC2_BackingField;
      private readonly uint _BOOL_VEC3_BackingField;
      private readonly uint _BOOL_VEC4_BackingField;
      private readonly uint _BROWSER_DEFAULT_WEBGL_BackingField;
      private readonly uint _BUFFER_SIZE_BackingField;
      private readonly uint _BUFFER_USAGE_BackingField;
      private readonly uint _BYTE_BackingField;
      private readonly uint _CCW_BackingField;
      private readonly uint _CLAMP_TO_EDGE_BackingField;
      private readonly uint _COLOR_ATTACHMENT0_BackingField;
      private readonly uint _COLOR_BUFFER_BIT_BackingField;
      private readonly uint _COLOR_CLEAR_VALUE_BackingField;
      private readonly uint _COLOR_WRITEMASK_BackingField;
      private readonly uint _COMPILE_STATUS_BackingField;
      private readonly uint _COMPRESSED_TEXTURE_FORMATS_BackingField;
      private readonly uint _CONSTANT_ALPHA_BackingField;
      private readonly uint _CONSTANT_COLOR_BackingField;
      private readonly uint _CONTEXT_LOST_WEBGL_BackingField;
      private readonly uint _CULL_FACE_BackingField;
      private readonly uint _CULL_FACE_MODE_BackingField;
      private readonly uint _CURRENT_PROGRAM_BackingField;
      private readonly uint _CURRENT_VERTEX_ATTRIB_BackingField;
      private readonly uint _CW_BackingField;
      private readonly uint _DECR_BackingField;
      private readonly uint _DECR_WRAP_BackingField;
      private readonly uint _DELETE_STATUS_BackingField;
      private readonly uint _DEPTH_ATTACHMENT_BackingField;
      private readonly uint _DEPTH_BITS_BackingField;
      private readonly uint _DEPTH_BUFFER_BIT_BackingField;
      private readonly uint _DEPTH_CLEAR_VALUE_BackingField;
      private readonly uint _DEPTH_COMPONENT_BackingField;
      private readonly uint _DEPTH_COMPONENT16_BackingField;
      private readonly uint _DEPTH_FUNC_BackingField;
      private readonly uint _DEPTH_RANGE_BackingField;
      private readonly uint _DEPTH_STENCIL_BackingField;
      private readonly uint _DEPTH_STENCIL_ATTACHMENT_BackingField;
      private readonly uint _DEPTH_TEST_BackingField;
      private readonly uint _DEPTH_WRITEMASK_BackingField;
      private readonly uint _DITHER_BackingField;
      private readonly uint _DONT_CARE_BackingField;
      private readonly uint _DST_ALPHA_BackingField;
      private readonly uint _DST_COLOR_BackingField;
      private readonly uint _DYNAMIC_DRAW_BackingField;
      private readonly uint _ELEMENT_ARRAY_BUFFER_BackingField;
      private readonly uint _ELEMENT_ARRAY_BUFFER_BINDING_BackingField;
      private readonly uint _EQUAL_BackingField;
      private readonly uint _FASTEST_BackingField;
      private readonly uint _FLOAT_BackingField;
      private readonly uint _FLOAT_MAT2_BackingField;
      private readonly uint _FLOAT_MAT3_BackingField;
      private readonly uint _FLOAT_MAT4_BackingField;
      private readonly uint _FLOAT_VEC2_BackingField;
      private readonly uint _FLOAT_VEC3_BackingField;
      private readonly uint _FLOAT_VEC4_BackingField;
      private readonly uint _FRAGMENT_SHADER_BackingField;
      private readonly uint _FRAMEBUFFER_BackingField;
      private readonly uint _FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_BackingField;
      private readonly uint _FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_BackingField;
      private readonly uint _FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_BackingField;
      private readonly uint _FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_BackingField;
      private readonly uint _FRAMEBUFFER_BINDING_BackingField;
      private readonly uint _FRAMEBUFFER_COMPLETE_BackingField;
      private readonly uint _FRAMEBUFFER_INCOMPLETE_ATTACHMENT_BackingField;
      private readonly uint _FRAMEBUFFER_INCOMPLETE_DIMENSIONS_BackingField;
      private readonly uint _FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_BackingField;
      private readonly uint _FRAMEBUFFER_UNSUPPORTED_BackingField;
      private readonly uint _FRONT_BackingField;
      private readonly uint _FRONT_AND_BACK_BackingField;
      private readonly uint _FRONT_FACE_BackingField;
      private readonly uint _FUNC_ADD_BackingField;
      private readonly uint _FUNC_REVERSE_SUBTRACT_BackingField;
      private readonly uint _FUNC_SUBTRACT_BackingField;
      private readonly uint _GENERATE_MIPMAP_HINT_BackingField;
      private readonly uint _GEQUAL_BackingField;
      private readonly uint _GREATER_BackingField;
      private readonly uint _GREEN_BITS_BackingField;
      private readonly uint _HIGH_FLOAT_BackingField;
      private readonly uint _HIGH_INT_BackingField;
      private readonly uint _IMPLEMENTATION_COLOR_READ_FORMAT_BackingField;
      private readonly uint _IMPLEMENTATION_COLOR_READ_TYPE_BackingField;
      private readonly uint _INCR_BackingField;
      private readonly uint _INCR_WRAP_BackingField;
      private readonly uint _INT_BackingField;
      private readonly uint _INT_VEC2_BackingField;
      private readonly uint _INT_VEC3_BackingField;
      private readonly uint _INT_VEC4_BackingField;
      private readonly uint _INVALID_ENUM_BackingField;
      private readonly uint _INVALID_FRAMEBUFFER_OPERATION_BackingField;
      private readonly uint _INVALID_OPERATION_BackingField;
      private readonly uint _INVALID_VALUE_BackingField;
      private readonly uint _INVERT_BackingField;
      private readonly uint _KEEP_BackingField;
      private readonly uint _LEQUAL_BackingField;
      private readonly uint _LESS_BackingField;
      private readonly uint _LINEAR_BackingField;
      private readonly uint _LINEAR_MIPMAP_LINEAR_BackingField;
      private readonly uint _LINEAR_MIPMAP_NEAREST_BackingField;
      private readonly uint _LINES_BackingField;
      private readonly uint _LINE_LOOP_BackingField;
      private readonly uint _LINE_STRIP_BackingField;
      private readonly uint _LINE_WIDTH_BackingField;
      private readonly uint _LINK_STATUS_BackingField;
      private readonly uint _LOW_FLOAT_BackingField;
      private readonly uint _LOW_INT_BackingField;
      private readonly uint _LUMINANCE_BackingField;
      private readonly uint _LUMINANCE_ALPHA_BackingField;
      private readonly uint _MAX_COMBINED_TEXTURE_IMAGE_UNITS_BackingField;
      private readonly uint _MAX_CUBE_MAP_TEXTURE_SIZE_BackingField;
      private readonly uint _MAX_FRAGMENT_UNIFORM_VECTORS_BackingField;
      private readonly uint _MAX_RENDERBUFFER_SIZE_BackingField;
      private readonly uint _MAX_TEXTURE_IMAGE_UNITS_BackingField;
      private readonly uint _MAX_TEXTURE_SIZE_BackingField;
      private readonly uint _MAX_VARYING_VECTORS_BackingField;
      private readonly uint _MAX_VERTEX_ATTRIBS_BackingField;
      private readonly uint _MAX_VERTEX_TEXTURE_IMAGE_UNITS_BackingField;
      private readonly uint _MAX_VERTEX_UNIFORM_VECTORS_BackingField;
      private readonly uint _MAX_VIEWPORT_DIMS_BackingField;
      private readonly uint _MEDIUM_FLOAT_BackingField;
      private readonly uint _MEDIUM_INT_BackingField;
      private readonly uint _MIRRORED_REPEAT_BackingField;
      private readonly uint _NEAREST_BackingField;
      private readonly uint _NEAREST_MIPMAP_LINEAR_BackingField;
      private readonly uint _NEAREST_MIPMAP_NEAREST_BackingField;
      private readonly uint _NEVER_BackingField;
      private readonly uint _NICEST_BackingField;
      private readonly uint _NONE_BackingField;
      private readonly uint _NOTEQUAL_BackingField;
      private readonly uint _NO_ERROR_BackingField;
      private readonly uint _ONE_BackingField;
      private readonly uint _ONE_MINUS_CONSTANT_ALPHA_BackingField;
      private readonly uint _ONE_MINUS_CONSTANT_COLOR_BackingField;
      private readonly uint _ONE_MINUS_DST_ALPHA_BackingField;
      private readonly uint _ONE_MINUS_DST_COLOR_BackingField;
      private readonly uint _ONE_MINUS_SRC_ALPHA_BackingField;
      private readonly uint _ONE_MINUS_SRC_COLOR_BackingField;
      private readonly uint _OUT_OF_MEMORY_BackingField;
      private readonly uint _PACK_ALIGNMENT_BackingField;
      private readonly uint _POINTS_BackingField;
      private readonly uint _POLYGON_OFFSET_FACTOR_BackingField;
      private readonly uint _POLYGON_OFFSET_FILL_BackingField;
      private readonly uint _POLYGON_OFFSET_UNITS_BackingField;
      private readonly uint _RED_BITS_BackingField;
      private readonly uint _RENDERBUFFER_BackingField;
      private readonly uint _RENDERBUFFER_ALPHA_SIZE_BackingField;
      private readonly uint _RENDERBUFFER_BINDING_BackingField;
      private readonly uint _RENDERBUFFER_BLUE_SIZE_BackingField;
      private readonly uint _RENDERBUFFER_DEPTH_SIZE_BackingField;
      private readonly uint _RENDERBUFFER_GREEN_SIZE_BackingField;
      private readonly uint _RENDERBUFFER_HEIGHT_BackingField;
      private readonly uint _RENDERBUFFER_INTERNAL_FORMAT_BackingField;
      private readonly uint _RENDERBUFFER_RED_SIZE_BackingField;
      private readonly uint _RENDERBUFFER_STENCIL_SIZE_BackingField;
      private readonly uint _RENDERBUFFER_WIDTH_BackingField;
      private readonly uint _RENDERER_BackingField;
      private readonly uint _REPEAT_BackingField;
      private readonly uint _REPLACE_BackingField;
      private readonly uint _RGB_BackingField;
      private readonly uint _RGB565_BackingField;
      private readonly uint _RGB5_A1_BackingField;
      private readonly uint _RGBA_BackingField;
      private readonly uint _RGBA4_BackingField;
      private readonly uint _SAMPLER_2D_BackingField;
      private readonly uint _SAMPLER_CUBE_BackingField;
      private readonly uint _SAMPLES_BackingField;
      private readonly uint _SAMPLE_ALPHA_TO_COVERAGE_BackingField;
      private readonly uint _SAMPLE_BUFFERS_BackingField;
      private readonly uint _SAMPLE_COVERAGE_BackingField;
      private readonly uint _SAMPLE_COVERAGE_INVERT_BackingField;
      private readonly uint _SAMPLE_COVERAGE_VALUE_BackingField;
      private readonly uint _SCISSOR_BOX_BackingField;
      private readonly uint _SCISSOR_TEST_BackingField;
      private readonly uint _SHADER_TYPE_BackingField;
      private readonly uint _SHADING_LANGUAGE_VERSION_BackingField;
      private readonly uint _SHORT_BackingField;
      private readonly uint _SRC_ALPHA_BackingField;
      private readonly uint _SRC_ALPHA_SATURATE_BackingField;
      private readonly uint _SRC_COLOR_BackingField;
      private readonly uint _STATIC_DRAW_BackingField;
      private readonly uint _STENCIL_ATTACHMENT_BackingField;
      private readonly uint _STENCIL_BACK_FAIL_BackingField;
      private readonly uint _STENCIL_BACK_FUNC_BackingField;
      private readonly uint _STENCIL_BACK_PASS_DEPTH_FAIL_BackingField;
      private readonly uint _STENCIL_BACK_PASS_DEPTH_PASS_BackingField;
      private readonly uint _STENCIL_BACK_REF_BackingField;
      private readonly uint _STENCIL_BACK_VALUE_MASK_BackingField;
      private readonly uint _STENCIL_BACK_WRITEMASK_BackingField;
      private readonly uint _STENCIL_BITS_BackingField;
      private readonly uint _STENCIL_BUFFER_BIT_BackingField;
      private readonly uint _STENCIL_CLEAR_VALUE_BackingField;
      private readonly uint _STENCIL_FAIL_BackingField;
      private readonly uint _STENCIL_FUNC_BackingField;
      private readonly uint _STENCIL_INDEX_BackingField;
      private readonly uint _STENCIL_INDEX8_BackingField;
      private readonly uint _STENCIL_PASS_DEPTH_FAIL_BackingField;
      private readonly uint _STENCIL_PASS_DEPTH_PASS_BackingField;
      private readonly uint _STENCIL_REF_BackingField;
      private readonly uint _STENCIL_TEST_BackingField;
      private readonly uint _STENCIL_VALUE_MASK_BackingField;
      private readonly uint _STENCIL_WRITEMASK_BackingField;
      private readonly uint _STREAM_DRAW_BackingField;
      private readonly uint _SUBPIXEL_BITS_BackingField;
      private readonly uint _TEXTURE_BackingField;
      private readonly uint _TEXTURE0_BackingField;
      private readonly uint _TEXTURE1_BackingField;
      private readonly uint _TEXTURE10_BackingField;
      private readonly uint _TEXTURE11_BackingField;
      private readonly uint _TEXTURE12_BackingField;
      private readonly uint _TEXTURE13_BackingField;
      private readonly uint _TEXTURE14_BackingField;
      private readonly uint _TEXTURE15_BackingField;
      private readonly uint _TEXTURE16_BackingField;
      private readonly uint _TEXTURE17_BackingField;
      private readonly uint _TEXTURE18_BackingField;
      private readonly uint _TEXTURE19_BackingField;
      private readonly uint _TEXTURE2_BackingField;
      private readonly uint _TEXTURE20_BackingField;
      private readonly uint _TEXTURE21_BackingField;
      private readonly uint _TEXTURE22_BackingField;
      private readonly uint _TEXTURE23_BackingField;
      private readonly uint _TEXTURE24_BackingField;
      private readonly uint _TEXTURE25_BackingField;
      private readonly uint _TEXTURE26_BackingField;
      private readonly uint _TEXTURE27_BackingField;
      private readonly uint _TEXTURE28_BackingField;
      private readonly uint _TEXTURE29_BackingField;
      private readonly uint _TEXTURE3_BackingField;
      private readonly uint _TEXTURE30_BackingField;
      private readonly uint _TEXTURE31_BackingField;
      private readonly uint _TEXTURE4_BackingField;
      private readonly uint _TEXTURE5_BackingField;
      private readonly uint _TEXTURE6_BackingField;
      private readonly uint _TEXTURE7_BackingField;
      private readonly uint _TEXTURE8_BackingField;
      private readonly uint _TEXTURE9_BackingField;
      private readonly uint _TEXTURE_2D_BackingField;
      private readonly uint _TEXTURE_BINDING_2D_BackingField;
      private readonly uint _TEXTURE_BINDING_CUBE_MAP_BackingField;
      private readonly uint _TEXTURE_CUBE_MAP_BackingField;
      private readonly uint _TEXTURE_CUBE_MAP_NEGATIVE_X_BackingField;
      private readonly uint _TEXTURE_CUBE_MAP_NEGATIVE_Y_BackingField;
      private readonly uint _TEXTURE_CUBE_MAP_NEGATIVE_Z_BackingField;
      private readonly uint _TEXTURE_CUBE_MAP_POSITIVE_X_BackingField;
      private readonly uint _TEXTURE_CUBE_MAP_POSITIVE_Y_BackingField;
      private readonly uint _TEXTURE_CUBE_MAP_POSITIVE_Z_BackingField;
      private readonly uint _TEXTURE_MAG_FILTER_BackingField;
      private readonly uint _TEXTURE_MIN_FILTER_BackingField;
      private readonly uint _TEXTURE_WRAP_S_BackingField;
      private readonly uint _TEXTURE_WRAP_T_BackingField;
      private readonly uint _TRIANGLES_BackingField;
      private readonly uint _TRIANGLE_FAN_BackingField;
      private readonly uint _TRIANGLE_STRIP_BackingField;
      private readonly uint _UNPACK_ALIGNMENT_BackingField;
      private readonly uint _UNPACK_COLORSPACE_CONVERSION_WEBGL_BackingField;
      private readonly uint _UNPACK_FLIP_Y_WEBGL_BackingField;
      private readonly uint _UNPACK_PREMULTIPLY_ALPHA_WEBGL_BackingField;
      private readonly uint _UNSIGNED_BYTE_BackingField;
      private readonly uint _UNSIGNED_INT_BackingField;
      private readonly uint _UNSIGNED_SHORT_BackingField;
      private readonly uint _UNSIGNED_SHORT_4_4_4_4_BackingField;
      private readonly uint _UNSIGNED_SHORT_5_5_5_1_BackingField;
      private readonly uint _UNSIGNED_SHORT_5_6_5_BackingField;
      private readonly uint _VALIDATE_STATUS_BackingField;
      private readonly uint _VENDOR_BackingField;
      private readonly uint _VERSION_BackingField;
      private readonly uint _VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_BackingField;
      private readonly uint _VERTEX_ATTRIB_ARRAY_ENABLED_BackingField;
      private readonly uint _VERTEX_ATTRIB_ARRAY_NORMALIZED_BackingField;
      private readonly uint _VERTEX_ATTRIB_ARRAY_POINTER_BackingField;
      private readonly uint _VERTEX_ATTRIB_ARRAY_SIZE_BackingField;
      private readonly uint _VERTEX_ATTRIB_ARRAY_STRIDE_BackingField;
      private readonly uint _VERTEX_ATTRIB_ARRAY_TYPE_BackingField;
      private readonly uint _VERTEX_SHADER_BackingField;
      private readonly uint _VIEWPORT_BackingField;
      private readonly uint _ZERO_BackingField;

      public static dom.WebGLRenderingContext prototype
      {
        get
        {
          return dom.WebGLRenderingContext._prototype_BackingField;
        }
        set
        {
          dom.WebGLRenderingContext._prototype_BackingField = value;
        }
      }

      [Name("ACTIVE_ATTRIBUTES")]
      public static uint ACTIVE_ATTRIBUTES_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ACTIVE_ATTRIBUTES_Static_BackingField;
        }
      }

      [Name("ACTIVE_TEXTURE")]
      public static uint ACTIVE_TEXTURE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ACTIVE_TEXTURE_Static_BackingField;
        }
      }

      [Name("ACTIVE_UNIFORMS")]
      public static uint ACTIVE_UNIFORMS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ACTIVE_UNIFORMS_Static_BackingField;
        }
      }

      [Name("ALIASED_LINE_WIDTH_RANGE")]
      public static uint ALIASED_LINE_WIDTH_RANGE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ALIASED_LINE_WIDTH_RANGE_Static_BackingField;
        }
      }

      [Name("ALIASED_POINT_SIZE_RANGE")]
      public static uint ALIASED_POINT_SIZE_RANGE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ALIASED_POINT_SIZE_RANGE_Static_BackingField;
        }
      }

      [Name("ALPHA")]
      public static uint ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ALPHA_Static_BackingField;
        }
      }

      [Name("ALPHA_BITS")]
      public static uint ALPHA_BITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ALPHA_BITS_Static_BackingField;
        }
      }

      [Name("ALWAYS")]
      public static uint ALWAYS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ALWAYS_Static_BackingField;
        }
      }

      [Name("ARRAY_BUFFER")]
      public static uint ARRAY_BUFFER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ARRAY_BUFFER_Static_BackingField;
        }
      }

      [Name("ARRAY_BUFFER_BINDING")]
      public static uint ARRAY_BUFFER_BINDING_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ARRAY_BUFFER_BINDING_Static_BackingField;
        }
      }

      [Name("ATTACHED_SHADERS")]
      public static uint ATTACHED_SHADERS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ATTACHED_SHADERS_Static_BackingField;
        }
      }

      [Name("BACK")]
      public static uint BACK_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BACK_Static_BackingField;
        }
      }

      [Name("BLEND")]
      public static uint BLEND_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLEND_Static_BackingField;
        }
      }

      [Name("BLEND_COLOR")]
      public static uint BLEND_COLOR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLEND_COLOR_Static_BackingField;
        }
      }

      [Name("BLEND_DST_ALPHA")]
      public static uint BLEND_DST_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLEND_DST_ALPHA_Static_BackingField;
        }
      }

      [Name("BLEND_DST_RGB")]
      public static uint BLEND_DST_RGB_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLEND_DST_RGB_Static_BackingField;
        }
      }

      [Name("BLEND_EQUATION")]
      public static uint BLEND_EQUATION_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLEND_EQUATION_Static_BackingField;
        }
      }

      [Name("BLEND_EQUATION_ALPHA")]
      public static uint BLEND_EQUATION_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLEND_EQUATION_ALPHA_Static_BackingField;
        }
      }

      [Name("BLEND_EQUATION_RGB")]
      public static uint BLEND_EQUATION_RGB_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLEND_EQUATION_RGB_Static_BackingField;
        }
      }

      [Name("BLEND_SRC_ALPHA")]
      public static uint BLEND_SRC_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLEND_SRC_ALPHA_Static_BackingField;
        }
      }

      [Name("BLEND_SRC_RGB")]
      public static uint BLEND_SRC_RGB_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLEND_SRC_RGB_Static_BackingField;
        }
      }

      [Name("BLUE_BITS")]
      public static uint BLUE_BITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BLUE_BITS_Static_BackingField;
        }
      }

      [Name("BOOL")]
      public static uint BOOL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BOOL_Static_BackingField;
        }
      }

      [Name("BOOL_VEC2")]
      public static uint BOOL_VEC2_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BOOL_VEC2_Static_BackingField;
        }
      }

      [Name("BOOL_VEC3")]
      public static uint BOOL_VEC3_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BOOL_VEC3_Static_BackingField;
        }
      }

      [Name("BOOL_VEC4")]
      public static uint BOOL_VEC4_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BOOL_VEC4_Static_BackingField;
        }
      }

      [Name("BROWSER_DEFAULT_WEBGL")]
      public static uint BROWSER_DEFAULT_WEBGL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BROWSER_DEFAULT_WEBGL_Static_BackingField;
        }
      }

      [Name("BUFFER_SIZE")]
      public static uint BUFFER_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BUFFER_SIZE_Static_BackingField;
        }
      }

      [Name("BUFFER_USAGE")]
      public static uint BUFFER_USAGE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BUFFER_USAGE_Static_BackingField;
        }
      }

      [Name("BYTE")]
      public static uint BYTE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._BYTE_Static_BackingField;
        }
      }

      [Name("CCW")]
      public static uint CCW_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CCW_Static_BackingField;
        }
      }

      [Name("CLAMP_TO_EDGE")]
      public static uint CLAMP_TO_EDGE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CLAMP_TO_EDGE_Static_BackingField;
        }
      }

      [Name("COLOR_ATTACHMENT0")]
      public static uint COLOR_ATTACHMENT0_Static
      {
        get
        {
          return dom.WebGLRenderingContext._COLOR_ATTACHMENT0_Static_BackingField;
        }
      }

      [Name("COLOR_BUFFER_BIT")]
      public static uint COLOR_BUFFER_BIT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._COLOR_BUFFER_BIT_Static_BackingField;
        }
      }

      [Name("COLOR_CLEAR_VALUE")]
      public static uint COLOR_CLEAR_VALUE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._COLOR_CLEAR_VALUE_Static_BackingField;
        }
      }

      [Name("COLOR_WRITEMASK")]
      public static uint COLOR_WRITEMASK_Static
      {
        get
        {
          return dom.WebGLRenderingContext._COLOR_WRITEMASK_Static_BackingField;
        }
      }

      [Name("COMPILE_STATUS")]
      public static uint COMPILE_STATUS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._COMPILE_STATUS_Static_BackingField;
        }
      }

      [Name("COMPRESSED_TEXTURE_FORMATS")]
      public static uint COMPRESSED_TEXTURE_FORMATS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._COMPRESSED_TEXTURE_FORMATS_Static_BackingField;
        }
      }

      [Name("CONSTANT_ALPHA")]
      public static uint CONSTANT_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CONSTANT_ALPHA_Static_BackingField;
        }
      }

      [Name("CONSTANT_COLOR")]
      public static uint CONSTANT_COLOR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CONSTANT_COLOR_Static_BackingField;
        }
      }

      [Name("CONTEXT_LOST_WEBGL")]
      public static uint CONTEXT_LOST_WEBGL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CONTEXT_LOST_WEBGL_Static_BackingField;
        }
      }

      [Name("CULL_FACE")]
      public static uint CULL_FACE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CULL_FACE_Static_BackingField;
        }
      }

      [Name("CULL_FACE_MODE")]
      public static uint CULL_FACE_MODE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CULL_FACE_MODE_Static_BackingField;
        }
      }

      [Name("CURRENT_PROGRAM")]
      public static uint CURRENT_PROGRAM_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CURRENT_PROGRAM_Static_BackingField;
        }
      }

      [Name("CURRENT_VERTEX_ATTRIB")]
      public static uint CURRENT_VERTEX_ATTRIB_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CURRENT_VERTEX_ATTRIB_Static_BackingField;
        }
      }

      [Name("CW")]
      public static uint CW_Static
      {
        get
        {
          return dom.WebGLRenderingContext._CW_Static_BackingField;
        }
      }

      [Name("DECR")]
      public static uint DECR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DECR_Static_BackingField;
        }
      }

      [Name("DECR_WRAP")]
      public static uint DECR_WRAP_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DECR_WRAP_Static_BackingField;
        }
      }

      [Name("DELETE_STATUS")]
      public static uint DELETE_STATUS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DELETE_STATUS_Static_BackingField;
        }
      }

      [Name("DEPTH_ATTACHMENT")]
      public static uint DEPTH_ATTACHMENT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_ATTACHMENT_Static_BackingField;
        }
      }

      [Name("DEPTH_BITS")]
      public static uint DEPTH_BITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_BITS_Static_BackingField;
        }
      }

      [Name("DEPTH_BUFFER_BIT")]
      public static uint DEPTH_BUFFER_BIT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_BUFFER_BIT_Static_BackingField;
        }
      }

      [Name("DEPTH_CLEAR_VALUE")]
      public static uint DEPTH_CLEAR_VALUE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_CLEAR_VALUE_Static_BackingField;
        }
      }

      [Name("DEPTH_COMPONENT")]
      public static uint DEPTH_COMPONENT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_COMPONENT_Static_BackingField;
        }
      }

      [Name("DEPTH_COMPONENT16")]
      public static uint DEPTH_COMPONENT16_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_COMPONENT16_Static_BackingField;
        }
      }

      [Name("DEPTH_FUNC")]
      public static uint DEPTH_FUNC_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_FUNC_Static_BackingField;
        }
      }

      [Name("DEPTH_RANGE")]
      public static uint DEPTH_RANGE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_RANGE_Static_BackingField;
        }
      }

      [Name("DEPTH_STENCIL")]
      public static uint DEPTH_STENCIL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_STENCIL_Static_BackingField;
        }
      }

      [Name("DEPTH_STENCIL_ATTACHMENT")]
      public static uint DEPTH_STENCIL_ATTACHMENT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_STENCIL_ATTACHMENT_Static_BackingField;
        }
      }

      [Name("DEPTH_TEST")]
      public static uint DEPTH_TEST_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_TEST_Static_BackingField;
        }
      }

      [Name("DEPTH_WRITEMASK")]
      public static uint DEPTH_WRITEMASK_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DEPTH_WRITEMASK_Static_BackingField;
        }
      }

      [Name("DITHER")]
      public static uint DITHER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DITHER_Static_BackingField;
        }
      }

      [Name("DONT_CARE")]
      public static uint DONT_CARE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DONT_CARE_Static_BackingField;
        }
      }

      [Name("DST_ALPHA")]
      public static uint DST_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DST_ALPHA_Static_BackingField;
        }
      }

      [Name("DST_COLOR")]
      public static uint DST_COLOR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DST_COLOR_Static_BackingField;
        }
      }

      [Name("DYNAMIC_DRAW")]
      public static uint DYNAMIC_DRAW_Static
      {
        get
        {
          return dom.WebGLRenderingContext._DYNAMIC_DRAW_Static_BackingField;
        }
      }

      [Name("ELEMENT_ARRAY_BUFFER")]
      public static uint ELEMENT_ARRAY_BUFFER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ELEMENT_ARRAY_BUFFER_Static_BackingField;
        }
      }

      [Name("ELEMENT_ARRAY_BUFFER_BINDING")]
      public static uint ELEMENT_ARRAY_BUFFER_BINDING_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ELEMENT_ARRAY_BUFFER_BINDING_Static_BackingField;
        }
      }

      [Name("EQUAL")]
      public static uint EQUAL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._EQUAL_Static_BackingField;
        }
      }

      [Name("FASTEST")]
      public static uint FASTEST_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FASTEST_Static_BackingField;
        }
      }

      [Name("FLOAT")]
      public static uint FLOAT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FLOAT_Static_BackingField;
        }
      }

      [Name("FLOAT_MAT2")]
      public static uint FLOAT_MAT2_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FLOAT_MAT2_Static_BackingField;
        }
      }

      [Name("FLOAT_MAT3")]
      public static uint FLOAT_MAT3_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FLOAT_MAT3_Static_BackingField;
        }
      }

      [Name("FLOAT_MAT4")]
      public static uint FLOAT_MAT4_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FLOAT_MAT4_Static_BackingField;
        }
      }

      [Name("FLOAT_VEC2")]
      public static uint FLOAT_VEC2_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FLOAT_VEC2_Static_BackingField;
        }
      }

      [Name("FLOAT_VEC3")]
      public static uint FLOAT_VEC3_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FLOAT_VEC3_Static_BackingField;
        }
      }

      [Name("FLOAT_VEC4")]
      public static uint FLOAT_VEC4_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FLOAT_VEC4_Static_BackingField;
        }
      }

      [Name("FRAGMENT_SHADER")]
      public static uint FRAGMENT_SHADER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAGMENT_SHADER_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER")]
      public static uint FRAMEBUFFER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")]
      public static uint FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")]
      public static uint FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")]
      public static uint FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")]
      public static uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_BINDING")]
      public static uint FRAMEBUFFER_BINDING_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_BINDING_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_COMPLETE")]
      public static uint FRAMEBUFFER_COMPLETE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_COMPLETE_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_INCOMPLETE_ATTACHMENT")]
      public static uint FRAMEBUFFER_INCOMPLETE_ATTACHMENT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_INCOMPLETE_ATTACHMENT_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_INCOMPLETE_DIMENSIONS")]
      public static uint FRAMEBUFFER_INCOMPLETE_DIMENSIONS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_INCOMPLETE_DIMENSIONS_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")]
      public static uint FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_Static_BackingField;
        }
      }

      [Name("FRAMEBUFFER_UNSUPPORTED")]
      public static uint FRAMEBUFFER_UNSUPPORTED_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRAMEBUFFER_UNSUPPORTED_Static_BackingField;
        }
      }

      [Name("FRONT")]
      public static uint FRONT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRONT_Static_BackingField;
        }
      }

      [Name("FRONT_AND_BACK")]
      public static uint FRONT_AND_BACK_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRONT_AND_BACK_Static_BackingField;
        }
      }

      [Name("FRONT_FACE")]
      public static uint FRONT_FACE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FRONT_FACE_Static_BackingField;
        }
      }

      [Name("FUNC_ADD")]
      public static uint FUNC_ADD_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FUNC_ADD_Static_BackingField;
        }
      }

      [Name("FUNC_REVERSE_SUBTRACT")]
      public static uint FUNC_REVERSE_SUBTRACT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FUNC_REVERSE_SUBTRACT_Static_BackingField;
        }
      }

      [Name("FUNC_SUBTRACT")]
      public static uint FUNC_SUBTRACT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._FUNC_SUBTRACT_Static_BackingField;
        }
      }

      [Name("GENERATE_MIPMAP_HINT")]
      public static uint GENERATE_MIPMAP_HINT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._GENERATE_MIPMAP_HINT_Static_BackingField;
        }
      }

      [Name("GEQUAL")]
      public static uint GEQUAL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._GEQUAL_Static_BackingField;
        }
      }

      [Name("GREATER")]
      public static uint GREATER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._GREATER_Static_BackingField;
        }
      }

      [Name("GREEN_BITS")]
      public static uint GREEN_BITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._GREEN_BITS_Static_BackingField;
        }
      }

      [Name("HIGH_FLOAT")]
      public static uint HIGH_FLOAT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._HIGH_FLOAT_Static_BackingField;
        }
      }

      [Name("HIGH_INT")]
      public static uint HIGH_INT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._HIGH_INT_Static_BackingField;
        }
      }

      [Name("IMPLEMENTATION_COLOR_READ_FORMAT")]
      public static uint IMPLEMENTATION_COLOR_READ_FORMAT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._IMPLEMENTATION_COLOR_READ_FORMAT_Static_BackingField;
        }
      }

      [Name("IMPLEMENTATION_COLOR_READ_TYPE")]
      public static uint IMPLEMENTATION_COLOR_READ_TYPE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._IMPLEMENTATION_COLOR_READ_TYPE_Static_BackingField;
        }
      }

      [Name("INCR")]
      public static uint INCR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INCR_Static_BackingField;
        }
      }

      [Name("INCR_WRAP")]
      public static uint INCR_WRAP_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INCR_WRAP_Static_BackingField;
        }
      }

      [Name("INT")]
      public static uint INT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INT_Static_BackingField;
        }
      }

      [Name("INT_VEC2")]
      public static uint INT_VEC2_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INT_VEC2_Static_BackingField;
        }
      }

      [Name("INT_VEC3")]
      public static uint INT_VEC3_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INT_VEC3_Static_BackingField;
        }
      }

      [Name("INT_VEC4")]
      public static uint INT_VEC4_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INT_VEC4_Static_BackingField;
        }
      }

      [Name("INVALID_ENUM")]
      public static uint INVALID_ENUM_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INVALID_ENUM_Static_BackingField;
        }
      }

      [Name("INVALID_FRAMEBUFFER_OPERATION")]
      public static uint INVALID_FRAMEBUFFER_OPERATION_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INVALID_FRAMEBUFFER_OPERATION_Static_BackingField;
        }
      }

      [Name("INVALID_OPERATION")]
      public static uint INVALID_OPERATION_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INVALID_OPERATION_Static_BackingField;
        }
      }

      [Name("INVALID_VALUE")]
      public static uint INVALID_VALUE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INVALID_VALUE_Static_BackingField;
        }
      }

      [Name("INVERT")]
      public static uint INVERT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._INVERT_Static_BackingField;
        }
      }

      [Name("KEEP")]
      public static uint KEEP_Static
      {
        get
        {
          return dom.WebGLRenderingContext._KEEP_Static_BackingField;
        }
      }

      [Name("LEQUAL")]
      public static uint LEQUAL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LEQUAL_Static_BackingField;
        }
      }

      [Name("LESS")]
      public static uint LESS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LESS_Static_BackingField;
        }
      }

      [Name("LINEAR")]
      public static uint LINEAR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LINEAR_Static_BackingField;
        }
      }

      [Name("LINEAR_MIPMAP_LINEAR")]
      public static uint LINEAR_MIPMAP_LINEAR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LINEAR_MIPMAP_LINEAR_Static_BackingField;
        }
      }

      [Name("LINEAR_MIPMAP_NEAREST")]
      public static uint LINEAR_MIPMAP_NEAREST_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LINEAR_MIPMAP_NEAREST_Static_BackingField;
        }
      }

      [Name("LINES")]
      public static uint LINES_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LINES_Static_BackingField;
        }
      }

      [Name("LINE_LOOP")]
      public static uint LINE_LOOP_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LINE_LOOP_Static_BackingField;
        }
      }

      [Name("LINE_STRIP")]
      public static uint LINE_STRIP_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LINE_STRIP_Static_BackingField;
        }
      }

      [Name("LINE_WIDTH")]
      public static uint LINE_WIDTH_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LINE_WIDTH_Static_BackingField;
        }
      }

      [Name("LINK_STATUS")]
      public static uint LINK_STATUS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LINK_STATUS_Static_BackingField;
        }
      }

      [Name("LOW_FLOAT")]
      public static uint LOW_FLOAT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LOW_FLOAT_Static_BackingField;
        }
      }

      [Name("LOW_INT")]
      public static uint LOW_INT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LOW_INT_Static_BackingField;
        }
      }

      [Name("LUMINANCE")]
      public static uint LUMINANCE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LUMINANCE_Static_BackingField;
        }
      }

      [Name("LUMINANCE_ALPHA")]
      public static uint LUMINANCE_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._LUMINANCE_ALPHA_Static_BackingField;
        }
      }

      [Name("MAX_COMBINED_TEXTURE_IMAGE_UNITS")]
      public static uint MAX_COMBINED_TEXTURE_IMAGE_UNITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_COMBINED_TEXTURE_IMAGE_UNITS_Static_BackingField;
        }
      }

      [Name("MAX_CUBE_MAP_TEXTURE_SIZE")]
      public static uint MAX_CUBE_MAP_TEXTURE_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_CUBE_MAP_TEXTURE_SIZE_Static_BackingField;
        }
      }

      [Name("MAX_FRAGMENT_UNIFORM_VECTORS")]
      public static uint MAX_FRAGMENT_UNIFORM_VECTORS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_FRAGMENT_UNIFORM_VECTORS_Static_BackingField;
        }
      }

      [Name("MAX_RENDERBUFFER_SIZE")]
      public static uint MAX_RENDERBUFFER_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_RENDERBUFFER_SIZE_Static_BackingField;
        }
      }

      [Name("MAX_TEXTURE_IMAGE_UNITS")]
      public static uint MAX_TEXTURE_IMAGE_UNITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_TEXTURE_IMAGE_UNITS_Static_BackingField;
        }
      }

      [Name("MAX_TEXTURE_SIZE")]
      public static uint MAX_TEXTURE_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_TEXTURE_SIZE_Static_BackingField;
        }
      }

      [Name("MAX_VARYING_VECTORS")]
      public static uint MAX_VARYING_VECTORS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_VARYING_VECTORS_Static_BackingField;
        }
      }

      [Name("MAX_VERTEX_ATTRIBS")]
      public static uint MAX_VERTEX_ATTRIBS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_VERTEX_ATTRIBS_Static_BackingField;
        }
      }

      [Name("MAX_VERTEX_TEXTURE_IMAGE_UNITS")]
      public static uint MAX_VERTEX_TEXTURE_IMAGE_UNITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_VERTEX_TEXTURE_IMAGE_UNITS_Static_BackingField;
        }
      }

      [Name("MAX_VERTEX_UNIFORM_VECTORS")]
      public static uint MAX_VERTEX_UNIFORM_VECTORS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_VERTEX_UNIFORM_VECTORS_Static_BackingField;
        }
      }

      [Name("MAX_VIEWPORT_DIMS")]
      public static uint MAX_VIEWPORT_DIMS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MAX_VIEWPORT_DIMS_Static_BackingField;
        }
      }

      [Name("MEDIUM_FLOAT")]
      public static uint MEDIUM_FLOAT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MEDIUM_FLOAT_Static_BackingField;
        }
      }

      [Name("MEDIUM_INT")]
      public static uint MEDIUM_INT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MEDIUM_INT_Static_BackingField;
        }
      }

      [Name("MIRRORED_REPEAT")]
      public static uint MIRRORED_REPEAT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._MIRRORED_REPEAT_Static_BackingField;
        }
      }

      [Name("NEAREST")]
      public static uint NEAREST_Static
      {
        get
        {
          return dom.WebGLRenderingContext._NEAREST_Static_BackingField;
        }
      }

      [Name("NEAREST_MIPMAP_LINEAR")]
      public static uint NEAREST_MIPMAP_LINEAR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._NEAREST_MIPMAP_LINEAR_Static_BackingField;
        }
      }

      [Name("NEAREST_MIPMAP_NEAREST")]
      public static uint NEAREST_MIPMAP_NEAREST_Static
      {
        get
        {
          return dom.WebGLRenderingContext._NEAREST_MIPMAP_NEAREST_Static_BackingField;
        }
      }

      [Name("NEVER")]
      public static uint NEVER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._NEVER_Static_BackingField;
        }
      }

      [Name("NICEST")]
      public static uint NICEST_Static
      {
        get
        {
          return dom.WebGLRenderingContext._NICEST_Static_BackingField;
        }
      }

      [Name("NONE")]
      public static uint NONE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._NONE_Static_BackingField;
        }
      }

      [Name("NOTEQUAL")]
      public static uint NOTEQUAL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._NOTEQUAL_Static_BackingField;
        }
      }

      [Name("NO_ERROR")]
      public static uint NO_ERROR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._NO_ERROR_Static_BackingField;
        }
      }

      [Name("ONE")]
      public static uint ONE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ONE_Static_BackingField;
        }
      }

      [Name("ONE_MINUS_CONSTANT_ALPHA")]
      public static uint ONE_MINUS_CONSTANT_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ONE_MINUS_CONSTANT_ALPHA_Static_BackingField;
        }
      }

      [Name("ONE_MINUS_CONSTANT_COLOR")]
      public static uint ONE_MINUS_CONSTANT_COLOR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ONE_MINUS_CONSTANT_COLOR_Static_BackingField;
        }
      }

      [Name("ONE_MINUS_DST_ALPHA")]
      public static uint ONE_MINUS_DST_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ONE_MINUS_DST_ALPHA_Static_BackingField;
        }
      }

      [Name("ONE_MINUS_DST_COLOR")]
      public static uint ONE_MINUS_DST_COLOR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ONE_MINUS_DST_COLOR_Static_BackingField;
        }
      }

      [Name("ONE_MINUS_SRC_ALPHA")]
      public static uint ONE_MINUS_SRC_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ONE_MINUS_SRC_ALPHA_Static_BackingField;
        }
      }

      [Name("ONE_MINUS_SRC_COLOR")]
      public static uint ONE_MINUS_SRC_COLOR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ONE_MINUS_SRC_COLOR_Static_BackingField;
        }
      }

      [Name("OUT_OF_MEMORY")]
      public static uint OUT_OF_MEMORY_Static
      {
        get
        {
          return dom.WebGLRenderingContext._OUT_OF_MEMORY_Static_BackingField;
        }
      }

      [Name("PACK_ALIGNMENT")]
      public static uint PACK_ALIGNMENT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._PACK_ALIGNMENT_Static_BackingField;
        }
      }

      [Name("POINTS")]
      public static uint POINTS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._POINTS_Static_BackingField;
        }
      }

      [Name("POLYGON_OFFSET_FACTOR")]
      public static uint POLYGON_OFFSET_FACTOR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._POLYGON_OFFSET_FACTOR_Static_BackingField;
        }
      }

      [Name("POLYGON_OFFSET_FILL")]
      public static uint POLYGON_OFFSET_FILL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._POLYGON_OFFSET_FILL_Static_BackingField;
        }
      }

      [Name("POLYGON_OFFSET_UNITS")]
      public static uint POLYGON_OFFSET_UNITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._POLYGON_OFFSET_UNITS_Static_BackingField;
        }
      }

      [Name("RED_BITS")]
      public static uint RED_BITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RED_BITS_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER")]
      public static uint RENDERBUFFER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_ALPHA_SIZE")]
      public static uint RENDERBUFFER_ALPHA_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_ALPHA_SIZE_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_BINDING")]
      public static uint RENDERBUFFER_BINDING_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_BINDING_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_BLUE_SIZE")]
      public static uint RENDERBUFFER_BLUE_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_BLUE_SIZE_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_DEPTH_SIZE")]
      public static uint RENDERBUFFER_DEPTH_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_DEPTH_SIZE_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_GREEN_SIZE")]
      public static uint RENDERBUFFER_GREEN_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_GREEN_SIZE_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_HEIGHT")]
      public static uint RENDERBUFFER_HEIGHT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_HEIGHT_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_INTERNAL_FORMAT")]
      public static uint RENDERBUFFER_INTERNAL_FORMAT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_INTERNAL_FORMAT_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_RED_SIZE")]
      public static uint RENDERBUFFER_RED_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_RED_SIZE_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_STENCIL_SIZE")]
      public static uint RENDERBUFFER_STENCIL_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_STENCIL_SIZE_Static_BackingField;
        }
      }

      [Name("RENDERBUFFER_WIDTH")]
      public static uint RENDERBUFFER_WIDTH_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERBUFFER_WIDTH_Static_BackingField;
        }
      }

      [Name("RENDERER")]
      public static uint RENDERER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RENDERER_Static_BackingField;
        }
      }

      [Name("REPEAT")]
      public static uint REPEAT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._REPEAT_Static_BackingField;
        }
      }

      [Name("REPLACE")]
      public static uint REPLACE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._REPLACE_Static_BackingField;
        }
      }

      [Name("RGB")]
      public static uint RGB_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RGB_Static_BackingField;
        }
      }

      [Name("RGB565")]
      public static uint RGB565_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RGB565_Static_BackingField;
        }
      }

      [Name("RGB5_A1")]
      public static uint RGB5_A1_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RGB5_A1_Static_BackingField;
        }
      }

      [Name("RGBA")]
      public static uint RGBA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RGBA_Static_BackingField;
        }
      }

      [Name("RGBA4")]
      public static uint RGBA4_Static
      {
        get
        {
          return dom.WebGLRenderingContext._RGBA4_Static_BackingField;
        }
      }

      [Name("SAMPLER_2D")]
      public static uint SAMPLER_2D_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SAMPLER_2D_Static_BackingField;
        }
      }

      [Name("SAMPLER_CUBE")]
      public static uint SAMPLER_CUBE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SAMPLER_CUBE_Static_BackingField;
        }
      }

      [Name("SAMPLES")]
      public static uint SAMPLES_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SAMPLES_Static_BackingField;
        }
      }

      [Name("SAMPLE_ALPHA_TO_COVERAGE")]
      public static uint SAMPLE_ALPHA_TO_COVERAGE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SAMPLE_ALPHA_TO_COVERAGE_Static_BackingField;
        }
      }

      [Name("SAMPLE_BUFFERS")]
      public static uint SAMPLE_BUFFERS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SAMPLE_BUFFERS_Static_BackingField;
        }
      }

      [Name("SAMPLE_COVERAGE")]
      public static uint SAMPLE_COVERAGE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SAMPLE_COVERAGE_Static_BackingField;
        }
      }

      [Name("SAMPLE_COVERAGE_INVERT")]
      public static uint SAMPLE_COVERAGE_INVERT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SAMPLE_COVERAGE_INVERT_Static_BackingField;
        }
      }

      [Name("SAMPLE_COVERAGE_VALUE")]
      public static uint SAMPLE_COVERAGE_VALUE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SAMPLE_COVERAGE_VALUE_Static_BackingField;
        }
      }

      [Name("SCISSOR_BOX")]
      public static uint SCISSOR_BOX_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SCISSOR_BOX_Static_BackingField;
        }
      }

      [Name("SCISSOR_TEST")]
      public static uint SCISSOR_TEST_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SCISSOR_TEST_Static_BackingField;
        }
      }

      [Name("SHADER_TYPE")]
      public static uint SHADER_TYPE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SHADER_TYPE_Static_BackingField;
        }
      }

      [Name("SHADING_LANGUAGE_VERSION")]
      public static uint SHADING_LANGUAGE_VERSION_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SHADING_LANGUAGE_VERSION_Static_BackingField;
        }
      }

      [Name("SHORT")]
      public static uint SHORT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SHORT_Static_BackingField;
        }
      }

      [Name("SRC_ALPHA")]
      public static uint SRC_ALPHA_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SRC_ALPHA_Static_BackingField;
        }
      }

      [Name("SRC_ALPHA_SATURATE")]
      public static uint SRC_ALPHA_SATURATE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SRC_ALPHA_SATURATE_Static_BackingField;
        }
      }

      [Name("SRC_COLOR")]
      public static uint SRC_COLOR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SRC_COLOR_Static_BackingField;
        }
      }

      [Name("STATIC_DRAW")]
      public static uint STATIC_DRAW_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STATIC_DRAW_Static_BackingField;
        }
      }

      [Name("STENCIL_ATTACHMENT")]
      public static uint STENCIL_ATTACHMENT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_ATTACHMENT_Static_BackingField;
        }
      }

      [Name("STENCIL_BACK_FAIL")]
      public static uint STENCIL_BACK_FAIL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_BACK_FAIL_Static_BackingField;
        }
      }

      [Name("STENCIL_BACK_FUNC")]
      public static uint STENCIL_BACK_FUNC_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_BACK_FUNC_Static_BackingField;
        }
      }

      [Name("STENCIL_BACK_PASS_DEPTH_FAIL")]
      public static uint STENCIL_BACK_PASS_DEPTH_FAIL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_BACK_PASS_DEPTH_FAIL_Static_BackingField;
        }
      }

      [Name("STENCIL_BACK_PASS_DEPTH_PASS")]
      public static uint STENCIL_BACK_PASS_DEPTH_PASS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_BACK_PASS_DEPTH_PASS_Static_BackingField;
        }
      }

      [Name("STENCIL_BACK_REF")]
      public static uint STENCIL_BACK_REF_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_BACK_REF_Static_BackingField;
        }
      }

      [Name("STENCIL_BACK_VALUE_MASK")]
      public static uint STENCIL_BACK_VALUE_MASK_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_BACK_VALUE_MASK_Static_BackingField;
        }
      }

      [Name("STENCIL_BACK_WRITEMASK")]
      public static uint STENCIL_BACK_WRITEMASK_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_BACK_WRITEMASK_Static_BackingField;
        }
      }

      [Name("STENCIL_BITS")]
      public static uint STENCIL_BITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_BITS_Static_BackingField;
        }
      }

      [Name("STENCIL_BUFFER_BIT")]
      public static uint STENCIL_BUFFER_BIT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_BUFFER_BIT_Static_BackingField;
        }
      }

      [Name("STENCIL_CLEAR_VALUE")]
      public static uint STENCIL_CLEAR_VALUE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_CLEAR_VALUE_Static_BackingField;
        }
      }

      [Name("STENCIL_FAIL")]
      public static uint STENCIL_FAIL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_FAIL_Static_BackingField;
        }
      }

      [Name("STENCIL_FUNC")]
      public static uint STENCIL_FUNC_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_FUNC_Static_BackingField;
        }
      }

      [Name("STENCIL_INDEX")]
      public static uint STENCIL_INDEX_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_INDEX_Static_BackingField;
        }
      }

      [Name("STENCIL_INDEX8")]
      public static uint STENCIL_INDEX8_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_INDEX8_Static_BackingField;
        }
      }

      [Name("STENCIL_PASS_DEPTH_FAIL")]
      public static uint STENCIL_PASS_DEPTH_FAIL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_PASS_DEPTH_FAIL_Static_BackingField;
        }
      }

      [Name("STENCIL_PASS_DEPTH_PASS")]
      public static uint STENCIL_PASS_DEPTH_PASS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_PASS_DEPTH_PASS_Static_BackingField;
        }
      }

      [Name("STENCIL_REF")]
      public static uint STENCIL_REF_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_REF_Static_BackingField;
        }
      }

      [Name("STENCIL_TEST")]
      public static uint STENCIL_TEST_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_TEST_Static_BackingField;
        }
      }

      [Name("STENCIL_VALUE_MASK")]
      public static uint STENCIL_VALUE_MASK_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_VALUE_MASK_Static_BackingField;
        }
      }

      [Name("STENCIL_WRITEMASK")]
      public static uint STENCIL_WRITEMASK_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STENCIL_WRITEMASK_Static_BackingField;
        }
      }

      [Name("STREAM_DRAW")]
      public static uint STREAM_DRAW_Static
      {
        get
        {
          return dom.WebGLRenderingContext._STREAM_DRAW_Static_BackingField;
        }
      }

      [Name("SUBPIXEL_BITS")]
      public static uint SUBPIXEL_BITS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._SUBPIXEL_BITS_Static_BackingField;
        }
      }

      [Name("TEXTURE")]
      public static uint TEXTURE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_Static_BackingField;
        }
      }

      [Name("TEXTURE0")]
      public static uint TEXTURE0_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE0_Static_BackingField;
        }
      }

      [Name("TEXTURE1")]
      public static uint TEXTURE1_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE1_Static_BackingField;
        }
      }

      [Name("TEXTURE10")]
      public static uint TEXTURE10_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE10_Static_BackingField;
        }
      }

      [Name("TEXTURE11")]
      public static uint TEXTURE11_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE11_Static_BackingField;
        }
      }

      [Name("TEXTURE12")]
      public static uint TEXTURE12_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE12_Static_BackingField;
        }
      }

      [Name("TEXTURE13")]
      public static uint TEXTURE13_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE13_Static_BackingField;
        }
      }

      [Name("TEXTURE14")]
      public static uint TEXTURE14_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE14_Static_BackingField;
        }
      }

      [Name("TEXTURE15")]
      public static uint TEXTURE15_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE15_Static_BackingField;
        }
      }

      [Name("TEXTURE16")]
      public static uint TEXTURE16_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE16_Static_BackingField;
        }
      }

      [Name("TEXTURE17")]
      public static uint TEXTURE17_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE17_Static_BackingField;
        }
      }

      [Name("TEXTURE18")]
      public static uint TEXTURE18_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE18_Static_BackingField;
        }
      }

      [Name("TEXTURE19")]
      public static uint TEXTURE19_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE19_Static_BackingField;
        }
      }

      [Name("TEXTURE2")]
      public static uint TEXTURE2_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE2_Static_BackingField;
        }
      }

      [Name("TEXTURE20")]
      public static uint TEXTURE20_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE20_Static_BackingField;
        }
      }

      [Name("TEXTURE21")]
      public static uint TEXTURE21_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE21_Static_BackingField;
        }
      }

      [Name("TEXTURE22")]
      public static uint TEXTURE22_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE22_Static_BackingField;
        }
      }

      [Name("TEXTURE23")]
      public static uint TEXTURE23_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE23_Static_BackingField;
        }
      }

      [Name("TEXTURE24")]
      public static uint TEXTURE24_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE24_Static_BackingField;
        }
      }

      [Name("TEXTURE25")]
      public static uint TEXTURE25_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE25_Static_BackingField;
        }
      }

      [Name("TEXTURE26")]
      public static uint TEXTURE26_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE26_Static_BackingField;
        }
      }

      [Name("TEXTURE27")]
      public static uint TEXTURE27_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE27_Static_BackingField;
        }
      }

      [Name("TEXTURE28")]
      public static uint TEXTURE28_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE28_Static_BackingField;
        }
      }

      [Name("TEXTURE29")]
      public static uint TEXTURE29_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE29_Static_BackingField;
        }
      }

      [Name("TEXTURE3")]
      public static uint TEXTURE3_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE3_Static_BackingField;
        }
      }

      [Name("TEXTURE30")]
      public static uint TEXTURE30_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE30_Static_BackingField;
        }
      }

      [Name("TEXTURE31")]
      public static uint TEXTURE31_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE31_Static_BackingField;
        }
      }

      [Name("TEXTURE4")]
      public static uint TEXTURE4_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE4_Static_BackingField;
        }
      }

      [Name("TEXTURE5")]
      public static uint TEXTURE5_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE5_Static_BackingField;
        }
      }

      [Name("TEXTURE6")]
      public static uint TEXTURE6_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE6_Static_BackingField;
        }
      }

      [Name("TEXTURE7")]
      public static uint TEXTURE7_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE7_Static_BackingField;
        }
      }

      [Name("TEXTURE8")]
      public static uint TEXTURE8_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE8_Static_BackingField;
        }
      }

      [Name("TEXTURE9")]
      public static uint TEXTURE9_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE9_Static_BackingField;
        }
      }

      [Name("TEXTURE_2D")]
      public static uint TEXTURE_2D_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_2D_Static_BackingField;
        }
      }

      [Name("TEXTURE_BINDING_2D")]
      public static uint TEXTURE_BINDING_2D_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_BINDING_2D_Static_BackingField;
        }
      }

      [Name("TEXTURE_BINDING_CUBE_MAP")]
      public static uint TEXTURE_BINDING_CUBE_MAP_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_BINDING_CUBE_MAP_Static_BackingField;
        }
      }

      [Name("TEXTURE_CUBE_MAP")]
      public static uint TEXTURE_CUBE_MAP_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_CUBE_MAP_Static_BackingField;
        }
      }

      [Name("TEXTURE_CUBE_MAP_NEGATIVE_X")]
      public static uint TEXTURE_CUBE_MAP_NEGATIVE_X_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_CUBE_MAP_NEGATIVE_X_Static_BackingField;
        }
      }

      [Name("TEXTURE_CUBE_MAP_NEGATIVE_Y")]
      public static uint TEXTURE_CUBE_MAP_NEGATIVE_Y_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_CUBE_MAP_NEGATIVE_Y_Static_BackingField;
        }
      }

      [Name("TEXTURE_CUBE_MAP_NEGATIVE_Z")]
      public static uint TEXTURE_CUBE_MAP_NEGATIVE_Z_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_CUBE_MAP_NEGATIVE_Z_Static_BackingField;
        }
      }

      [Name("TEXTURE_CUBE_MAP_POSITIVE_X")]
      public static uint TEXTURE_CUBE_MAP_POSITIVE_X_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_CUBE_MAP_POSITIVE_X_Static_BackingField;
        }
      }

      [Name("TEXTURE_CUBE_MAP_POSITIVE_Y")]
      public static uint TEXTURE_CUBE_MAP_POSITIVE_Y_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_CUBE_MAP_POSITIVE_Y_Static_BackingField;
        }
      }

      [Name("TEXTURE_CUBE_MAP_POSITIVE_Z")]
      public static uint TEXTURE_CUBE_MAP_POSITIVE_Z_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_CUBE_MAP_POSITIVE_Z_Static_BackingField;
        }
      }

      [Name("TEXTURE_MAG_FILTER")]
      public static uint TEXTURE_MAG_FILTER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_MAG_FILTER_Static_BackingField;
        }
      }

      [Name("TEXTURE_MIN_FILTER")]
      public static uint TEXTURE_MIN_FILTER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_MIN_FILTER_Static_BackingField;
        }
      }

      [Name("TEXTURE_WRAP_S")]
      public static uint TEXTURE_WRAP_S_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_WRAP_S_Static_BackingField;
        }
      }

      [Name("TEXTURE_WRAP_T")]
      public static uint TEXTURE_WRAP_T_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TEXTURE_WRAP_T_Static_BackingField;
        }
      }

      [Name("TRIANGLES")]
      public static uint TRIANGLES_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TRIANGLES_Static_BackingField;
        }
      }

      [Name("TRIANGLE_FAN")]
      public static uint TRIANGLE_FAN_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TRIANGLE_FAN_Static_BackingField;
        }
      }

      [Name("TRIANGLE_STRIP")]
      public static uint TRIANGLE_STRIP_Static
      {
        get
        {
          return dom.WebGLRenderingContext._TRIANGLE_STRIP_Static_BackingField;
        }
      }

      [Name("UNPACK_ALIGNMENT")]
      public static uint UNPACK_ALIGNMENT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNPACK_ALIGNMENT_Static_BackingField;
        }
      }

      [Name("UNPACK_COLORSPACE_CONVERSION_WEBGL")]
      public static uint UNPACK_COLORSPACE_CONVERSION_WEBGL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNPACK_COLORSPACE_CONVERSION_WEBGL_Static_BackingField;
        }
      }

      [Name("UNPACK_FLIP_Y_WEBGL")]
      public static uint UNPACK_FLIP_Y_WEBGL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNPACK_FLIP_Y_WEBGL_Static_BackingField;
        }
      }

      [Name("UNPACK_PREMULTIPLY_ALPHA_WEBGL")]
      public static uint UNPACK_PREMULTIPLY_ALPHA_WEBGL_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNPACK_PREMULTIPLY_ALPHA_WEBGL_Static_BackingField;
        }
      }

      [Name("UNSIGNED_BYTE")]
      public static uint UNSIGNED_BYTE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNSIGNED_BYTE_Static_BackingField;
        }
      }

      [Name("UNSIGNED_INT")]
      public static uint UNSIGNED_INT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNSIGNED_INT_Static_BackingField;
        }
      }

      [Name("UNSIGNED_SHORT")]
      public static uint UNSIGNED_SHORT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNSIGNED_SHORT_Static_BackingField;
        }
      }

      [Name("UNSIGNED_SHORT_4_4_4_4")]
      public static uint UNSIGNED_SHORT_4_4_4_4_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNSIGNED_SHORT_4_4_4_4_Static_BackingField;
        }
      }

      [Name("UNSIGNED_SHORT_5_5_5_1")]
      public static uint UNSIGNED_SHORT_5_5_5_1_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNSIGNED_SHORT_5_5_5_1_Static_BackingField;
        }
      }

      [Name("UNSIGNED_SHORT_5_6_5")]
      public static uint UNSIGNED_SHORT_5_6_5_Static
      {
        get
        {
          return dom.WebGLRenderingContext._UNSIGNED_SHORT_5_6_5_Static_BackingField;
        }
      }

      [Name("VALIDATE_STATUS")]
      public static uint VALIDATE_STATUS_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VALIDATE_STATUS_Static_BackingField;
        }
      }

      [Name("VENDOR")]
      public static uint VENDOR_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VENDOR_Static_BackingField;
        }
      }

      [Name("VERSION")]
      public static uint VERSION_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VERSION_Static_BackingField;
        }
      }

      [Name("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")]
      public static uint VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_Static_BackingField;
        }
      }

      [Name("VERTEX_ATTRIB_ARRAY_ENABLED")]
      public static uint VERTEX_ATTRIB_ARRAY_ENABLED_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VERTEX_ATTRIB_ARRAY_ENABLED_Static_BackingField;
        }
      }

      [Name("VERTEX_ATTRIB_ARRAY_NORMALIZED")]
      public static uint VERTEX_ATTRIB_ARRAY_NORMALIZED_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VERTEX_ATTRIB_ARRAY_NORMALIZED_Static_BackingField;
        }
      }

      [Name("VERTEX_ATTRIB_ARRAY_POINTER")]
      public static uint VERTEX_ATTRIB_ARRAY_POINTER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VERTEX_ATTRIB_ARRAY_POINTER_Static_BackingField;
        }
      }

      [Name("VERTEX_ATTRIB_ARRAY_SIZE")]
      public static uint VERTEX_ATTRIB_ARRAY_SIZE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VERTEX_ATTRIB_ARRAY_SIZE_Static_BackingField;
        }
      }

      [Name("VERTEX_ATTRIB_ARRAY_STRIDE")]
      public static uint VERTEX_ATTRIB_ARRAY_STRIDE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VERTEX_ATTRIB_ARRAY_STRIDE_Static_BackingField;
        }
      }

      [Name("VERTEX_ATTRIB_ARRAY_TYPE")]
      public static uint VERTEX_ATTRIB_ARRAY_TYPE_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VERTEX_ATTRIB_ARRAY_TYPE_Static_BackingField;
        }
      }

      [Name("VERTEX_SHADER")]
      public static uint VERTEX_SHADER_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VERTEX_SHADER_Static_BackingField;
        }
      }

      [Name("VIEWPORT")]
      public static uint VIEWPORT_Static
      {
        get
        {
          return dom.WebGLRenderingContext._VIEWPORT_Static_BackingField;
        }
      }

      [Name("ZERO")]
      public static uint ZERO_Static
      {
        get
        {
          return dom.WebGLRenderingContext._ZERO_Static_BackingField;
        }
      }

      public virtual dom.HTMLCanvasElement canvas
      {
        get
        {
          return this._canvas_BackingField;
        }
      }

      public virtual double drawingBufferHeight
      {
        get
        {
          return this._drawingBufferHeight_BackingField;
        }
      }

      public virtual double drawingBufferWidth
      {
        get
        {
          return this._drawingBufferWidth_BackingField;
        }
      }

      public virtual extern void activeTexture(double texture);

      public virtual extern void attachShader(dom.WebGLProgram program, dom.WebGLShader shader);

      public virtual extern void bindAttribLocation(
        dom.WebGLProgram program,
        double index,
        string name);

      public virtual extern void bindBuffer(double target, dom.WebGLBuffer buffer);

      public virtual extern void bindFramebuffer(double target, dom.WebGLFramebuffer framebuffer);

      public virtual extern void bindRenderbuffer(double target, dom.WebGLRenderbuffer renderbuffer);

      public virtual extern void bindTexture(double target, dom.WebGLTexture texture);

      public virtual extern void blendColor(double red, double green, double blue, double alpha);

      public virtual extern void blendEquation(double mode);

      public virtual extern void blendEquationSeparate(double modeRGB, double modeAlpha);

      public virtual extern void blendFunc(double sfactor, double dfactor);

      public virtual extern void blendFuncSeparate(
        double srcRGB,
        double dstRGB,
        double srcAlpha,
        double dstAlpha);

      public virtual extern void bufferData(
        double target,
        Union<double, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> size,
        double usage);

      public virtual extern void bufferData(double target, double size, double usage);

      public virtual extern void bufferData(double target, es5.Int8Array size, double usage);

      public virtual extern void bufferData(double target, es5.Int16Array size, double usage);

      public virtual extern void bufferData(double target, es5.Int32Array size, double usage);

      public virtual extern void bufferData(double target, es5.Uint8Array size, double usage);

      public virtual extern void bufferData(double target, es5.Uint16Array size, double usage);

      public virtual extern void bufferData(double target, es5.Uint32Array size, double usage);

      public virtual extern void bufferData(
        double target,
        es5.Uint8ClampedArray size,
        double usage);

      public virtual extern void bufferData(double target, es5.Float32Array size, double usage);

      public virtual extern void bufferData(double target, es5.Float64Array size, double usage);

      public virtual extern void bufferData(double target, es5.DataView size, double usage);

      public virtual extern void bufferData(double target, es5.ArrayBuffer size, double usage);

      public virtual extern void bufferData(double target, Null size, double usage);

      public virtual extern void bufferSubData(
        double target,
        double offset,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> data);

      public virtual extern void bufferSubData(double target, double offset, es5.Int8Array data);

      public virtual extern void bufferSubData(double target, double offset, es5.Int16Array data);

      public virtual extern void bufferSubData(double target, double offset, es5.Int32Array data);

      public virtual extern void bufferSubData(double target, double offset, es5.Uint8Array data);

      public virtual extern void bufferSubData(double target, double offset, es5.Uint16Array data);

      public virtual extern void bufferSubData(double target, double offset, es5.Uint32Array data);

      public virtual extern void bufferSubData(
        double target,
        double offset,
        es5.Uint8ClampedArray data);

      public virtual extern void bufferSubData(double target, double offset, es5.Float32Array data);

      public virtual extern void bufferSubData(double target, double offset, es5.Float64Array data);

      public virtual extern void bufferSubData(double target, double offset, es5.DataView data);

      public virtual extern void bufferSubData(double target, double offset, es5.ArrayBuffer data);

      public virtual extern void bufferSubData(double target, double offset, Null data);

      public virtual extern double checkFramebufferStatus(double target);

      public virtual extern void clear(double mask);

      public virtual extern void clearColor(double red, double green, double blue, double alpha);

      public virtual extern void clearDepth(double depth);

      public virtual extern void clearStencil(double s);

      public virtual extern void colorMask(bool red, bool green, bool blue, bool alpha);

      public virtual extern void compileShader(dom.WebGLShader shader);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.Int8Array data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.Int16Array data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.Int32Array data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.Uint8Array data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.Uint16Array data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.Uint32Array data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.Uint8ClampedArray data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.Float32Array data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.Float64Array data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        es5.DataView data);

      public virtual extern void compressedTexImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        Null data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.Int8Array data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.Int16Array data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.Int32Array data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.Uint8Array data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.Uint16Array data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.Uint32Array data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.Uint8ClampedArray data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.Float32Array data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.Float64Array data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        es5.DataView data);

      public virtual extern void compressedTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        Null data);

      public virtual extern void copyTexImage2D(
        double target,
        double level,
        double internalformat,
        double x,
        double y,
        double width,
        double height,
        double border);

      public virtual extern void copyTexSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double x,
        double y,
        double width,
        double height);

      public virtual extern dom.WebGLBuffer createBuffer();

      public virtual extern dom.WebGLFramebuffer createFramebuffer();

      public virtual extern dom.WebGLProgram createProgram();

      public virtual extern dom.WebGLRenderbuffer createRenderbuffer();

      public virtual extern dom.WebGLShader createShader(double type);

      public virtual extern dom.WebGLTexture createTexture();

      public virtual extern void cullFace(double mode);

      public virtual extern void deleteBuffer(dom.WebGLBuffer buffer);

      public virtual extern void deleteFramebuffer(dom.WebGLFramebuffer framebuffer);

      public virtual extern void deleteProgram(dom.WebGLProgram program);

      public virtual extern void deleteRenderbuffer(dom.WebGLRenderbuffer renderbuffer);

      public virtual extern void deleteShader(dom.WebGLShader shader);

      public virtual extern void deleteTexture(dom.WebGLTexture texture);

      public virtual extern void depthFunc(double func);

      public virtual extern void depthMask(bool flag);

      public virtual extern void depthRange(double zNear, double zFar);

      public virtual extern void detachShader(dom.WebGLProgram program, dom.WebGLShader shader);

      public virtual extern void disable(double cap);

      public virtual extern void disableVertexAttribArray(double index);

      public virtual extern void drawArrays(double mode, double first, double count);

      public virtual extern void drawElements(
        double mode,
        double count,
        double type,
        double offset);

      public virtual extern void enable(double cap);

      public virtual extern void enableVertexAttribArray(double index);

      public virtual extern void finish();

      public virtual extern void flush();

      public virtual extern void framebufferRenderbuffer(
        double target,
        double attachment,
        double renderbuffertarget,
        dom.WebGLRenderbuffer renderbuffer);

      public virtual extern void framebufferTexture2D(
        double target,
        double attachment,
        double textarget,
        dom.WebGLTexture texture,
        double level);

      public virtual extern void frontFace(double mode);

      public virtual extern void generateMipmap(double target);

      public virtual extern dom.WebGLActiveInfo getActiveAttrib(
        dom.WebGLProgram program,
        double index);

      public virtual extern dom.WebGLActiveInfo getActiveUniform(
        dom.WebGLProgram program,
        double index);

      public virtual extern dom.WebGLShader[] getAttachedShaders(dom.WebGLProgram program);

      public virtual extern double getAttribLocation(dom.WebGLProgram program, string name);

      public virtual extern object getBufferParameter(double target, double pname);

      public virtual extern dom.WebGLContextAttributes getContextAttributes();

      public virtual extern double getError();

      public virtual extern dom.EXT_blend_minmax getExtension(
        dom.Literals.Types.EXT_blend_minmax extensionName);

      public virtual extern dom.EXT_texture_filter_anisotropic getExtension(
        dom.Literals.Types.EXT_texture_filter_anisotropic extensionName);

      public virtual extern dom.EXT_frag_depth getExtension(
        dom.Literals.Types.EXT_frag_depth extensionName);

      public virtual extern dom.EXT_shader_texture_lod getExtension(
        dom.Literals.Types.EXT_shader_texture_lod extensionName);

      public virtual extern dom.EXT_sRGB getExtension(dom.Literals.Types.EXT_sRGB extensionName);

      public virtual extern dom.OES_vertex_array_object getExtension(
        dom.Literals.Types.OES_vertex_array_object extensionName);

      public virtual extern dom.WEBGL_color_buffer_float getExtension(
        dom.Literals.Types.WEBGL_color_buffer_float extensionName);

      public virtual extern dom.WEBGL_compressed_texture_astc getExtension(
        dom.Literals.Types.WEBGL_compressed_texture_astc extensionName);

      public virtual extern dom.WEBGL_compressed_texture_s3tc_srgb getExtension(
        dom.Literals.Types.WEBGL_compressed_texture_s3tc_srgb extensionName);

      public virtual extern dom.WEBGL_debug_shaders getExtension(
        dom.Literals.Types.WEBGL_debug_shaders extensionName);

      public virtual extern dom.WEBGL_draw_buffers getExtension(
        dom.Literals.Types.WEBGL_draw_buffers extensionName);

      public virtual extern dom.WEBGL_lose_context getExtension(
        dom.Literals.Types.WEBGL_lose_context extensionName);

      public virtual extern dom.WEBGL_depth_texture getExtension(
        dom.Literals.Types.WEBGL_depth_texture extensionName);

      public virtual extern dom.WEBGL_debug_renderer_info getExtension(
        dom.Literals.Types.WEBGL_debug_renderer_info extensionName);

      public virtual extern dom.WEBGL_compressed_texture_s3tc getExtension(
        dom.Literals.Types.WEBGL_compressed_texture_s3tc extensionName);

      public virtual extern dom.OES_texture_half_float_linear getExtension(
        dom.Literals.Types.OES_texture_half_float_linear extensionName);

      public virtual extern dom.OES_texture_half_float getExtension(
        dom.Literals.Types.OES_texture_half_float extensionName);

      public virtual extern dom.OES_texture_float_linear getExtension(
        dom.Literals.Types.OES_texture_float_linear extensionName);

      public virtual extern dom.OES_texture_float getExtension(
        dom.Literals.Types.OES_texture_float extensionName);

      public virtual extern dom.OES_standard_derivatives getExtension(
        dom.Literals.Types.OES_standard_derivatives extensionName);

      public virtual extern dom.OES_element_index_uint getExtension(
        dom.Literals.Types.OES_element_index_uint extensionName);

      public virtual extern dom.ANGLE_instanced_arrays getExtension(
        dom.Literals.Types.ANGLE_instanced_arrays extensionName);

      public virtual extern object getExtension(string extensionName);

      public virtual extern object getFramebufferAttachmentParameter(
        double target,
        double attachment,
        double pname);

      public virtual extern object getParameter(double pname);

      public virtual extern string getProgramInfoLog(dom.WebGLProgram program);

      public virtual extern object getProgramParameter(dom.WebGLProgram program, double pname);

      public virtual extern object getRenderbufferParameter(double target, double pname);

      public virtual extern string getShaderInfoLog(dom.WebGLShader shader);

      public virtual extern object getShaderParameter(dom.WebGLShader shader, double pname);

      public virtual extern dom.WebGLShaderPrecisionFormat getShaderPrecisionFormat(
        double shadertype,
        double precisiontype);

      public virtual extern string getShaderSource(dom.WebGLShader shader);

      public virtual extern string[] getSupportedExtensions();

      public virtual extern object getTexParameter(double target, double pname);

      public virtual extern object getUniform(
        dom.WebGLProgram program,
        dom.WebGLUniformLocation location);

      public virtual extern dom.WebGLUniformLocation getUniformLocation(
        dom.WebGLProgram program,
        string name);

      public virtual extern object getVertexAttrib(double index, double pname);

      public virtual extern double getVertexAttribOffset(double index, double pname);

      public virtual extern void hint(double target, double mode);

      public virtual extern bool isBuffer(dom.WebGLBuffer buffer);

      public virtual extern bool isContextLost();

      public virtual extern bool isEnabled(double cap);

      public virtual extern bool isFramebuffer(dom.WebGLFramebuffer framebuffer);

      public virtual extern bool isProgram(dom.WebGLProgram program);

      public virtual extern bool isRenderbuffer(dom.WebGLRenderbuffer renderbuffer);

      public virtual extern bool isShader(dom.WebGLShader shader);

      public virtual extern bool isTexture(dom.WebGLTexture texture);

      public virtual extern void lineWidth(double width);

      public virtual extern void linkProgram(dom.WebGLProgram program);

      public virtual extern void pixelStorei(double pname, Union<double, bool> param);

      public virtual extern void pixelStorei(double pname, double param);

      public virtual extern void pixelStorei(double pname, bool param);

      public virtual extern void polygonOffset(double factor, double units);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.Int8Array pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.Int16Array pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.Int32Array pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.Uint8Array pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.Uint16Array pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.Uint32Array pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.Uint8ClampedArray pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.Float32Array pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.Float64Array pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        es5.DataView pixels);

      public virtual extern void readPixels(
        double x,
        double y,
        double width,
        double height,
        double format,
        double type,
        Null pixels);

      public virtual extern void renderbufferStorage(
        double target,
        double internalformat,
        double width,
        double height);

      public virtual extern void sampleCoverage(double value, bool invert);

      public virtual extern void scissor(double x, double y, double width, double height);

      public virtual extern void shaderSource(dom.WebGLShader shader, string source);

      public virtual extern void stencilFunc(double func, double @ref, double mask);

      public virtual extern void stencilFuncSeparate(
        double face,
        double func,
        double @ref,
        double mask);

      public virtual extern void stencilMask(double mask);

      public virtual extern void stencilMaskSeparate(double face, double mask);

      public virtual extern void stencilOp(double fail, double zfail, double zpass);

      public virtual extern void stencilOpSeparate(
        double face,
        double fail,
        double zfail,
        double zpass);

      public virtual extern void texImage2D(
        double target,
        double level,
        double internalformat,
        double width,
        double height,
        double border,
        double format,
        double type,
        es5.ArrayBufferView pixels);

      public virtual extern void texImage2D(
        double target,
        double level,
        double internalformat,
        double format,
        double type,
        Union<dom.ImageBitmap, dom.ImageData, dom.HTMLVideoElement, dom.HTMLImageElement, dom.HTMLCanvasElement> pixels);

      public virtual extern void texImage2D(
        double target,
        double level,
        double internalformat,
        double format,
        double type,
        dom.ImageBitmap pixels);

      public virtual extern void texImage2D(
        double target,
        double level,
        double internalformat,
        double format,
        double type,
        dom.ImageData pixels);

      public virtual extern void texImage2D(
        double target,
        double level,
        double internalformat,
        double format,
        double type,
        dom.HTMLVideoElement pixels);

      public virtual extern void texImage2D(
        double target,
        double level,
        double internalformat,
        double format,
        double type,
        dom.HTMLImageElement pixels);

      public virtual extern void texImage2D(
        double target,
        double level,
        double internalformat,
        double format,
        double type,
        dom.HTMLCanvasElement pixels);

      public virtual extern void texParameterf(double target, double pname, double param);

      public virtual extern void texParameteri(double target, double pname, double param);

      public virtual extern void texSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double width,
        double height,
        double format,
        double type,
        es5.ArrayBufferView pixels);

      public virtual extern void texSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double format,
        double type,
        Union<dom.ImageBitmap, dom.ImageData, dom.HTMLVideoElement, dom.HTMLImageElement, dom.HTMLCanvasElement> pixels);

      public virtual extern void texSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double format,
        double type,
        dom.ImageBitmap pixels);

      public virtual extern void texSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double format,
        double type,
        dom.ImageData pixels);

      public virtual extern void texSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double format,
        double type,
        dom.HTMLVideoElement pixels);

      public virtual extern void texSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double format,
        double type,
        dom.HTMLImageElement pixels);

      public virtual extern void texSubImage2D(
        double target,
        double level,
        double xoffset,
        double yoffset,
        double format,
        double type,
        dom.HTMLCanvasElement pixels);

      public virtual extern void uniform1f(dom.WebGLUniformLocation location, double x);

      public virtual extern void uniform1fv(
        dom.WebGLUniformLocation location,
        Union<es5.Float32Array, es5.ArrayLike<double>> v);

      public virtual extern void uniform1fv(dom.WebGLUniformLocation location, es5.Float32Array v);

      public virtual extern void uniform1fv(
        dom.WebGLUniformLocation location,
        es5.ArrayLike<double> v);

      public virtual extern void uniform1i(dom.WebGLUniformLocation location, double x);

      public virtual extern void uniform1iv(
        dom.WebGLUniformLocation location,
        Union<es5.Int32Array, es5.ArrayLike<double>> v);

      public virtual extern void uniform1iv(dom.WebGLUniformLocation location, es5.Int32Array v);

      public virtual extern void uniform1iv(
        dom.WebGLUniformLocation location,
        es5.ArrayLike<double> v);

      public virtual extern void uniform2f(dom.WebGLUniformLocation location, double x, double y);

      public virtual extern void uniform2fv(
        dom.WebGLUniformLocation location,
        Union<es5.Float32Array, es5.ArrayLike<double>> v);

      public virtual extern void uniform2fv(dom.WebGLUniformLocation location, es5.Float32Array v);

      public virtual extern void uniform2fv(
        dom.WebGLUniformLocation location,
        es5.ArrayLike<double> v);

      public virtual extern void uniform2i(dom.WebGLUniformLocation location, double x, double y);

      public virtual extern void uniform2iv(
        dom.WebGLUniformLocation location,
        Union<es5.Int32Array, es5.ArrayLike<double>> v);

      public virtual extern void uniform2iv(dom.WebGLUniformLocation location, es5.Int32Array v);

      public virtual extern void uniform2iv(
        dom.WebGLUniformLocation location,
        es5.ArrayLike<double> v);

      public virtual extern void uniform3f(
        dom.WebGLUniformLocation location,
        double x,
        double y,
        double z);

      public virtual extern void uniform3fv(
        dom.WebGLUniformLocation location,
        Union<es5.Float32Array, es5.ArrayLike<double>> v);

      public virtual extern void uniform3fv(dom.WebGLUniformLocation location, es5.Float32Array v);

      public virtual extern void uniform3fv(
        dom.WebGLUniformLocation location,
        es5.ArrayLike<double> v);

      public virtual extern void uniform3i(
        dom.WebGLUniformLocation location,
        double x,
        double y,
        double z);

      public virtual extern void uniform3iv(
        dom.WebGLUniformLocation location,
        Union<es5.Int32Array, es5.ArrayLike<double>> v);

      public virtual extern void uniform3iv(dom.WebGLUniformLocation location, es5.Int32Array v);

      public virtual extern void uniform3iv(
        dom.WebGLUniformLocation location,
        es5.ArrayLike<double> v);

      public virtual extern void uniform4f(
        dom.WebGLUniformLocation location,
        double x,
        double y,
        double z,
        double w);

      public virtual extern void uniform4fv(
        dom.WebGLUniformLocation location,
        Union<es5.Float32Array, es5.ArrayLike<double>> v);

      public virtual extern void uniform4fv(dom.WebGLUniformLocation location, es5.Float32Array v);

      public virtual extern void uniform4fv(
        dom.WebGLUniformLocation location,
        es5.ArrayLike<double> v);

      public virtual extern void uniform4i(
        dom.WebGLUniformLocation location,
        double x,
        double y,
        double z,
        double w);

      public virtual extern void uniform4iv(
        dom.WebGLUniformLocation location,
        Union<es5.Int32Array, es5.ArrayLike<double>> v);

      public virtual extern void uniform4iv(dom.WebGLUniformLocation location, es5.Int32Array v);

      public virtual extern void uniform4iv(
        dom.WebGLUniformLocation location,
        es5.ArrayLike<double> v);

      public virtual extern void uniformMatrix2fv(
        dom.WebGLUniformLocation location,
        bool transpose,
        Union<es5.Float32Array, es5.ArrayLike<double>> value);

      public virtual extern void uniformMatrix2fv(
        dom.WebGLUniformLocation location,
        bool transpose,
        es5.Float32Array value);

      public virtual extern void uniformMatrix2fv(
        dom.WebGLUniformLocation location,
        bool transpose,
        es5.ArrayLike<double> value);

      public virtual extern void uniformMatrix3fv(
        dom.WebGLUniformLocation location,
        bool transpose,
        Union<es5.Float32Array, es5.ArrayLike<double>> value);

      public virtual extern void uniformMatrix3fv(
        dom.WebGLUniformLocation location,
        bool transpose,
        es5.Float32Array value);

      public virtual extern void uniformMatrix3fv(
        dom.WebGLUniformLocation location,
        bool transpose,
        es5.ArrayLike<double> value);

      public virtual extern void uniformMatrix4fv(
        dom.WebGLUniformLocation location,
        bool transpose,
        Union<es5.Float32Array, es5.ArrayLike<double>> value);

      public virtual extern void uniformMatrix4fv(
        dom.WebGLUniformLocation location,
        bool transpose,
        es5.Float32Array value);

      public virtual extern void uniformMatrix4fv(
        dom.WebGLUniformLocation location,
        bool transpose,
        es5.ArrayLike<double> value);

      public virtual extern void useProgram(dom.WebGLProgram program);

      public virtual extern void validateProgram(dom.WebGLProgram program);

      public virtual extern void vertexAttrib1f(double indx, double x);

      public virtual extern void vertexAttrib1fv(
        double indx,
        Union<es5.Float32Array, double[]> values);

      public virtual extern void vertexAttrib1fv(double indx, es5.Float32Array values);

      public virtual extern void vertexAttrib1fv(double indx, double[] values);

      public virtual extern void vertexAttrib2f(double indx, double x, double y);

      public virtual extern void vertexAttrib2fv(
        double indx,
        Union<es5.Float32Array, double[]> values);

      public virtual extern void vertexAttrib2fv(double indx, es5.Float32Array values);

      public virtual extern void vertexAttrib2fv(double indx, double[] values);

      public virtual extern void vertexAttrib3f(double indx, double x, double y, double z);

      public virtual extern void vertexAttrib3fv(
        double indx,
        Union<es5.Float32Array, double[]> values);

      public virtual extern void vertexAttrib3fv(double indx, es5.Float32Array values);

      public virtual extern void vertexAttrib3fv(double indx, double[] values);

      public virtual extern void vertexAttrib4f(
        double indx,
        double x,
        double y,
        double z,
        double w);

      public virtual extern void vertexAttrib4fv(
        double indx,
        Union<es5.Float32Array, double[]> values);

      public virtual extern void vertexAttrib4fv(double indx, es5.Float32Array values);

      public virtual extern void vertexAttrib4fv(double indx, double[] values);

      public virtual extern void vertexAttribPointer(
        double indx,
        double size,
        double type,
        bool normalized,
        double stride,
        double offset);

      public virtual extern void viewport(double x, double y, double width, double height);

      public virtual uint ACTIVE_ATTRIBUTES
      {
        get
        {
          return this._ACTIVE_ATTRIBUTES_BackingField;
        }
      }

      public virtual uint ACTIVE_TEXTURE
      {
        get
        {
          return this._ACTIVE_TEXTURE_BackingField;
        }
      }

      public virtual uint ACTIVE_UNIFORMS
      {
        get
        {
          return this._ACTIVE_UNIFORMS_BackingField;
        }
      }

      public virtual uint ALIASED_LINE_WIDTH_RANGE
      {
        get
        {
          return this._ALIASED_LINE_WIDTH_RANGE_BackingField;
        }
      }

      public virtual uint ALIASED_POINT_SIZE_RANGE
      {
        get
        {
          return this._ALIASED_POINT_SIZE_RANGE_BackingField;
        }
      }

      public virtual uint ALPHA
      {
        get
        {
          return this._ALPHA_BackingField;
        }
      }

      public virtual uint ALPHA_BITS
      {
        get
        {
          return this._ALPHA_BITS_BackingField;
        }
      }

      public virtual uint ALWAYS
      {
        get
        {
          return this._ALWAYS_BackingField;
        }
      }

      public virtual uint ARRAY_BUFFER
      {
        get
        {
          return this._ARRAY_BUFFER_BackingField;
        }
      }

      public virtual uint ARRAY_BUFFER_BINDING
      {
        get
        {
          return this._ARRAY_BUFFER_BINDING_BackingField;
        }
      }

      public virtual uint ATTACHED_SHADERS
      {
        get
        {
          return this._ATTACHED_SHADERS_BackingField;
        }
      }

      public virtual uint BACK
      {
        get
        {
          return this._BACK_BackingField;
        }
      }

      public virtual uint BLEND
      {
        get
        {
          return this._BLEND_BackingField;
        }
      }

      public virtual uint BLEND_COLOR
      {
        get
        {
          return this._BLEND_COLOR_BackingField;
        }
      }

      public virtual uint BLEND_DST_ALPHA
      {
        get
        {
          return this._BLEND_DST_ALPHA_BackingField;
        }
      }

      public virtual uint BLEND_DST_RGB
      {
        get
        {
          return this._BLEND_DST_RGB_BackingField;
        }
      }

      public virtual uint BLEND_EQUATION
      {
        get
        {
          return this._BLEND_EQUATION_BackingField;
        }
      }

      public virtual uint BLEND_EQUATION_ALPHA
      {
        get
        {
          return this._BLEND_EQUATION_ALPHA_BackingField;
        }
      }

      public virtual uint BLEND_EQUATION_RGB
      {
        get
        {
          return this._BLEND_EQUATION_RGB_BackingField;
        }
      }

      public virtual uint BLEND_SRC_ALPHA
      {
        get
        {
          return this._BLEND_SRC_ALPHA_BackingField;
        }
      }

      public virtual uint BLEND_SRC_RGB
      {
        get
        {
          return this._BLEND_SRC_RGB_BackingField;
        }
      }

      public virtual uint BLUE_BITS
      {
        get
        {
          return this._BLUE_BITS_BackingField;
        }
      }

      public virtual uint BOOL
      {
        get
        {
          return this._BOOL_BackingField;
        }
      }

      public virtual uint BOOL_VEC2
      {
        get
        {
          return this._BOOL_VEC2_BackingField;
        }
      }

      public virtual uint BOOL_VEC3
      {
        get
        {
          return this._BOOL_VEC3_BackingField;
        }
      }

      public virtual uint BOOL_VEC4
      {
        get
        {
          return this._BOOL_VEC4_BackingField;
        }
      }

      public virtual uint BROWSER_DEFAULT_WEBGL
      {
        get
        {
          return this._BROWSER_DEFAULT_WEBGL_BackingField;
        }
      }

      public virtual uint BUFFER_SIZE
      {
        get
        {
          return this._BUFFER_SIZE_BackingField;
        }
      }

      public virtual uint BUFFER_USAGE
      {
        get
        {
          return this._BUFFER_USAGE_BackingField;
        }
      }

      public virtual uint BYTE
      {
        get
        {
          return this._BYTE_BackingField;
        }
      }

      public virtual uint CCW
      {
        get
        {
          return this._CCW_BackingField;
        }
      }

      public virtual uint CLAMP_TO_EDGE
      {
        get
        {
          return this._CLAMP_TO_EDGE_BackingField;
        }
      }

      public virtual uint COLOR_ATTACHMENT0
      {
        get
        {
          return this._COLOR_ATTACHMENT0_BackingField;
        }
      }

      public virtual uint COLOR_BUFFER_BIT
      {
        get
        {
          return this._COLOR_BUFFER_BIT_BackingField;
        }
      }

      public virtual uint COLOR_CLEAR_VALUE
      {
        get
        {
          return this._COLOR_CLEAR_VALUE_BackingField;
        }
      }

      public virtual uint COLOR_WRITEMASK
      {
        get
        {
          return this._COLOR_WRITEMASK_BackingField;
        }
      }

      public virtual uint COMPILE_STATUS
      {
        get
        {
          return this._COMPILE_STATUS_BackingField;
        }
      }

      public virtual uint COMPRESSED_TEXTURE_FORMATS
      {
        get
        {
          return this._COMPRESSED_TEXTURE_FORMATS_BackingField;
        }
      }

      public virtual uint CONSTANT_ALPHA
      {
        get
        {
          return this._CONSTANT_ALPHA_BackingField;
        }
      }

      public virtual uint CONSTANT_COLOR
      {
        get
        {
          return this._CONSTANT_COLOR_BackingField;
        }
      }

      public virtual uint CONTEXT_LOST_WEBGL
      {
        get
        {
          return this._CONTEXT_LOST_WEBGL_BackingField;
        }
      }

      public virtual uint CULL_FACE
      {
        get
        {
          return this._CULL_FACE_BackingField;
        }
      }

      public virtual uint CULL_FACE_MODE
      {
        get
        {
          return this._CULL_FACE_MODE_BackingField;
        }
      }

      public virtual uint CURRENT_PROGRAM
      {
        get
        {
          return this._CURRENT_PROGRAM_BackingField;
        }
      }

      public virtual uint CURRENT_VERTEX_ATTRIB
      {
        get
        {
          return this._CURRENT_VERTEX_ATTRIB_BackingField;
        }
      }

      public virtual uint CW
      {
        get
        {
          return this._CW_BackingField;
        }
      }

      public virtual uint DECR
      {
        get
        {
          return this._DECR_BackingField;
        }
      }

      public virtual uint DECR_WRAP
      {
        get
        {
          return this._DECR_WRAP_BackingField;
        }
      }

      public virtual uint DELETE_STATUS
      {
        get
        {
          return this._DELETE_STATUS_BackingField;
        }
      }

      public virtual uint DEPTH_ATTACHMENT
      {
        get
        {
          return this._DEPTH_ATTACHMENT_BackingField;
        }
      }

      public virtual uint DEPTH_BITS
      {
        get
        {
          return this._DEPTH_BITS_BackingField;
        }
      }

      public virtual uint DEPTH_BUFFER_BIT
      {
        get
        {
          return this._DEPTH_BUFFER_BIT_BackingField;
        }
      }

      public virtual uint DEPTH_CLEAR_VALUE
      {
        get
        {
          return this._DEPTH_CLEAR_VALUE_BackingField;
        }
      }

      public virtual uint DEPTH_COMPONENT
      {
        get
        {
          return this._DEPTH_COMPONENT_BackingField;
        }
      }

      public virtual uint DEPTH_COMPONENT16
      {
        get
        {
          return this._DEPTH_COMPONENT16_BackingField;
        }
      }

      public virtual uint DEPTH_FUNC
      {
        get
        {
          return this._DEPTH_FUNC_BackingField;
        }
      }

      public virtual uint DEPTH_RANGE
      {
        get
        {
          return this._DEPTH_RANGE_BackingField;
        }
      }

      public virtual uint DEPTH_STENCIL
      {
        get
        {
          return this._DEPTH_STENCIL_BackingField;
        }
      }

      public virtual uint DEPTH_STENCIL_ATTACHMENT
      {
        get
        {
          return this._DEPTH_STENCIL_ATTACHMENT_BackingField;
        }
      }

      public virtual uint DEPTH_TEST
      {
        get
        {
          return this._DEPTH_TEST_BackingField;
        }
      }

      public virtual uint DEPTH_WRITEMASK
      {
        get
        {
          return this._DEPTH_WRITEMASK_BackingField;
        }
      }

      public virtual uint DITHER
      {
        get
        {
          return this._DITHER_BackingField;
        }
      }

      public virtual uint DONT_CARE
      {
        get
        {
          return this._DONT_CARE_BackingField;
        }
      }

      public virtual uint DST_ALPHA
      {
        get
        {
          return this._DST_ALPHA_BackingField;
        }
      }

      public virtual uint DST_COLOR
      {
        get
        {
          return this._DST_COLOR_BackingField;
        }
      }

      public virtual uint DYNAMIC_DRAW
      {
        get
        {
          return this._DYNAMIC_DRAW_BackingField;
        }
      }

      public virtual uint ELEMENT_ARRAY_BUFFER
      {
        get
        {
          return this._ELEMENT_ARRAY_BUFFER_BackingField;
        }
      }

      public virtual uint ELEMENT_ARRAY_BUFFER_BINDING
      {
        get
        {
          return this._ELEMENT_ARRAY_BUFFER_BINDING_BackingField;
        }
      }

      public virtual uint EQUAL
      {
        get
        {
          return this._EQUAL_BackingField;
        }
      }

      public virtual uint FASTEST
      {
        get
        {
          return this._FASTEST_BackingField;
        }
      }

      public virtual uint FLOAT
      {
        get
        {
          return this._FLOAT_BackingField;
        }
      }

      public virtual uint FLOAT_MAT2
      {
        get
        {
          return this._FLOAT_MAT2_BackingField;
        }
      }

      public virtual uint FLOAT_MAT3
      {
        get
        {
          return this._FLOAT_MAT3_BackingField;
        }
      }

      public virtual uint FLOAT_MAT4
      {
        get
        {
          return this._FLOAT_MAT4_BackingField;
        }
      }

      public virtual uint FLOAT_VEC2
      {
        get
        {
          return this._FLOAT_VEC2_BackingField;
        }
      }

      public virtual uint FLOAT_VEC3
      {
        get
        {
          return this._FLOAT_VEC3_BackingField;
        }
      }

      public virtual uint FLOAT_VEC4
      {
        get
        {
          return this._FLOAT_VEC4_BackingField;
        }
      }

      public virtual uint FRAGMENT_SHADER
      {
        get
        {
          return this._FRAGMENT_SHADER_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER
      {
        get
        {
          return this._FRAMEBUFFER_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
      {
        get
        {
          return this._FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
      {
        get
        {
          return this._FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
      {
        get
        {
          return this._FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
      {
        get
        {
          return this._FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_BINDING
      {
        get
        {
          return this._FRAMEBUFFER_BINDING_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_COMPLETE
      {
        get
        {
          return this._FRAMEBUFFER_COMPLETE_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_INCOMPLETE_ATTACHMENT
      {
        get
        {
          return this._FRAMEBUFFER_INCOMPLETE_ATTACHMENT_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_INCOMPLETE_DIMENSIONS
      {
        get
        {
          return this._FRAMEBUFFER_INCOMPLETE_DIMENSIONS_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
      {
        get
        {
          return this._FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_BackingField;
        }
      }

      public virtual uint FRAMEBUFFER_UNSUPPORTED
      {
        get
        {
          return this._FRAMEBUFFER_UNSUPPORTED_BackingField;
        }
      }

      public virtual uint FRONT
      {
        get
        {
          return this._FRONT_BackingField;
        }
      }

      public virtual uint FRONT_AND_BACK
      {
        get
        {
          return this._FRONT_AND_BACK_BackingField;
        }
      }

      public virtual uint FRONT_FACE
      {
        get
        {
          return this._FRONT_FACE_BackingField;
        }
      }

      public virtual uint FUNC_ADD
      {
        get
        {
          return this._FUNC_ADD_BackingField;
        }
      }

      public virtual uint FUNC_REVERSE_SUBTRACT
      {
        get
        {
          return this._FUNC_REVERSE_SUBTRACT_BackingField;
        }
      }

      public virtual uint FUNC_SUBTRACT
      {
        get
        {
          return this._FUNC_SUBTRACT_BackingField;
        }
      }

      public virtual uint GENERATE_MIPMAP_HINT
      {
        get
        {
          return this._GENERATE_MIPMAP_HINT_BackingField;
        }
      }

      public virtual uint GEQUAL
      {
        get
        {
          return this._GEQUAL_BackingField;
        }
      }

      public virtual uint GREATER
      {
        get
        {
          return this._GREATER_BackingField;
        }
      }

      public virtual uint GREEN_BITS
      {
        get
        {
          return this._GREEN_BITS_BackingField;
        }
      }

      public virtual uint HIGH_FLOAT
      {
        get
        {
          return this._HIGH_FLOAT_BackingField;
        }
      }

      public virtual uint HIGH_INT
      {
        get
        {
          return this._HIGH_INT_BackingField;
        }
      }

      public virtual uint IMPLEMENTATION_COLOR_READ_FORMAT
      {
        get
        {
          return this._IMPLEMENTATION_COLOR_READ_FORMAT_BackingField;
        }
      }

      public virtual uint IMPLEMENTATION_COLOR_READ_TYPE
      {
        get
        {
          return this._IMPLEMENTATION_COLOR_READ_TYPE_BackingField;
        }
      }

      public virtual uint INCR
      {
        get
        {
          return this._INCR_BackingField;
        }
      }

      public virtual uint INCR_WRAP
      {
        get
        {
          return this._INCR_WRAP_BackingField;
        }
      }

      public virtual uint INT
      {
        get
        {
          return this._INT_BackingField;
        }
      }

      public virtual uint INT_VEC2
      {
        get
        {
          return this._INT_VEC2_BackingField;
        }
      }

      public virtual uint INT_VEC3
      {
        get
        {
          return this._INT_VEC3_BackingField;
        }
      }

      public virtual uint INT_VEC4
      {
        get
        {
          return this._INT_VEC4_BackingField;
        }
      }

      public virtual uint INVALID_ENUM
      {
        get
        {
          return this._INVALID_ENUM_BackingField;
        }
      }

      public virtual uint INVALID_FRAMEBUFFER_OPERATION
      {
        get
        {
          return this._INVALID_FRAMEBUFFER_OPERATION_BackingField;
        }
      }

      public virtual uint INVALID_OPERATION
      {
        get
        {
          return this._INVALID_OPERATION_BackingField;
        }
      }

      public virtual uint INVALID_VALUE
      {
        get
        {
          return this._INVALID_VALUE_BackingField;
        }
      }

      public virtual uint INVERT
      {
        get
        {
          return this._INVERT_BackingField;
        }
      }

      public virtual uint KEEP
      {
        get
        {
          return this._KEEP_BackingField;
        }
      }

      public virtual uint LEQUAL
      {
        get
        {
          return this._LEQUAL_BackingField;
        }
      }

      public virtual uint LESS
      {
        get
        {
          return this._LESS_BackingField;
        }
      }

      public virtual uint LINEAR
      {
        get
        {
          return this._LINEAR_BackingField;
        }
      }

      public virtual uint LINEAR_MIPMAP_LINEAR
      {
        get
        {
          return this._LINEAR_MIPMAP_LINEAR_BackingField;
        }
      }

      public virtual uint LINEAR_MIPMAP_NEAREST
      {
        get
        {
          return this._LINEAR_MIPMAP_NEAREST_BackingField;
        }
      }

      public virtual uint LINES
      {
        get
        {
          return this._LINES_BackingField;
        }
      }

      public virtual uint LINE_LOOP
      {
        get
        {
          return this._LINE_LOOP_BackingField;
        }
      }

      public virtual uint LINE_STRIP
      {
        get
        {
          return this._LINE_STRIP_BackingField;
        }
      }

      public virtual uint LINE_WIDTH
      {
        get
        {
          return this._LINE_WIDTH_BackingField;
        }
      }

      public virtual uint LINK_STATUS
      {
        get
        {
          return this._LINK_STATUS_BackingField;
        }
      }

      public virtual uint LOW_FLOAT
      {
        get
        {
          return this._LOW_FLOAT_BackingField;
        }
      }

      public virtual uint LOW_INT
      {
        get
        {
          return this._LOW_INT_BackingField;
        }
      }

      public virtual uint LUMINANCE
      {
        get
        {
          return this._LUMINANCE_BackingField;
        }
      }

      public virtual uint LUMINANCE_ALPHA
      {
        get
        {
          return this._LUMINANCE_ALPHA_BackingField;
        }
      }

      public virtual uint MAX_COMBINED_TEXTURE_IMAGE_UNITS
      {
        get
        {
          return this._MAX_COMBINED_TEXTURE_IMAGE_UNITS_BackingField;
        }
      }

      public virtual uint MAX_CUBE_MAP_TEXTURE_SIZE
      {
        get
        {
          return this._MAX_CUBE_MAP_TEXTURE_SIZE_BackingField;
        }
      }

      public virtual uint MAX_FRAGMENT_UNIFORM_VECTORS
      {
        get
        {
          return this._MAX_FRAGMENT_UNIFORM_VECTORS_BackingField;
        }
      }

      public virtual uint MAX_RENDERBUFFER_SIZE
      {
        get
        {
          return this._MAX_RENDERBUFFER_SIZE_BackingField;
        }
      }

      public virtual uint MAX_TEXTURE_IMAGE_UNITS
      {
        get
        {
          return this._MAX_TEXTURE_IMAGE_UNITS_BackingField;
        }
      }

      public virtual uint MAX_TEXTURE_SIZE
      {
        get
        {
          return this._MAX_TEXTURE_SIZE_BackingField;
        }
      }

      public virtual uint MAX_VARYING_VECTORS
      {
        get
        {
          return this._MAX_VARYING_VECTORS_BackingField;
        }
      }

      public virtual uint MAX_VERTEX_ATTRIBS
      {
        get
        {
          return this._MAX_VERTEX_ATTRIBS_BackingField;
        }
      }

      public virtual uint MAX_VERTEX_TEXTURE_IMAGE_UNITS
      {
        get
        {
          return this._MAX_VERTEX_TEXTURE_IMAGE_UNITS_BackingField;
        }
      }

      public virtual uint MAX_VERTEX_UNIFORM_VECTORS
      {
        get
        {
          return this._MAX_VERTEX_UNIFORM_VECTORS_BackingField;
        }
      }

      public virtual uint MAX_VIEWPORT_DIMS
      {
        get
        {
          return this._MAX_VIEWPORT_DIMS_BackingField;
        }
      }

      public virtual uint MEDIUM_FLOAT
      {
        get
        {
          return this._MEDIUM_FLOAT_BackingField;
        }
      }

      public virtual uint MEDIUM_INT
      {
        get
        {
          return this._MEDIUM_INT_BackingField;
        }
      }

      public virtual uint MIRRORED_REPEAT
      {
        get
        {
          return this._MIRRORED_REPEAT_BackingField;
        }
      }

      public virtual uint NEAREST
      {
        get
        {
          return this._NEAREST_BackingField;
        }
      }

      public virtual uint NEAREST_MIPMAP_LINEAR
      {
        get
        {
          return this._NEAREST_MIPMAP_LINEAR_BackingField;
        }
      }

      public virtual uint NEAREST_MIPMAP_NEAREST
      {
        get
        {
          return this._NEAREST_MIPMAP_NEAREST_BackingField;
        }
      }

      public virtual uint NEVER
      {
        get
        {
          return this._NEVER_BackingField;
        }
      }

      public virtual uint NICEST
      {
        get
        {
          return this._NICEST_BackingField;
        }
      }

      public virtual uint NONE
      {
        get
        {
          return this._NONE_BackingField;
        }
      }

      public virtual uint NOTEQUAL
      {
        get
        {
          return this._NOTEQUAL_BackingField;
        }
      }

      public virtual uint NO_ERROR
      {
        get
        {
          return this._NO_ERROR_BackingField;
        }
      }

      public virtual uint ONE
      {
        get
        {
          return this._ONE_BackingField;
        }
      }

      public virtual uint ONE_MINUS_CONSTANT_ALPHA
      {
        get
        {
          return this._ONE_MINUS_CONSTANT_ALPHA_BackingField;
        }
      }

      public virtual uint ONE_MINUS_CONSTANT_COLOR
      {
        get
        {
          return this._ONE_MINUS_CONSTANT_COLOR_BackingField;
        }
      }

      public virtual uint ONE_MINUS_DST_ALPHA
      {
        get
        {
          return this._ONE_MINUS_DST_ALPHA_BackingField;
        }
      }

      public virtual uint ONE_MINUS_DST_COLOR
      {
        get
        {
          return this._ONE_MINUS_DST_COLOR_BackingField;
        }
      }

      public virtual uint ONE_MINUS_SRC_ALPHA
      {
        get
        {
          return this._ONE_MINUS_SRC_ALPHA_BackingField;
        }
      }

      public virtual uint ONE_MINUS_SRC_COLOR
      {
        get
        {
          return this._ONE_MINUS_SRC_COLOR_BackingField;
        }
      }

      public virtual uint OUT_OF_MEMORY
      {
        get
        {
          return this._OUT_OF_MEMORY_BackingField;
        }
      }

      public virtual uint PACK_ALIGNMENT
      {
        get
        {
          return this._PACK_ALIGNMENT_BackingField;
        }
      }

      public virtual uint POINTS
      {
        get
        {
          return this._POINTS_BackingField;
        }
      }

      public virtual uint POLYGON_OFFSET_FACTOR
      {
        get
        {
          return this._POLYGON_OFFSET_FACTOR_BackingField;
        }
      }

      public virtual uint POLYGON_OFFSET_FILL
      {
        get
        {
          return this._POLYGON_OFFSET_FILL_BackingField;
        }
      }

      public virtual uint POLYGON_OFFSET_UNITS
      {
        get
        {
          return this._POLYGON_OFFSET_UNITS_BackingField;
        }
      }

      public virtual uint RED_BITS
      {
        get
        {
          return this._RED_BITS_BackingField;
        }
      }

      public virtual uint RENDERBUFFER
      {
        get
        {
          return this._RENDERBUFFER_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_ALPHA_SIZE
      {
        get
        {
          return this._RENDERBUFFER_ALPHA_SIZE_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_BINDING
      {
        get
        {
          return this._RENDERBUFFER_BINDING_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_BLUE_SIZE
      {
        get
        {
          return this._RENDERBUFFER_BLUE_SIZE_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_DEPTH_SIZE
      {
        get
        {
          return this._RENDERBUFFER_DEPTH_SIZE_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_GREEN_SIZE
      {
        get
        {
          return this._RENDERBUFFER_GREEN_SIZE_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_HEIGHT
      {
        get
        {
          return this._RENDERBUFFER_HEIGHT_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_INTERNAL_FORMAT
      {
        get
        {
          return this._RENDERBUFFER_INTERNAL_FORMAT_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_RED_SIZE
      {
        get
        {
          return this._RENDERBUFFER_RED_SIZE_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_STENCIL_SIZE
      {
        get
        {
          return this._RENDERBUFFER_STENCIL_SIZE_BackingField;
        }
      }

      public virtual uint RENDERBUFFER_WIDTH
      {
        get
        {
          return this._RENDERBUFFER_WIDTH_BackingField;
        }
      }

      public virtual uint RENDERER
      {
        get
        {
          return this._RENDERER_BackingField;
        }
      }

      public virtual uint REPEAT
      {
        get
        {
          return this._REPEAT_BackingField;
        }
      }

      public virtual uint REPLACE
      {
        get
        {
          return this._REPLACE_BackingField;
        }
      }

      public virtual uint RGB
      {
        get
        {
          return this._RGB_BackingField;
        }
      }

      public virtual uint RGB565
      {
        get
        {
          return this._RGB565_BackingField;
        }
      }

      public virtual uint RGB5_A1
      {
        get
        {
          return this._RGB5_A1_BackingField;
        }
      }

      public virtual uint RGBA
      {
        get
        {
          return this._RGBA_BackingField;
        }
      }

      public virtual uint RGBA4
      {
        get
        {
          return this._RGBA4_BackingField;
        }
      }

      public virtual uint SAMPLER_2D
      {
        get
        {
          return this._SAMPLER_2D_BackingField;
        }
      }

      public virtual uint SAMPLER_CUBE
      {
        get
        {
          return this._SAMPLER_CUBE_BackingField;
        }
      }

      public virtual uint SAMPLES
      {
        get
        {
          return this._SAMPLES_BackingField;
        }
      }

      public virtual uint SAMPLE_ALPHA_TO_COVERAGE
      {
        get
        {
          return this._SAMPLE_ALPHA_TO_COVERAGE_BackingField;
        }
      }

      public virtual uint SAMPLE_BUFFERS
      {
        get
        {
          return this._SAMPLE_BUFFERS_BackingField;
        }
      }

      public virtual uint SAMPLE_COVERAGE
      {
        get
        {
          return this._SAMPLE_COVERAGE_BackingField;
        }
      }

      public virtual uint SAMPLE_COVERAGE_INVERT
      {
        get
        {
          return this._SAMPLE_COVERAGE_INVERT_BackingField;
        }
      }

      public virtual uint SAMPLE_COVERAGE_VALUE
      {
        get
        {
          return this._SAMPLE_COVERAGE_VALUE_BackingField;
        }
      }

      public virtual uint SCISSOR_BOX
      {
        get
        {
          return this._SCISSOR_BOX_BackingField;
        }
      }

      public virtual uint SCISSOR_TEST
      {
        get
        {
          return this._SCISSOR_TEST_BackingField;
        }
      }

      public virtual uint SHADER_TYPE
      {
        get
        {
          return this._SHADER_TYPE_BackingField;
        }
      }

      public virtual uint SHADING_LANGUAGE_VERSION
      {
        get
        {
          return this._SHADING_LANGUAGE_VERSION_BackingField;
        }
      }

      public virtual uint SHORT
      {
        get
        {
          return this._SHORT_BackingField;
        }
      }

      public virtual uint SRC_ALPHA
      {
        get
        {
          return this._SRC_ALPHA_BackingField;
        }
      }

      public virtual uint SRC_ALPHA_SATURATE
      {
        get
        {
          return this._SRC_ALPHA_SATURATE_BackingField;
        }
      }

      public virtual uint SRC_COLOR
      {
        get
        {
          return this._SRC_COLOR_BackingField;
        }
      }

      public virtual uint STATIC_DRAW
      {
        get
        {
          return this._STATIC_DRAW_BackingField;
        }
      }

      public virtual uint STENCIL_ATTACHMENT
      {
        get
        {
          return this._STENCIL_ATTACHMENT_BackingField;
        }
      }

      public virtual uint STENCIL_BACK_FAIL
      {
        get
        {
          return this._STENCIL_BACK_FAIL_BackingField;
        }
      }

      public virtual uint STENCIL_BACK_FUNC
      {
        get
        {
          return this._STENCIL_BACK_FUNC_BackingField;
        }
      }

      public virtual uint STENCIL_BACK_PASS_DEPTH_FAIL
      {
        get
        {
          return this._STENCIL_BACK_PASS_DEPTH_FAIL_BackingField;
        }
      }

      public virtual uint STENCIL_BACK_PASS_DEPTH_PASS
      {
        get
        {
          return this._STENCIL_BACK_PASS_DEPTH_PASS_BackingField;
        }
      }

      public virtual uint STENCIL_BACK_REF
      {
        get
        {
          return this._STENCIL_BACK_REF_BackingField;
        }
      }

      public virtual uint STENCIL_BACK_VALUE_MASK
      {
        get
        {
          return this._STENCIL_BACK_VALUE_MASK_BackingField;
        }
      }

      public virtual uint STENCIL_BACK_WRITEMASK
      {
        get
        {
          return this._STENCIL_BACK_WRITEMASK_BackingField;
        }
      }

      public virtual uint STENCIL_BITS
      {
        get
        {
          return this._STENCIL_BITS_BackingField;
        }
      }

      public virtual uint STENCIL_BUFFER_BIT
      {
        get
        {
          return this._STENCIL_BUFFER_BIT_BackingField;
        }
      }

      public virtual uint STENCIL_CLEAR_VALUE
      {
        get
        {
          return this._STENCIL_CLEAR_VALUE_BackingField;
        }
      }

      public virtual uint STENCIL_FAIL
      {
        get
        {
          return this._STENCIL_FAIL_BackingField;
        }
      }

      public virtual uint STENCIL_FUNC
      {
        get
        {
          return this._STENCIL_FUNC_BackingField;
        }
      }

      public virtual uint STENCIL_INDEX
      {
        get
        {
          return this._STENCIL_INDEX_BackingField;
        }
      }

      public virtual uint STENCIL_INDEX8
      {
        get
        {
          return this._STENCIL_INDEX8_BackingField;
        }
      }

      public virtual uint STENCIL_PASS_DEPTH_FAIL
      {
        get
        {
          return this._STENCIL_PASS_DEPTH_FAIL_BackingField;
        }
      }

      public virtual uint STENCIL_PASS_DEPTH_PASS
      {
        get
        {
          return this._STENCIL_PASS_DEPTH_PASS_BackingField;
        }
      }

      public virtual uint STENCIL_REF
      {
        get
        {
          return this._STENCIL_REF_BackingField;
        }
      }

      public virtual uint STENCIL_TEST
      {
        get
        {
          return this._STENCIL_TEST_BackingField;
        }
      }

      public virtual uint STENCIL_VALUE_MASK
      {
        get
        {
          return this._STENCIL_VALUE_MASK_BackingField;
        }
      }

      public virtual uint STENCIL_WRITEMASK
      {
        get
        {
          return this._STENCIL_WRITEMASK_BackingField;
        }
      }

      public virtual uint STREAM_DRAW
      {
        get
        {
          return this._STREAM_DRAW_BackingField;
        }
      }

      public virtual uint SUBPIXEL_BITS
      {
        get
        {
          return this._SUBPIXEL_BITS_BackingField;
        }
      }

      public virtual uint TEXTURE
      {
        get
        {
          return this._TEXTURE_BackingField;
        }
      }

      public virtual uint TEXTURE0
      {
        get
        {
          return this._TEXTURE0_BackingField;
        }
      }

      public virtual uint TEXTURE1
      {
        get
        {
          return this._TEXTURE1_BackingField;
        }
      }

      public virtual uint TEXTURE10
      {
        get
        {
          return this._TEXTURE10_BackingField;
        }
      }

      public virtual uint TEXTURE11
      {
        get
        {
          return this._TEXTURE11_BackingField;
        }
      }

      public virtual uint TEXTURE12
      {
        get
        {
          return this._TEXTURE12_BackingField;
        }
      }

      public virtual uint TEXTURE13
      {
        get
        {
          return this._TEXTURE13_BackingField;
        }
      }

      public virtual uint TEXTURE14
      {
        get
        {
          return this._TEXTURE14_BackingField;
        }
      }

      public virtual uint TEXTURE15
      {
        get
        {
          return this._TEXTURE15_BackingField;
        }
      }

      public virtual uint TEXTURE16
      {
        get
        {
          return this._TEXTURE16_BackingField;
        }
      }

      public virtual uint TEXTURE17
      {
        get
        {
          return this._TEXTURE17_BackingField;
        }
      }

      public virtual uint TEXTURE18
      {
        get
        {
          return this._TEXTURE18_BackingField;
        }
      }

      public virtual uint TEXTURE19
      {
        get
        {
          return this._TEXTURE19_BackingField;
        }
      }

      public virtual uint TEXTURE2
      {
        get
        {
          return this._TEXTURE2_BackingField;
        }
      }

      public virtual uint TEXTURE20
      {
        get
        {
          return this._TEXTURE20_BackingField;
        }
      }

      public virtual uint TEXTURE21
      {
        get
        {
          return this._TEXTURE21_BackingField;
        }
      }

      public virtual uint TEXTURE22
      {
        get
        {
          return this._TEXTURE22_BackingField;
        }
      }

      public virtual uint TEXTURE23
      {
        get
        {
          return this._TEXTURE23_BackingField;
        }
      }

      public virtual uint TEXTURE24
      {
        get
        {
          return this._TEXTURE24_BackingField;
        }
      }

      public virtual uint TEXTURE25
      {
        get
        {
          return this._TEXTURE25_BackingField;
        }
      }

      public virtual uint TEXTURE26
      {
        get
        {
          return this._TEXTURE26_BackingField;
        }
      }

      public virtual uint TEXTURE27
      {
        get
        {
          return this._TEXTURE27_BackingField;
        }
      }

      public virtual uint TEXTURE28
      {
        get
        {
          return this._TEXTURE28_BackingField;
        }
      }

      public virtual uint TEXTURE29
      {
        get
        {
          return this._TEXTURE29_BackingField;
        }
      }

      public virtual uint TEXTURE3
      {
        get
        {
          return this._TEXTURE3_BackingField;
        }
      }

      public virtual uint TEXTURE30
      {
        get
        {
          return this._TEXTURE30_BackingField;
        }
      }

      public virtual uint TEXTURE31
      {
        get
        {
          return this._TEXTURE31_BackingField;
        }
      }

      public virtual uint TEXTURE4
      {
        get
        {
          return this._TEXTURE4_BackingField;
        }
      }

      public virtual uint TEXTURE5
      {
        get
        {
          return this._TEXTURE5_BackingField;
        }
      }

      public virtual uint TEXTURE6
      {
        get
        {
          return this._TEXTURE6_BackingField;
        }
      }

      public virtual uint TEXTURE7
      {
        get
        {
          return this._TEXTURE7_BackingField;
        }
      }

      public virtual uint TEXTURE8
      {
        get
        {
          return this._TEXTURE8_BackingField;
        }
      }

      public virtual uint TEXTURE9
      {
        get
        {
          return this._TEXTURE9_BackingField;
        }
      }

      public virtual uint TEXTURE_2D
      {
        get
        {
          return this._TEXTURE_2D_BackingField;
        }
      }

      public virtual uint TEXTURE_BINDING_2D
      {
        get
        {
          return this._TEXTURE_BINDING_2D_BackingField;
        }
      }

      public virtual uint TEXTURE_BINDING_CUBE_MAP
      {
        get
        {
          return this._TEXTURE_BINDING_CUBE_MAP_BackingField;
        }
      }

      public virtual uint TEXTURE_CUBE_MAP
      {
        get
        {
          return this._TEXTURE_CUBE_MAP_BackingField;
        }
      }

      public virtual uint TEXTURE_CUBE_MAP_NEGATIVE_X
      {
        get
        {
          return this._TEXTURE_CUBE_MAP_NEGATIVE_X_BackingField;
        }
      }

      public virtual uint TEXTURE_CUBE_MAP_NEGATIVE_Y
      {
        get
        {
          return this._TEXTURE_CUBE_MAP_NEGATIVE_Y_BackingField;
        }
      }

      public virtual uint TEXTURE_CUBE_MAP_NEGATIVE_Z
      {
        get
        {
          return this._TEXTURE_CUBE_MAP_NEGATIVE_Z_BackingField;
        }
      }

      public virtual uint TEXTURE_CUBE_MAP_POSITIVE_X
      {
        get
        {
          return this._TEXTURE_CUBE_MAP_POSITIVE_X_BackingField;
        }
      }

      public virtual uint TEXTURE_CUBE_MAP_POSITIVE_Y
      {
        get
        {
          return this._TEXTURE_CUBE_MAP_POSITIVE_Y_BackingField;
        }
      }

      public virtual uint TEXTURE_CUBE_MAP_POSITIVE_Z
      {
        get
        {
          return this._TEXTURE_CUBE_MAP_POSITIVE_Z_BackingField;
        }
      }

      public virtual uint TEXTURE_MAG_FILTER
      {
        get
        {
          return this._TEXTURE_MAG_FILTER_BackingField;
        }
      }

      public virtual uint TEXTURE_MIN_FILTER
      {
        get
        {
          return this._TEXTURE_MIN_FILTER_BackingField;
        }
      }

      public virtual uint TEXTURE_WRAP_S
      {
        get
        {
          return this._TEXTURE_WRAP_S_BackingField;
        }
      }

      public virtual uint TEXTURE_WRAP_T
      {
        get
        {
          return this._TEXTURE_WRAP_T_BackingField;
        }
      }

      public virtual uint TRIANGLES
      {
        get
        {
          return this._TRIANGLES_BackingField;
        }
      }

      public virtual uint TRIANGLE_FAN
      {
        get
        {
          return this._TRIANGLE_FAN_BackingField;
        }
      }

      public virtual uint TRIANGLE_STRIP
      {
        get
        {
          return this._TRIANGLE_STRIP_BackingField;
        }
      }

      public virtual uint UNPACK_ALIGNMENT
      {
        get
        {
          return this._UNPACK_ALIGNMENT_BackingField;
        }
      }

      public virtual uint UNPACK_COLORSPACE_CONVERSION_WEBGL
      {
        get
        {
          return this._UNPACK_COLORSPACE_CONVERSION_WEBGL_BackingField;
        }
      }

      public virtual uint UNPACK_FLIP_Y_WEBGL
      {
        get
        {
          return this._UNPACK_FLIP_Y_WEBGL_BackingField;
        }
      }

      public virtual uint UNPACK_PREMULTIPLY_ALPHA_WEBGL
      {
        get
        {
          return this._UNPACK_PREMULTIPLY_ALPHA_WEBGL_BackingField;
        }
      }

      public virtual uint UNSIGNED_BYTE
      {
        get
        {
          return this._UNSIGNED_BYTE_BackingField;
        }
      }

      public virtual uint UNSIGNED_INT
      {
        get
        {
          return this._UNSIGNED_INT_BackingField;
        }
      }

      public virtual uint UNSIGNED_SHORT
      {
        get
        {
          return this._UNSIGNED_SHORT_BackingField;
        }
      }

      public virtual uint UNSIGNED_SHORT_4_4_4_4
      {
        get
        {
          return this._UNSIGNED_SHORT_4_4_4_4_BackingField;
        }
      }

      public virtual uint UNSIGNED_SHORT_5_5_5_1
      {
        get
        {
          return this._UNSIGNED_SHORT_5_5_5_1_BackingField;
        }
      }

      public virtual uint UNSIGNED_SHORT_5_6_5
      {
        get
        {
          return this._UNSIGNED_SHORT_5_6_5_BackingField;
        }
      }

      public virtual uint VALIDATE_STATUS
      {
        get
        {
          return this._VALIDATE_STATUS_BackingField;
        }
      }

      public virtual uint VENDOR
      {
        get
        {
          return this._VENDOR_BackingField;
        }
      }

      public virtual uint VERSION
      {
        get
        {
          return this._VERSION_BackingField;
        }
      }

      public virtual uint VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
      {
        get
        {
          return this._VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_BackingField;
        }
      }

      public virtual uint VERTEX_ATTRIB_ARRAY_ENABLED
      {
        get
        {
          return this._VERTEX_ATTRIB_ARRAY_ENABLED_BackingField;
        }
      }

      public virtual uint VERTEX_ATTRIB_ARRAY_NORMALIZED
      {
        get
        {
          return this._VERTEX_ATTRIB_ARRAY_NORMALIZED_BackingField;
        }
      }

      public virtual uint VERTEX_ATTRIB_ARRAY_POINTER
      {
        get
        {
          return this._VERTEX_ATTRIB_ARRAY_POINTER_BackingField;
        }
      }

      public virtual uint VERTEX_ATTRIB_ARRAY_SIZE
      {
        get
        {
          return this._VERTEX_ATTRIB_ARRAY_SIZE_BackingField;
        }
      }

      public virtual uint VERTEX_ATTRIB_ARRAY_STRIDE
      {
        get
        {
          return this._VERTEX_ATTRIB_ARRAY_STRIDE_BackingField;
        }
      }

      public virtual uint VERTEX_ATTRIB_ARRAY_TYPE
      {
        get
        {
          return this._VERTEX_ATTRIB_ARRAY_TYPE_BackingField;
        }
      }

      public virtual uint VERTEX_SHADER
      {
        get
        {
          return this._VERTEX_SHADER_BackingField;
        }
      }

      public virtual uint VIEWPORT
      {
        get
        {
          return this._VIEWPORT_BackingField;
        }
      }

      public virtual uint ZERO
      {
        get
        {
          return this._ZERO_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLShader : dom.WebGLObject
    {
      private static dom.WebGLShader _prototype_BackingField;

      public static dom.WebGLShader prototype
      {
        get
        {
          return dom.WebGLShader._prototype_BackingField;
        }
        set
        {
          dom.WebGLShader._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLShaderPrecisionFormat : IObject
    {
      private static dom.WebGLShaderPrecisionFormat _prototype_BackingField;
      private readonly int _precision_BackingField;
      private readonly int _rangeMax_BackingField;
      private readonly int _rangeMin_BackingField;

      public static dom.WebGLShaderPrecisionFormat prototype
      {
        get
        {
          return dom.WebGLShaderPrecisionFormat._prototype_BackingField;
        }
        set
        {
          dom.WebGLShaderPrecisionFormat._prototype_BackingField = value;
        }
      }

      public virtual int precision
      {
        get
        {
          return this._precision_BackingField;
        }
      }

      public virtual int rangeMax
      {
        get
        {
          return this._rangeMax_BackingField;
        }
      }

      public virtual int rangeMin
      {
        get
        {
          return this._rangeMin_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLTexture : dom.WebGLObject
    {
      private static dom.WebGLTexture _prototype_BackingField;

      public static dom.WebGLTexture prototype
      {
        get
        {
          return dom.WebGLTexture._prototype_BackingField;
        }
        set
        {
          dom.WebGLTexture._prototype_BackingField = value;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebGLUniformLocation : IObject
    {
      private static dom.WebGLUniformLocation _prototype_BackingField;

      public static dom.WebGLUniformLocation prototype
      {
        get
        {
          return dom.WebGLUniformLocation._prototype_BackingField;
        }
        set
        {
          dom.WebGLUniformLocation._prototype_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WebGLVertexArrayObjectOES : IObject
    {
    }

    [CombinedClass]
    [FormerInterface]
    public class WebKitCSSMatrix : IObject
    {
      private static dom.WebKitCSSMatrix _prototype_BackingField;
      private double _a_BackingField;
      private double _b_BackingField;
      private double _c_BackingField;
      private double _d_BackingField;
      private double _e_BackingField;
      private double _f_BackingField;
      private double _m11_BackingField;
      private double _m12_BackingField;
      private double _m13_BackingField;
      private double _m14_BackingField;
      private double _m21_BackingField;
      private double _m22_BackingField;
      private double _m23_BackingField;
      private double _m24_BackingField;
      private double _m31_BackingField;
      private double _m32_BackingField;
      private double _m33_BackingField;
      private double _m34_BackingField;
      private double _m41_BackingField;
      private double _m42_BackingField;
      private double _m43_BackingField;
      private double _m44_BackingField;

      public extern WebKitCSSMatrix();

      public extern WebKitCSSMatrix(string text);

      public static dom.WebKitCSSMatrix prototype
      {
        get
        {
          return dom.WebKitCSSMatrix._prototype_BackingField;
        }
        set
        {
          dom.WebKitCSSMatrix._prototype_BackingField = value;
        }
      }

      public virtual double a
      {
        get
        {
          return this._a_BackingField;
        }
        set
        {
          this._a_BackingField = value;
        }
      }

      public virtual double b
      {
        get
        {
          return this._b_BackingField;
        }
        set
        {
          this._b_BackingField = value;
        }
      }

      public virtual double c
      {
        get
        {
          return this._c_BackingField;
        }
        set
        {
          this._c_BackingField = value;
        }
      }

      public virtual double d
      {
        get
        {
          return this._d_BackingField;
        }
        set
        {
          this._d_BackingField = value;
        }
      }

      public virtual double e
      {
        get
        {
          return this._e_BackingField;
        }
        set
        {
          this._e_BackingField = value;
        }
      }

      public virtual double f
      {
        get
        {
          return this._f_BackingField;
        }
        set
        {
          this._f_BackingField = value;
        }
      }

      public virtual double m11
      {
        get
        {
          return this._m11_BackingField;
        }
        set
        {
          this._m11_BackingField = value;
        }
      }

      public virtual double m12
      {
        get
        {
          return this._m12_BackingField;
        }
        set
        {
          this._m12_BackingField = value;
        }
      }

      public virtual double m13
      {
        get
        {
          return this._m13_BackingField;
        }
        set
        {
          this._m13_BackingField = value;
        }
      }

      public virtual double m14
      {
        get
        {
          return this._m14_BackingField;
        }
        set
        {
          this._m14_BackingField = value;
        }
      }

      public virtual double m21
      {
        get
        {
          return this._m21_BackingField;
        }
        set
        {
          this._m21_BackingField = value;
        }
      }

      public virtual double m22
      {
        get
        {
          return this._m22_BackingField;
        }
        set
        {
          this._m22_BackingField = value;
        }
      }

      public virtual double m23
      {
        get
        {
          return this._m23_BackingField;
        }
        set
        {
          this._m23_BackingField = value;
        }
      }

      public virtual double m24
      {
        get
        {
          return this._m24_BackingField;
        }
        set
        {
          this._m24_BackingField = value;
        }
      }

      public virtual double m31
      {
        get
        {
          return this._m31_BackingField;
        }
        set
        {
          this._m31_BackingField = value;
        }
      }

      public virtual double m32
      {
        get
        {
          return this._m32_BackingField;
        }
        set
        {
          this._m32_BackingField = value;
        }
      }

      public virtual double m33
      {
        get
        {
          return this._m33_BackingField;
        }
        set
        {
          this._m33_BackingField = value;
        }
      }

      public virtual double m34
      {
        get
        {
          return this._m34_BackingField;
        }
        set
        {
          this._m34_BackingField = value;
        }
      }

      public virtual double m41
      {
        get
        {
          return this._m41_BackingField;
        }
        set
        {
          this._m41_BackingField = value;
        }
      }

      public virtual double m42
      {
        get
        {
          return this._m42_BackingField;
        }
        set
        {
          this._m42_BackingField = value;
        }
      }

      public virtual double m43
      {
        get
        {
          return this._m43_BackingField;
        }
        set
        {
          this._m43_BackingField = value;
        }
      }

      public virtual double m44
      {
        get
        {
          return this._m44_BackingField;
        }
        set
        {
          this._m44_BackingField = value;
        }
      }

      public virtual extern dom.WebKitCSSMatrix inverse();

      public virtual extern dom.WebKitCSSMatrix multiply(dom.WebKitCSSMatrix secondMatrix);

      public virtual extern dom.WebKitCSSMatrix rotate(double angleX);

      public virtual extern dom.WebKitCSSMatrix rotate(double angleX, double angleY);

      public virtual extern dom.WebKitCSSMatrix rotate(
        double angleX,
        double angleY,
        double angleZ);

      public virtual extern dom.WebKitCSSMatrix rotateAxisAngle(
        double x,
        double y,
        double z,
        double angle);

      public virtual extern dom.WebKitCSSMatrix scale(double scaleX);

      public virtual extern dom.WebKitCSSMatrix scale(double scaleX, double scaleY);

      public virtual extern dom.WebKitCSSMatrix scale(
        double scaleX,
        double scaleY,
        double scaleZ);

      public virtual extern void setMatrixValue(string value);

      public virtual extern dom.WebKitCSSMatrix skewX(double angle);

      public virtual extern dom.WebKitCSSMatrix skewY(double angle);

      public virtual extern string toString();

      public virtual extern dom.WebKitCSSMatrix translate(double x, double y);

      public virtual extern dom.WebKitCSSMatrix translate(double x, double y, double z);
    }

    [CombinedClass]
    [FormerInterface]
    public class WebKitDirectoryEntry : dom.WebKitEntry
    {
      private static dom.WebKitDirectoryEntry _prototype_BackingField;

      public static dom.WebKitDirectoryEntry prototype
      {
        get
        {
          return dom.WebKitDirectoryEntry._prototype_BackingField;
        }
        set
        {
          dom.WebKitDirectoryEntry._prototype_BackingField = value;
        }
      }

      public virtual extern dom.WebKitDirectoryReader createReader();
    }

    [CombinedClass]
    [FormerInterface]
    public class WebKitDirectoryReader : IObject
    {
      private static dom.WebKitDirectoryReader _prototype_BackingField;

      public static dom.WebKitDirectoryReader prototype
      {
        get
        {
          return dom.WebKitDirectoryReader._prototype_BackingField;
        }
        set
        {
          dom.WebKitDirectoryReader._prototype_BackingField = value;
        }
      }

      public virtual extern void readEntries(dom.WebKitEntriesCallback successCallback);

      public virtual extern void readEntries(
        Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> successCallback);

      public virtual extern void readEntries(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackFn successCallback);

      public virtual extern void readEntries(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig successCallback);

      public virtual extern void readEntries(
        dom.WebKitEntriesCallback successCallback,
        dom.WebKitErrorCallback errorCallback);

      public virtual extern void readEntries(
        Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> successCallback,
        Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

      public virtual extern void readEntries(
        Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

      public virtual extern void readEntries(
        Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);

      public virtual extern void readEntries(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackFn successCallback,
        Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

      public virtual extern void readEntries(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackFn successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

      public virtual extern void readEntries(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackFn successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);

      public virtual extern void readEntries(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig successCallback,
        Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

      public virtual extern void readEntries(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

      public virtual extern void readEntries(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);
    }

    [CombinedClass]
    [FormerInterface]
    public class WebKitEntry : IObject
    {
      private static dom.WebKitEntry _prototype_BackingField;
      private readonly dom.WebKitFileSystem _filesystem_BackingField;
      private readonly string _fullPath_BackingField;
      private readonly bool _isDirectory_BackingField;
      private readonly bool _isFile_BackingField;
      private readonly string _name_BackingField;

      public static dom.WebKitEntry prototype
      {
        get
        {
          return dom.WebKitEntry._prototype_BackingField;
        }
        set
        {
          dom.WebKitEntry._prototype_BackingField = value;
        }
      }

      public virtual dom.WebKitFileSystem filesystem
      {
        get
        {
          return this._filesystem_BackingField;
        }
      }

      public virtual string fullPath
      {
        get
        {
          return this._fullPath_BackingField;
        }
      }

      public virtual bool isDirectory
      {
        get
        {
          return this._isDirectory_BackingField;
        }
      }

      public virtual bool isFile
      {
        get
        {
          return this._isFile_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebKitFileEntry : dom.WebKitEntry
    {
      private static dom.WebKitFileEntry _prototype_BackingField;

      public static dom.WebKitFileEntry prototype
      {
        get
        {
          return dom.WebKitFileEntry._prototype_BackingField;
        }
        set
        {
          dom.WebKitFileEntry._prototype_BackingField = value;
        }
      }

      public virtual extern void file(dom.WebKitFileCallback successCallback);

      public virtual extern void file(
        Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> successCallback);

      public virtual extern void file(
        dom.WebKitFileCallback.WebKitFileCallbackFn successCallback);

      public virtual extern void file(
        dom.WebKitFileCallback.WebKitFileCallbackConfig successCallback);

      public virtual extern void file(
        dom.WebKitFileCallback successCallback,
        dom.WebKitErrorCallback errorCallback);

      public virtual extern void file(
        Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> successCallback,
        Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

      public virtual extern void file(
        Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

      public virtual extern void file(
        Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);

      public virtual extern void file(
        dom.WebKitFileCallback.WebKitFileCallbackFn successCallback,
        Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

      public virtual extern void file(
        dom.WebKitFileCallback.WebKitFileCallbackFn successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

      public virtual extern void file(
        dom.WebKitFileCallback.WebKitFileCallbackFn successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);

      public virtual extern void file(
        dom.WebKitFileCallback.WebKitFileCallbackConfig successCallback,
        Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

      public virtual extern void file(
        dom.WebKitFileCallback.WebKitFileCallbackConfig successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

      public virtual extern void file(
        dom.WebKitFileCallback.WebKitFileCallbackConfig successCallback,
        dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);
    }

    [CombinedClass]
    [FormerInterface]
    public class WebKitFileSystem : IObject
    {
      private static dom.WebKitFileSystem _prototype_BackingField;
      private readonly string _name_BackingField;
      private readonly dom.WebKitDirectoryEntry _root_BackingField;

      public static dom.WebKitFileSystem prototype
      {
        get
        {
          return dom.WebKitFileSystem._prototype_BackingField;
        }
        set
        {
          dom.WebKitFileSystem._prototype_BackingField = value;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
      }

      public virtual dom.WebKitDirectoryEntry root
      {
        get
        {
          return this._root_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebKitPoint : IObject
    {
      private static dom.WebKitPoint _prototype_BackingField;
      private double _x_BackingField;
      private double _y_BackingField;

      public extern WebKitPoint();

      public extern WebKitPoint(double x);

      public extern WebKitPoint(double x, double y);

      public static dom.WebKitPoint prototype
      {
        get
        {
          return dom.WebKitPoint._prototype_BackingField;
        }
        set
        {
          dom.WebKitPoint._prototype_BackingField = value;
        }
      }

      public virtual double x
      {
        get
        {
          return this._x_BackingField;
        }
        set
        {
          this._x_BackingField = value;
        }
      }

      public virtual double y
      {
        get
        {
          return this._y_BackingField;
        }
        set
        {
          this._y_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WebSocketEventMap : IObject
    {
      private dom.CloseEvent _close_BackingField;
      private dom.Event _error_BackingField;
      private dom.MessageEvent _message_BackingField;
      private dom.Event _open_BackingField;

      public dom.CloseEvent close
      {
        get
        {
          return this._close_BackingField;
        }
        set
        {
          this._close_BackingField = value;
        }
      }

      public dom.Event error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.MessageEvent message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      public dom.Event open
      {
        get
        {
          return this._open_BackingField;
        }
        set
        {
          this._open_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"close\"")]
        public static readonly KeyOf<dom.WebSocketEventMap> close;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.WebSocketEventMap> error;
        [Template("\"message\"")]
        public static readonly KeyOf<dom.WebSocketEventMap> message;
        [Template("\"open\"")]
        public static readonly KeyOf<dom.WebSocketEventMap> open;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class WebSocket : dom.EventTarget
    {
      private static dom.WebSocket _prototype_BackingField;
      private static readonly ushort _CLOSED_Static_BackingField;
      private static readonly ushort _CLOSING_Static_BackingField;
      private static readonly ushort _CONNECTING_Static_BackingField;
      private static readonly ushort _OPEN_Static_BackingField;
      private dom.BinaryType _binaryType_BackingField;
      private readonly ulong _bufferedAmount_BackingField;
      private readonly string _extensions_BackingField;
      private dom.WebSocket.oncloseFn _onclose_BackingField;
      private dom.WebSocket.onerrorFn _onerror_BackingField;
      private dom.WebSocket.onmessageFn _onmessage_BackingField;
      private dom.WebSocket.onerrorFn _onopen_BackingField;
      private readonly string _protocol_BackingField;
      private readonly ushort _readyState_BackingField;
      private readonly string _url_BackingField;
      private readonly ushort _CLOSED_BackingField;
      private readonly ushort _CLOSING_BackingField;
      private readonly ushort _CONNECTING_BackingField;
      private readonly ushort _OPEN_BackingField;

      public extern WebSocket(string url);

      public extern WebSocket(string url, Union<string, string[]> protocols);

      public extern WebSocket(string url, string protocols);

      public extern WebSocket(string url, string[] protocols);

      public static dom.WebSocket prototype
      {
        get
        {
          return dom.WebSocket._prototype_BackingField;
        }
        set
        {
          dom.WebSocket._prototype_BackingField = value;
        }
      }

      [Name("CLOSED")]
      public static ushort CLOSED_Static
      {
        get
        {
          return dom.WebSocket._CLOSED_Static_BackingField;
        }
      }

      [Name("CLOSING")]
      public static ushort CLOSING_Static
      {
        get
        {
          return dom.WebSocket._CLOSING_Static_BackingField;
        }
      }

      [Name("CONNECTING")]
      public static ushort CONNECTING_Static
      {
        get
        {
          return dom.WebSocket._CONNECTING_Static_BackingField;
        }
      }

      [Name("OPEN")]
      public static ushort OPEN_Static
      {
        get
        {
          return dom.WebSocket._OPEN_Static_BackingField;
        }
      }

      public virtual dom.BinaryType binaryType
      {
        get
        {
          return this._binaryType_BackingField;
        }
        set
        {
          this._binaryType_BackingField = value;
        }
      }

      public virtual ulong bufferedAmount
      {
        get
        {
          return this._bufferedAmount_BackingField;
        }
      }

      public virtual string extensions
      {
        get
        {
          return this._extensions_BackingField;
        }
      }

      public virtual dom.WebSocket.oncloseFn onclose
      {
        get
        {
          return this._onclose_BackingField;
        }
        set
        {
          this._onclose_BackingField = value;
        }
      }

      public virtual dom.WebSocket.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.WebSocket.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual dom.WebSocket.onerrorFn onopen
      {
        get
        {
          return this._onopen_BackingField;
        }
        set
        {
          this._onopen_BackingField = value;
        }
      }

      public virtual string protocol
      {
        get
        {
          return this._protocol_BackingField;
        }
      }

      public virtual ushort readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual string url
      {
        get
        {
          return this._url_BackingField;
        }
      }

      public virtual extern void close();

      public virtual extern void close(ushort code);

      public virtual extern void close(ushort code, string reason);

      public virtual extern void send(
        Union<string, es5.ArrayBufferLike, dom.Blob, es5.ArrayBufferView> data);

      public virtual extern void send(string data);

      public virtual extern void send(es5.ArrayBufferLike data);

      public virtual extern void send(es5.ArrayBuffer data);

      public virtual extern void send(dom.Blob data);

      public virtual extern void send(es5.ArrayBufferView data);

      public virtual ushort CLOSED
      {
        get
        {
          return this._CLOSED_BackingField;
        }
      }

      public virtual ushort CLOSING
      {
        get
        {
          return this._CLOSING_BackingField;
        }
      }

      public virtual ushort CONNECTING
      {
        get
        {
          return this._CONNECTING_BackingField;
        }
      }

      public virtual ushort OPEN
      {
        get
        {
          return this._OPEN_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WebSocket.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WebSocket.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WebSocket.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.WebSocket.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WebSocket.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WebSocket.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WebSocket.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.WebSocket.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void oncloseFn(dom.CloseEvent ev);

      [Generated]
      public delegate void onerrorFn(dom.Event ev);

      [Generated]
      public delegate void onmessageFn(dom.MessageEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class WheelEvent : dom.MouseEvent
    {
      private static dom.WheelEvent _prototype_BackingField;
      private static readonly uint _DOM_DELTA_LINE_Static_BackingField;
      private static readonly uint _DOM_DELTA_PAGE_Static_BackingField;
      private static readonly uint _DOM_DELTA_PIXEL_Static_BackingField;
      private readonly uint _deltaMode_BackingField;
      private readonly double _deltaX_BackingField;
      private readonly double _deltaY_BackingField;
      private readonly double _deltaZ_BackingField;
      private readonly double _wheelDelta_BackingField;
      private readonly double _wheelDeltaX_BackingField;
      private readonly double _wheelDeltaY_BackingField;
      private readonly uint _DOM_DELTA_LINE_BackingField;
      private readonly uint _DOM_DELTA_PAGE_BackingField;
      private readonly uint _DOM_DELTA_PIXEL_BackingField;

      public extern WheelEvent(string typeArg);

      public extern WheelEvent(string typeArg, dom.WheelEventInit eventInitDict);

      public static dom.WheelEvent prototype
      {
        get
        {
          return dom.WheelEvent._prototype_BackingField;
        }
        set
        {
          dom.WheelEvent._prototype_BackingField = value;
        }
      }

      [Name("DOM_DELTA_LINE")]
      public static uint DOM_DELTA_LINE_Static
      {
        get
        {
          return dom.WheelEvent._DOM_DELTA_LINE_Static_BackingField;
        }
      }

      [Name("DOM_DELTA_PAGE")]
      public static uint DOM_DELTA_PAGE_Static
      {
        get
        {
          return dom.WheelEvent._DOM_DELTA_PAGE_Static_BackingField;
        }
      }

      [Name("DOM_DELTA_PIXEL")]
      public static uint DOM_DELTA_PIXEL_Static
      {
        get
        {
          return dom.WheelEvent._DOM_DELTA_PIXEL_Static_BackingField;
        }
      }

      public virtual uint deltaMode
      {
        get
        {
          return this._deltaMode_BackingField;
        }
      }

      public virtual double deltaX
      {
        get
        {
          return this._deltaX_BackingField;
        }
      }

      public virtual double deltaY
      {
        get
        {
          return this._deltaY_BackingField;
        }
      }

      public virtual double deltaZ
      {
        get
        {
          return this._deltaZ_BackingField;
        }
      }

      public virtual double wheelDelta
      {
        get
        {
          return this._wheelDelta_BackingField;
        }
      }

      public virtual double wheelDeltaX
      {
        get
        {
          return this._wheelDeltaX_BackingField;
        }
      }

      public virtual double wheelDeltaY
      {
        get
        {
          return this._wheelDeltaY_BackingField;
        }
      }

      public virtual extern void getCurrentPoint(dom.Element element);

      public virtual extern void initWheelEvent(
        string typeArg,
        bool canBubbleArg,
        bool cancelableArg,
        dom.Window viewArg,
        double detailArg,
        double screenXArg,
        double screenYArg,
        double clientXArg,
        double clientYArg,
        double buttonArg,
        dom.EventTarget relatedTargetArg,
        string modifiersListArg,
        double deltaXArg,
        double deltaYArg,
        double deltaZArg,
        double deltaMode);

      public virtual uint DOM_DELTA_LINE
      {
        get
        {
          return this._DOM_DELTA_LINE_BackingField;
        }
      }

      public virtual uint DOM_DELTA_PAGE
      {
        get
        {
          return this._DOM_DELTA_PAGE_BackingField;
        }
      }

      public virtual uint DOM_DELTA_PIXEL
      {
        get
        {
          return this._DOM_DELTA_PIXEL_BackingField;
        }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WindowEventMap : dom.GlobalEventHandlersEventMap
    {
      private dom.UIEvent _abort_BackingField;
      private dom.BeforeUnloadEvent _beforeunload_BackingField;
      private dom.FocusEvent _blur_BackingField;
      private dom.Event _canplay_BackingField;
      private dom.Event _canplaythrough_BackingField;
      private dom.Event _change_BackingField;
      private dom.MouseEvent _click_BackingField;
      private dom.Event _compassneedscalibration_BackingField;
      private dom.PointerEvent _contextmenu_BackingField;
      private dom.MouseEvent _dblclick_BackingField;
      private dom.DeviceLightEvent _devicelight_BackingField;
      private dom.DeviceMotionEvent _devicemotion_BackingField;
      private dom.DeviceOrientationEvent _deviceorientation_BackingField;
      private dom.DragEvent _drag_BackingField;
      private dom.DragEvent _dragend_BackingField;
      private dom.DragEvent _dragenter_BackingField;
      private dom.DragEvent _dragleave_BackingField;
      private dom.DragEvent _dragover_BackingField;
      private dom.DragEvent _dragstart_BackingField;
      private dom.DragEvent _drop_BackingField;
      private dom.Event _durationchange_BackingField;
      private dom.Event _emptied_BackingField;
      private dom.Event _ended_BackingField;
      private dom.ErrorEvent _error_BackingField;
      private dom.FocusEvent _focus_BackingField;
      private dom.HashChangeEvent _hashchange_BackingField;
      private dom.Event _input_BackingField;
      private dom.Event _invalid_BackingField;
      private dom.KeyboardEvent _keydown_BackingField;
      private dom.KeyboardEvent _keypress_BackingField;
      private dom.KeyboardEvent _keyup_BackingField;
      private dom.Event _load_BackingField;
      private dom.Event _loadeddata_BackingField;
      private dom.Event _loadedmetadata_BackingField;
      private dom.Event _loadstart_BackingField;
      private dom.MessageEvent _message_BackingField;
      private dom.MouseEvent _mousedown_BackingField;
      private dom.MouseEvent _mouseenter_BackingField;
      private dom.MouseEvent _mouseleave_BackingField;
      private dom.MouseEvent _mousemove_BackingField;
      private dom.MouseEvent _mouseout_BackingField;
      private dom.MouseEvent _mouseover_BackingField;
      private dom.MouseEvent _mouseup_BackingField;
      private dom.WheelEvent _mousewheel_BackingField;
      private dom.Event _MSGestureChange_BackingField;
      private dom.Event _MSGestureDoubleTap_BackingField;
      private dom.Event _MSGestureEnd_BackingField;
      private dom.Event _MSGestureHold_BackingField;
      private dom.Event _MSGestureStart_BackingField;
      private dom.Event _MSGestureTap_BackingField;
      private dom.Event _MSInertiaStart_BackingField;
      private dom.Event _MSPointerCancel_BackingField;
      private dom.Event _MSPointerDown_BackingField;
      private dom.Event _MSPointerEnter_BackingField;
      private dom.Event _MSPointerLeave_BackingField;
      private dom.Event _MSPointerMove_BackingField;
      private dom.Event _MSPointerOut_BackingField;
      private dom.Event _MSPointerOver_BackingField;
      private dom.Event _MSPointerUp_BackingField;
      private dom.Event _offline_BackingField;
      private dom.Event _online_BackingField;
      private dom.Event _orientationchange_BackingField;
      private dom.PageTransitionEvent _pagehide_BackingField;
      private dom.PageTransitionEvent _pageshow_BackingField;
      private dom.Event _pause_BackingField;
      private dom.Event _play_BackingField;
      private dom.Event _playing_BackingField;
      private dom.PopStateEvent _popstate_BackingField;
      private dom.ProgressEvent _progress_BackingField;
      private dom.Event _ratechange_BackingField;
      private dom.ProgressEvent _readystatechange_BackingField;
      private dom.Event _reset_BackingField;
      private dom.UIEvent _resize_BackingField;
      private dom.UIEvent _scroll_BackingField;
      private dom.Event _seeked_BackingField;
      private dom.Event _seeking_BackingField;
      private dom.UIEvent _select_BackingField;
      private dom.Event _stalled_BackingField;
      private dom.StorageEvent _storage_BackingField;
      private dom.Event _submit_BackingField;
      private dom.Event _suspend_BackingField;
      private dom.Event _timeupdate_BackingField;
      private dom.TouchEvent _touchcancel_BackingField;
      private dom.TouchEvent _touchend_BackingField;
      private dom.TouchEvent _touchmove_BackingField;
      private dom.TouchEvent _touchstart_BackingField;
      private dom.Event _unload_BackingField;
      private dom.Event _volumechange_BackingField;
      private dom.Event _vrdisplayactivate_BackingField;
      private dom.Event _vrdisplayblur_BackingField;
      private dom.Event _vrdisplayconnect_BackingField;
      private dom.Event _vrdisplaydeactivate_BackingField;
      private dom.Event _vrdisplaydisconnect_BackingField;
      private dom.Event _vrdisplayfocus_BackingField;
      private dom.Event _vrdisplaypointerrestricted_BackingField;
      private dom.Event _vrdisplaypointerunrestricted_BackingField;
      private dom.Event _vrdisplaypresentchange_BackingField;
      private dom.Event _waiting_BackingField;

      public dom.UIEvent abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      public dom.BeforeUnloadEvent beforeunload
      {
        get
        {
          return this._beforeunload_BackingField;
        }
        set
        {
          this._beforeunload_BackingField = value;
        }
      }

      public dom.FocusEvent blur
      {
        get
        {
          return this._blur_BackingField;
        }
        set
        {
          this._blur_BackingField = value;
        }
      }

      public dom.Event canplay
      {
        get
        {
          return this._canplay_BackingField;
        }
        set
        {
          this._canplay_BackingField = value;
        }
      }

      public dom.Event canplaythrough
      {
        get
        {
          return this._canplaythrough_BackingField;
        }
        set
        {
          this._canplaythrough_BackingField = value;
        }
      }

      public dom.Event change
      {
        get
        {
          return this._change_BackingField;
        }
        set
        {
          this._change_BackingField = value;
        }
      }

      public dom.MouseEvent click
      {
        get
        {
          return this._click_BackingField;
        }
        set
        {
          this._click_BackingField = value;
        }
      }

      public dom.Event compassneedscalibration
      {
        get
        {
          return this._compassneedscalibration_BackingField;
        }
        set
        {
          this._compassneedscalibration_BackingField = value;
        }
      }

      public dom.PointerEvent contextmenu
      {
        get
        {
          return this._contextmenu_BackingField;
        }
        set
        {
          this._contextmenu_BackingField = value;
        }
      }

      public dom.MouseEvent dblclick
      {
        get
        {
          return this._dblclick_BackingField;
        }
        set
        {
          this._dblclick_BackingField = value;
        }
      }

      public dom.DeviceLightEvent devicelight
      {
        get
        {
          return this._devicelight_BackingField;
        }
        set
        {
          this._devicelight_BackingField = value;
        }
      }

      public dom.DeviceMotionEvent devicemotion
      {
        get
        {
          return this._devicemotion_BackingField;
        }
        set
        {
          this._devicemotion_BackingField = value;
        }
      }

      public dom.DeviceOrientationEvent deviceorientation
      {
        get
        {
          return this._deviceorientation_BackingField;
        }
        set
        {
          this._deviceorientation_BackingField = value;
        }
      }

      public dom.DragEvent drag
      {
        get
        {
          return this._drag_BackingField;
        }
        set
        {
          this._drag_BackingField = value;
        }
      }

      public dom.DragEvent dragend
      {
        get
        {
          return this._dragend_BackingField;
        }
        set
        {
          this._dragend_BackingField = value;
        }
      }

      public dom.DragEvent dragenter
      {
        get
        {
          return this._dragenter_BackingField;
        }
        set
        {
          this._dragenter_BackingField = value;
        }
      }

      public dom.DragEvent dragleave
      {
        get
        {
          return this._dragleave_BackingField;
        }
        set
        {
          this._dragleave_BackingField = value;
        }
      }

      public dom.DragEvent dragover
      {
        get
        {
          return this._dragover_BackingField;
        }
        set
        {
          this._dragover_BackingField = value;
        }
      }

      public dom.DragEvent dragstart
      {
        get
        {
          return this._dragstart_BackingField;
        }
        set
        {
          this._dragstart_BackingField = value;
        }
      }

      public dom.DragEvent drop
      {
        get
        {
          return this._drop_BackingField;
        }
        set
        {
          this._drop_BackingField = value;
        }
      }

      public dom.Event durationchange
      {
        get
        {
          return this._durationchange_BackingField;
        }
        set
        {
          this._durationchange_BackingField = value;
        }
      }

      public dom.Event emptied
      {
        get
        {
          return this._emptied_BackingField;
        }
        set
        {
          this._emptied_BackingField = value;
        }
      }

      public dom.Event ended
      {
        get
        {
          return this._ended_BackingField;
        }
        set
        {
          this._ended_BackingField = value;
        }
      }

      public dom.ErrorEvent error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.FocusEvent focus
      {
        get
        {
          return this._focus_BackingField;
        }
        set
        {
          this._focus_BackingField = value;
        }
      }

      public dom.HashChangeEvent hashchange
      {
        get
        {
          return this._hashchange_BackingField;
        }
        set
        {
          this._hashchange_BackingField = value;
        }
      }

      public dom.Event input
      {
        get
        {
          return this._input_BackingField;
        }
        set
        {
          this._input_BackingField = value;
        }
      }

      public dom.Event invalid
      {
        get
        {
          return this._invalid_BackingField;
        }
        set
        {
          this._invalid_BackingField = value;
        }
      }

      public dom.KeyboardEvent keydown
      {
        get
        {
          return this._keydown_BackingField;
        }
        set
        {
          this._keydown_BackingField = value;
        }
      }

      public dom.KeyboardEvent keypress
      {
        get
        {
          return this._keypress_BackingField;
        }
        set
        {
          this._keypress_BackingField = value;
        }
      }

      public dom.KeyboardEvent keyup
      {
        get
        {
          return this._keyup_BackingField;
        }
        set
        {
          this._keyup_BackingField = value;
        }
      }

      public dom.Event load
      {
        get
        {
          return this._load_BackingField;
        }
        set
        {
          this._load_BackingField = value;
        }
      }

      public dom.Event loadeddata
      {
        get
        {
          return this._loadeddata_BackingField;
        }
        set
        {
          this._loadeddata_BackingField = value;
        }
      }

      public dom.Event loadedmetadata
      {
        get
        {
          return this._loadedmetadata_BackingField;
        }
        set
        {
          this._loadedmetadata_BackingField = value;
        }
      }

      public dom.Event loadstart
      {
        get
        {
          return this._loadstart_BackingField;
        }
        set
        {
          this._loadstart_BackingField = value;
        }
      }

      public dom.MessageEvent message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      public dom.MouseEvent mousedown
      {
        get
        {
          return this._mousedown_BackingField;
        }
        set
        {
          this._mousedown_BackingField = value;
        }
      }

      public dom.MouseEvent mouseenter
      {
        get
        {
          return this._mouseenter_BackingField;
        }
        set
        {
          this._mouseenter_BackingField = value;
        }
      }

      public dom.MouseEvent mouseleave
      {
        get
        {
          return this._mouseleave_BackingField;
        }
        set
        {
          this._mouseleave_BackingField = value;
        }
      }

      public dom.MouseEvent mousemove
      {
        get
        {
          return this._mousemove_BackingField;
        }
        set
        {
          this._mousemove_BackingField = value;
        }
      }

      public dom.MouseEvent mouseout
      {
        get
        {
          return this._mouseout_BackingField;
        }
        set
        {
          this._mouseout_BackingField = value;
        }
      }

      public dom.MouseEvent mouseover
      {
        get
        {
          return this._mouseover_BackingField;
        }
        set
        {
          this._mouseover_BackingField = value;
        }
      }

      public dom.MouseEvent mouseup
      {
        get
        {
          return this._mouseup_BackingField;
        }
        set
        {
          this._mouseup_BackingField = value;
        }
      }

      public dom.WheelEvent mousewheel
      {
        get
        {
          return this._mousewheel_BackingField;
        }
        set
        {
          this._mousewheel_BackingField = value;
        }
      }

      public dom.Event MSGestureChange
      {
        get
        {
          return this._MSGestureChange_BackingField;
        }
        set
        {
          this._MSGestureChange_BackingField = value;
        }
      }

      public dom.Event MSGestureDoubleTap
      {
        get
        {
          return this._MSGestureDoubleTap_BackingField;
        }
        set
        {
          this._MSGestureDoubleTap_BackingField = value;
        }
      }

      public dom.Event MSGestureEnd
      {
        get
        {
          return this._MSGestureEnd_BackingField;
        }
        set
        {
          this._MSGestureEnd_BackingField = value;
        }
      }

      public dom.Event MSGestureHold
      {
        get
        {
          return this._MSGestureHold_BackingField;
        }
        set
        {
          this._MSGestureHold_BackingField = value;
        }
      }

      public dom.Event MSGestureStart
      {
        get
        {
          return this._MSGestureStart_BackingField;
        }
        set
        {
          this._MSGestureStart_BackingField = value;
        }
      }

      public dom.Event MSGestureTap
      {
        get
        {
          return this._MSGestureTap_BackingField;
        }
        set
        {
          this._MSGestureTap_BackingField = value;
        }
      }

      public dom.Event MSInertiaStart
      {
        get
        {
          return this._MSInertiaStart_BackingField;
        }
        set
        {
          this._MSInertiaStart_BackingField = value;
        }
      }

      public dom.Event MSPointerCancel
      {
        get
        {
          return this._MSPointerCancel_BackingField;
        }
        set
        {
          this._MSPointerCancel_BackingField = value;
        }
      }

      public dom.Event MSPointerDown
      {
        get
        {
          return this._MSPointerDown_BackingField;
        }
        set
        {
          this._MSPointerDown_BackingField = value;
        }
      }

      public dom.Event MSPointerEnter
      {
        get
        {
          return this._MSPointerEnter_BackingField;
        }
        set
        {
          this._MSPointerEnter_BackingField = value;
        }
      }

      public dom.Event MSPointerLeave
      {
        get
        {
          return this._MSPointerLeave_BackingField;
        }
        set
        {
          this._MSPointerLeave_BackingField = value;
        }
      }

      public dom.Event MSPointerMove
      {
        get
        {
          return this._MSPointerMove_BackingField;
        }
        set
        {
          this._MSPointerMove_BackingField = value;
        }
      }

      public dom.Event MSPointerOut
      {
        get
        {
          return this._MSPointerOut_BackingField;
        }
        set
        {
          this._MSPointerOut_BackingField = value;
        }
      }

      public dom.Event MSPointerOver
      {
        get
        {
          return this._MSPointerOver_BackingField;
        }
        set
        {
          this._MSPointerOver_BackingField = value;
        }
      }

      public dom.Event MSPointerUp
      {
        get
        {
          return this._MSPointerUp_BackingField;
        }
        set
        {
          this._MSPointerUp_BackingField = value;
        }
      }

      public dom.Event offline
      {
        get
        {
          return this._offline_BackingField;
        }
        set
        {
          this._offline_BackingField = value;
        }
      }

      public dom.Event online
      {
        get
        {
          return this._online_BackingField;
        }
        set
        {
          this._online_BackingField = value;
        }
      }

      public dom.Event orientationchange
      {
        get
        {
          return this._orientationchange_BackingField;
        }
        set
        {
          this._orientationchange_BackingField = value;
        }
      }

      public dom.PageTransitionEvent pagehide
      {
        get
        {
          return this._pagehide_BackingField;
        }
        set
        {
          this._pagehide_BackingField = value;
        }
      }

      public dom.PageTransitionEvent pageshow
      {
        get
        {
          return this._pageshow_BackingField;
        }
        set
        {
          this._pageshow_BackingField = value;
        }
      }

      public dom.Event pause
      {
        get
        {
          return this._pause_BackingField;
        }
        set
        {
          this._pause_BackingField = value;
        }
      }

      public dom.Event play
      {
        get
        {
          return this._play_BackingField;
        }
        set
        {
          this._play_BackingField = value;
        }
      }

      public dom.Event playing
      {
        get
        {
          return this._playing_BackingField;
        }
        set
        {
          this._playing_BackingField = value;
        }
      }

      public dom.PopStateEvent popstate
      {
        get
        {
          return this._popstate_BackingField;
        }
        set
        {
          this._popstate_BackingField = value;
        }
      }

      public dom.ProgressEvent progress
      {
        get
        {
          return this._progress_BackingField;
        }
        set
        {
          this._progress_BackingField = value;
        }
      }

      public dom.Event ratechange
      {
        get
        {
          return this._ratechange_BackingField;
        }
        set
        {
          this._ratechange_BackingField = value;
        }
      }

      public dom.ProgressEvent readystatechange
      {
        get
        {
          return this._readystatechange_BackingField;
        }
        set
        {
          this._readystatechange_BackingField = value;
        }
      }

      public dom.Event reset
      {
        get
        {
          return this._reset_BackingField;
        }
        set
        {
          this._reset_BackingField = value;
        }
      }

      public dom.UIEvent resize
      {
        get
        {
          return this._resize_BackingField;
        }
        set
        {
          this._resize_BackingField = value;
        }
      }

      public dom.UIEvent scroll
      {
        get
        {
          return this._scroll_BackingField;
        }
        set
        {
          this._scroll_BackingField = value;
        }
      }

      public dom.Event seeked
      {
        get
        {
          return this._seeked_BackingField;
        }
        set
        {
          this._seeked_BackingField = value;
        }
      }

      public dom.Event seeking
      {
        get
        {
          return this._seeking_BackingField;
        }
        set
        {
          this._seeking_BackingField = value;
        }
      }

      public dom.UIEvent select
      {
        get
        {
          return this._select_BackingField;
        }
        set
        {
          this._select_BackingField = value;
        }
      }

      public dom.Event stalled
      {
        get
        {
          return this._stalled_BackingField;
        }
        set
        {
          this._stalled_BackingField = value;
        }
      }

      public dom.StorageEvent storage
      {
        get
        {
          return this._storage_BackingField;
        }
        set
        {
          this._storage_BackingField = value;
        }
      }

      public dom.Event submit
      {
        get
        {
          return this._submit_BackingField;
        }
        set
        {
          this._submit_BackingField = value;
        }
      }

      public dom.Event suspend
      {
        get
        {
          return this._suspend_BackingField;
        }
        set
        {
          this._suspend_BackingField = value;
        }
      }

      public dom.Event timeupdate
      {
        get
        {
          return this._timeupdate_BackingField;
        }
        set
        {
          this._timeupdate_BackingField = value;
        }
      }

      public dom.TouchEvent touchcancel
      {
        get
        {
          return this._touchcancel_BackingField;
        }
        set
        {
          this._touchcancel_BackingField = value;
        }
      }

      public dom.TouchEvent touchend
      {
        get
        {
          return this._touchend_BackingField;
        }
        set
        {
          this._touchend_BackingField = value;
        }
      }

      public dom.TouchEvent touchmove
      {
        get
        {
          return this._touchmove_BackingField;
        }
        set
        {
          this._touchmove_BackingField = value;
        }
      }

      public dom.TouchEvent touchstart
      {
        get
        {
          return this._touchstart_BackingField;
        }
        set
        {
          this._touchstart_BackingField = value;
        }
      }

      public dom.Event unload
      {
        get
        {
          return this._unload_BackingField;
        }
        set
        {
          this._unload_BackingField = value;
        }
      }

      public dom.Event volumechange
      {
        get
        {
          return this._volumechange_BackingField;
        }
        set
        {
          this._volumechange_BackingField = value;
        }
      }

      public dom.Event vrdisplayactivate
      {
        get
        {
          return this._vrdisplayactivate_BackingField;
        }
        set
        {
          this._vrdisplayactivate_BackingField = value;
        }
      }

      public dom.Event vrdisplayblur
      {
        get
        {
          return this._vrdisplayblur_BackingField;
        }
        set
        {
          this._vrdisplayblur_BackingField = value;
        }
      }

      public dom.Event vrdisplayconnect
      {
        get
        {
          return this._vrdisplayconnect_BackingField;
        }
        set
        {
          this._vrdisplayconnect_BackingField = value;
        }
      }

      public dom.Event vrdisplaydeactivate
      {
        get
        {
          return this._vrdisplaydeactivate_BackingField;
        }
        set
        {
          this._vrdisplaydeactivate_BackingField = value;
        }
      }

      public dom.Event vrdisplaydisconnect
      {
        get
        {
          return this._vrdisplaydisconnect_BackingField;
        }
        set
        {
          this._vrdisplaydisconnect_BackingField = value;
        }
      }

      public dom.Event vrdisplayfocus
      {
        get
        {
          return this._vrdisplayfocus_BackingField;
        }
        set
        {
          this._vrdisplayfocus_BackingField = value;
        }
      }

      public dom.Event vrdisplaypointerrestricted
      {
        get
        {
          return this._vrdisplaypointerrestricted_BackingField;
        }
        set
        {
          this._vrdisplaypointerrestricted_BackingField = value;
        }
      }

      public dom.Event vrdisplaypointerunrestricted
      {
        get
        {
          return this._vrdisplaypointerunrestricted_BackingField;
        }
        set
        {
          this._vrdisplaypointerunrestricted_BackingField = value;
        }
      }

      public dom.Event vrdisplaypresentchange
      {
        get
        {
          return this._vrdisplaypresentchange_BackingField;
        }
        set
        {
          this._vrdisplaypresentchange_BackingField = value;
        }
      }

      public dom.Event waiting
      {
        get
        {
          return this._waiting_BackingField;
        }
        set
        {
          this._waiting_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"abort\"")]
        public static readonly KeyOf<dom.WindowEventMap> abort;
        [Template("\"beforeunload\"")]
        public static readonly KeyOf<dom.WindowEventMap> beforeunload;
        [Template("\"blur\"")]
        public static readonly KeyOf<dom.WindowEventMap> blur;
        [Template("\"canplay\"")]
        public static readonly KeyOf<dom.WindowEventMap> canplay;
        [Template("\"canplaythrough\"")]
        public static readonly KeyOf<dom.WindowEventMap> canplaythrough;
        [Template("\"change\"")]
        public static readonly KeyOf<dom.WindowEventMap> change;
        [Template("\"click\"")]
        public static readonly KeyOf<dom.WindowEventMap> click;
        [Template("\"compassneedscalibration\"")]
        public static readonly KeyOf<dom.WindowEventMap> compassneedscalibration;
        [Template("\"contextmenu\"")]
        public static readonly KeyOf<dom.WindowEventMap> contextmenu;
        [Template("\"dblclick\"")]
        public static readonly KeyOf<dom.WindowEventMap> dblclick;
        [Template("\"devicelight\"")]
        public static readonly KeyOf<dom.WindowEventMap> devicelight;
        [Template("\"devicemotion\"")]
        public static readonly KeyOf<dom.WindowEventMap> devicemotion;
        [Template("\"deviceorientation\"")]
        public static readonly KeyOf<dom.WindowEventMap> deviceorientation;
        [Template("\"drag\"")]
        public static readonly KeyOf<dom.WindowEventMap> drag;
        [Template("\"dragend\"")]
        public static readonly KeyOf<dom.WindowEventMap> dragend;
        [Template("\"dragenter\"")]
        public static readonly KeyOf<dom.WindowEventMap> dragenter;
        [Template("\"dragleave\"")]
        public static readonly KeyOf<dom.WindowEventMap> dragleave;
        [Template("\"dragover\"")]
        public static readonly KeyOf<dom.WindowEventMap> dragover;
        [Template("\"dragstart\"")]
        public static readonly KeyOf<dom.WindowEventMap> dragstart;
        [Template("\"drop\"")]
        public static readonly KeyOf<dom.WindowEventMap> drop;
        [Template("\"durationchange\"")]
        public static readonly KeyOf<dom.WindowEventMap> durationchange;
        [Template("\"emptied\"")]
        public static readonly KeyOf<dom.WindowEventMap> emptied;
        [Template("\"ended\"")]
        public static readonly KeyOf<dom.WindowEventMap> ended;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.WindowEventMap> error;
        [Template("\"focus\"")]
        public static readonly KeyOf<dom.WindowEventMap> focus;
        [Template("\"hashchange\"")]
        public static readonly KeyOf<dom.WindowEventMap> hashchange;
        [Template("\"input\"")]
        public static readonly KeyOf<dom.WindowEventMap> input;
        [Template("\"invalid\"")]
        public static readonly KeyOf<dom.WindowEventMap> invalid;
        [Template("\"keydown\"")]
        public static readonly KeyOf<dom.WindowEventMap> keydown;
        [Template("\"keypress\"")]
        public static readonly KeyOf<dom.WindowEventMap> keypress;
        [Template("\"keyup\"")]
        public static readonly KeyOf<dom.WindowEventMap> keyup;
        [Template("\"load\"")]
        public static readonly KeyOf<dom.WindowEventMap> load;
        [Template("\"loadeddata\"")]
        public static readonly KeyOf<dom.WindowEventMap> loadeddata;
        [Template("\"loadedmetadata\"")]
        public static readonly KeyOf<dom.WindowEventMap> loadedmetadata;
        [Template("\"loadstart\"")]
        public static readonly KeyOf<dom.WindowEventMap> loadstart;
        [Template("\"message\"")]
        public static readonly KeyOf<dom.WindowEventMap> message;
        [Template("\"mousedown\"")]
        public static readonly KeyOf<dom.WindowEventMap> mousedown;
        [Template("\"mouseenter\"")]
        public static readonly KeyOf<dom.WindowEventMap> mouseenter;
        [Template("\"mouseleave\"")]
        public static readonly KeyOf<dom.WindowEventMap> mouseleave;
        [Template("\"mousemove\"")]
        public static readonly KeyOf<dom.WindowEventMap> mousemove;
        [Template("\"mouseout\"")]
        public static readonly KeyOf<dom.WindowEventMap> mouseout;
        [Template("\"mouseover\"")]
        public static readonly KeyOf<dom.WindowEventMap> mouseover;
        [Template("\"mouseup\"")]
        public static readonly KeyOf<dom.WindowEventMap> mouseup;
        [Template("\"mousewheel\"")]
        public static readonly KeyOf<dom.WindowEventMap> mousewheel;
        [Template("\"MSGestureChange\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSGestureChange;
        [Template("\"MSGestureDoubleTap\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSGestureDoubleTap;
        [Template("\"MSGestureEnd\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSGestureEnd;
        [Template("\"MSGestureHold\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSGestureHold;
        [Template("\"MSGestureStart\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSGestureStart;
        [Template("\"MSGestureTap\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSGestureTap;
        [Template("\"MSInertiaStart\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSInertiaStart;
        [Template("\"MSPointerCancel\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSPointerCancel;
        [Template("\"MSPointerDown\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSPointerDown;
        [Template("\"MSPointerEnter\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSPointerEnter;
        [Template("\"MSPointerLeave\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSPointerLeave;
        [Template("\"MSPointerMove\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSPointerMove;
        [Template("\"MSPointerOut\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSPointerOut;
        [Template("\"MSPointerOver\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSPointerOver;
        [Template("\"MSPointerUp\"")]
        public static readonly KeyOf<dom.WindowEventMap> MSPointerUp;
        [Template("\"offline\"")]
        public static readonly KeyOf<dom.WindowEventMap> offline;
        [Template("\"online\"")]
        public static readonly KeyOf<dom.WindowEventMap> online;
        [Template("\"orientationchange\"")]
        public static readonly KeyOf<dom.WindowEventMap> orientationchange;
        [Template("\"pagehide\"")]
        public static readonly KeyOf<dom.WindowEventMap> pagehide;
        [Template("\"pageshow\"")]
        public static readonly KeyOf<dom.WindowEventMap> pageshow;
        [Template("\"pause\"")]
        public static readonly KeyOf<dom.WindowEventMap> pause;
        [Template("\"play\"")]
        public static readonly KeyOf<dom.WindowEventMap> play;
        [Template("\"playing\"")]
        public static readonly KeyOf<dom.WindowEventMap> playing;
        [Template("\"popstate\"")]
        public static readonly KeyOf<dom.WindowEventMap> popstate;
        [Template("\"progress\"")]
        public static readonly KeyOf<dom.WindowEventMap> progress;
        [Template("\"ratechange\"")]
        public static readonly KeyOf<dom.WindowEventMap> ratechange;
        [Template("\"readystatechange\"")]
        public static readonly KeyOf<dom.WindowEventMap> readystatechange;
        [Template("\"reset\"")]
        public static readonly KeyOf<dom.WindowEventMap> reset;
        [Template("\"resize\"")]
        public static readonly KeyOf<dom.WindowEventMap> resize;
        [Template("\"scroll\"")]
        public static readonly KeyOf<dom.WindowEventMap> scroll;
        [Template("\"seeked\"")]
        public static readonly KeyOf<dom.WindowEventMap> seeked;
        [Template("\"seeking\"")]
        public static readonly KeyOf<dom.WindowEventMap> seeking;
        [Template("\"select\"")]
        public static readonly KeyOf<dom.WindowEventMap> select;
        [Template("\"stalled\"")]
        public static readonly KeyOf<dom.WindowEventMap> stalled;
        [Template("\"storage\"")]
        public static readonly KeyOf<dom.WindowEventMap> storage;
        [Template("\"submit\"")]
        public static readonly KeyOf<dom.WindowEventMap> submit;
        [Template("\"suspend\"")]
        public static readonly KeyOf<dom.WindowEventMap> suspend;
        [Template("\"timeupdate\"")]
        public static readonly KeyOf<dom.WindowEventMap> timeupdate;
        [Template("\"touchcancel\"")]
        public static readonly KeyOf<dom.WindowEventMap> touchcancel;
        [Template("\"touchend\"")]
        public static readonly KeyOf<dom.WindowEventMap> touchend;
        [Template("\"touchmove\"")]
        public static readonly KeyOf<dom.WindowEventMap> touchmove;
        [Template("\"touchstart\"")]
        public static readonly KeyOf<dom.WindowEventMap> touchstart;
        [Template("\"unload\"")]
        public static readonly KeyOf<dom.WindowEventMap> unload;
        [Template("\"volumechange\"")]
        public static readonly KeyOf<dom.WindowEventMap> volumechange;
        [Template("\"vrdisplayactivate\"")]
        public static readonly KeyOf<dom.WindowEventMap> vrdisplayactivate;
        [Template("\"vrdisplayblur\"")]
        public static readonly KeyOf<dom.WindowEventMap> vrdisplayblur;
        [Template("\"vrdisplayconnect\"")]
        public static readonly KeyOf<dom.WindowEventMap> vrdisplayconnect;
        [Template("\"vrdisplaydeactivate\"")]
        public static readonly KeyOf<dom.WindowEventMap> vrdisplaydeactivate;
        [Template("\"vrdisplaydisconnect\"")]
        public static readonly KeyOf<dom.WindowEventMap> vrdisplaydisconnect;
        [Template("\"vrdisplayfocus\"")]
        public static readonly KeyOf<dom.WindowEventMap> vrdisplayfocus;
        [Template("\"vrdisplaypointerrestricted\"")]
        public static readonly KeyOf<dom.WindowEventMap> vrdisplaypointerrestricted;
        [Template("\"vrdisplaypointerunrestricted\"")]
        public static readonly KeyOf<dom.WindowEventMap> vrdisplaypointerunrestricted;
        [Template("\"vrdisplaypresentchange\"")]
        public static readonly KeyOf<dom.WindowEventMap> vrdisplaypresentchange;
        [Template("\"waiting\"")]
        public static readonly KeyOf<dom.WindowEventMap> waiting;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Window : dom.EventTarget, dom.WindowTimers.Interface, dom.WindowTimersExtension.Interface, IObject, dom.WindowSessionStorage.Interface, dom.WindowLocalStorage.Interface, dom.WindowConsole.Interface, dom.GlobalEventHandlers.Interface, dom.IDBEnvironment.Interface, dom.WindowBase64.Interface, dom.GlobalFetch.Interface
    {
      private static dom.Window _prototype_BackingField;
      private dom.Window.BlobStatics _Blob_BackingField;
      private dom.Window.URLStatics _URL_BackingField;
      private dom.Window.URLSearchParamsStatics _URLSearchParams_BackingField;
      private readonly dom.ApplicationCache _applicationCache_BackingField;
      private readonly dom.CacheStorage _caches_BackingField;
      private readonly dom.Navigator _clientInformation_BackingField;
      private readonly bool _closed_BackingField;
      private readonly dom.Crypto _crypto_BackingField;
      private dom.CustomElementRegistry _customElements_BackingField;
      private string _defaultStatus_BackingField;
      private readonly double _devicePixelRatio_BackingField;
      private readonly string _doNotTrack_BackingField;
      private readonly dom.Document _document_BackingField;
      private Union<dom.Event, Undefined> _event_BackingField;
      private readonly dom.External _external_BackingField;
      private readonly dom.Element _frameElement_BackingField;
      private readonly dom.Window _frames_BackingField;
      private readonly dom.History _history_BackingField;
      private readonly int _innerHeight_BackingField;
      private readonly int _innerWidth_BackingField;
      private readonly bool _isSecureContext_BackingField;
      private readonly uint _length_BackingField;
      private dom.Location _location_BackingField;
      private readonly dom.BarProp _locationbar_BackingField;
      private readonly dom.BarProp _menubar_BackingField;
      private readonly dom.ExtensionScriptApis _msContentScript_BackingField;
      private readonly dom.MSCredentials _msCredentials_BackingField;
      private string _name_BackingField;
      private readonly dom.Navigator _navigator_BackingField;
      private Union<string, bool> _offscreenBuffering_BackingField;
      private dom.Window.onabortFn _onabort_BackingField;
      private dom.Window.onbeforeunloadFn _onbeforeunload_BackingField;
      private dom.Window.onblurFn _onblur_BackingField;
      private dom.Window.oncanplayFn _oncanplay_BackingField;
      private dom.Window.oncanplayFn _oncanplaythrough_BackingField;
      private dom.Window.oncanplayFn _onchange_BackingField;
      private dom.Window.onclickFn _onclick_BackingField;
      private dom.Window.oncanplayFn _oncompassneedscalibration_BackingField;
      private dom.Window.oncontextmenuFn _oncontextmenu_BackingField;
      private dom.Window.onclickFn _ondblclick_BackingField;
      private dom.Window.ondevicelightFn _ondevicelight_BackingField;
      private dom.Window.ondevicemotionFn _ondevicemotion_BackingField;
      private dom.Window.ondeviceorientationFn _ondeviceorientation_BackingField;
      private dom.Window.ondragFn _ondrag_BackingField;
      private dom.Window.ondragFn _ondragend_BackingField;
      private dom.Window.ondragFn _ondragenter_BackingField;
      private dom.Window.ondragFn _ondragleave_BackingField;
      private dom.Window.ondragFn _ondragover_BackingField;
      private dom.Window.ondragFn _ondragstart_BackingField;
      private dom.Window.ondragFn _ondrop_BackingField;
      private dom.Window.oncanplayFn _ondurationchange_BackingField;
      private dom.Window.oncanplayFn _onemptied_BackingField;
      private dom.Window.oncanplayFn _onended_BackingField;
      private dom.ErrorEventHandler _onerror_BackingField;
      private dom.Window.onblurFn _onfocus_BackingField;
      private dom.Window.onhashchangeFn _onhashchange_BackingField;
      private dom.Window.oncanplayFn _oninput_BackingField;
      private dom.Window.oncanplayFn _oninvalid_BackingField;
      private dom.Window.onkeydownFn _onkeydown_BackingField;
      private dom.Window.onkeydownFn _onkeypress_BackingField;
      private dom.Window.onkeydownFn _onkeyup_BackingField;
      private dom.Window.oncanplayFn _onload_BackingField;
      private dom.Window.oncanplayFn _onloadeddata_BackingField;
      private dom.Window.oncanplayFn _onloadedmetadata_BackingField;
      private dom.Window.oncanplayFn _onloadstart_BackingField;
      private dom.Window.onmessageFn _onmessage_BackingField;
      private dom.Window.onclickFn _onmousedown_BackingField;
      private dom.Window.onclickFn _onmouseenter_BackingField;
      private dom.Window.onclickFn _onmouseleave_BackingField;
      private dom.Window.onclickFn _onmousemove_BackingField;
      private dom.Window.onclickFn _onmouseout_BackingField;
      private dom.Window.onclickFn _onmouseover_BackingField;
      private dom.Window.onclickFn _onmouseup_BackingField;
      private dom.Window.onmousewheelFn _onmousewheel_BackingField;
      private dom.Window.oncanplayFn _onmsgesturechange_BackingField;
      private dom.Window.oncanplayFn _onmsgesturedoubletap_BackingField;
      private dom.Window.oncanplayFn _onmsgestureend_BackingField;
      private dom.Window.oncanplayFn _onmsgesturehold_BackingField;
      private dom.Window.oncanplayFn _onmsgesturestart_BackingField;
      private dom.Window.oncanplayFn _onmsgesturetap_BackingField;
      private dom.Window.oncanplayFn _onmsinertiastart_BackingField;
      private dom.Window.oncanplayFn _onmspointercancel_BackingField;
      private dom.Window.oncanplayFn _onmspointerdown_BackingField;
      private dom.Window.oncanplayFn _onmspointerenter_BackingField;
      private dom.Window.oncanplayFn _onmspointerleave_BackingField;
      private dom.Window.oncanplayFn _onmspointermove_BackingField;
      private dom.Window.oncanplayFn _onmspointerout_BackingField;
      private dom.Window.oncanplayFn _onmspointerover_BackingField;
      private dom.Window.oncanplayFn _onmspointerup_BackingField;
      private dom.Window.oncanplayFn _onoffline_BackingField;
      private dom.Window.oncanplayFn _ononline_BackingField;
      private dom.Window.oncanplayFn _onorientationchange_BackingField;
      private dom.Window.onpagehideFn _onpagehide_BackingField;
      private dom.Window.onpagehideFn _onpageshow_BackingField;
      private dom.Window.oncanplayFn _onpause_BackingField;
      private dom.Window.oncanplayFn _onplay_BackingField;
      private dom.Window.oncanplayFn _onplaying_BackingField;
      private dom.Window.onpopstateFn _onpopstate_BackingField;
      private dom.Window.onprogressFn _onprogress_BackingField;
      private dom.Window.oncanplayFn _onratechange_BackingField;
      private dom.Window.onprogressFn _onreadystatechange_BackingField;
      private dom.Window.oncanplayFn _onreset_BackingField;
      private dom.Window.onabortFn _onresize_BackingField;
      private dom.Window.onabortFn _onscroll_BackingField;
      private dom.Window.oncanplayFn _onseeked_BackingField;
      private dom.Window.oncanplayFn _onseeking_BackingField;
      private dom.Window.onabortFn _onselect_BackingField;
      private dom.Window.oncanplayFn _onstalled_BackingField;
      private dom.Window.onstorageFn _onstorage_BackingField;
      private dom.Window.oncanplayFn _onsubmit_BackingField;
      private dom.Window.oncanplayFn _onsuspend_BackingField;
      private dom.Window.oncanplayFn _ontimeupdate_BackingField;
      private dom.Window.ontouchcancelFn _ontouchcancel_BackingField;
      private dom.Window.ontouchendFn _ontouchend_BackingField;
      private dom.Window.ontouchmoveFn _ontouchmove_BackingField;
      private dom.Window.ontouchstartFn _ontouchstart_BackingField;
      private dom.Window.oncanplayFn _onunload_BackingField;
      private dom.Window.oncanplayFn _onvolumechange_BackingField;
      private dom.Window.oncanplayFn _onvrdisplayactivate_BackingField;
      private dom.Window.oncanplayFn _onvrdisplayblur_BackingField;
      private dom.Window.oncanplayFn _onvrdisplayconnect_BackingField;
      private dom.Window.oncanplayFn _onvrdisplaydeactivate_BackingField;
      private dom.Window.oncanplayFn _onvrdisplaydisconnect_BackingField;
      private dom.Window.oncanplayFn _onvrdisplayfocus_BackingField;
      private dom.Window.oncanplayFn _onvrdisplaypointerrestricted_BackingField;
      private dom.Window.oncanplayFn _onvrdisplaypointerunrestricted_BackingField;
      private dom.Window.oncanplayFn _onvrdisplaypresentchange_BackingField;
      private dom.Window.oncanplayFn _onwaiting_BackingField;
      private object _opener_BackingField;
      private readonly Union<string, double> _orientation_BackingField;
      private readonly int _outerHeight_BackingField;
      private readonly int _outerWidth_BackingField;
      private readonly double _pageXOffset_BackingField;
      private readonly double _pageYOffset_BackingField;
      private readonly dom.Window _parent_BackingField;
      private readonly dom.Performance _performance_BackingField;
      private readonly dom.BarProp _personalbar_BackingField;
      private readonly dom.Screen _screen_BackingField;
      private readonly double _screenLeft_BackingField;
      private readonly double _screenTop_BackingField;
      private readonly int _screenX_BackingField;
      private readonly int _screenY_BackingField;
      private readonly double _scrollX_BackingField;
      private readonly double _scrollY_BackingField;
      private readonly dom.BarProp _scrollbars_BackingField;
      private readonly dom.Window _self_BackingField;
      private readonly dom.SpeechSynthesis _speechSynthesis_BackingField;
      private string _status_BackingField;
      private readonly dom.BarProp _statusbar_BackingField;
      private readonly dom.StyleMedia _styleMedia_BackingField;
      private readonly dom.BarProp _toolbar_BackingField;
      private readonly dom.Window _top_BackingField;
      private readonly dom.Window _window_BackingField;
      private readonly dom.Storage _sessionStorage_BackingField;
      private readonly dom.Storage _localStorage_BackingField;
      private readonly dom.Console _console_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointercancel_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerdown_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerenter_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerleave_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointermove_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerout_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerover_BackingField;
      private dom.GlobalEventHandlers.onpointercancelFn _onpointerup_BackingField;
      private dom.GlobalEventHandlers.onwheelFn _onwheel_BackingField;
      private readonly dom.IDBFactory _indexedDB_BackingField;

      public static dom.Window prototype
      {
        get
        {
          return dom.Window._prototype_BackingField;
        }
        set
        {
          dom.Window._prototype_BackingField = value;
        }
      }

      public virtual dom.Window.BlobStatics Blob
      {
        get
        {
          return this._Blob_BackingField;
        }
        set
        {
          this._Blob_BackingField = value;
        }
      }

      public virtual dom.Window.URLStatics URL
      {
        get
        {
          return this._URL_BackingField;
        }
        set
        {
          this._URL_BackingField = value;
        }
      }

      public virtual dom.Window.URLSearchParamsStatics URLSearchParams
      {
        get
        {
          return this._URLSearchParams_BackingField;
        }
        set
        {
          this._URLSearchParams_BackingField = value;
        }
      }

      public virtual dom.ApplicationCache applicationCache
      {
        get
        {
          return this._applicationCache_BackingField;
        }
      }

      public virtual dom.CacheStorage caches
      {
        get
        {
          return this._caches_BackingField;
        }
      }

      public virtual dom.Navigator clientInformation
      {
        get
        {
          return this._clientInformation_BackingField;
        }
      }

      public virtual bool closed
      {
        get
        {
          return this._closed_BackingField;
        }
      }

      public virtual dom.Crypto crypto
      {
        get
        {
          return this._crypto_BackingField;
        }
      }

      public virtual dom.CustomElementRegistry customElements
      {
        get
        {
          return this._customElements_BackingField;
        }
        set
        {
          this._customElements_BackingField = value;
        }
      }

      public virtual string defaultStatus
      {
        get
        {
          return this._defaultStatus_BackingField;
        }
        set
        {
          this._defaultStatus_BackingField = value;
        }
      }

      public virtual double devicePixelRatio
      {
        get
        {
          return this._devicePixelRatio_BackingField;
        }
      }

      public virtual string doNotTrack
      {
        get
        {
          return this._doNotTrack_BackingField;
        }
      }

      public virtual dom.Document document
      {
        get
        {
          return this._document_BackingField;
        }
      }

      [Name("event")]
      public virtual Union<dom.Event, Undefined> @event
      {
        get
        {
          return this._event_BackingField;
        }
        set
        {
          this._event_BackingField = value;
        }
      }

      public virtual dom.External external
      {
        get
        {
          return this._external_BackingField;
        }
      }

      public virtual dom.Element frameElement
      {
        get
        {
          return this._frameElement_BackingField;
        }
      }

      public virtual dom.Window frames
      {
        get
        {
          return this._frames_BackingField;
        }
      }

      public virtual dom.History history
      {
        get
        {
          return this._history_BackingField;
        }
      }

      public virtual int innerHeight
      {
        get
        {
          return this._innerHeight_BackingField;
        }
      }

      public virtual int innerWidth
      {
        get
        {
          return this._innerWidth_BackingField;
        }
      }

      public virtual bool isSecureContext
      {
        get
        {
          return this._isSecureContext_BackingField;
        }
      }

      public virtual uint length
      {
        get
        {
          return this._length_BackingField;
        }
      }

      public virtual dom.Location location
      {
        get
        {
          return this._location_BackingField;
        }
        set
        {
          this._location_BackingField = value;
        }
      }

      public virtual dom.BarProp locationbar
      {
        get
        {
          return this._locationbar_BackingField;
        }
      }

      public virtual dom.BarProp menubar
      {
        get
        {
          return this._menubar_BackingField;
        }
      }

      public virtual dom.ExtensionScriptApis msContentScript
      {
        get
        {
          return this._msContentScript_BackingField;
        }
      }

      public virtual dom.MSCredentials msCredentials
      {
        get
        {
          return this._msCredentials_BackingField;
        }
      }

      public virtual string name
      {
        get
        {
          return this._name_BackingField;
        }
        set
        {
          this._name_BackingField = value;
        }
      }

      public virtual dom.Navigator navigator
      {
        get
        {
          return this._navigator_BackingField;
        }
      }

      public virtual Union<string, bool> offscreenBuffering
      {
        get
        {
          return this._offscreenBuffering_BackingField;
        }
        set
        {
          this._offscreenBuffering_BackingField = value;
        }
      }

      public virtual dom.Window.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.Window.onbeforeunloadFn onbeforeunload
      {
        get
        {
          return this._onbeforeunload_BackingField;
        }
        set
        {
          this._onbeforeunload_BackingField = value;
        }
      }

      public virtual dom.Window.onblurFn onblur
      {
        get
        {
          return this._onblur_BackingField;
        }
        set
        {
          this._onblur_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn oncanplay
      {
        get
        {
          return this._oncanplay_BackingField;
        }
        set
        {
          this._oncanplay_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn oncanplaythrough
      {
        get
        {
          return this._oncanplaythrough_BackingField;
        }
        set
        {
          this._oncanplaythrough_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onchange
      {
        get
        {
          return this._onchange_BackingField;
        }
        set
        {
          this._onchange_BackingField = value;
        }
      }

      public virtual dom.Window.onclickFn onclick
      {
        get
        {
          return this._onclick_BackingField;
        }
        set
        {
          this._onclick_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn oncompassneedscalibration
      {
        get
        {
          return this._oncompassneedscalibration_BackingField;
        }
        set
        {
          this._oncompassneedscalibration_BackingField = value;
        }
      }

      public virtual dom.Window.oncontextmenuFn oncontextmenu
      {
        get
        {
          return this._oncontextmenu_BackingField;
        }
        set
        {
          this._oncontextmenu_BackingField = value;
        }
      }

      public virtual dom.Window.onclickFn ondblclick
      {
        get
        {
          return this._ondblclick_BackingField;
        }
        set
        {
          this._ondblclick_BackingField = value;
        }
      }

      public virtual dom.Window.ondevicelightFn ondevicelight
      {
        get
        {
          return this._ondevicelight_BackingField;
        }
        set
        {
          this._ondevicelight_BackingField = value;
        }
      }

      public virtual dom.Window.ondevicemotionFn ondevicemotion
      {
        get
        {
          return this._ondevicemotion_BackingField;
        }
        set
        {
          this._ondevicemotion_BackingField = value;
        }
      }

      public virtual dom.Window.ondeviceorientationFn ondeviceorientation
      {
        get
        {
          return this._ondeviceorientation_BackingField;
        }
        set
        {
          this._ondeviceorientation_BackingField = value;
        }
      }

      public virtual dom.Window.ondragFn ondrag
      {
        get
        {
          return this._ondrag_BackingField;
        }
        set
        {
          this._ondrag_BackingField = value;
        }
      }

      public virtual dom.Window.ondragFn ondragend
      {
        get
        {
          return this._ondragend_BackingField;
        }
        set
        {
          this._ondragend_BackingField = value;
        }
      }

      public virtual dom.Window.ondragFn ondragenter
      {
        get
        {
          return this._ondragenter_BackingField;
        }
        set
        {
          this._ondragenter_BackingField = value;
        }
      }

      public virtual dom.Window.ondragFn ondragleave
      {
        get
        {
          return this._ondragleave_BackingField;
        }
        set
        {
          this._ondragleave_BackingField = value;
        }
      }

      public virtual dom.Window.ondragFn ondragover
      {
        get
        {
          return this._ondragover_BackingField;
        }
        set
        {
          this._ondragover_BackingField = value;
        }
      }

      public virtual dom.Window.ondragFn ondragstart
      {
        get
        {
          return this._ondragstart_BackingField;
        }
        set
        {
          this._ondragstart_BackingField = value;
        }
      }

      public virtual dom.Window.ondragFn ondrop
      {
        get
        {
          return this._ondrop_BackingField;
        }
        set
        {
          this._ondrop_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn ondurationchange
      {
        get
        {
          return this._ondurationchange_BackingField;
        }
        set
        {
          this._ondurationchange_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onemptied
      {
        get
        {
          return this._onemptied_BackingField;
        }
        set
        {
          this._onemptied_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onended
      {
        get
        {
          return this._onended_BackingField;
        }
        set
        {
          this._onended_BackingField = value;
        }
      }

      public virtual dom.ErrorEventHandler onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.Window.onblurFn onfocus
      {
        get
        {
          return this._onfocus_BackingField;
        }
        set
        {
          this._onfocus_BackingField = value;
        }
      }

      public virtual dom.Window.onhashchangeFn onhashchange
      {
        get
        {
          return this._onhashchange_BackingField;
        }
        set
        {
          this._onhashchange_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn oninput
      {
        get
        {
          return this._oninput_BackingField;
        }
        set
        {
          this._oninput_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn oninvalid
      {
        get
        {
          return this._oninvalid_BackingField;
        }
        set
        {
          this._oninvalid_BackingField = value;
        }
      }

      public virtual dom.Window.onkeydownFn onkeydown
      {
        get
        {
          return this._onkeydown_BackingField;
        }
        set
        {
          this._onkeydown_BackingField = value;
        }
      }

      public virtual dom.Window.onkeydownFn onkeypress
      {
        get
        {
          return this._onkeypress_BackingField;
        }
        set
        {
          this._onkeypress_BackingField = value;
        }
      }

      public virtual dom.Window.onkeydownFn onkeyup
      {
        get
        {
          return this._onkeyup_BackingField;
        }
        set
        {
          this._onkeyup_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onloadeddata
      {
        get
        {
          return this._onloadeddata_BackingField;
        }
        set
        {
          this._onloadeddata_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onloadedmetadata
      {
        get
        {
          return this._onloadedmetadata_BackingField;
        }
        set
        {
          this._onloadedmetadata_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onloadstart
      {
        get
        {
          return this._onloadstart_BackingField;
        }
        set
        {
          this._onloadstart_BackingField = value;
        }
      }

      public virtual dom.Window.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual dom.Window.onclickFn onmousedown
      {
        get
        {
          return this._onmousedown_BackingField;
        }
        set
        {
          this._onmousedown_BackingField = value;
        }
      }

      public virtual dom.Window.onclickFn onmouseenter
      {
        get
        {
          return this._onmouseenter_BackingField;
        }
        set
        {
          this._onmouseenter_BackingField = value;
        }
      }

      public virtual dom.Window.onclickFn onmouseleave
      {
        get
        {
          return this._onmouseleave_BackingField;
        }
        set
        {
          this._onmouseleave_BackingField = value;
        }
      }

      public virtual dom.Window.onclickFn onmousemove
      {
        get
        {
          return this._onmousemove_BackingField;
        }
        set
        {
          this._onmousemove_BackingField = value;
        }
      }

      public virtual dom.Window.onclickFn onmouseout
      {
        get
        {
          return this._onmouseout_BackingField;
        }
        set
        {
          this._onmouseout_BackingField = value;
        }
      }

      public virtual dom.Window.onclickFn onmouseover
      {
        get
        {
          return this._onmouseover_BackingField;
        }
        set
        {
          this._onmouseover_BackingField = value;
        }
      }

      public virtual dom.Window.onclickFn onmouseup
      {
        get
        {
          return this._onmouseup_BackingField;
        }
        set
        {
          this._onmouseup_BackingField = value;
        }
      }

      public virtual dom.Window.onmousewheelFn onmousewheel
      {
        get
        {
          return this._onmousewheel_BackingField;
        }
        set
        {
          this._onmousewheel_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmsgesturechange
      {
        get
        {
          return this._onmsgesturechange_BackingField;
        }
        set
        {
          this._onmsgesturechange_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmsgesturedoubletap
      {
        get
        {
          return this._onmsgesturedoubletap_BackingField;
        }
        set
        {
          this._onmsgesturedoubletap_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmsgestureend
      {
        get
        {
          return this._onmsgestureend_BackingField;
        }
        set
        {
          this._onmsgestureend_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmsgesturehold
      {
        get
        {
          return this._onmsgesturehold_BackingField;
        }
        set
        {
          this._onmsgesturehold_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmsgesturestart
      {
        get
        {
          return this._onmsgesturestart_BackingField;
        }
        set
        {
          this._onmsgesturestart_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmsgesturetap
      {
        get
        {
          return this._onmsgesturetap_BackingField;
        }
        set
        {
          this._onmsgesturetap_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmsinertiastart
      {
        get
        {
          return this._onmsinertiastart_BackingField;
        }
        set
        {
          this._onmsinertiastart_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmspointercancel
      {
        get
        {
          return this._onmspointercancel_BackingField;
        }
        set
        {
          this._onmspointercancel_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmspointerdown
      {
        get
        {
          return this._onmspointerdown_BackingField;
        }
        set
        {
          this._onmspointerdown_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmspointerenter
      {
        get
        {
          return this._onmspointerenter_BackingField;
        }
        set
        {
          this._onmspointerenter_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmspointerleave
      {
        get
        {
          return this._onmspointerleave_BackingField;
        }
        set
        {
          this._onmspointerleave_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmspointermove
      {
        get
        {
          return this._onmspointermove_BackingField;
        }
        set
        {
          this._onmspointermove_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmspointerout
      {
        get
        {
          return this._onmspointerout_BackingField;
        }
        set
        {
          this._onmspointerout_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmspointerover
      {
        get
        {
          return this._onmspointerover_BackingField;
        }
        set
        {
          this._onmspointerover_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onmspointerup
      {
        get
        {
          return this._onmspointerup_BackingField;
        }
        set
        {
          this._onmspointerup_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onoffline
      {
        get
        {
          return this._onoffline_BackingField;
        }
        set
        {
          this._onoffline_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn ononline
      {
        get
        {
          return this._ononline_BackingField;
        }
        set
        {
          this._ononline_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onorientationchange
      {
        get
        {
          return this._onorientationchange_BackingField;
        }
        set
        {
          this._onorientationchange_BackingField = value;
        }
      }

      public virtual dom.Window.onpagehideFn onpagehide
      {
        get
        {
          return this._onpagehide_BackingField;
        }
        set
        {
          this._onpagehide_BackingField = value;
        }
      }

      public virtual dom.Window.onpagehideFn onpageshow
      {
        get
        {
          return this._onpageshow_BackingField;
        }
        set
        {
          this._onpageshow_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onpause
      {
        get
        {
          return this._onpause_BackingField;
        }
        set
        {
          this._onpause_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onplay
      {
        get
        {
          return this._onplay_BackingField;
        }
        set
        {
          this._onplay_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onplaying
      {
        get
        {
          return this._onplaying_BackingField;
        }
        set
        {
          this._onplaying_BackingField = value;
        }
      }

      public virtual dom.Window.onpopstateFn onpopstate
      {
        get
        {
          return this._onpopstate_BackingField;
        }
        set
        {
          this._onpopstate_BackingField = value;
        }
      }

      public virtual dom.Window.onprogressFn onprogress
      {
        get
        {
          return this._onprogress_BackingField;
        }
        set
        {
          this._onprogress_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onratechange
      {
        get
        {
          return this._onratechange_BackingField;
        }
        set
        {
          this._onratechange_BackingField = value;
        }
      }

      public virtual dom.Window.onprogressFn onreadystatechange
      {
        get
        {
          return this._onreadystatechange_BackingField;
        }
        set
        {
          this._onreadystatechange_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onreset
      {
        get
        {
          return this._onreset_BackingField;
        }
        set
        {
          this._onreset_BackingField = value;
        }
      }

      public virtual dom.Window.onabortFn onresize
      {
        get
        {
          return this._onresize_BackingField;
        }
        set
        {
          this._onresize_BackingField = value;
        }
      }

      public virtual dom.Window.onabortFn onscroll
      {
        get
        {
          return this._onscroll_BackingField;
        }
        set
        {
          this._onscroll_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onseeked
      {
        get
        {
          return this._onseeked_BackingField;
        }
        set
        {
          this._onseeked_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onseeking
      {
        get
        {
          return this._onseeking_BackingField;
        }
        set
        {
          this._onseeking_BackingField = value;
        }
      }

      public virtual dom.Window.onabortFn onselect
      {
        get
        {
          return this._onselect_BackingField;
        }
        set
        {
          this._onselect_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onstalled
      {
        get
        {
          return this._onstalled_BackingField;
        }
        set
        {
          this._onstalled_BackingField = value;
        }
      }

      public virtual dom.Window.onstorageFn onstorage
      {
        get
        {
          return this._onstorage_BackingField;
        }
        set
        {
          this._onstorage_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onsubmit
      {
        get
        {
          return this._onsubmit_BackingField;
        }
        set
        {
          this._onsubmit_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onsuspend
      {
        get
        {
          return this._onsuspend_BackingField;
        }
        set
        {
          this._onsuspend_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn ontimeupdate
      {
        get
        {
          return this._ontimeupdate_BackingField;
        }
        set
        {
          this._ontimeupdate_BackingField = value;
        }
      }

      public virtual dom.Window.ontouchcancelFn ontouchcancel
      {
        get
        {
          return this._ontouchcancel_BackingField;
        }
        set
        {
          this._ontouchcancel_BackingField = value;
        }
      }

      public virtual dom.Window.ontouchendFn ontouchend
      {
        get
        {
          return this._ontouchend_BackingField;
        }
        set
        {
          this._ontouchend_BackingField = value;
        }
      }

      public virtual dom.Window.ontouchmoveFn ontouchmove
      {
        get
        {
          return this._ontouchmove_BackingField;
        }
        set
        {
          this._ontouchmove_BackingField = value;
        }
      }

      public virtual dom.Window.ontouchstartFn ontouchstart
      {
        get
        {
          return this._ontouchstart_BackingField;
        }
        set
        {
          this._ontouchstart_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onunload
      {
        get
        {
          return this._onunload_BackingField;
        }
        set
        {
          this._onunload_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvolumechange
      {
        get
        {
          return this._onvolumechange_BackingField;
        }
        set
        {
          this._onvolumechange_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvrdisplayactivate
      {
        get
        {
          return this._onvrdisplayactivate_BackingField;
        }
        set
        {
          this._onvrdisplayactivate_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvrdisplayblur
      {
        get
        {
          return this._onvrdisplayblur_BackingField;
        }
        set
        {
          this._onvrdisplayblur_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvrdisplayconnect
      {
        get
        {
          return this._onvrdisplayconnect_BackingField;
        }
        set
        {
          this._onvrdisplayconnect_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvrdisplaydeactivate
      {
        get
        {
          return this._onvrdisplaydeactivate_BackingField;
        }
        set
        {
          this._onvrdisplaydeactivate_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvrdisplaydisconnect
      {
        get
        {
          return this._onvrdisplaydisconnect_BackingField;
        }
        set
        {
          this._onvrdisplaydisconnect_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvrdisplayfocus
      {
        get
        {
          return this._onvrdisplayfocus_BackingField;
        }
        set
        {
          this._onvrdisplayfocus_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvrdisplaypointerrestricted
      {
        get
        {
          return this._onvrdisplaypointerrestricted_BackingField;
        }
        set
        {
          this._onvrdisplaypointerrestricted_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvrdisplaypointerunrestricted
      {
        get
        {
          return this._onvrdisplaypointerunrestricted_BackingField;
        }
        set
        {
          this._onvrdisplaypointerunrestricted_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onvrdisplaypresentchange
      {
        get
        {
          return this._onvrdisplaypresentchange_BackingField;
        }
        set
        {
          this._onvrdisplaypresentchange_BackingField = value;
        }
      }

      public virtual dom.Window.oncanplayFn onwaiting
      {
        get
        {
          return this._onwaiting_BackingField;
        }
        set
        {
          this._onwaiting_BackingField = value;
        }
      }

      public virtual object opener
      {
        get
        {
          return this._opener_BackingField;
        }
        set
        {
          this._opener_BackingField = value;
        }
      }

      public virtual Union<string, double> orientation
      {
        get
        {
          return this._orientation_BackingField;
        }
      }

      public virtual int outerHeight
      {
        get
        {
          return this._outerHeight_BackingField;
        }
      }

      public virtual int outerWidth
      {
        get
        {
          return this._outerWidth_BackingField;
        }
      }

      public virtual double pageXOffset
      {
        get
        {
          return this._pageXOffset_BackingField;
        }
      }

      public virtual double pageYOffset
      {
        get
        {
          return this._pageYOffset_BackingField;
        }
      }

      public virtual dom.Window parent
      {
        get
        {
          return this._parent_BackingField;
        }
      }

      public virtual dom.Performance performance
      {
        get
        {
          return this._performance_BackingField;
        }
      }

      public virtual dom.BarProp personalbar
      {
        get
        {
          return this._personalbar_BackingField;
        }
      }

      public virtual dom.Screen screen
      {
        get
        {
          return this._screen_BackingField;
        }
      }

      public virtual double screenLeft
      {
        get
        {
          return this._screenLeft_BackingField;
        }
      }

      public virtual double screenTop
      {
        get
        {
          return this._screenTop_BackingField;
        }
      }

      public virtual int screenX
      {
        get
        {
          return this._screenX_BackingField;
        }
      }

      public virtual int screenY
      {
        get
        {
          return this._screenY_BackingField;
        }
      }

      public virtual double scrollX
      {
        get
        {
          return this._scrollX_BackingField;
        }
      }

      public virtual double scrollY
      {
        get
        {
          return this._scrollY_BackingField;
        }
      }

      public virtual dom.BarProp scrollbars
      {
        get
        {
          return this._scrollbars_BackingField;
        }
      }

      public virtual dom.Window self
      {
        get
        {
          return this._self_BackingField;
        }
      }

      public virtual dom.SpeechSynthesis speechSynthesis
      {
        get
        {
          return this._speechSynthesis_BackingField;
        }
      }

      public virtual string status
      {
        get
        {
          return this._status_BackingField;
        }
        set
        {
          this._status_BackingField = value;
        }
      }

      public virtual dom.BarProp statusbar
      {
        get
        {
          return this._statusbar_BackingField;
        }
      }

      public virtual dom.StyleMedia styleMedia
      {
        get
        {
          return this._styleMedia_BackingField;
        }
      }

      public virtual dom.BarProp toolbar
      {
        get
        {
          return this._toolbar_BackingField;
        }
      }

      public virtual dom.Window top
      {
        get
        {
          return this._top_BackingField;
        }
      }

      public virtual dom.Window window
      {
        get
        {
          return this._window_BackingField;
        }
      }

      public virtual extern void alert();

      public virtual extern void alert(object message);

      public virtual extern void blur();

      public virtual extern void cancelAnimationFrame(uint handle);

      public virtual extern void captureEvents();

      public virtual extern void close();

      public virtual extern bool confirm();

      public virtual extern bool confirm(string message);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLImageElement image);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.SVGImageElement image);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLVideoElement image);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLCanvasElement image);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.ImageBitmap image);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(dom.ImageData image);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(dom.Blob image);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLImageElement image,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.SVGImageElement image,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLVideoElement image,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLCanvasElement image,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.ImageBitmap image,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.ImageData image,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.Blob image,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image,
        double sx,
        double sy,
        double sw,
        double sh);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLImageElement image,
        double sx,
        double sy,
        double sw,
        double sh);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.SVGImageElement image,
        double sx,
        double sy,
        double sw,
        double sh);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLVideoElement image,
        double sx,
        double sy,
        double sw,
        double sh);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLCanvasElement image,
        double sx,
        double sy,
        double sw,
        double sh);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.ImageBitmap image,
        double sx,
        double sy,
        double sw,
        double sh);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.ImageData image,
        double sx,
        double sy,
        double sw,
        double sh);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.Blob image,
        double sx,
        double sy,
        double sw,
        double sh);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image,
        double sx,
        double sy,
        double sw,
        double sh,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLImageElement image,
        double sx,
        double sy,
        double sw,
        double sh,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.SVGImageElement image,
        double sx,
        double sy,
        double sw,
        double sh,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLVideoElement image,
        double sx,
        double sy,
        double sw,
        double sh,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.HTMLCanvasElement image,
        double sx,
        double sy,
        double sw,
        double sh,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.ImageBitmap image,
        double sx,
        double sy,
        double sw,
        double sh,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.ImageData image,
        double sx,
        double sy,
        double sw,
        double sh,
        dom.ImageBitmapOptions options);

      public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
        dom.Blob image,
        double sx,
        double sy,
        double sw,
        double sh,
        dom.ImageBitmapOptions options);

      public virtual extern void departFocus(
        dom.NavigationReason navigationReason,
        dom.FocusNavigationOrigin origin);

      public virtual extern void focus();

      public virtual extern dom.CSSStyleDeclaration getComputedStyle(dom.Element elt);

      public virtual extern dom.CSSStyleDeclaration getComputedStyle(
        dom.Element elt,
        string pseudoElt);

      public virtual extern dom.CSSRuleList getMatchedCSSRules(dom.Element elt);

      public virtual extern dom.CSSRuleList getMatchedCSSRules(dom.Element elt, string pseudoElt);

      public virtual extern dom.Selection getSelection();

      public virtual extern dom.MediaQueryList matchMedia(string mediaQuery);

      public virtual extern void moveBy();

      public virtual extern void moveBy(int x);

      public virtual extern void moveBy(int x, int y);

      public virtual extern void moveTo();

      public virtual extern void moveTo(int x);

      public virtual extern void moveTo(int x, int y);

      public virtual extern void msWriteProfilerMark(string profilerMarkName);

      public virtual extern dom.Window open();

      public virtual extern dom.Window open(string url);

      public virtual extern dom.Window open(string url, string target);

      public virtual extern dom.Window open(string url, string target, string features);

      public virtual extern dom.Window open(
        string url,
        string target,
        string features,
        bool replace);

      public virtual extern void postMessage(object message, string targetOrigin);

      public virtual extern void postMessage(
        object message,
        string targetOrigin,
        object[] transfer);

      public virtual extern void print();

      public virtual extern string prompt();

      public virtual extern string prompt(string message);

      public virtual extern string prompt(string message, string _default);

      public virtual extern void releaseEvents();

      public virtual extern uint requestAnimationFrame(dom.FrameRequestCallback callback);

      public virtual extern void resizeBy();

      public virtual extern void resizeBy(int x);

      public virtual extern void resizeBy(int x, int y);

      public virtual extern void resizeTo();

      public virtual extern void resizeTo(int x);

      public virtual extern void resizeTo(int x, int y);

      public virtual extern void scroll();

      public virtual extern void scroll(dom.ScrollToOptions options);

      public virtual extern void scroll(double x);

      public virtual extern void scroll(double x, double y);

      public virtual extern void scrollBy();

      public virtual extern void scrollBy(dom.ScrollToOptions options);

      public virtual extern void scrollBy(double x);

      public virtual extern void scrollBy(double x, double y);

      public virtual extern void scrollTo();

      public virtual extern void scrollTo(dom.ScrollToOptions options);

      public virtual extern void scrollTo(double x);

      public virtual extern void scrollTo(double x, double y);

      public virtual extern void stop();

      public virtual extern void webkitCancelAnimationFrame(double handle);

      public virtual extern dom.WebKitPoint webkitConvertPointFromNodeToPage(
        dom.Node node,
        dom.WebKitPoint pt);

      public virtual extern dom.WebKitPoint webkitConvertPointFromPageToNode(
        dom.Node node,
        dom.WebKitPoint pt);

      public virtual extern double webkitRequestAnimationFrame(dom.FrameRequestCallback callback);

      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Window.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Window.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Window.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Window.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Window.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Window.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Window.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Window.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual extern void clearInterval();

      public virtual extern void clearInterval(double handle);

      public virtual extern void clearTimeout();

      public virtual extern void clearTimeout(double handle);

      public virtual extern double setInterval(
        dom.WindowTimers.setIntervalFn handler,
        double timeout);

      public virtual extern double setInterval(object handler);

      [ExpandParams]
      public virtual extern double setInterval(
        object handler,
        object timeout,
        params object[] args);

      public virtual extern double setTimeout(dom.WindowTimers.setTimeoutFn handler, double timeout);

      public virtual extern double setTimeout(object handler);

      [ExpandParams]
      public virtual extern double setTimeout(object handler, object timeout, params object[] args);

      public virtual extern void clearImmediate(double handle);

      public virtual extern double setImmediate(dom.WindowTimersExtension.setImmediateFn handler);

      [ExpandParams]
      public virtual extern double setImmediate(object handler, params object[] args);

      public virtual dom.Storage sessionStorage
      {
        get
        {
          return this._sessionStorage_BackingField;
        }
      }

      public virtual dom.Storage localStorage
      {
        get
        {
          return this._localStorage_BackingField;
        }
      }

      public virtual dom.Console console
      {
        get
        {
          return this._console_BackingField;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointercancel
      {
        get
        {
          return this._onpointercancel_BackingField;
        }
        set
        {
          this._onpointercancel_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerdown
      {
        get
        {
          return this._onpointerdown_BackingField;
        }
        set
        {
          this._onpointerdown_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerenter
      {
        get
        {
          return this._onpointerenter_BackingField;
        }
        set
        {
          this._onpointerenter_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerleave
      {
        get
        {
          return this._onpointerleave_BackingField;
        }
        set
        {
          this._onpointerleave_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointermove
      {
        get
        {
          return this._onpointermove_BackingField;
        }
        set
        {
          this._onpointermove_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerout
      {
        get
        {
          return this._onpointerout_BackingField;
        }
        set
        {
          this._onpointerout_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerover
      {
        get
        {
          return this._onpointerover_BackingField;
        }
        set
        {
          this._onpointerover_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerup
      {
        get
        {
          return this._onpointerup_BackingField;
        }
        set
        {
          this._onpointerup_BackingField = value;
        }
      }

      public virtual dom.GlobalEventHandlers.onwheelFn onwheel
      {
        get
        {
          return this._onwheel_BackingField;
        }
        set
        {
          this._onwheel_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.GlobalEventHandlers.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual dom.IDBFactory indexedDB
      {
        get
        {
          return this._indexedDB_BackingField;
        }
      }

      public virtual extern string atob(string encodedString);

      public virtual extern string btoa(string rawString);

      public virtual extern es5.Promise<dom.Response> fetch();

      public virtual extern es5.Promise<dom.Response> fetch(Union<dom.Request, string> input);

      public virtual extern es5.Promise<dom.Response> fetch(dom.Request input);

      public virtual extern es5.Promise<dom.Response> fetch(string input);

      public virtual extern es5.Promise<dom.Response> fetch(
        Union<dom.Request, string> input,
        dom.RequestInit init);

      public virtual extern es5.Promise<dom.Response> fetch(
        dom.Request input,
        dom.RequestInit init);

      public virtual extern es5.Promise<dom.Response> fetch(
        string input,
        dom.RequestInit init);

      [Generated]
      public delegate void onabortFn(dom.UIEvent ev);

      [Generated]
      public delegate void onbeforeunloadFn(dom.BeforeUnloadEvent ev);

      [Generated]
      public delegate void onblurFn(dom.FocusEvent ev);

      [Generated]
      public delegate void oncanplayFn(dom.Event ev);

      [Generated]
      public delegate void onclickFn(dom.MouseEvent ev);

      [Generated]
      public delegate void oncontextmenuFn(dom.PointerEvent ev);

      [Generated]
      public delegate void ondevicelightFn(dom.DeviceLightEvent ev);

      [Generated]
      public delegate void ondevicemotionFn(dom.DeviceMotionEvent ev);

      [Generated]
      public delegate void ondeviceorientationFn(dom.DeviceOrientationEvent ev);

      [Generated]
      public delegate void ondragFn(dom.DragEvent ev);

      [Generated]
      public delegate void onhashchangeFn(dom.HashChangeEvent ev);

      [Generated]
      public delegate void onkeydownFn(dom.KeyboardEvent ev);

      [Generated]
      public delegate void onmessageFn(dom.MessageEvent ev);

      [Generated]
      public delegate void onmousewheelFn(dom.WheelEvent ev);

      [Generated]
      public delegate void onpagehideFn(dom.PageTransitionEvent ev);

      [Generated]
      public delegate void onpopstateFn(dom.PopStateEvent ev);

      [Generated]
      public delegate void onprogressFn(dom.ProgressEvent ev);

      [Generated]
      public delegate void onstorageFn(dom.StorageEvent ev);

      [Generated]
      public delegate void ontouchcancelFn(dom.TouchEvent ev);

      [Generated]
      public delegate void ontouchendFn(dom.TouchEvent ev);

      [Generated]
      public delegate void ontouchmoveFn(dom.TouchEvent ev);

      [Generated]
      public delegate void ontouchstartFn(dom.TouchEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);

      [Generated]
      [Virtual]
      public abstract class BlobStatics : IObject
      {
        private dom.Blob _prototype_BackingField;

        [Template("<self>new {this}()")]
        public abstract dom.Blob Create();

        [Template("<self>new {this}({0})")]
        public abstract dom.Blob Create(object[] blobParts);

        [Template("<self>new {this}({0}, {1})")]
        public abstract dom.Blob Create(object[] blobParts, dom.BlobPropertyBag options);

        public dom.Blob prototype
        {
          get
          {
            return this._prototype_BackingField;
          }
          set
          {
            this._prototype_BackingField = value;
          }
        }
      }

      [Generated]
      [Virtual]
      public abstract class URLStatics : IObject
      {
        private dom.URL _prototype_BackingField;

        [Template("<self>new {this}({0})")]
        public abstract dom.URL Create(string url);

        [Template("<self>new {this}({0}, {1})")]
        public abstract dom.URL Create(string url, Union<string, dom.URL> @base);

        [Template("<self>new {this}({0}, {1})")]
        public abstract dom.URL Create(string url, string @base);

        [Template("<self>new {this}({0}, {1})")]
        public abstract dom.URL Create(string url, dom.URL @base);

        public dom.URL prototype
        {
          get
          {
            return this._prototype_BackingField;
          }
          set
          {
            this._prototype_BackingField = value;
          }
        }

        public abstract string createObjectURL(object @object);

        public abstract string createObjectURL(object @object, dom.ObjectURLOptions options);

        public abstract void revokeObjectURL(string url);
      }

      [Generated]
      [Virtual]
      public abstract class URLSearchParamsStatics : IObject
      {
        private dom.URLSearchParams _prototype_BackingField;

        [Template("<self>new {this}()")]
        public abstract dom.URLSearchParams Create();

        [Template("<self>new {this}({0})")]
        public abstract dom.URLSearchParams Create(Union<string, dom.URLSearchParams> init);

        [Template("<self>new {this}({0})")]
        public abstract dom.URLSearchParams Create(string init);

        [Template("<self>new {this}({0})")]
        public abstract dom.URLSearchParams Create(dom.URLSearchParams init);

        public dom.URLSearchParams prototype
        {
          get
          {
            return this._prototype_BackingField;
          }
          set
          {
            this._prototype_BackingField = value;
          }
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class WindowBase64 : dom.WindowBase64.Interface, IObject
    {
      public abstract string atob(string encodedString);

      public abstract string btoa(string rawString);

      [Generated]
      [IgnoreCast]
      public interface Interface : IObject
      {
        string atob(string encodedString);

        string btoa(string rawString);
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class WindowConsole : dom.WindowConsole.Interface, IObject
    {
      private readonly dom.Console _console_BackingField;

      public dom.Console console
      {
        get
        {
          return this._console_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.Console console { get; }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class WindowEventHandlersEventMap : dom.WindowEventHandlersEventMap.Interface, IObject
    {
      private dom.Event _afterprint_BackingField;
      private dom.Event _beforeprint_BackingField;
      private dom.BeforeUnloadEvent _beforeunload_BackingField;
      private dom.HashChangeEvent _hashchange_BackingField;
      private dom.MessageEvent _message_BackingField;
      private dom.Event _offline_BackingField;
      private dom.Event _online_BackingField;
      private dom.PageTransitionEvent _pagehide_BackingField;
      private dom.PageTransitionEvent _pageshow_BackingField;
      private dom.PopStateEvent _popstate_BackingField;
      private dom.StorageEvent _storage_BackingField;
      private dom.Event _unload_BackingField;

      public dom.Event afterprint
      {
        get
        {
          return this._afterprint_BackingField;
        }
        set
        {
          this._afterprint_BackingField = value;
        }
      }

      public dom.Event beforeprint
      {
        get
        {
          return this._beforeprint_BackingField;
        }
        set
        {
          this._beforeprint_BackingField = value;
        }
      }

      public dom.BeforeUnloadEvent beforeunload
      {
        get
        {
          return this._beforeunload_BackingField;
        }
        set
        {
          this._beforeunload_BackingField = value;
        }
      }

      public dom.HashChangeEvent hashchange
      {
        get
        {
          return this._hashchange_BackingField;
        }
        set
        {
          this._hashchange_BackingField = value;
        }
      }

      public dom.MessageEvent message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      public dom.Event offline
      {
        get
        {
          return this._offline_BackingField;
        }
        set
        {
          this._offline_BackingField = value;
        }
      }

      public dom.Event online
      {
        get
        {
          return this._online_BackingField;
        }
        set
        {
          this._online_BackingField = value;
        }
      }

      public dom.PageTransitionEvent pagehide
      {
        get
        {
          return this._pagehide_BackingField;
        }
        set
        {
          this._pagehide_BackingField = value;
        }
      }

      public dom.PageTransitionEvent pageshow
      {
        get
        {
          return this._pageshow_BackingField;
        }
        set
        {
          this._pageshow_BackingField = value;
        }
      }

      public dom.PopStateEvent popstate
      {
        get
        {
          return this._popstate_BackingField;
        }
        set
        {
          this._popstate_BackingField = value;
        }
      }

      public dom.StorageEvent storage
      {
        get
        {
          return this._storage_BackingField;
        }
        set
        {
          this._storage_BackingField = value;
        }
      }

      public dom.Event unload
      {
        get
        {
          return this._unload_BackingField;
        }
        set
        {
          this._unload_BackingField = value;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.Event afterprint { get; set; }

        dom.Event beforeprint { get; set; }

        dom.BeforeUnloadEvent beforeunload { get; set; }

        dom.HashChangeEvent hashchange { get; set; }

        dom.MessageEvent message { get; set; }

        dom.Event offline { get; set; }

        dom.Event online { get; set; }

        dom.PageTransitionEvent pagehide { get; set; }

        dom.PageTransitionEvent pageshow { get; set; }

        dom.PopStateEvent popstate { get; set; }

        dom.StorageEvent storage { get; set; }

        dom.Event unload { get; set; }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"afterprint\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> afterprint;
        [Template("\"beforeprint\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> beforeprint;
        [Template("\"beforeunload\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> beforeunload;
        [Template("\"hashchange\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> hashchange;
        [Template("\"message\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> message;
        [Template("\"offline\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> offline;
        [Template("\"online\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> online;
        [Template("\"pagehide\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> pagehide;
        [Template("\"pageshow\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> pageshow;
        [Template("\"popstate\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> popstate;
        [Template("\"storage\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> storage;
        [Template("\"unload\"")]
        public static readonly KeyOf<dom.WindowEventHandlersEventMap> unload;
      }
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class WindowEventHandlers : dom.WindowEventHandlers.Interface, IObject
    {
      private dom.WindowEventHandlers.onafterprintFn _onafterprint_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onbeforeprint_BackingField;
      private dom.WindowEventHandlers.onbeforeunloadFn _onbeforeunload_BackingField;
      private dom.WindowEventHandlers.onhashchangeFn _onhashchange_BackingField;
      private dom.WindowEventHandlers.onmessageFn _onmessage_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onoffline_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _ononline_BackingField;
      private dom.WindowEventHandlers.onpagehideFn _onpagehide_BackingField;
      private dom.WindowEventHandlers.onpagehideFn _onpageshow_BackingField;
      private dom.WindowEventHandlers.onpopstateFn _onpopstate_BackingField;
      private dom.WindowEventHandlers.onstorageFn _onstorage_BackingField;
      private dom.WindowEventHandlers.onafterprintFn _onunload_BackingField;

      public virtual dom.WindowEventHandlers.onafterprintFn onafterprint
      {
        get
        {
          return this._onafterprint_BackingField;
        }
        set
        {
          this._onafterprint_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn onbeforeprint
      {
        get
        {
          return this._onbeforeprint_BackingField;
        }
        set
        {
          this._onbeforeprint_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onbeforeunloadFn onbeforeunload
      {
        get
        {
          return this._onbeforeunload_BackingField;
        }
        set
        {
          this._onbeforeunload_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onhashchangeFn onhashchange
      {
        get
        {
          return this._onhashchange_BackingField;
        }
        set
        {
          this._onhashchange_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn onoffline
      {
        get
        {
          return this._onoffline_BackingField;
        }
        set
        {
          this._onoffline_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn ononline
      {
        get
        {
          return this._ononline_BackingField;
        }
        set
        {
          this._ononline_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onpagehideFn onpagehide
      {
        get
        {
          return this._onpagehide_BackingField;
        }
        set
        {
          this._onpagehide_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onpagehideFn onpageshow
      {
        get
        {
          return this._onpageshow_BackingField;
        }
        set
        {
          this._onpageshow_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onpopstateFn onpopstate
      {
        get
        {
          return this._onpopstate_BackingField;
        }
        set
        {
          this._onpopstate_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onstorageFn onstorage
      {
        get
        {
          return this._onstorage_BackingField;
        }
        set
        {
          this._onstorage_BackingField = value;
        }
      }

      public virtual dom.WindowEventHandlers.onafterprintFn onunload
      {
        get
        {
          return this._onunload_BackingField;
        }
        set
        {
          this._onunload_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.WindowEventHandlers.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void addEventListener(string type, dom.EventListener listener);

      public abstract void addEventListener(string type, dom.EventListenerObject listener);

      public abstract void addEventListener(string type, Action<dom.Event> listener);

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(string type, dom.EventListener listener, bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.WindowEventHandlers.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void removeEventListener(string type, dom.EventListener listener);

      public abstract void removeEventListener(string type, dom.EventListenerObject listener);

      public abstract void removeEventListener(string type, Action<dom.Event> listener);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      [IgnoreCast]
      [Name("WindowEventHandlers")]
      public interface Interface : IObject
      {
        dom.WindowEventHandlers.onafterprintFn onafterprint { get; set; }

        dom.WindowEventHandlers.onafterprintFn onbeforeprint { get; set; }

        dom.WindowEventHandlers.onbeforeunloadFn onbeforeunload { get; set; }

        dom.WindowEventHandlers.onhashchangeFn onhashchange { get; set; }

        dom.WindowEventHandlers.onmessageFn onmessage { get; set; }

        dom.WindowEventHandlers.onafterprintFn onoffline { get; set; }

        dom.WindowEventHandlers.onafterprintFn ononline { get; set; }

        dom.WindowEventHandlers.onpagehideFn onpagehide { get; set; }

        dom.WindowEventHandlers.onpagehideFn onpageshow { get; set; }

        dom.WindowEventHandlers.onpopstateFn onpopstate { get; set; }

        dom.WindowEventHandlers.onstorageFn onstorage { get; set; }

        dom.WindowEventHandlers.onafterprintFn onunload { get; set; }

        [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.WindowEventHandlers.addEventListenerFn<K> listener);

        [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.WindowEventHandlers.addEventListenerFn<K> listener,
          Union<bool, dom.AddEventListenerOptions> options);

        [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.WindowEventHandlers.addEventListenerFn<K> listener,
          bool options);

        [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.WindowEventHandlers.addEventListenerFn<K> listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void addEventListener(string type, dom.EventListener listener);

        void addEventListener(string type, dom.EventListenerObject listener);

        void addEventListener(string type, Action<dom.Event> listener);

        void addEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<bool, dom.AddEventListenerOptions> options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListener listener, bool options);

        void addEventListener(
          string type,
          dom.EventListener listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListenerObject listener, bool options);

        void addEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.AddEventListenerOptions options);

        void addEventListener(
          string type,
          Action<dom.Event> listener,
          Union<bool, dom.AddEventListenerOptions> options);

        void addEventListener(string type, Action<dom.Event> listener, bool options);

        void addEventListener(
          string type,
          Action<dom.Event> listener,
          dom.AddEventListenerOptions options);

        [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.WindowEventHandlers.removeEventListenerFn<K> listener);

        [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.WindowEventHandlers.removeEventListenerFn<K> listener,
          Union<bool, dom.EventListenerOptions> options);

        [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.WindowEventHandlers.removeEventListenerFn<K> listener,
          bool options);

        [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.WindowEventHandlers.removeEventListenerFn<K> listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void removeEventListener(string type, dom.EventListener listener);

        void removeEventListener(string type, dom.EventListenerObject listener);

        void removeEventListener(string type, Action<dom.Event> listener);

        void removeEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<bool, dom.EventListenerOptions> options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListener listener, bool options);

        void removeEventListener(
          string type,
          dom.EventListener listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListenerObject listener, bool options);

        void removeEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.EventListenerOptions options);

        void removeEventListener(
          string type,
          Action<dom.Event> listener,
          Union<bool, dom.EventListenerOptions> options);

        void removeEventListener(string type, Action<dom.Event> listener, bool options);

        void removeEventListener(
          string type,
          Action<dom.Event> listener,
          dom.EventListenerOptions options);
      }

      [Generated]
      public delegate void onafterprintFn(dom.Event ev);

      [Generated]
      public delegate void onbeforeunloadFn(dom.BeforeUnloadEvent ev);

      [Generated]
      public delegate void onhashchangeFn(dom.HashChangeEvent ev);

      [Generated]
      public delegate void onmessageFn(dom.MessageEvent ev);

      [Generated]
      public delegate void onpagehideFn(dom.PageTransitionEvent ev);

      [Generated]
      public delegate void onpopstateFn(dom.PopStateEvent ev);

      [Generated]
      public delegate void onstorageFn(dom.StorageEvent ev);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void addEventListenerFn<K>(object ev);

      [Where("K", typeof (KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class WindowLocalStorage : dom.WindowLocalStorage.Interface, IObject
    {
      private readonly dom.Storage _localStorage_BackingField;

      public dom.Storage localStorage
      {
        get
        {
          return this._localStorage_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.Storage localStorage { get; }
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class WindowSessionStorage : dom.WindowSessionStorage.Interface, IObject
    {
      private readonly dom.Storage _sessionStorage_BackingField;

      public dom.Storage sessionStorage
      {
        get
        {
          return this._sessionStorage_BackingField;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.Storage sessionStorage { get; }
      }
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class WindowTimers : dom.WindowTimersExtension, dom.WindowTimers.Interface, dom.WindowTimersExtension.Interface, IObject
    {
      public abstract void clearInterval();

      public abstract void clearInterval(double handle);

      public abstract void clearTimeout();

      public abstract void clearTimeout(double handle);

      public abstract double setInterval(dom.WindowTimers.setIntervalFn handler, double timeout);

      public abstract double setInterval(object handler);

      [ExpandParams]
      public abstract double setInterval(object handler, object timeout, params object[] args);

      public abstract double setTimeout(dom.WindowTimers.setTimeoutFn handler, double timeout);

      public abstract double setTimeout(object handler);

      [ExpandParams]
      public abstract double setTimeout(object handler, object timeout, params object[] args);

      [Generated]
      [IgnoreCast]
      [Name("WindowTimers")]
      public new interface Interface : dom.WindowTimersExtension.Interface, IObject
      {
        void clearInterval();

        void clearInterval(double handle);

        void clearTimeout();

        void clearTimeout(double handle);

        double setInterval(dom.WindowTimers.setIntervalFn handler, double timeout);

        double setInterval(object handler);

        [ExpandParams]
        double setInterval(object handler, object timeout, params object[] args);

        double setTimeout(dom.WindowTimers.setTimeoutFn handler, double timeout);

        double setTimeout(object handler);

        [ExpandParams]
        double setTimeout(object handler, object timeout, params object[] args);
      }

      [Generated]
      public delegate void setIntervalFn(params object[] args);

      [Generated]
      public delegate void setTimeoutFn(params object[] args);
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class WindowTimersExtension : dom.WindowTimersExtension.Interface, IObject
    {
      public abstract void clearImmediate(double handle);

      public abstract double setImmediate(dom.WindowTimersExtension.setImmediateFn handler);

      [ExpandParams]
      public abstract double setImmediate(object handler, params object[] args);

      [Generated]
      [IgnoreCast]
      [Name("WindowTimersExtension")]
      public interface Interface : IObject
      {
        void clearImmediate(double handle);

        double setImmediate(dom.WindowTimersExtension.setImmediateFn handler);

        [ExpandParams]
        double setImmediate(object handler, params object[] args);
      }

      [Generated]
      public delegate void setImmediateFn(params object[] args);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class WorkerEventMap : dom.AbstractWorkerEventMap
    {
      private dom.MessageEvent _message_BackingField;

      public dom.MessageEvent message
      {
        get
        {
          return this._message_BackingField;
        }
        set
        {
          this._message_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"message\"")]
        public static readonly KeyOf<dom.WorkerEventMap> message;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class Worker : dom.EventTarget, dom.AbstractWorker.Interface, IObject
    {
      private static dom.Worker _prototype_BackingField;
      private dom.Worker.onmessageFn _onmessage_BackingField;
      private dom.AbstractWorker.onerrorFn _onerror_BackingField;

      public extern Worker(string stringUrl);

      public static dom.Worker prototype
      {
        get
        {
          return dom.Worker._prototype_BackingField;
        }
        set
        {
          dom.Worker._prototype_BackingField = value;
        }
      }

      public virtual dom.Worker.onmessageFn onmessage
      {
        get
        {
          return this._onmessage_BackingField;
        }
        set
        {
          this._onmessage_BackingField = value;
        }
      }

      public virtual extern void postMessage(object message);

      public virtual extern void postMessage(object message, object[] transfer);

      public virtual extern void terminate();

      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Worker.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Worker.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Worker.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.Worker.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Worker.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Worker.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Worker.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.Worker.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual dom.AbstractWorker.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.AbstractWorker.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.AbstractWorker.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onmessageFn(dom.MessageEvent ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class WritableStream : IObject
    {
      private static dom.WritableStream _prototype_BackingField;
      private readonly bool _locked_BackingField;

      public extern WritableStream();

      public extern WritableStream(dom.UnderlyingSink underlyingSink);

      public extern WritableStream(dom.UnderlyingSink underlyingSink, dom.QueuingStrategy strategy);

      public static dom.WritableStream prototype
      {
        get
        {
          return dom.WritableStream._prototype_BackingField;
        }
        set
        {
          dom.WritableStream._prototype_BackingField = value;
        }
      }

      public virtual bool locked
      {
        get
        {
          return this._locked_BackingField;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> abort();

      public virtual extern es5.Promise<H5.Primitive.Void> abort(object reason);

      public virtual extern dom.WritableStreamDefaultWriter getWriter();
    }

    [CombinedClass]
    [FormerInterface]
    public class WritableStreamDefaultController : IObject
    {
      private static dom.WritableStreamDefaultController _prototype_BackingField;

      public static dom.WritableStreamDefaultController prototype
      {
        get
        {
          return dom.WritableStreamDefaultController._prototype_BackingField;
        }
        set
        {
          dom.WritableStreamDefaultController._prototype_BackingField = value;
        }
      }

      public virtual extern void error();

      public virtual extern void error(object error);
    }

    [CombinedClass]
    [FormerInterface]
    public class WritableStreamDefaultWriter : IObject
    {
      private static dom.WritableStreamDefaultWriter _prototype_BackingField;
      private readonly es5.Promise<H5.Primitive.Void> _closed_BackingField;
      private readonly double _desiredSize_BackingField;
      private readonly es5.Promise<H5.Primitive.Void> _ready_BackingField;

      public static dom.WritableStreamDefaultWriter prototype
      {
        get
        {
          return dom.WritableStreamDefaultWriter._prototype_BackingField;
        }
        set
        {
          dom.WritableStreamDefaultWriter._prototype_BackingField = value;
        }
      }

      public virtual es5.Promise<H5.Primitive.Void> closed
      {
        get
        {
          return this._closed_BackingField;
        }
      }

      public virtual double desiredSize
      {
        get
        {
          return this._desiredSize_BackingField;
        }
      }

      public virtual es5.Promise<H5.Primitive.Void> ready
      {
        get
        {
          return this._ready_BackingField;
        }
      }

      public virtual extern es5.Promise<H5.Primitive.Void> abort();

      public virtual extern es5.Promise<H5.Primitive.Void> abort(object reason);

      public virtual extern es5.Promise<H5.Primitive.Void> close();

      public virtual extern void releaseLock();

      public virtual extern es5.Promise<object> write();

      public virtual extern es5.Promise<object> write(object chunk);
    }

    [CombinedClass]
    [FormerInterface]
    public class XMLDocument : dom.Document
    {
      private static dom.XMLDocument _prototype_BackingField;

      public static dom.XMLDocument prototype
      {
        get
        {
          return dom.XMLDocument._prototype_BackingField;
        }
        set
        {
          dom.XMLDocument._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLDocument.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLDocument.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLDocument.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLDocument.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLDocument.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLDocument.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLDocument.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLDocument.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class XMLHttpRequestEventMap : dom.XMLHttpRequestEventTargetEventMap
    {
      private dom.Event _readystatechange_BackingField;

      public dom.Event readystatechange
      {
        get
        {
          return this._readystatechange_BackingField;
        }
        set
        {
          this._readystatechange_BackingField = value;
        }
      }

      [Generated]
      public new static class KeyOf
      {
        [Template("\"readystatechange\"")]
        public static readonly KeyOf<dom.XMLHttpRequestEventMap> readystatechange;
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class XMLHttpRequest : dom.EventTarget, dom.XMLHttpRequestEventTarget.Interface, IObject
    {
      private static dom.XMLHttpRequest _prototype_BackingField;
      private static readonly ushort _DONE_Static_BackingField;
      private static readonly ushort _HEADERS_RECEIVED_Static_BackingField;
      private static readonly ushort _LOADING_Static_BackingField;
      private static readonly ushort _OPENED_Static_BackingField;
      private static readonly ushort _UNSENT_Static_BackingField;
      private string _msCaching_BackingField;
      private dom.XMLHttpRequest.onreadystatechangeFn _onreadystatechange_BackingField;
      private readonly ushort _readyState_BackingField;
      private readonly object _response_BackingField;
      private readonly string _responseText_BackingField;
      private dom.XMLHttpRequestResponseType _responseType_BackingField;
      private readonly string _responseURL_BackingField;
      private readonly dom.Document _responseXML_BackingField;
      private readonly ushort _status_BackingField;
      private readonly string _statusText_BackingField;
      private uint _timeout_BackingField;
      private readonly dom.XMLHttpRequestUpload _upload_BackingField;
      private bool _withCredentials_BackingField;
      private readonly ushort _DONE_BackingField;
      private readonly ushort _HEADERS_RECEIVED_BackingField;
      private readonly ushort _LOADING_BackingField;
      private readonly ushort _OPENED_BackingField;
      private readonly ushort _UNSENT_BackingField;
      private dom.XMLHttpRequestEventTarget.onabortFn _onabort_BackingField;
      private dom.XMLHttpRequestEventTarget.onerrorFn _onerror_BackingField;
      private dom.XMLHttpRequestEventTarget.onabortFn _onload_BackingField;
      private dom.XMLHttpRequestEventTarget.onloadendFn _onloadend_BackingField;
      private dom.XMLHttpRequestEventTarget.onabortFn _onloadstart_BackingField;
      private dom.XMLHttpRequestEventTarget.onloadendFn _onprogress_BackingField;
      private dom.XMLHttpRequestEventTarget.onloadendFn _ontimeout_BackingField;

      public static dom.XMLHttpRequest prototype
      {
        get
        {
          return dom.XMLHttpRequest._prototype_BackingField;
        }
        set
        {
          dom.XMLHttpRequest._prototype_BackingField = value;
        }
      }

      [Name("DONE")]
      public static ushort DONE_Static
      {
        get
        {
          return dom.XMLHttpRequest._DONE_Static_BackingField;
        }
      }

      [Name("HEADERS_RECEIVED")]
      public static ushort HEADERS_RECEIVED_Static
      {
        get
        {
          return dom.XMLHttpRequest._HEADERS_RECEIVED_Static_BackingField;
        }
      }

      [Name("LOADING")]
      public static ushort LOADING_Static
      {
        get
        {
          return dom.XMLHttpRequest._LOADING_Static_BackingField;
        }
      }

      [Name("OPENED")]
      public static ushort OPENED_Static
      {
        get
        {
          return dom.XMLHttpRequest._OPENED_Static_BackingField;
        }
      }

      [Name("UNSENT")]
      public static ushort UNSENT_Static
      {
        get
        {
          return dom.XMLHttpRequest._UNSENT_Static_BackingField;
        }
      }

      public virtual string msCaching
      {
        get
        {
          return this._msCaching_BackingField;
        }
        set
        {
          this._msCaching_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequest.onreadystatechangeFn onreadystatechange
      {
        get
        {
          return this._onreadystatechange_BackingField;
        }
        set
        {
          this._onreadystatechange_BackingField = value;
        }
      }

      public virtual ushort readyState
      {
        get
        {
          return this._readyState_BackingField;
        }
      }

      public virtual object response
      {
        get
        {
          return this._response_BackingField;
        }
      }

      public virtual string responseText
      {
        get
        {
          return this._responseText_BackingField;
        }
      }

      public virtual dom.XMLHttpRequestResponseType responseType
      {
        get
        {
          return this._responseType_BackingField;
        }
        set
        {
          this._responseType_BackingField = value;
        }
      }

      public virtual string responseURL
      {
        get
        {
          return this._responseURL_BackingField;
        }
      }

      public virtual dom.Document responseXML
      {
        get
        {
          return this._responseXML_BackingField;
        }
      }

      public virtual ushort status
      {
        get
        {
          return this._status_BackingField;
        }
      }

      public virtual string statusText
      {
        get
        {
          return this._statusText_BackingField;
        }
      }

      public virtual uint timeout
      {
        get
        {
          return this._timeout_BackingField;
        }
        set
        {
          this._timeout_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestUpload upload
      {
        get
        {
          return this._upload_BackingField;
        }
      }

      public virtual bool withCredentials
      {
        get
        {
          return this._withCredentials_BackingField;
        }
        set
        {
          this._withCredentials_BackingField = value;
        }
      }

      public virtual extern void abort();

      public virtual extern string getAllResponseHeaders();

      public virtual extern string getResponseHeader(string header);

      public virtual extern bool msCachingEnabled();

      public virtual extern void open(string method, string url);

      public virtual extern void open(string method, string url, bool async);

      public virtual extern void open(string method, string url, bool async, string user);

      public virtual extern void open(
        string method,
        string url,
        bool async,
        string user,
        string password);

      public virtual extern void overrideMimeType(string mime);

      public virtual extern void send();

      public virtual extern void send(object data);

      public virtual extern void setRequestHeader(string header, string value);

      public virtual ushort DONE
      {
        get
        {
          return this._DONE_BackingField;
        }
      }

      public virtual ushort HEADERS_RECEIVED
      {
        get
        {
          return this._HEADERS_RECEIVED_BackingField;
        }
      }

      public virtual ushort LOADING
      {
        get
        {
          return this._LOADING_BackingField;
        }
      }

      public virtual ushort OPENED
      {
        get
        {
          return this._OPENED_BackingField;
        }
      }

      public virtual ushort UNSENT
      {
        get
        {
          return this._UNSENT_BackingField;
        }
      }

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequest.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequest.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequest.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequest.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequest.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequest.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequest.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequest.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual dom.XMLHttpRequestEventTarget.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onabortFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onloadendFn onloadend
      {
        get
        {
          return this._onloadend_BackingField;
        }
        set
        {
          this._onloadend_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onabortFn onloadstart
      {
        get
        {
          return this._onloadstart_BackingField;
        }
        set
        {
          this._onloadstart_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onloadendFn onprogress
      {
        get
        {
          return this._onprogress_BackingField;
        }
        set
        {
          this._onprogress_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onloadendFn ontimeout
      {
        get
        {
          return this._ontimeout_BackingField;
        }
        set
        {
          this._ontimeout_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      public delegate void onreadystatechangeFn(dom.Event ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class XMLHttpRequestEventTargetEventMap : IObject
    {
      private dom.Event _abort_BackingField;
      private dom.ErrorEvent _error_BackingField;
      private dom.Event _load_BackingField;
      private dom.ProgressEvent _loadend_BackingField;
      private dom.Event _loadstart_BackingField;
      private dom.ProgressEvent _progress_BackingField;
      private dom.ProgressEvent _timeout_BackingField;

      public dom.Event abort
      {
        get
        {
          return this._abort_BackingField;
        }
        set
        {
          this._abort_BackingField = value;
        }
      }

      public dom.ErrorEvent error
      {
        get
        {
          return this._error_BackingField;
        }
        set
        {
          this._error_BackingField = value;
        }
      }

      public dom.Event load
      {
        get
        {
          return this._load_BackingField;
        }
        set
        {
          this._load_BackingField = value;
        }
      }

      public dom.ProgressEvent loadend
      {
        get
        {
          return this._loadend_BackingField;
        }
        set
        {
          this._loadend_BackingField = value;
        }
      }

      public dom.Event loadstart
      {
        get
        {
          return this._loadstart_BackingField;
        }
        set
        {
          this._loadstart_BackingField = value;
        }
      }

      public dom.ProgressEvent progress
      {
        get
        {
          return this._progress_BackingField;
        }
        set
        {
          this._progress_BackingField = value;
        }
      }

      public dom.ProgressEvent timeout
      {
        get
        {
          return this._timeout_BackingField;
        }
        set
        {
          this._timeout_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"abort\"")]
        public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> abort;
        [Template("\"error\"")]
        public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> error;
        [Template("\"load\"")]
        public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> load;
        [Template("\"loadend\"")]
        public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> loadend;
        [Template("\"loadstart\"")]
        public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> loadstart;
        [Template("\"progress\"")]
        public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> progress;
        [Template("\"timeout\"")]
        public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> timeout;
      }
    }

    [IgnoreCast]
    [Virtual]
    [InterfaceWrapper]
    public abstract class XMLHttpRequestEventTarget : dom.XMLHttpRequestEventTarget.Interface, IObject
    {
      private dom.XMLHttpRequestEventTarget.onabortFn _onabort_BackingField;
      private dom.XMLHttpRequestEventTarget.onerrorFn _onerror_BackingField;
      private dom.XMLHttpRequestEventTarget.onabortFn _onload_BackingField;
      private dom.XMLHttpRequestEventTarget.onloadendFn _onloadend_BackingField;
      private dom.XMLHttpRequestEventTarget.onabortFn _onloadstart_BackingField;
      private dom.XMLHttpRequestEventTarget.onloadendFn _onprogress_BackingField;
      private dom.XMLHttpRequestEventTarget.onloadendFn _ontimeout_BackingField;

      public virtual dom.XMLHttpRequestEventTarget.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onabortFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onloadendFn onloadend
      {
        get
        {
          return this._onloadend_BackingField;
        }
        set
        {
          this._onloadend_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onabortFn onloadstart
      {
        get
        {
          return this._onloadstart_BackingField;
        }
        set
        {
          this._onloadstart_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onloadendFn onprogress
      {
        get
        {
          return this._onprogress_BackingField;
        }
        set
        {
          this._onprogress_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onloadendFn ontimeout
      {
        get
        {
          return this._ontimeout_BackingField;
        }
        set
        {
          this._ontimeout_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public abstract void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void addEventListener(string type, dom.EventListener listener);

      public abstract void addEventListener(string type, dom.EventListenerObject listener);

      public abstract void addEventListener(string type, Action<dom.Event> listener);

      public abstract void addEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void addEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(string type, dom.EventListener listener, bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListener listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract void addEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.AddEventListenerOptions options);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

      public abstract void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public abstract void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener);

      public abstract void removeEventListener(string type, dom.EventListener listener);

      public abstract void removeEventListener(string type, dom.EventListenerObject listener);

      public abstract void removeEventListener(string type, Action<dom.Event> listener);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        Union<dom.EventListener, dom.EventListenerObject> listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListener listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        dom.EventListenerObject listener,
        dom.EventListenerOptions options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public abstract void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      [Generated]
      [IgnoreCast]
      [Name("XMLHttpRequestEventTarget")]
      public interface Interface : IObject
      {
        dom.XMLHttpRequestEventTarget.onabortFn onabort { get; set; }

        dom.XMLHttpRequestEventTarget.onerrorFn onerror { get; set; }

        dom.XMLHttpRequestEventTarget.onabortFn onload { get; set; }

        dom.XMLHttpRequestEventTarget.onloadendFn onloadend { get; set; }

        dom.XMLHttpRequestEventTarget.onabortFn onloadstart { get; set; }

        dom.XMLHttpRequestEventTarget.onloadendFn onprogress { get; set; }

        dom.XMLHttpRequestEventTarget.onloadendFn ontimeout { get; set; }

        [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener);

        [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
          Union<bool, dom.AddEventListenerOptions> options);

        [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
          bool options);

        [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
        void addEventListener<K>(
          K type,
          dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void addEventListener(string type, dom.EventListener listener);

        void addEventListener(string type, dom.EventListenerObject listener);

        void addEventListener(string type, Action<dom.Event> listener);

        void addEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<bool, dom.AddEventListenerOptions> options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void addEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListener listener, bool options);

        void addEventListener(
          string type,
          dom.EventListener listener,
          dom.AddEventListenerOptions options);

        void addEventListener(string type, dom.EventListenerObject listener, bool options);

        void addEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.AddEventListenerOptions options);

        void addEventListener(
          string type,
          Action<dom.Event> listener,
          Union<bool, dom.AddEventListenerOptions> options);

        void addEventListener(string type, Action<dom.Event> listener, bool options);

        void addEventListener(
          string type,
          Action<dom.Event> listener,
          dom.AddEventListenerOptions options);

        [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener);

        [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
          Union<bool, dom.EventListenerOptions> options);

        [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
          bool options);

        [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
        void removeEventListener<K>(
          K type,
          dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener);

        void removeEventListener(string type, dom.EventListener listener);

        void removeEventListener(string type, dom.EventListenerObject listener);

        void removeEventListener(string type, Action<dom.Event> listener);

        void removeEventListener(
          string type,
          dom.EventListenerOrEventListenerObject listener,
          Union<bool, dom.EventListenerOptions> options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          bool options);

        void removeEventListener(
          string type,
          Union<dom.EventListener, dom.EventListenerObject> listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListener listener, bool options);

        void removeEventListener(
          string type,
          dom.EventListener listener,
          dom.EventListenerOptions options);

        void removeEventListener(string type, dom.EventListenerObject listener, bool options);

        void removeEventListener(
          string type,
          dom.EventListenerObject listener,
          dom.EventListenerOptions options);

        void removeEventListener(
          string type,
          Action<dom.Event> listener,
          Union<bool, dom.EventListenerOptions> options);

        void removeEventListener(string type, Action<dom.Event> listener, bool options);

        void removeEventListener(
          string type,
          Action<dom.Event> listener,
          dom.EventListenerOptions options);
      }

      [Generated]
      public delegate void onabortFn(dom.Event ev);

      [Generated]
      public delegate void onerrorFn(dom.ErrorEvent ev);

      [Generated]
      public delegate void onloadendFn(dom.ProgressEvent ev);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void addEventListenerFn<K>(object ev);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      [Generated]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class XMLHttpRequestUpload : dom.EventTarget, dom.XMLHttpRequestEventTarget.Interface, IObject
    {
      private static dom.XMLHttpRequestUpload _prototype_BackingField;
      private dom.XMLHttpRequestEventTarget.onabortFn _onabort_BackingField;
      private dom.XMLHttpRequestEventTarget.onerrorFn _onerror_BackingField;
      private dom.XMLHttpRequestEventTarget.onabortFn _onload_BackingField;
      private dom.XMLHttpRequestEventTarget.onloadendFn _onloadend_BackingField;
      private dom.XMLHttpRequestEventTarget.onabortFn _onloadstart_BackingField;
      private dom.XMLHttpRequestEventTarget.onloadendFn _onprogress_BackingField;
      private dom.XMLHttpRequestEventTarget.onloadendFn _ontimeout_BackingField;

      public static dom.XMLHttpRequestUpload prototype
      {
        get
        {
          return dom.XMLHttpRequestUpload._prototype_BackingField;
        }
        set
        {
          dom.XMLHttpRequestUpload._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestUpload.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestUpload.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestUpload.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestUpload.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      public virtual extern void addEventListener(string type, Action<dom.Event> listener);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void addEventListener(
        string type,
        Action<dom.Event> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestUpload.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestUpload.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestUpload.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestUpload.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

      public virtual extern void removeEventListener(
        string type,
        dom.EventListenerOrEventListenerObject listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        Union<bool, dom.EventListenerOptions> options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        bool options);

      public virtual extern void removeEventListener(
        string type,
        Action<dom.Event> listener,
        dom.EventListenerOptions options);

      public virtual dom.XMLHttpRequestEventTarget.onabortFn onabort
      {
        get
        {
          return this._onabort_BackingField;
        }
        set
        {
          this._onabort_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onerrorFn onerror
      {
        get
        {
          return this._onerror_BackingField;
        }
        set
        {
          this._onerror_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onabortFn onload
      {
        get
        {
          return this._onload_BackingField;
        }
        set
        {
          this._onload_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onloadendFn onloadend
      {
        get
        {
          return this._onloadend_BackingField;
        }
        set
        {
          this._onloadend_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onabortFn onloadstart
      {
        get
        {
          return this._onloadstart_BackingField;
        }
        set
        {
          this._onloadstart_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onloadendFn onprogress
      {
        get
        {
          return this._onprogress_BackingField;
        }
        set
        {
          this._onprogress_BackingField = value;
        }
      }

      public virtual dom.XMLHttpRequestEventTarget.onloadendFn ontimeout
      {
        get
        {
          return this._ontimeout_BackingField;
        }
        set
        {
          this._ontimeout_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
      public delegate void removeEventListenerFn<K>(object ev);
    }

    [CombinedClass]
    [FormerInterface]
    public class XMLSerializer : IObject
    {
      private static dom.XMLSerializer _prototype_BackingField;

      public static dom.XMLSerializer prototype
      {
        get
        {
          return dom.XMLSerializer._prototype_BackingField;
        }
        set
        {
          dom.XMLSerializer._prototype_BackingField = value;
        }
      }

      public virtual extern string serializeToString(dom.Node target);
    }

    [CombinedClass]
    [FormerInterface]
    public class XPathEvaluator : IObject
    {
      private static dom.XPathEvaluator _prototype_BackingField;

      public static dom.XPathEvaluator prototype
      {
        get
        {
          return dom.XPathEvaluator._prototype_BackingField;
        }
        set
        {
          dom.XPathEvaluator._prototype_BackingField = value;
        }
      }

      public virtual extern dom.XPathExpression createExpression(
        string expression,
        dom.XPathNSResolver resolver);

      public virtual extern dom.XPathNSResolver createNSResolver();

      public virtual extern dom.XPathNSResolver createNSResolver(dom.Node nodeResolver);

      public virtual extern dom.XPathResult evaluate(
        string expression,
        dom.Node contextNode,
        dom.XPathNSResolver resolver,
        double type,
        dom.XPathResult result);
    }

    [CombinedClass]
    [FormerInterface]
    public class XPathExpression : IObject
    {
      private static dom.XPathExpression _prototype_BackingField;

      public static dom.XPathExpression prototype
      {
        get
        {
          return dom.XPathExpression._prototype_BackingField;
        }
        set
        {
          dom.XPathExpression._prototype_BackingField = value;
        }
      }

      public virtual extern dom.XPathResult evaluate(
        dom.Node contextNode,
        double type,
        dom.XPathResult result);
    }

    [CombinedClass]
    [FormerInterface]
    public class XPathNSResolver : IObject
    {
      private static dom.XPathNSResolver _prototype_BackingField;

      public static dom.XPathNSResolver prototype
      {
        get
        {
          return dom.XPathNSResolver._prototype_BackingField;
        }
        set
        {
          dom.XPathNSResolver._prototype_BackingField = value;
        }
      }

      public virtual extern string lookupNamespaceURI(string prefix);
    }

    [CombinedClass]
    [FormerInterface]
    public class XPathResult : IObject
    {
      private static dom.XPathResult _prototype_BackingField;
      private static readonly double _ANY_TYPE_Static_BackingField;
      private static readonly double _ANY_UNORDERED_NODE_TYPE_Static_BackingField;
      private static readonly double _BOOLEAN_TYPE_Static_BackingField;
      private static readonly double _FIRST_ORDERED_NODE_TYPE_Static_BackingField;
      private static readonly double _NUMBER_TYPE_Static_BackingField;
      private static readonly double _ORDERED_NODE_ITERATOR_TYPE_Static_BackingField;
      private static readonly double _ORDERED_NODE_SNAPSHOT_TYPE_Static_BackingField;
      private static readonly double _STRING_TYPE_Static_BackingField;
      private static readonly double _UNORDERED_NODE_ITERATOR_TYPE_Static_BackingField;
      private static readonly double _UNORDERED_NODE_SNAPSHOT_TYPE_Static_BackingField;
      private readonly bool _booleanValue_BackingField;
      private readonly bool _invalidIteratorState_BackingField;
      private readonly double _numberValue_BackingField;
      private readonly double _resultType_BackingField;
      private readonly dom.Node _singleNodeValue_BackingField;
      private readonly double _snapshotLength_BackingField;
      private readonly string _stringValue_BackingField;
      private readonly double _ANY_TYPE_BackingField;
      private readonly double _ANY_UNORDERED_NODE_TYPE_BackingField;
      private readonly double _BOOLEAN_TYPE_BackingField;
      private readonly double _FIRST_ORDERED_NODE_TYPE_BackingField;
      private readonly double _NUMBER_TYPE_BackingField;
      private readonly double _ORDERED_NODE_ITERATOR_TYPE_BackingField;
      private readonly double _ORDERED_NODE_SNAPSHOT_TYPE_BackingField;
      private readonly double _STRING_TYPE_BackingField;
      private readonly double _UNORDERED_NODE_ITERATOR_TYPE_BackingField;
      private readonly double _UNORDERED_NODE_SNAPSHOT_TYPE_BackingField;

      public static dom.XPathResult prototype
      {
        get
        {
          return dom.XPathResult._prototype_BackingField;
        }
        set
        {
          dom.XPathResult._prototype_BackingField = value;
        }
      }

      [Name("ANY_TYPE")]
      public static double ANY_TYPE_Static
      {
        get
        {
          return dom.XPathResult._ANY_TYPE_Static_BackingField;
        }
      }

      [Name("ANY_UNORDERED_NODE_TYPE")]
      public static double ANY_UNORDERED_NODE_TYPE_Static
      {
        get
        {
          return dom.XPathResult._ANY_UNORDERED_NODE_TYPE_Static_BackingField;
        }
      }

      [Name("BOOLEAN_TYPE")]
      public static double BOOLEAN_TYPE_Static
      {
        get
        {
          return dom.XPathResult._BOOLEAN_TYPE_Static_BackingField;
        }
      }

      [Name("FIRST_ORDERED_NODE_TYPE")]
      public static double FIRST_ORDERED_NODE_TYPE_Static
      {
        get
        {
          return dom.XPathResult._FIRST_ORDERED_NODE_TYPE_Static_BackingField;
        }
      }

      [Name("NUMBER_TYPE")]
      public static double NUMBER_TYPE_Static
      {
        get
        {
          return dom.XPathResult._NUMBER_TYPE_Static_BackingField;
        }
      }

      [Name("ORDERED_NODE_ITERATOR_TYPE")]
      public static double ORDERED_NODE_ITERATOR_TYPE_Static
      {
        get
        {
          return dom.XPathResult._ORDERED_NODE_ITERATOR_TYPE_Static_BackingField;
        }
      }

      [Name("ORDERED_NODE_SNAPSHOT_TYPE")]
      public static double ORDERED_NODE_SNAPSHOT_TYPE_Static
      {
        get
        {
          return dom.XPathResult._ORDERED_NODE_SNAPSHOT_TYPE_Static_BackingField;
        }
      }

      [Name("STRING_TYPE")]
      public static double STRING_TYPE_Static
      {
        get
        {
          return dom.XPathResult._STRING_TYPE_Static_BackingField;
        }
      }

      [Name("UNORDERED_NODE_ITERATOR_TYPE")]
      public static double UNORDERED_NODE_ITERATOR_TYPE_Static
      {
        get
        {
          return dom.XPathResult._UNORDERED_NODE_ITERATOR_TYPE_Static_BackingField;
        }
      }

      [Name("UNORDERED_NODE_SNAPSHOT_TYPE")]
      public static double UNORDERED_NODE_SNAPSHOT_TYPE_Static
      {
        get
        {
          return dom.XPathResult._UNORDERED_NODE_SNAPSHOT_TYPE_Static_BackingField;
        }
      }

      public virtual bool booleanValue
      {
        get
        {
          return this._booleanValue_BackingField;
        }
      }

      public virtual bool invalidIteratorState
      {
        get
        {
          return this._invalidIteratorState_BackingField;
        }
      }

      public virtual double numberValue
      {
        get
        {
          return this._numberValue_BackingField;
        }
      }

      public virtual double resultType
      {
        get
        {
          return this._resultType_BackingField;
        }
      }

      public virtual dom.Node singleNodeValue
      {
        get
        {
          return this._singleNodeValue_BackingField;
        }
      }

      public virtual double snapshotLength
      {
        get
        {
          return this._snapshotLength_BackingField;
        }
      }

      public virtual string stringValue
      {
        get
        {
          return this._stringValue_BackingField;
        }
      }

      public virtual extern dom.Node iterateNext();

      public virtual extern dom.Node snapshotItem(double index);

      public virtual double ANY_TYPE
      {
        get
        {
          return this._ANY_TYPE_BackingField;
        }
      }

      public virtual double ANY_UNORDERED_NODE_TYPE
      {
        get
        {
          return this._ANY_UNORDERED_NODE_TYPE_BackingField;
        }
      }

      public virtual double BOOLEAN_TYPE
      {
        get
        {
          return this._BOOLEAN_TYPE_BackingField;
        }
      }

      public virtual double FIRST_ORDERED_NODE_TYPE
      {
        get
        {
          return this._FIRST_ORDERED_NODE_TYPE_BackingField;
        }
      }

      public virtual double NUMBER_TYPE
      {
        get
        {
          return this._NUMBER_TYPE_BackingField;
        }
      }

      public virtual double ORDERED_NODE_ITERATOR_TYPE
      {
        get
        {
          return this._ORDERED_NODE_ITERATOR_TYPE_BackingField;
        }
      }

      public virtual double ORDERED_NODE_SNAPSHOT_TYPE
      {
        get
        {
          return this._ORDERED_NODE_SNAPSHOT_TYPE_BackingField;
        }
      }

      public virtual double STRING_TYPE
      {
        get
        {
          return this._STRING_TYPE_BackingField;
        }
      }

      public virtual double UNORDERED_NODE_ITERATOR_TYPE
      {
        get
        {
          return this._UNORDERED_NODE_ITERATOR_TYPE_BackingField;
        }
      }

      public virtual double UNORDERED_NODE_SNAPSHOT_TYPE
      {
        get
        {
          return this._UNORDERED_NODE_SNAPSHOT_TYPE_BackingField;
        }
      }
    }

    [CombinedClass]
    [FormerInterface]
    public class XSLTProcessor : IObject
    {
      private static dom.XSLTProcessor _prototype_BackingField;

      public static dom.XSLTProcessor prototype
      {
        get
        {
          return dom.XSLTProcessor._prototype_BackingField;
        }
        set
        {
          dom.XSLTProcessor._prototype_BackingField = value;
        }
      }

      public virtual extern void clearParameters();

      public virtual extern object getParameter(string namespaceURI, string localName);

      public virtual extern void importStylesheet(dom.Node style);

      public virtual extern void removeParameter(string namespaceURI, string localName);

      public virtual extern void reset();

      public virtual extern void setParameter(string namespaceURI, string localName, object value);

      public virtual extern dom.Document transformToDocument(dom.Node source);

      public virtual extern dom.DocumentFragment transformToFragment(
        dom.Node source,
        dom.Document document);
    }

    [CombinedClass]
    [FormerInterface]
    public class webkitRTCPeerConnection : dom.RTCPeerConnection
    {
      private static dom.webkitRTCPeerConnection _prototype_BackingField;

      public extern webkitRTCPeerConnection(dom.RTCConfiguration configuration);

      public static dom.webkitRTCPeerConnection prototype
      {
        get
        {
          return dom.webkitRTCPeerConnection._prototype_BackingField;
        }
        set
        {
          dom.webkitRTCPeerConnection._prototype_BackingField = value;
        }
      }

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.webkitRTCPeerConnection.addEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.webkitRTCPeerConnection.addEventListenerFn<K> listener,
        Union<bool, dom.AddEventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.webkitRTCPeerConnection.addEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void addEventListener<K>(
        K type,
        dom.webkitRTCPeerConnection.addEventListenerFn<K> listener,
        dom.AddEventListenerOptions options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.webkitRTCPeerConnection.removeEventListenerFn<K> listener);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.webkitRTCPeerConnection.removeEventListenerFn<K> listener,
        Union<bool, dom.EventListenerOptions> options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.webkitRTCPeerConnection.removeEventListenerFn<K> listener,
        bool options);

      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public virtual extern void removeEventListener<K>(
        K type,
        dom.webkitRTCPeerConnection.removeEventListenerFn<K> listener,
        dom.EventListenerOptions options);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public new delegate void addEventListenerFn<K>(object ev);

      [Generated]
      [Where("K", typeof (KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
      public new delegate void removeEventListenerFn<K>(object ev);
    }

    public delegate void DecodeErrorCallback(dom.DOMException error);

    public delegate void DecodeSuccessCallback(dom.AudioBuffer decodedData);

    [IgnoreCast]
    [Virtual]
    [FormerInterface]
    public class ErrorEventHandler : IObject
    {
      [Template("{0}")]
      public extern ErrorEventHandler(dom.ErrorEventHandler.ErrorEventHandlerDelegate fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate2 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate3 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate4 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate5 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate6 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate7 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate8 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate9 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate10 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate11 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate12 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate13 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate14 fn);

      [Template("{0}")]
      public extern ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate15 fn);

      [Template("{this}({0})")]
      public virtual extern void Self(Union<dom.Event, string> @event);

      [Template("{this}({0})")]
      public virtual extern void Self(dom.Event @event);

      [Template("{this}({0})")]
      public virtual extern void Self(string @event);

      [Template("{this}({0}, {1})")]
      public virtual extern void Self(Union<dom.Event, string> @event, string source);

      [Template("{this}({0}, {1})")]
      public virtual extern void Self(dom.Event @event, string source);

      [Template("{this}({0}, {1})")]
      public virtual extern void Self(string @event, string source);

      [Template("{this}({0}, {1}, {2})")]
      public virtual extern void Self(
        Union<dom.Event, string> @event,
        string source,
        double fileno);

      [Template("{this}({0}, {1}, {2})")]
      public virtual extern void Self(dom.Event @event, string source, double fileno);

      [Template("{this}({0}, {1}, {2})")]
      public virtual extern void Self(string @event, string source, double fileno);

      [Template("{this}({0}, {1}, {2}, {3})")]
      public virtual extern void Self(
        Union<dom.Event, string> @event,
        string source,
        double fileno,
        double columnNumber);

      [Template("{this}({0}, {1}, {2}, {3})")]
      public virtual extern void Self(
        dom.Event @event,
        string source,
        double fileno,
        double columnNumber);

      [Template("{this}({0}, {1}, {2}, {3})")]
      public virtual extern void Self(
        string @event,
        string source,
        double fileno,
        double columnNumber);

      [Template("{this}({0}, {1}, {2}, {3}, {4})")]
      public virtual extern void Self(
        Union<dom.Event, string> @event,
        string source,
        double fileno,
        double columnNumber,
        es5.Error error);

      [Template("{this}({0}, {1}, {2}, {3}, {4})")]
      public virtual extern void Self(
        dom.Event @event,
        string source,
        double fileno,
        double columnNumber,
        es5.Error error);

      [Template("{this}({0}, {1}, {2}, {3}, {4})")]
      public virtual extern void Self(
        string @event,
        string source,
        double fileno,
        double columnNumber,
        es5.Error error);

      public static extern explicit operator dom.ErrorEventHandler(Delegate value);

      public static extern implicit operator Delegate(dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate2 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate2(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate3 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate3(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate4 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate4(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate5 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate5(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate6 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate6(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate7 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate7(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate8 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate8(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate9 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate9(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate10 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate10(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate11 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate11(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate12 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate12(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate13 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate13(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate14 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate14(
        dom.ErrorEventHandler value);

      public static extern implicit operator dom.ErrorEventHandler(
        dom.ErrorEventHandler.ErrorEventHandlerDelegate15 value);

      public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate15(
        dom.ErrorEventHandler value);

      public delegate void ErrorEventHandlerDelegate(Union<dom.Event, string> @event);

      public delegate void ErrorEventHandlerDelegate2(dom.Event @event);

      public delegate void ErrorEventHandlerDelegate3(string @event);

      public delegate void ErrorEventHandlerDelegate4(
        Union<dom.Event, string> @event,
        string source);

      public delegate void ErrorEventHandlerDelegate5(dom.Event @event, string source);

      public delegate void ErrorEventHandlerDelegate6(string @event, string source);

      public delegate void ErrorEventHandlerDelegate7(
        Union<dom.Event, string> @event,
        string source,
        double fileno);

      public delegate void ErrorEventHandlerDelegate8(
        dom.Event @event,
        string source,
        double fileno);

      public delegate void ErrorEventHandlerDelegate9(string @event, string source, double fileno);

      public delegate void ErrorEventHandlerDelegate10(
        Union<dom.Event, string> @event,
        string source,
        double fileno,
        double columnNumber);

      public delegate void ErrorEventHandlerDelegate11(
        dom.Event @event,
        string source,
        double fileno,
        double columnNumber);

      public delegate void ErrorEventHandlerDelegate12(
        string @event,
        string source,
        double fileno,
        double columnNumber);

      public delegate void ErrorEventHandlerDelegate13(
        Union<dom.Event, string> @event,
        string source,
        double fileno,
        double columnNumber,
        es5.Error error);

      public delegate void ErrorEventHandlerDelegate14(
        dom.Event @event,
        string source,
        double fileno,
        double columnNumber,
        es5.Error error);

      public delegate void ErrorEventHandlerDelegate15(
        string @event,
        string source,
        double fileno,
        double columnNumber,
        es5.Error error);
    }

    public delegate object EventHandlerNonNull(dom.Event @event);

    public delegate void ForEachCallback(
      Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> keyId,
      dom.MediaKeyStatus status);

    public delegate void FrameRequestCallback(double time);

    public delegate void FunctionStringCallback(string data);

    public delegate void IntersectionObserverCallback(
      dom.IntersectionObserverEntry[] entries,
      dom.IntersectionObserver observer);

    public delegate void MSLaunchUriCallback();

    public delegate void MediaQueryListListener(dom.MediaQueryList mql);

    public delegate void MutationCallback(
      dom.MutationRecord[] mutations,
      dom.MutationObserver observer);

    public delegate void NavigatorUserMediaErrorCallback(dom.MediaStreamError error);

    public delegate void NavigatorUserMediaSuccessCallback(dom.MediaStream stream);

    public delegate void NotificationPermissionCallback(dom.NotificationPermission permission);

    public delegate void PositionCallback(dom.Position position);

    public delegate void PositionErrorCallback(dom.PositionError error);

    public delegate void RTCPeerConnectionErrorCallback(dom.DOMError error);

    public delegate void RTCSessionDescriptionCallback(dom.RTCSessionDescription sdp);

    public delegate void RTCStatsCallback(dom.RTCStatsReport report);

    public delegate void VoidFunction();

    public delegate void WritableStreamChunkCallback(
      object chunk,
      dom.WritableStreamDefaultController controller);

    public delegate void WritableStreamDefaultControllerCallback(
      dom.WritableStreamDefaultController controller);

    public delegate void WritableStreamErrorCallback(string reason);

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class HTMLElementTagNameMap : IObject
    {
      private dom.HTMLAnchorElement _a_BackingField;
      private dom.HTMLElement _abbr_BackingField;
      private dom.HTMLElement _acronym_BackingField;
      private dom.HTMLElement _address_BackingField;
      private dom.HTMLAppletElement _applet_BackingField;
      private dom.HTMLAreaElement _area_BackingField;
      private dom.HTMLElement _article_BackingField;
      private dom.HTMLElement _aside_BackingField;
      private dom.HTMLAudioElement _audio_BackingField;
      private dom.HTMLElement _b_BackingField;
      private dom.HTMLBaseElement _base_BackingField;
      private dom.HTMLBaseFontElement _basefont_BackingField;
      private dom.HTMLElement _bdo_BackingField;
      private dom.HTMLElement _big_BackingField;
      private dom.HTMLQuoteElement _blockquote_BackingField;
      private dom.HTMLBodyElement _body_BackingField;
      private dom.HTMLBRElement _br_BackingField;
      private dom.HTMLButtonElement _button_BackingField;
      private dom.HTMLCanvasElement _canvas_BackingField;
      private dom.HTMLTableCaptionElement _caption_BackingField;
      private dom.HTMLElement _center_BackingField;
      private dom.HTMLElement _cite_BackingField;
      private dom.HTMLElement _code_BackingField;
      private dom.HTMLTableColElement _col_BackingField;
      private dom.HTMLTableColElement _colgroup_BackingField;
      private dom.HTMLDataElement _data_BackingField;
      private dom.HTMLDataListElement _datalist_BackingField;
      private dom.HTMLElement _dd_BackingField;
      private dom.HTMLModElement _del_BackingField;
      private dom.HTMLElement _dfn_BackingField;
      private dom.HTMLDirectoryElement _dir_BackingField;
      private dom.HTMLDivElement _div_BackingField;
      private dom.HTMLDListElement _dl_BackingField;
      private dom.HTMLElement _dt_BackingField;
      private dom.HTMLElement _em_BackingField;
      private dom.HTMLEmbedElement _embed_BackingField;
      private dom.HTMLFieldSetElement _fieldset_BackingField;
      private dom.HTMLElement _figcaption_BackingField;
      private dom.HTMLElement _figure_BackingField;
      private dom.HTMLFontElement _font_BackingField;
      private dom.HTMLElement _footer_BackingField;
      private dom.HTMLFormElement _form_BackingField;
      private dom.HTMLFrameElement _frame_BackingField;
      private dom.HTMLFrameSetElement _frameset_BackingField;
      private dom.HTMLHeadingElement _h1_BackingField;
      private dom.HTMLHeadingElement _h2_BackingField;
      private dom.HTMLHeadingElement _h3_BackingField;
      private dom.HTMLHeadingElement _h4_BackingField;
      private dom.HTMLHeadingElement _h5_BackingField;
      private dom.HTMLHeadingElement _h6_BackingField;
      private dom.HTMLHeadElement _head_BackingField;
      private dom.HTMLElement _header_BackingField;
      private dom.HTMLElement _hgroup_BackingField;
      private dom.HTMLHRElement _hr_BackingField;
      private dom.HTMLHtmlElement _html_BackingField;
      private dom.HTMLElement _i_BackingField;
      private dom.HTMLIFrameElement _iframe_BackingField;
      private dom.HTMLImageElement _img_BackingField;
      private dom.HTMLInputElement _input_BackingField;
      private dom.HTMLModElement _ins_BackingField;
      private dom.HTMLUnknownElement _isindex_BackingField;
      private dom.HTMLElement _kbd_BackingField;
      private dom.HTMLElement _keygen_BackingField;
      private dom.HTMLLabelElement _label_BackingField;
      private dom.HTMLLegendElement _legend_BackingField;
      private dom.HTMLLIElement _li_BackingField;
      private dom.HTMLLinkElement _link_BackingField;
      private dom.HTMLPreElement _listing_BackingField;
      private dom.HTMLMapElement _map_BackingField;
      private dom.HTMLElement _mark_BackingField;
      private dom.HTMLMarqueeElement _marquee_BackingField;
      private dom.HTMLMenuElement _menu_BackingField;
      private dom.HTMLMetaElement _meta_BackingField;
      private dom.HTMLMeterElement _meter_BackingField;
      private dom.HTMLElement _nav_BackingField;
      private dom.HTMLUnknownElement _nextid_BackingField;
      private dom.HTMLElement _nobr_BackingField;
      private dom.HTMLElement _noframes_BackingField;
      private dom.HTMLElement _noscript_BackingField;
      private dom.HTMLObjectElement _object_BackingField;
      private dom.HTMLOListElement _ol_BackingField;
      private dom.HTMLOptGroupElement _optgroup_BackingField;
      private dom.HTMLOptionElement _option_BackingField;
      private dom.HTMLOutputElement _output_BackingField;
      private dom.HTMLParagraphElement _p_BackingField;
      private dom.HTMLParamElement _param_BackingField;
      private dom.HTMLPictureElement _picture_BackingField;
      private dom.HTMLElement _plaintext_BackingField;
      private dom.HTMLPreElement _pre_BackingField;
      private dom.HTMLProgressElement _progress_BackingField;
      private dom.HTMLQuoteElement _q_BackingField;
      private dom.HTMLElement _rt_BackingField;
      private dom.HTMLElement _ruby_BackingField;
      private dom.HTMLElement _s_BackingField;
      private dom.HTMLElement _samp_BackingField;
      private dom.HTMLScriptElement _script_BackingField;
      private dom.HTMLElement _section_BackingField;
      private dom.HTMLSelectElement _select_BackingField;
      private dom.HTMLSlotElement _slot_BackingField;
      private dom.HTMLElement _small_BackingField;
      private dom.HTMLSourceElement _source_BackingField;
      private dom.HTMLSpanElement _span_BackingField;
      private dom.HTMLElement _strike_BackingField;
      private dom.HTMLElement _strong_BackingField;
      private dom.HTMLStyleElement _style_BackingField;
      private dom.HTMLElement _sub_BackingField;
      private dom.HTMLElement _sup_BackingField;
      private dom.HTMLTableElement _table_BackingField;
      private dom.HTMLTableSectionElement _tbody_BackingField;
      private dom.HTMLTableDataCellElement _td_BackingField;
      private dom.HTMLTemplateElement _template_BackingField;
      private dom.HTMLTextAreaElement _textarea_BackingField;
      private dom.HTMLTableSectionElement _tfoot_BackingField;
      private dom.HTMLTableHeaderCellElement _th_BackingField;
      private dom.HTMLTableSectionElement _thead_BackingField;
      private dom.HTMLTimeElement _time_BackingField;
      private dom.HTMLTitleElement _title_BackingField;
      private dom.HTMLTableRowElement _tr_BackingField;
      private dom.HTMLTrackElement _track_BackingField;
      private dom.HTMLElement _tt_BackingField;
      private dom.HTMLElement _u_BackingField;
      private dom.HTMLUListElement _ul_BackingField;
      private dom.HTMLElement _var_BackingField;
      private dom.HTMLVideoElement _video_BackingField;
      private dom.HTMLElement _wbr_BackingField;
      private dom.HTMLPreElement _xmp_BackingField;

      public dom.HTMLAnchorElement a
      {
        get
        {
          return this._a_BackingField;
        }
        set
        {
          this._a_BackingField = value;
        }
      }

      public dom.HTMLElement abbr
      {
        get
        {
          return this._abbr_BackingField;
        }
        set
        {
          this._abbr_BackingField = value;
        }
      }

      public dom.HTMLElement acronym
      {
        get
        {
          return this._acronym_BackingField;
        }
        set
        {
          this._acronym_BackingField = value;
        }
      }

      public dom.HTMLElement address
      {
        get
        {
          return this._address_BackingField;
        }
        set
        {
          this._address_BackingField = value;
        }
      }

      public dom.HTMLAppletElement applet
      {
        get
        {
          return this._applet_BackingField;
        }
        set
        {
          this._applet_BackingField = value;
        }
      }

      public dom.HTMLAreaElement area
      {
        get
        {
          return this._area_BackingField;
        }
        set
        {
          this._area_BackingField = value;
        }
      }

      public dom.HTMLElement article
      {
        get
        {
          return this._article_BackingField;
        }
        set
        {
          this._article_BackingField = value;
        }
      }

      public dom.HTMLElement aside
      {
        get
        {
          return this._aside_BackingField;
        }
        set
        {
          this._aside_BackingField = value;
        }
      }

      public dom.HTMLAudioElement audio
      {
        get
        {
          return this._audio_BackingField;
        }
        set
        {
          this._audio_BackingField = value;
        }
      }

      public dom.HTMLElement b
      {
        get
        {
          return this._b_BackingField;
        }
        set
        {
          this._b_BackingField = value;
        }
      }

      public dom.HTMLBaseElement @base
      {
        get
        {
          return this._base_BackingField;
        }
        set
        {
          this._base_BackingField = value;
        }
      }

      public dom.HTMLBaseFontElement basefont
      {
        get
        {
          return this._basefont_BackingField;
        }
        set
        {
          this._basefont_BackingField = value;
        }
      }

      public dom.HTMLElement bdo
      {
        get
        {
          return this._bdo_BackingField;
        }
        set
        {
          this._bdo_BackingField = value;
        }
      }

      public dom.HTMLElement big
      {
        get
        {
          return this._big_BackingField;
        }
        set
        {
          this._big_BackingField = value;
        }
      }

      public dom.HTMLQuoteElement blockquote
      {
        get
        {
          return this._blockquote_BackingField;
        }
        set
        {
          this._blockquote_BackingField = value;
        }
      }

      public dom.HTMLBodyElement body
      {
        get
        {
          return this._body_BackingField;
        }
        set
        {
          this._body_BackingField = value;
        }
      }

      public dom.HTMLBRElement br
      {
        get
        {
          return this._br_BackingField;
        }
        set
        {
          this._br_BackingField = value;
        }
      }

      public dom.HTMLButtonElement button
      {
        get
        {
          return this._button_BackingField;
        }
        set
        {
          this._button_BackingField = value;
        }
      }

      public dom.HTMLCanvasElement canvas
      {
        get
        {
          return this._canvas_BackingField;
        }
        set
        {
          this._canvas_BackingField = value;
        }
      }

      public dom.HTMLTableCaptionElement caption
      {
        get
        {
          return this._caption_BackingField;
        }
        set
        {
          this._caption_BackingField = value;
        }
      }

      public dom.HTMLElement center
      {
        get
        {
          return this._center_BackingField;
        }
        set
        {
          this._center_BackingField = value;
        }
      }

      public dom.HTMLElement cite
      {
        get
        {
          return this._cite_BackingField;
        }
        set
        {
          this._cite_BackingField = value;
        }
      }

      public dom.HTMLElement code
      {
        get
        {
          return this._code_BackingField;
        }
        set
        {
          this._code_BackingField = value;
        }
      }

      public dom.HTMLTableColElement col
      {
        get
        {
          return this._col_BackingField;
        }
        set
        {
          this._col_BackingField = value;
        }
      }

      public dom.HTMLTableColElement colgroup
      {
        get
        {
          return this._colgroup_BackingField;
        }
        set
        {
          this._colgroup_BackingField = value;
        }
      }

      public dom.HTMLDataElement data
      {
        get
        {
          return this._data_BackingField;
        }
        set
        {
          this._data_BackingField = value;
        }
      }

      public dom.HTMLDataListElement datalist
      {
        get
        {
          return this._datalist_BackingField;
        }
        set
        {
          this._datalist_BackingField = value;
        }
      }

      public dom.HTMLElement dd
      {
        get
        {
          return this._dd_BackingField;
        }
        set
        {
          this._dd_BackingField = value;
        }
      }

      public dom.HTMLModElement del
      {
        get
        {
          return this._del_BackingField;
        }
        set
        {
          this._del_BackingField = value;
        }
      }

      public dom.HTMLElement dfn
      {
        get
        {
          return this._dfn_BackingField;
        }
        set
        {
          this._dfn_BackingField = value;
        }
      }

      public dom.HTMLDirectoryElement dir
      {
        get
        {
          return this._dir_BackingField;
        }
        set
        {
          this._dir_BackingField = value;
        }
      }

      public dom.HTMLDivElement div
      {
        get
        {
          return this._div_BackingField;
        }
        set
        {
          this._div_BackingField = value;
        }
      }

      public dom.HTMLDListElement dl
      {
        get
        {
          return this._dl_BackingField;
        }
        set
        {
          this._dl_BackingField = value;
        }
      }

      public dom.HTMLElement dt
      {
        get
        {
          return this._dt_BackingField;
        }
        set
        {
          this._dt_BackingField = value;
        }
      }

      public dom.HTMLElement em
      {
        get
        {
          return this._em_BackingField;
        }
        set
        {
          this._em_BackingField = value;
        }
      }

      public dom.HTMLEmbedElement embed
      {
        get
        {
          return this._embed_BackingField;
        }
        set
        {
          this._embed_BackingField = value;
        }
      }

      public dom.HTMLFieldSetElement fieldset
      {
        get
        {
          return this._fieldset_BackingField;
        }
        set
        {
          this._fieldset_BackingField = value;
        }
      }

      public dom.HTMLElement figcaption
      {
        get
        {
          return this._figcaption_BackingField;
        }
        set
        {
          this._figcaption_BackingField = value;
        }
      }

      public dom.HTMLElement figure
      {
        get
        {
          return this._figure_BackingField;
        }
        set
        {
          this._figure_BackingField = value;
        }
      }

      public dom.HTMLFontElement font
      {
        get
        {
          return this._font_BackingField;
        }
        set
        {
          this._font_BackingField = value;
        }
      }

      public dom.HTMLElement footer
      {
        get
        {
          return this._footer_BackingField;
        }
        set
        {
          this._footer_BackingField = value;
        }
      }

      public dom.HTMLFormElement form
      {
        get
        {
          return this._form_BackingField;
        }
        set
        {
          this._form_BackingField = value;
        }
      }

      public dom.HTMLFrameElement frame
      {
        get
        {
          return this._frame_BackingField;
        }
        set
        {
          this._frame_BackingField = value;
        }
      }

      public dom.HTMLFrameSetElement frameset
      {
        get
        {
          return this._frameset_BackingField;
        }
        set
        {
          this._frameset_BackingField = value;
        }
      }

      public dom.HTMLHeadingElement h1
      {
        get
        {
          return this._h1_BackingField;
        }
        set
        {
          this._h1_BackingField = value;
        }
      }

      public dom.HTMLHeadingElement h2
      {
        get
        {
          return this._h2_BackingField;
        }
        set
        {
          this._h2_BackingField = value;
        }
      }

      public dom.HTMLHeadingElement h3
      {
        get
        {
          return this._h3_BackingField;
        }
        set
        {
          this._h3_BackingField = value;
        }
      }

      public dom.HTMLHeadingElement h4
      {
        get
        {
          return this._h4_BackingField;
        }
        set
        {
          this._h4_BackingField = value;
        }
      }

      public dom.HTMLHeadingElement h5
      {
        get
        {
          return this._h5_BackingField;
        }
        set
        {
          this._h5_BackingField = value;
        }
      }

      public dom.HTMLHeadingElement h6
      {
        get
        {
          return this._h6_BackingField;
        }
        set
        {
          this._h6_BackingField = value;
        }
      }

      public dom.HTMLHeadElement head
      {
        get
        {
          return this._head_BackingField;
        }
        set
        {
          this._head_BackingField = value;
        }
      }

      public dom.HTMLElement header
      {
        get
        {
          return this._header_BackingField;
        }
        set
        {
          this._header_BackingField = value;
        }
      }

      public dom.HTMLElement hgroup
      {
        get
        {
          return this._hgroup_BackingField;
        }
        set
        {
          this._hgroup_BackingField = value;
        }
      }

      public dom.HTMLHRElement hr
      {
        get
        {
          return this._hr_BackingField;
        }
        set
        {
          this._hr_BackingField = value;
        }
      }

      public dom.HTMLHtmlElement html
      {
        get
        {
          return this._html_BackingField;
        }
        set
        {
          this._html_BackingField = value;
        }
      }

      public dom.HTMLElement i
      {
        get
        {
          return this._i_BackingField;
        }
        set
        {
          this._i_BackingField = value;
        }
      }

      public dom.HTMLIFrameElement iframe
      {
        get
        {
          return this._iframe_BackingField;
        }
        set
        {
          this._iframe_BackingField = value;
        }
      }

      public dom.HTMLImageElement img
      {
        get
        {
          return this._img_BackingField;
        }
        set
        {
          this._img_BackingField = value;
        }
      }

      public dom.HTMLInputElement input
      {
        get
        {
          return this._input_BackingField;
        }
        set
        {
          this._input_BackingField = value;
        }
      }

      public dom.HTMLModElement ins
      {
        get
        {
          return this._ins_BackingField;
        }
        set
        {
          this._ins_BackingField = value;
        }
      }

      public dom.HTMLUnknownElement isindex
      {
        get
        {
          return this._isindex_BackingField;
        }
        set
        {
          this._isindex_BackingField = value;
        }
      }

      public dom.HTMLElement kbd
      {
        get
        {
          return this._kbd_BackingField;
        }
        set
        {
          this._kbd_BackingField = value;
        }
      }

      public dom.HTMLElement keygen
      {
        get
        {
          return this._keygen_BackingField;
        }
        set
        {
          this._keygen_BackingField = value;
        }
      }

      public dom.HTMLLabelElement label
      {
        get
        {
          return this._label_BackingField;
        }
        set
        {
          this._label_BackingField = value;
        }
      }

      public dom.HTMLLegendElement legend
      {
        get
        {
          return this._legend_BackingField;
        }
        set
        {
          this._legend_BackingField = value;
        }
      }

      public dom.HTMLLIElement li
      {
        get
        {
          return this._li_BackingField;
        }
        set
        {
          this._li_BackingField = value;
        }
      }

      public dom.HTMLLinkElement link
      {
        get
        {
          return this._link_BackingField;
        }
        set
        {
          this._link_BackingField = value;
        }
      }

      public dom.HTMLPreElement listing
      {
        get
        {
          return this._listing_BackingField;
        }
        set
        {
          this._listing_BackingField = value;
        }
      }

      public dom.HTMLMapElement map
      {
        get
        {
          return this._map_BackingField;
        }
        set
        {
          this._map_BackingField = value;
        }
      }

      public dom.HTMLElement mark
      {
        get
        {
          return this._mark_BackingField;
        }
        set
        {
          this._mark_BackingField = value;
        }
      }

      public dom.HTMLMarqueeElement marquee
      {
        get
        {
          return this._marquee_BackingField;
        }
        set
        {
          this._marquee_BackingField = value;
        }
      }

      public dom.HTMLMenuElement menu
      {
        get
        {
          return this._menu_BackingField;
        }
        set
        {
          this._menu_BackingField = value;
        }
      }

      public dom.HTMLMetaElement meta
      {
        get
        {
          return this._meta_BackingField;
        }
        set
        {
          this._meta_BackingField = value;
        }
      }

      public dom.HTMLMeterElement meter
      {
        get
        {
          return this._meter_BackingField;
        }
        set
        {
          this._meter_BackingField = value;
        }
      }

      public dom.HTMLElement nav
      {
        get
        {
          return this._nav_BackingField;
        }
        set
        {
          this._nav_BackingField = value;
        }
      }

      public dom.HTMLUnknownElement nextid
      {
        get
        {
          return this._nextid_BackingField;
        }
        set
        {
          this._nextid_BackingField = value;
        }
      }

      public dom.HTMLElement nobr
      {
        get
        {
          return this._nobr_BackingField;
        }
        set
        {
          this._nobr_BackingField = value;
        }
      }

      public dom.HTMLElement noframes
      {
        get
        {
          return this._noframes_BackingField;
        }
        set
        {
          this._noframes_BackingField = value;
        }
      }

      public dom.HTMLElement noscript
      {
        get
        {
          return this._noscript_BackingField;
        }
        set
        {
          this._noscript_BackingField = value;
        }
      }

      public dom.HTMLObjectElement @object
      {
        get
        {
          return this._object_BackingField;
        }
        set
        {
          this._object_BackingField = value;
        }
      }

      public dom.HTMLOListElement ol
      {
        get
        {
          return this._ol_BackingField;
        }
        set
        {
          this._ol_BackingField = value;
        }
      }

      public dom.HTMLOptGroupElement optgroup
      {
        get
        {
          return this._optgroup_BackingField;
        }
        set
        {
          this._optgroup_BackingField = value;
        }
      }

      public dom.HTMLOptionElement option
      {
        get
        {
          return this._option_BackingField;
        }
        set
        {
          this._option_BackingField = value;
        }
      }

      public dom.HTMLOutputElement output
      {
        get
        {
          return this._output_BackingField;
        }
        set
        {
          this._output_BackingField = value;
        }
      }

      public dom.HTMLParagraphElement p
      {
        get
        {
          return this._p_BackingField;
        }
        set
        {
          this._p_BackingField = value;
        }
      }

      public dom.HTMLParamElement param
      {
        get
        {
          return this._param_BackingField;
        }
        set
        {
          this._param_BackingField = value;
        }
      }

      public dom.HTMLPictureElement picture
      {
        get
        {
          return this._picture_BackingField;
        }
        set
        {
          this._picture_BackingField = value;
        }
      }

      public dom.HTMLElement plaintext
      {
        get
        {
          return this._plaintext_BackingField;
        }
        set
        {
          this._plaintext_BackingField = value;
        }
      }

      public dom.HTMLPreElement pre
      {
        get
        {
          return this._pre_BackingField;
        }
        set
        {
          this._pre_BackingField = value;
        }
      }

      public dom.HTMLProgressElement progress
      {
        get
        {
          return this._progress_BackingField;
        }
        set
        {
          this._progress_BackingField = value;
        }
      }

      public dom.HTMLQuoteElement q
      {
        get
        {
          return this._q_BackingField;
        }
        set
        {
          this._q_BackingField = value;
        }
      }

      public dom.HTMLElement rt
      {
        get
        {
          return this._rt_BackingField;
        }
        set
        {
          this._rt_BackingField = value;
        }
      }

      public dom.HTMLElement ruby
      {
        get
        {
          return this._ruby_BackingField;
        }
        set
        {
          this._ruby_BackingField = value;
        }
      }

      public dom.HTMLElement s
      {
        get
        {
          return this._s_BackingField;
        }
        set
        {
          this._s_BackingField = value;
        }
      }

      public dom.HTMLElement samp
      {
        get
        {
          return this._samp_BackingField;
        }
        set
        {
          this._samp_BackingField = value;
        }
      }

      public dom.HTMLScriptElement script
      {
        get
        {
          return this._script_BackingField;
        }
        set
        {
          this._script_BackingField = value;
        }
      }

      public dom.HTMLElement section
      {
        get
        {
          return this._section_BackingField;
        }
        set
        {
          this._section_BackingField = value;
        }
      }

      public dom.HTMLSelectElement select
      {
        get
        {
          return this._select_BackingField;
        }
        set
        {
          this._select_BackingField = value;
        }
      }

      public dom.HTMLSlotElement slot
      {
        get
        {
          return this._slot_BackingField;
        }
        set
        {
          this._slot_BackingField = value;
        }
      }

      public dom.HTMLElement small
      {
        get
        {
          return this._small_BackingField;
        }
        set
        {
          this._small_BackingField = value;
        }
      }

      public dom.HTMLSourceElement source
      {
        get
        {
          return this._source_BackingField;
        }
        set
        {
          this._source_BackingField = value;
        }
      }

      public dom.HTMLSpanElement span
      {
        get
        {
          return this._span_BackingField;
        }
        set
        {
          this._span_BackingField = value;
        }
      }

      public dom.HTMLElement strike
      {
        get
        {
          return this._strike_BackingField;
        }
        set
        {
          this._strike_BackingField = value;
        }
      }

      public dom.HTMLElement strong
      {
        get
        {
          return this._strong_BackingField;
        }
        set
        {
          this._strong_BackingField = value;
        }
      }

      public dom.HTMLStyleElement style
      {
        get
        {
          return this._style_BackingField;
        }
        set
        {
          this._style_BackingField = value;
        }
      }

      public dom.HTMLElement sub
      {
        get
        {
          return this._sub_BackingField;
        }
        set
        {
          this._sub_BackingField = value;
        }
      }

      public dom.HTMLElement sup
      {
        get
        {
          return this._sup_BackingField;
        }
        set
        {
          this._sup_BackingField = value;
        }
      }

      public dom.HTMLTableElement table
      {
        get
        {
          return this._table_BackingField;
        }
        set
        {
          this._table_BackingField = value;
        }
      }

      public dom.HTMLTableSectionElement tbody
      {
        get
        {
          return this._tbody_BackingField;
        }
        set
        {
          this._tbody_BackingField = value;
        }
      }

      public dom.HTMLTableDataCellElement td
      {
        get
        {
          return this._td_BackingField;
        }
        set
        {
          this._td_BackingField = value;
        }
      }

      public dom.HTMLTemplateElement template
      {
        get
        {
          return this._template_BackingField;
        }
        set
        {
          this._template_BackingField = value;
        }
      }

      public dom.HTMLTextAreaElement textarea
      {
        get
        {
          return this._textarea_BackingField;
        }
        set
        {
          this._textarea_BackingField = value;
        }
      }

      public dom.HTMLTableSectionElement tfoot
      {
        get
        {
          return this._tfoot_BackingField;
        }
        set
        {
          this._tfoot_BackingField = value;
        }
      }

      public dom.HTMLTableHeaderCellElement th
      {
        get
        {
          return this._th_BackingField;
        }
        set
        {
          this._th_BackingField = value;
        }
      }

      public dom.HTMLTableSectionElement thead
      {
        get
        {
          return this._thead_BackingField;
        }
        set
        {
          this._thead_BackingField = value;
        }
      }

      public dom.HTMLTimeElement time
      {
        get
        {
          return this._time_BackingField;
        }
        set
        {
          this._time_BackingField = value;
        }
      }

      public dom.HTMLTitleElement title
      {
        get
        {
          return this._title_BackingField;
        }
        set
        {
          this._title_BackingField = value;
        }
      }

      public dom.HTMLTableRowElement tr
      {
        get
        {
          return this._tr_BackingField;
        }
        set
        {
          this._tr_BackingField = value;
        }
      }

      public dom.HTMLTrackElement track
      {
        get
        {
          return this._track_BackingField;
        }
        set
        {
          this._track_BackingField = value;
        }
      }

      public dom.HTMLElement tt
      {
        get
        {
          return this._tt_BackingField;
        }
        set
        {
          this._tt_BackingField = value;
        }
      }

      public dom.HTMLElement u
      {
        get
        {
          return this._u_BackingField;
        }
        set
        {
          this._u_BackingField = value;
        }
      }

      public dom.HTMLUListElement ul
      {
        get
        {
          return this._ul_BackingField;
        }
        set
        {
          this._ul_BackingField = value;
        }
      }

      public dom.HTMLElement var
      {
        get
        {
          return this._var_BackingField;
        }
        set
        {
          this._var_BackingField = value;
        }
      }

      public dom.HTMLVideoElement video
      {
        get
        {
          return this._video_BackingField;
        }
        set
        {
          this._video_BackingField = value;
        }
      }

      public dom.HTMLElement wbr
      {
        get
        {
          return this._wbr_BackingField;
        }
        set
        {
          this._wbr_BackingField = value;
        }
      }

      public dom.HTMLPreElement xmp
      {
        get
        {
          return this._xmp_BackingField;
        }
        set
        {
          this._xmp_BackingField = value;
        }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"a\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> a;
        [Template("\"abbr\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> abbr;
        [Template("\"acronym\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> acronym;
        [Template("\"address\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> address;
        [Template("\"applet\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> applet;
        [Template("\"area\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> area;
        [Template("\"article\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> article;
        [Template("\"aside\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> aside;
        [Template("\"audio\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> audio;
        [Template("\"b\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> b;
        [Template("\"base\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> @base;
        [Template("\"basefont\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> basefont;
        [Template("\"bdo\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> bdo;
        [Template("\"big\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> big;
        [Template("\"blockquote\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> blockquote;
        [Template("\"body\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> body;
        [Template("\"br\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> br;
        [Template("\"button\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> button;
        [Template("\"canvas\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> canvas;
        [Template("\"caption\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> caption;
        [Template("\"center\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> center;
        [Template("\"cite\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> cite;
        [Template("\"code\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> code;
        [Template("\"col\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> col;
        [Template("\"colgroup\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> colgroup;
        [Template("\"data\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> data;
        [Template("\"datalist\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> datalist;
        [Template("\"dd\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> dd;
        [Template("\"del\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> del;
        [Template("\"dfn\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> dfn;
        [Template("\"dir\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> dir;
        [Template("\"div\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> div;
        [Template("\"dl\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> dl;
        [Template("\"dt\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> dt;
        [Template("\"em\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> em;
        [Template("\"embed\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> embed;
        [Template("\"fieldset\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> fieldset;
        [Template("\"figcaption\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> figcaption;
        [Template("\"figure\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> figure;
        [Template("\"font\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> font;
        [Template("\"footer\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> footer;
        [Template("\"form\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> form;
        [Template("\"frame\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> frame;
        [Template("\"frameset\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> frameset;
        [Template("\"h1\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> h1;
        [Template("\"h2\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> h2;
        [Template("\"h3\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> h3;
        [Template("\"h4\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> h4;
        [Template("\"h5\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> h5;
        [Template("\"h6\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> h6;
        [Template("\"head\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> head;
        [Template("\"header\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> header;
        [Template("\"hgroup\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> hgroup;
        [Template("\"hr\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> hr;
        [Template("\"html\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> html;
        [Template("\"i\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> i;
        [Template("\"iframe\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> iframe;
        [Template("\"img\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> img;
        [Template("\"input\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> input;
        [Template("\"ins\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> ins;
        [Template("\"isindex\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> isindex;
        [Template("\"kbd\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> kbd;
        [Template("\"keygen\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> keygen;
        [Template("\"label\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> label;
        [Template("\"legend\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> legend;
        [Template("\"li\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> li;
        [Template("\"link\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> link;
        [Template("\"listing\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> listing;
        [Template("\"map\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> map;
        [Template("\"mark\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> mark;
        [Template("\"marquee\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> marquee;
        [Template("\"menu\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> menu;
        [Template("\"meta\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> meta;
        [Template("\"meter\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> meter;
        [Template("\"nav\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> nav;
        [Template("\"nextid\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> nextid;
        [Template("\"nobr\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> nobr;
        [Template("\"noframes\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> noframes;
        [Template("\"noscript\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> noscript;
        [Template("\"object\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> @object;
        [Template("\"ol\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> ol;
        [Template("\"optgroup\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> optgroup;
        [Template("\"option\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> option;
        [Template("\"output\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> output;
        [Template("\"p\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> p;
        [Template("\"param\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> param;
        [Template("\"picture\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> picture;
        [Template("\"plaintext\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> plaintext;
        [Template("\"pre\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> pre;
        [Template("\"progress\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> progress;
        [Template("\"q\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> q;
        [Template("\"rt\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> rt;
        [Template("\"ruby\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> ruby;
        [Template("\"s\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> s;
        [Template("\"samp\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> samp;
        [Template("\"script\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> script;
        [Template("\"section\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> section;
        [Template("\"select\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> select;
        [Template("\"slot\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> slot;
        [Template("\"small\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> small;
        [Template("\"source\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> source;
        [Template("\"span\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> span;
        [Template("\"strike\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> strike;
        [Template("\"strong\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> strong;
        [Template("\"style\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> style;
        [Template("\"sub\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> sub;
        [Template("\"sup\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> sup;
        [Template("\"table\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> table;
        [Template("\"tbody\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> tbody;
        [Template("\"td\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> td;
        [Template("\"template\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> template;
        [Template("\"textarea\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> textarea;
        [Template("\"tfoot\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> tfoot;
        [Template("\"th\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> th;
        [Template("\"thead\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> thead;
        [Template("\"time\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> time;
        [Template("\"title\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> title;
        [Template("\"tr\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> tr;
        [Template("\"track\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> track;
        [Template("\"tt\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> tt;
        [Template("\"u\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> u;
        [Template("\"ul\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> ul;
        [Template("\"var\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> var;
        [Template("\"video\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> video;
        [Template("\"wbr\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> wbr;
        [Template("\"xmp\"")]
        public static readonly KeyOf<dom.HTMLElementTagNameMap> xmp;
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [InterfaceWrapper]
    public class SVGElementTagNameMap : dom.SVGElementTagNameMap.Interface, IObject
    {
      private dom.SVGCircleElement _circle_BackingField;
      private dom.SVGClipPathElement _clippath_BackingField;
      private dom.SVGDefsElement _defs_BackingField;
      private dom.SVGDescElement _desc_BackingField;
      private dom.SVGEllipseElement _ellipse_BackingField;
      private dom.SVGFEBlendElement _feblend_BackingField;
      private dom.SVGFEColorMatrixElement _fecolormatrix_BackingField;
      private dom.SVGFEComponentTransferElement _fecomponenttransfer_BackingField;
      private dom.SVGFECompositeElement _fecomposite_BackingField;
      private dom.SVGFEConvolveMatrixElement _feconvolvematrix_BackingField;
      private dom.SVGFEDiffuseLightingElement _fediffuselighting_BackingField;
      private dom.SVGFEDisplacementMapElement _fedisplacementmap_BackingField;
      private dom.SVGFEDistantLightElement _fedistantlight_BackingField;
      private dom.SVGFEFloodElement _feflood_BackingField;
      private dom.SVGFEFuncAElement _fefunca_BackingField;
      private dom.SVGFEFuncBElement _fefuncb_BackingField;
      private dom.SVGFEFuncGElement _fefuncg_BackingField;
      private dom.SVGFEFuncRElement _fefuncr_BackingField;
      private dom.SVGFEGaussianBlurElement _fegaussianblur_BackingField;
      private dom.SVGFEImageElement _feimage_BackingField;
      private dom.SVGFEMergeElement _femerge_BackingField;
      private dom.SVGFEMergeNodeElement _femergenode_BackingField;
      private dom.SVGFEMorphologyElement _femorphology_BackingField;
      private dom.SVGFEOffsetElement _feoffset_BackingField;
      private dom.SVGFEPointLightElement _fepointlight_BackingField;
      private dom.SVGFESpecularLightingElement _fespecularlighting_BackingField;
      private dom.SVGFESpotLightElement _fespotlight_BackingField;
      private dom.SVGFETileElement _fetile_BackingField;
      private dom.SVGFETurbulenceElement _feturbulence_BackingField;
      private dom.SVGFilterElement _filter_BackingField;
      private dom.SVGForeignObjectElement _foreignobject_BackingField;
      private dom.SVGGElement _g_BackingField;
      private dom.SVGImageElement _image_BackingField;
      private dom.SVGLineElement _line_BackingField;
      private dom.SVGLinearGradientElement _lineargradient_BackingField;
      private dom.SVGMarkerElement _marker_BackingField;
      private dom.SVGMaskElement _mask_BackingField;
      private dom.SVGMetadataElement _metadata_BackingField;
      private dom.SVGPathElement _path_BackingField;
      private dom.SVGPatternElement _pattern_BackingField;
      private dom.SVGPolygonElement _polygon_BackingField;
      private dom.SVGPolylineElement _polyline_BackingField;
      private dom.SVGRadialGradientElement _radialgradient_BackingField;
      private dom.SVGRectElement _rect_BackingField;
      private dom.SVGStopElement _stop_BackingField;
      private dom.SVGSVGElement _svg_BackingField;
      private dom.SVGSwitchElement _switch_BackingField;
      private dom.SVGSymbolElement _symbol_BackingField;
      private dom.SVGTextElement _text_BackingField;
      private dom.SVGTextPathElement _textpath_BackingField;
      private dom.SVGTSpanElement _tspan_BackingField;
      private dom.SVGUseElement _use_BackingField;
      private dom.SVGViewElement _view_BackingField;

      public dom.SVGCircleElement circle
      {
        get
        {
          return this._circle_BackingField;
        }
        set
        {
          this._circle_BackingField = value;
        }
      }

      public dom.SVGClipPathElement clippath
      {
        get
        {
          return this._clippath_BackingField;
        }
        set
        {
          this._clippath_BackingField = value;
        }
      }

      public dom.SVGDefsElement defs
      {
        get
        {
          return this._defs_BackingField;
        }
        set
        {
          this._defs_BackingField = value;
        }
      }

      public dom.SVGDescElement desc
      {
        get
        {
          return this._desc_BackingField;
        }
        set
        {
          this._desc_BackingField = value;
        }
      }

      public dom.SVGEllipseElement ellipse
      {
        get
        {
          return this._ellipse_BackingField;
        }
        set
        {
          this._ellipse_BackingField = value;
        }
      }

      public dom.SVGFEBlendElement feblend
      {
        get
        {
          return this._feblend_BackingField;
        }
        set
        {
          this._feblend_BackingField = value;
        }
      }

      public dom.SVGFEColorMatrixElement fecolormatrix
      {
        get
        {
          return this._fecolormatrix_BackingField;
        }
        set
        {
          this._fecolormatrix_BackingField = value;
        }
      }

      public dom.SVGFEComponentTransferElement fecomponenttransfer
      {
        get
        {
          return this._fecomponenttransfer_BackingField;
        }
        set
        {
          this._fecomponenttransfer_BackingField = value;
        }
      }

      public dom.SVGFECompositeElement fecomposite
      {
        get
        {
          return this._fecomposite_BackingField;
        }
        set
        {
          this._fecomposite_BackingField = value;
        }
      }

      public dom.SVGFEConvolveMatrixElement feconvolvematrix
      {
        get
        {
          return this._feconvolvematrix_BackingField;
        }
        set
        {
          this._feconvolvematrix_BackingField = value;
        }
      }

      public dom.SVGFEDiffuseLightingElement fediffuselighting
      {
        get
        {
          return this._fediffuselighting_BackingField;
        }
        set
        {
          this._fediffuselighting_BackingField = value;
        }
      }

      public dom.SVGFEDisplacementMapElement fedisplacementmap
      {
        get
        {
          return this._fedisplacementmap_BackingField;
        }
        set
        {
          this._fedisplacementmap_BackingField = value;
        }
      }

      public dom.SVGFEDistantLightElement fedistantlight
      {
        get
        {
          return this._fedistantlight_BackingField;
        }
        set
        {
          this._fedistantlight_BackingField = value;
        }
      }

      public dom.SVGFEFloodElement feflood
      {
        get
        {
          return this._feflood_BackingField;
        }
        set
        {
          this._feflood_BackingField = value;
        }
      }

      public dom.SVGFEFuncAElement fefunca
      {
        get
        {
          return this._fefunca_BackingField;
        }
        set
        {
          this._fefunca_BackingField = value;
        }
      }

      public dom.SVGFEFuncBElement fefuncb
      {
        get
        {
          return this._fefuncb_BackingField;
        }
        set
        {
          this._fefuncb_BackingField = value;
        }
      }

      public dom.SVGFEFuncGElement fefuncg
      {
        get
        {
          return this._fefuncg_BackingField;
        }
        set
        {
          this._fefuncg_BackingField = value;
        }
      }

      public dom.SVGFEFuncRElement fefuncr
      {
        get
        {
          return this._fefuncr_BackingField;
        }
        set
        {
          this._fefuncr_BackingField = value;
        }
      }

      public dom.SVGFEGaussianBlurElement fegaussianblur
      {
        get
        {
          return this._fegaussianblur_BackingField;
        }
        set
        {
          this._fegaussianblur_BackingField = value;
        }
      }

      public dom.SVGFEImageElement feimage
      {
        get
        {
          return this._feimage_BackingField;
        }
        set
        {
          this._feimage_BackingField = value;
        }
      }

      public dom.SVGFEMergeElement femerge
      {
        get
        {
          return this._femerge_BackingField;
        }
        set
        {
          this._femerge_BackingField = value;
        }
      }

      public dom.SVGFEMergeNodeElement femergenode
      {
        get
        {
          return this._femergenode_BackingField;
        }
        set
        {
          this._femergenode_BackingField = value;
        }
      }

      public dom.SVGFEMorphologyElement femorphology
      {
        get
        {
          return this._femorphology_BackingField;
        }
        set
        {
          this._femorphology_BackingField = value;
        }
      }

      public dom.SVGFEOffsetElement feoffset
      {
        get
        {
          return this._feoffset_BackingField;
        }
        set
        {
          this._feoffset_BackingField = value;
        }
      }

      public dom.SVGFEPointLightElement fepointlight
      {
        get
        {
          return this._fepointlight_BackingField;
        }
        set
        {
          this._fepointlight_BackingField = value;
        }
      }

      public dom.SVGFESpecularLightingElement fespecularlighting
      {
        get
        {
          return this._fespecularlighting_BackingField;
        }
        set
        {
          this._fespecularlighting_BackingField = value;
        }
      }

      public dom.SVGFESpotLightElement fespotlight
      {
        get
        {
          return this._fespotlight_BackingField;
        }
        set
        {
          this._fespotlight_BackingField = value;
        }
      }

      public dom.SVGFETileElement fetile
      {
        get
        {
          return this._fetile_BackingField;
        }
        set
        {
          this._fetile_BackingField = value;
        }
      }

      public dom.SVGFETurbulenceElement feturbulence
      {
        get
        {
          return this._feturbulence_BackingField;
        }
        set
        {
          this._feturbulence_BackingField = value;
        }
      }

      public dom.SVGFilterElement filter
      {
        get
        {
          return this._filter_BackingField;
        }
        set
        {
          this._filter_BackingField = value;
        }
      }

      public dom.SVGForeignObjectElement foreignobject
      {
        get
        {
          return this._foreignobject_BackingField;
        }
        set
        {
          this._foreignobject_BackingField = value;
        }
      }

      public dom.SVGGElement g
      {
        get
        {
          return this._g_BackingField;
        }
        set
        {
          this._g_BackingField = value;
        }
      }

      public dom.SVGImageElement image
      {
        get
        {
          return this._image_BackingField;
        }
        set
        {
          this._image_BackingField = value;
        }
      }

      public dom.SVGLineElement line
      {
        get
        {
          return this._line_BackingField;
        }
        set
        {
          this._line_BackingField = value;
        }
      }

      public dom.SVGLinearGradientElement lineargradient
      {
        get
        {
          return this._lineargradient_BackingField;
        }
        set
        {
          this._lineargradient_BackingField = value;
        }
      }

      public dom.SVGMarkerElement marker
      {
        get
        {
          return this._marker_BackingField;
        }
        set
        {
          this._marker_BackingField = value;
        }
      }

      public dom.SVGMaskElement mask
      {
        get
        {
          return this._mask_BackingField;
        }
        set
        {
          this._mask_BackingField = value;
        }
      }

      public dom.SVGMetadataElement metadata
      {
        get
        {
          return this._metadata_BackingField;
        }
        set
        {
          this._metadata_BackingField = value;
        }
      }

      public dom.SVGPathElement path
      {
        get
        {
          return this._path_BackingField;
        }
        set
        {
          this._path_BackingField = value;
        }
      }

      public dom.SVGPatternElement pattern
      {
        get
        {
          return this._pattern_BackingField;
        }
        set
        {
          this._pattern_BackingField = value;
        }
      }

      public dom.SVGPolygonElement polygon
      {
        get
        {
          return this._polygon_BackingField;
        }
        set
        {
          this._polygon_BackingField = value;
        }
      }

      public dom.SVGPolylineElement polyline
      {
        get
        {
          return this._polyline_BackingField;
        }
        set
        {
          this._polyline_BackingField = value;
        }
      }

      public dom.SVGRadialGradientElement radialgradient
      {
        get
        {
          return this._radialgradient_BackingField;
        }
        set
        {
          this._radialgradient_BackingField = value;
        }
      }

      public dom.SVGRectElement rect
      {
        get
        {
          return this._rect_BackingField;
        }
        set
        {
          this._rect_BackingField = value;
        }
      }

      public dom.SVGStopElement stop
      {
        get
        {
          return this._stop_BackingField;
        }
        set
        {
          this._stop_BackingField = value;
        }
      }

      public dom.SVGSVGElement svg
      {
        get
        {
          return this._svg_BackingField;
        }
        set
        {
          this._svg_BackingField = value;
        }
      }

      public dom.SVGSwitchElement @switch
      {
        get
        {
          return this._switch_BackingField;
        }
        set
        {
          this._switch_BackingField = value;
        }
      }

      public dom.SVGSymbolElement symbol
      {
        get
        {
          return this._symbol_BackingField;
        }
        set
        {
          this._symbol_BackingField = value;
        }
      }

      public dom.SVGTextElement text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }

      public dom.SVGTextPathElement textpath
      {
        get
        {
          return this._textpath_BackingField;
        }
        set
        {
          this._textpath_BackingField = value;
        }
      }

      public dom.SVGTSpanElement tspan
      {
        get
        {
          return this._tspan_BackingField;
        }
        set
        {
          this._tspan_BackingField = value;
        }
      }

      public dom.SVGUseElement use
      {
        get
        {
          return this._use_BackingField;
        }
        set
        {
          this._use_BackingField = value;
        }
      }

      public dom.SVGViewElement view
      {
        get
        {
          return this._view_BackingField;
        }
        set
        {
          this._view_BackingField = value;
        }
      }

      [Generated]
      [ObjectLiteral]
      [IgnoreCast]
      public interface Interface : IObject
      {
        dom.SVGCircleElement circle { get; set; }

        dom.SVGClipPathElement clippath { get; set; }

        dom.SVGDefsElement defs { get; set; }

        dom.SVGDescElement desc { get; set; }

        dom.SVGEllipseElement ellipse { get; set; }

        dom.SVGFEBlendElement feblend { get; set; }

        dom.SVGFEColorMatrixElement fecolormatrix { get; set; }

        dom.SVGFEComponentTransferElement fecomponenttransfer { get; set; }

        dom.SVGFECompositeElement fecomposite { get; set; }

        dom.SVGFEConvolveMatrixElement feconvolvematrix { get; set; }

        dom.SVGFEDiffuseLightingElement fediffuselighting { get; set; }

        dom.SVGFEDisplacementMapElement fedisplacementmap { get; set; }

        dom.SVGFEDistantLightElement fedistantlight { get; set; }

        dom.SVGFEFloodElement feflood { get; set; }

        dom.SVGFEFuncAElement fefunca { get; set; }

        dom.SVGFEFuncBElement fefuncb { get; set; }

        dom.SVGFEFuncGElement fefuncg { get; set; }

        dom.SVGFEFuncRElement fefuncr { get; set; }

        dom.SVGFEGaussianBlurElement fegaussianblur { get; set; }

        dom.SVGFEImageElement feimage { get; set; }

        dom.SVGFEMergeElement femerge { get; set; }

        dom.SVGFEMergeNodeElement femergenode { get; set; }

        dom.SVGFEMorphologyElement femorphology { get; set; }

        dom.SVGFEOffsetElement feoffset { get; set; }

        dom.SVGFEPointLightElement fepointlight { get; set; }

        dom.SVGFESpecularLightingElement fespecularlighting { get; set; }

        dom.SVGFESpotLightElement fespotlight { get; set; }

        dom.SVGFETileElement fetile { get; set; }

        dom.SVGFETurbulenceElement feturbulence { get; set; }

        dom.SVGFilterElement filter { get; set; }

        dom.SVGForeignObjectElement foreignobject { get; set; }

        dom.SVGGElement g { get; set; }

        dom.SVGImageElement image { get; set; }

        dom.SVGLineElement line { get; set; }

        dom.SVGLinearGradientElement lineargradient { get; set; }

        dom.SVGMarkerElement marker { get; set; }

        dom.SVGMaskElement mask { get; set; }

        dom.SVGMetadataElement metadata { get; set; }

        dom.SVGPathElement path { get; set; }

        dom.SVGPatternElement pattern { get; set; }

        dom.SVGPolygonElement polygon { get; set; }

        dom.SVGPolylineElement polyline { get; set; }

        dom.SVGRadialGradientElement radialgradient { get; set; }

        dom.SVGRectElement rect { get; set; }

        dom.SVGStopElement stop { get; set; }

        dom.SVGSVGElement svg { get; set; }

        dom.SVGSwitchElement @switch { get; set; }

        dom.SVGSymbolElement symbol { get; set; }

        dom.SVGTextElement text { get; set; }

        dom.SVGTextPathElement textpath { get; set; }

        dom.SVGTSpanElement tspan { get; set; }

        dom.SVGUseElement use { get; set; }

        dom.SVGViewElement view { get; set; }
      }

      [Generated]
      public static class KeyOf
      {
        [Template("\"circle\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> circle;
        [Template("\"clippath\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> clippath;
        [Template("\"defs\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> defs;
        [Template("\"desc\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> desc;
        [Template("\"ellipse\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> ellipse;
        [Template("\"feblend\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> feblend;
        [Template("\"fecolormatrix\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fecolormatrix;
        [Template("\"fecomponenttransfer\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fecomponenttransfer;
        [Template("\"fecomposite\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fecomposite;
        [Template("\"feconvolvematrix\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> feconvolvematrix;
        [Template("\"fediffuselighting\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fediffuselighting;
        [Template("\"fedisplacementmap\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fedisplacementmap;
        [Template("\"fedistantlight\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fedistantlight;
        [Template("\"feflood\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> feflood;
        [Template("\"fefunca\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fefunca;
        [Template("\"fefuncb\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fefuncb;
        [Template("\"fefuncg\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fefuncg;
        [Template("\"fefuncr\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fefuncr;
        [Template("\"fegaussianblur\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fegaussianblur;
        [Template("\"feimage\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> feimage;
        [Template("\"femerge\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> femerge;
        [Template("\"femergenode\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> femergenode;
        [Template("\"femorphology\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> femorphology;
        [Template("\"feoffset\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> feoffset;
        [Template("\"fepointlight\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fepointlight;
        [Template("\"fespecularlighting\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fespecularlighting;
        [Template("\"fespotlight\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fespotlight;
        [Template("\"fetile\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> fetile;
        [Template("\"feturbulence\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> feturbulence;
        [Template("\"filter\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> filter;
        [Template("\"foreignobject\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> foreignobject;
        [Template("\"g\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> g;
        [Template("\"image\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> image;
        [Template("\"line\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> line;
        [Template("\"lineargradient\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> lineargradient;
        [Template("\"marker\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> marker;
        [Template("\"mask\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> mask;
        [Template("\"metadata\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> metadata;
        [Template("\"path\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> path;
        [Template("\"pattern\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> pattern;
        [Template("\"polygon\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> polygon;
        [Template("\"polyline\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> polyline;
        [Template("\"radialgradient\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> radialgradient;
        [Template("\"rect\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> rect;
        [Template("\"stop\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> stop;
        [Template("\"svg\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> svg;
        [Template("\"switch\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> @switch;
        [Template("\"symbol\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> symbol;
        [Template("\"text\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> text;
        [Template("\"textpath\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> textpath;
        [Template("\"tspan\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> tspan;
        [Template("\"use\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> use;
        [Template("\"view\"")]
        public static readonly KeyOf<dom.SVGElementTagNameMap> view;
      }
    }

    [IgnoreCast]
    [ObjectLiteral]
    [FormerInterface]
    public class ElementTagNameMap : dom.HTMLElementTagNameMap, dom.SVGElementTagNameMap.Interface, IObject
    {
      private dom.SVGCircleElement _circle_BackingField;
      private dom.SVGClipPathElement _clippath_BackingField;
      private dom.SVGDefsElement _defs_BackingField;
      private dom.SVGDescElement _desc_BackingField;
      private dom.SVGEllipseElement _ellipse_BackingField;
      private dom.SVGFEBlendElement _feblend_BackingField;
      private dom.SVGFEColorMatrixElement _fecolormatrix_BackingField;
      private dom.SVGFEComponentTransferElement _fecomponenttransfer_BackingField;
      private dom.SVGFECompositeElement _fecomposite_BackingField;
      private dom.SVGFEConvolveMatrixElement _feconvolvematrix_BackingField;
      private dom.SVGFEDiffuseLightingElement _fediffuselighting_BackingField;
      private dom.SVGFEDisplacementMapElement _fedisplacementmap_BackingField;
      private dom.SVGFEDistantLightElement _fedistantlight_BackingField;
      private dom.SVGFEFloodElement _feflood_BackingField;
      private dom.SVGFEFuncAElement _fefunca_BackingField;
      private dom.SVGFEFuncBElement _fefuncb_BackingField;
      private dom.SVGFEFuncGElement _fefuncg_BackingField;
      private dom.SVGFEFuncRElement _fefuncr_BackingField;
      private dom.SVGFEGaussianBlurElement _fegaussianblur_BackingField;
      private dom.SVGFEImageElement _feimage_BackingField;
      private dom.SVGFEMergeElement _femerge_BackingField;
      private dom.SVGFEMergeNodeElement _femergenode_BackingField;
      private dom.SVGFEMorphologyElement _femorphology_BackingField;
      private dom.SVGFEOffsetElement _feoffset_BackingField;
      private dom.SVGFEPointLightElement _fepointlight_BackingField;
      private dom.SVGFESpecularLightingElement _fespecularlighting_BackingField;
      private dom.SVGFESpotLightElement _fespotlight_BackingField;
      private dom.SVGFETileElement _fetile_BackingField;
      private dom.SVGFETurbulenceElement _feturbulence_BackingField;
      private dom.SVGFilterElement _filter_BackingField;
      private dom.SVGForeignObjectElement _foreignobject_BackingField;
      private dom.SVGGElement _g_BackingField;
      private dom.SVGImageElement _image_BackingField;
      private dom.SVGLineElement _line_BackingField;
      private dom.SVGLinearGradientElement _lineargradient_BackingField;
      private dom.SVGMarkerElement _marker_BackingField;
      private dom.SVGMaskElement _mask_BackingField;
      private dom.SVGMetadataElement _metadata_BackingField;
      private dom.SVGPathElement _path_BackingField;
      private dom.SVGPatternElement _pattern_BackingField;
      private dom.SVGPolygonElement _polygon_BackingField;
      private dom.SVGPolylineElement _polyline_BackingField;
      private dom.SVGRadialGradientElement _radialgradient_BackingField;
      private dom.SVGRectElement _rect_BackingField;
      private dom.SVGStopElement _stop_BackingField;
      private dom.SVGSVGElement _svg_BackingField;
      private dom.SVGSwitchElement _switch_BackingField;
      private dom.SVGSymbolElement _symbol_BackingField;
      private dom.SVGTextElement _text_BackingField;
      private dom.SVGTextPathElement _textpath_BackingField;
      private dom.SVGTSpanElement _tspan_BackingField;
      private dom.SVGUseElement _use_BackingField;
      private dom.SVGViewElement _view_BackingField;

      public dom.SVGCircleElement circle
      {
        get
        {
          return this._circle_BackingField;
        }
        set
        {
          this._circle_BackingField = value;
        }
      }

      public dom.SVGClipPathElement clippath
      {
        get
        {
          return this._clippath_BackingField;
        }
        set
        {
          this._clippath_BackingField = value;
        }
      }

      public dom.SVGDefsElement defs
      {
        get
        {
          return this._defs_BackingField;
        }
        set
        {
          this._defs_BackingField = value;
        }
      }

      public dom.SVGDescElement desc
      {
        get
        {
          return this._desc_BackingField;
        }
        set
        {
          this._desc_BackingField = value;
        }
      }

      public dom.SVGEllipseElement ellipse
      {
        get
        {
          return this._ellipse_BackingField;
        }
        set
        {
          this._ellipse_BackingField = value;
        }
      }

      public dom.SVGFEBlendElement feblend
      {
        get
        {
          return this._feblend_BackingField;
        }
        set
        {
          this._feblend_BackingField = value;
        }
      }

      public dom.SVGFEColorMatrixElement fecolormatrix
      {
        get
        {
          return this._fecolormatrix_BackingField;
        }
        set
        {
          this._fecolormatrix_BackingField = value;
        }
      }

      public dom.SVGFEComponentTransferElement fecomponenttransfer
      {
        get
        {
          return this._fecomponenttransfer_BackingField;
        }
        set
        {
          this._fecomponenttransfer_BackingField = value;
        }
      }

      public dom.SVGFECompositeElement fecomposite
      {
        get
        {
          return this._fecomposite_BackingField;
        }
        set
        {
          this._fecomposite_BackingField = value;
        }
      }

      public dom.SVGFEConvolveMatrixElement feconvolvematrix
      {
        get
        {
          return this._feconvolvematrix_BackingField;
        }
        set
        {
          this._feconvolvematrix_BackingField = value;
        }
      }

      public dom.SVGFEDiffuseLightingElement fediffuselighting
      {
        get
        {
          return this._fediffuselighting_BackingField;
        }
        set
        {
          this._fediffuselighting_BackingField = value;
        }
      }

      public dom.SVGFEDisplacementMapElement fedisplacementmap
      {
        get
        {
          return this._fedisplacementmap_BackingField;
        }
        set
        {
          this._fedisplacementmap_BackingField = value;
        }
      }

      public dom.SVGFEDistantLightElement fedistantlight
      {
        get
        {
          return this._fedistantlight_BackingField;
        }
        set
        {
          this._fedistantlight_BackingField = value;
        }
      }

      public dom.SVGFEFloodElement feflood
      {
        get
        {
          return this._feflood_BackingField;
        }
        set
        {
          this._feflood_BackingField = value;
        }
      }

      public dom.SVGFEFuncAElement fefunca
      {
        get
        {
          return this._fefunca_BackingField;
        }
        set
        {
          this._fefunca_BackingField = value;
        }
      }

      public dom.SVGFEFuncBElement fefuncb
      {
        get
        {
          return this._fefuncb_BackingField;
        }
        set
        {
          this._fefuncb_BackingField = value;
        }
      }

      public dom.SVGFEFuncGElement fefuncg
      {
        get
        {
          return this._fefuncg_BackingField;
        }
        set
        {
          this._fefuncg_BackingField = value;
        }
      }

      public dom.SVGFEFuncRElement fefuncr
      {
        get
        {
          return this._fefuncr_BackingField;
        }
        set
        {
          this._fefuncr_BackingField = value;
        }
      }

      public dom.SVGFEGaussianBlurElement fegaussianblur
      {
        get
        {
          return this._fegaussianblur_BackingField;
        }
        set
        {
          this._fegaussianblur_BackingField = value;
        }
      }

      public dom.SVGFEImageElement feimage
      {
        get
        {
          return this._feimage_BackingField;
        }
        set
        {
          this._feimage_BackingField = value;
        }
      }

      public dom.SVGFEMergeElement femerge
      {
        get
        {
          return this._femerge_BackingField;
        }
        set
        {
          this._femerge_BackingField = value;
        }
      }

      public dom.SVGFEMergeNodeElement femergenode
      {
        get
        {
          return this._femergenode_BackingField;
        }
        set
        {
          this._femergenode_BackingField = value;
        }
      }

      public dom.SVGFEMorphologyElement femorphology
      {
        get
        {
          return this._femorphology_BackingField;
        }
        set
        {
          this._femorphology_BackingField = value;
        }
      }

      public dom.SVGFEOffsetElement feoffset
      {
        get
        {
          return this._feoffset_BackingField;
        }
        set
        {
          this._feoffset_BackingField = value;
        }
      }

      public dom.SVGFEPointLightElement fepointlight
      {
        get
        {
          return this._fepointlight_BackingField;
        }
        set
        {
          this._fepointlight_BackingField = value;
        }
      }

      public dom.SVGFESpecularLightingElement fespecularlighting
      {
        get
        {
          return this._fespecularlighting_BackingField;
        }
        set
        {
          this._fespecularlighting_BackingField = value;
        }
      }

      public dom.SVGFESpotLightElement fespotlight
      {
        get
        {
          return this._fespotlight_BackingField;
        }
        set
        {
          this._fespotlight_BackingField = value;
        }
      }

      public dom.SVGFETileElement fetile
      {
        get
        {
          return this._fetile_BackingField;
        }
        set
        {
          this._fetile_BackingField = value;
        }
      }

      public dom.SVGFETurbulenceElement feturbulence
      {
        get
        {
          return this._feturbulence_BackingField;
        }
        set
        {
          this._feturbulence_BackingField = value;
        }
      }

      public dom.SVGFilterElement filter
      {
        get
        {
          return this._filter_BackingField;
        }
        set
        {
          this._filter_BackingField = value;
        }
      }

      public dom.SVGForeignObjectElement foreignobject
      {
        get
        {
          return this._foreignobject_BackingField;
        }
        set
        {
          this._foreignobject_BackingField = value;
        }
      }

      public dom.SVGGElement g
      {
        get
        {
          return this._g_BackingField;
        }
        set
        {
          this._g_BackingField = value;
        }
      }

      public dom.SVGImageElement image
      {
        get
        {
          return this._image_BackingField;
        }
        set
        {
          this._image_BackingField = value;
        }
      }

      public dom.SVGLineElement line
      {
        get
        {
          return this._line_BackingField;
        }
        set
        {
          this._line_BackingField = value;
        }
      }

      public dom.SVGLinearGradientElement lineargradient
      {
        get
        {
          return this._lineargradient_BackingField;
        }
        set
        {
          this._lineargradient_BackingField = value;
        }
      }

      public dom.SVGMarkerElement marker
      {
        get
        {
          return this._marker_BackingField;
        }
        set
        {
          this._marker_BackingField = value;
        }
      }

      public dom.SVGMaskElement mask
      {
        get
        {
          return this._mask_BackingField;
        }
        set
        {
          this._mask_BackingField = value;
        }
      }

      public dom.SVGMetadataElement metadata
      {
        get
        {
          return this._metadata_BackingField;
        }
        set
        {
          this._metadata_BackingField = value;
        }
      }

      public dom.SVGPathElement path
      {
        get
        {
          return this._path_BackingField;
        }
        set
        {
          this._path_BackingField = value;
        }
      }

      public dom.SVGPatternElement pattern
      {
        get
        {
          return this._pattern_BackingField;
        }
        set
        {
          this._pattern_BackingField = value;
        }
      }

      public dom.SVGPolygonElement polygon
      {
        get
        {
          return this._polygon_BackingField;
        }
        set
        {
          this._polygon_BackingField = value;
        }
      }

      public dom.SVGPolylineElement polyline
      {
        get
        {
          return this._polyline_BackingField;
        }
        set
        {
          this._polyline_BackingField = value;
        }
      }

      public dom.SVGRadialGradientElement radialgradient
      {
        get
        {
          return this._radialgradient_BackingField;
        }
        set
        {
          this._radialgradient_BackingField = value;
        }
      }

      public dom.SVGRectElement rect
      {
        get
        {
          return this._rect_BackingField;
        }
        set
        {
          this._rect_BackingField = value;
        }
      }

      public dom.SVGStopElement stop
      {
        get
        {
          return this._stop_BackingField;
        }
        set
        {
          this._stop_BackingField = value;
        }
      }

      public dom.SVGSVGElement svg
      {
        get
        {
          return this._svg_BackingField;
        }
        set
        {
          this._svg_BackingField = value;
        }
      }

      public dom.SVGSwitchElement @switch
      {
        get
        {
          return this._switch_BackingField;
        }
        set
        {
          this._switch_BackingField = value;
        }
      }

      public dom.SVGSymbolElement symbol
      {
        get
        {
          return this._symbol_BackingField;
        }
        set
        {
          this._symbol_BackingField = value;
        }
      }

      public dom.SVGTextElement text
      {
        get
        {
          return this._text_BackingField;
        }
        set
        {
          this._text_BackingField = value;
        }
      }

      public dom.SVGTextPathElement textpath
      {
        get
        {
          return this._textpath_BackingField;
        }
        set
        {
          this._textpath_BackingField = value;
        }
      }

      public dom.SVGTSpanElement tspan
      {
        get
        {
          return this._tspan_BackingField;
        }
        set
        {
          this._tspan_BackingField = value;
        }
      }

      public dom.SVGUseElement use
      {
        get
        {
          return this._use_BackingField;
        }
        set
        {
          this._use_BackingField = value;
        }
      }

      public dom.SVGViewElement view
      {
        get
        {
          return this._view_BackingField;
        }
        set
        {
          this._view_BackingField = value;
        }
      }
    }

    [IgnoreCast]
    [Virtual]
    public abstract class WebKitEntriesCallback : TypeAlias<Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig>>
    {
      public static extern implicit operator dom.WebKitEntriesCallback(
        Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> value);

      [Template("{0}")]
      public static extern dom.WebKitEntriesCallback Create(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackFn value);

      [Template("{0}")]
      public static extern dom.WebKitEntriesCallback Create(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig value);

      public static extern implicit operator dom.WebKitEntriesCallback(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackFn value);

      public static extern implicit operator dom.WebKitEntriesCallback(
        dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig value);

      public static extern explicit operator dom.WebKitEntriesCallback.WebKitEntriesCallbackFn(
        dom.WebKitEntriesCallback value);

      public static extern explicit operator dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig(
        dom.WebKitEntriesCallback value);

      [Generated]
      public delegate void WebKitEntriesCallbackFn(dom.WebKitEntry[] entries);

      [Virtual]
      public abstract class WebKitEntriesCallbackConfig : IObject
      {
        public abstract void handleEvent(dom.WebKitEntry[] entries);
      }
    }

    [IgnoreCast]
    [Virtual]
    public abstract class WebKitErrorCallback : TypeAlias<Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig>>
    {
      public static extern implicit operator dom.WebKitErrorCallback(
        Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> value);

      [Template("{0}")]
      public static extern dom.WebKitErrorCallback Create(
        dom.WebKitErrorCallback.WebKitErrorCallbackFn value);

      [Template("{0}")]
      public static extern dom.WebKitErrorCallback Create(
        dom.WebKitErrorCallback.WebKitErrorCallbackConfig value);

      public static extern implicit operator dom.WebKitErrorCallback(
        dom.WebKitErrorCallback.WebKitErrorCallbackFn value);

      public static extern implicit operator dom.WebKitErrorCallback(
        dom.WebKitErrorCallback.WebKitErrorCallbackConfig value);

      public static extern explicit operator dom.WebKitErrorCallback.WebKitErrorCallbackFn(
        dom.WebKitErrorCallback value);

      public static extern explicit operator dom.WebKitErrorCallback.WebKitErrorCallbackConfig(
        dom.WebKitErrorCallback value);

      [Generated]
      public delegate void WebKitErrorCallbackFn(dom.DOMError err);

      [Virtual]
      public abstract class WebKitErrorCallbackConfig : IObject
      {
        public abstract void handleEvent(dom.DOMError err);
      }
    }

    [IgnoreCast]
    [Virtual]
    public abstract class WebKitFileCallback : TypeAlias<Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig>>
    {
      public static extern implicit operator dom.WebKitFileCallback(
        Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> value);

      [Template("{0}")]
      public static extern dom.WebKitFileCallback Create(
        dom.WebKitFileCallback.WebKitFileCallbackFn value);

      [Template("{0}")]
      public static extern dom.WebKitFileCallback Create(
        dom.WebKitFileCallback.WebKitFileCallbackConfig value);

      public static extern implicit operator dom.WebKitFileCallback(
        dom.WebKitFileCallback.WebKitFileCallbackFn value);

      public static extern implicit operator dom.WebKitFileCallback(
        dom.WebKitFileCallback.WebKitFileCallbackConfig value);

      public static extern explicit operator dom.WebKitFileCallback.WebKitFileCallbackFn(
        dom.WebKitFileCallback value);

      public static extern explicit operator dom.WebKitFileCallback.WebKitFileCallbackConfig(
        dom.WebKitFileCallback value);

      [Generated]
      public delegate void WebKitFileCallbackFn(dom.File file);

      [Virtual]
      public abstract class WebKitFileCallbackConfig : IObject
      {
        public abstract void handleEvent(dom.File file);
      }
    }

    [IgnoreCast]
    [Virtual]
    public abstract class EventListenerOrEventListenerObject : TypeAlias<Union<dom.EventListener, dom.EventListenerObject>>
    {
      public static extern implicit operator dom.EventListenerOrEventListenerObject(
        Union<dom.EventListener, dom.EventListenerObject> value);

      public static extern implicit operator dom.EventListenerOrEventListenerObject(
        Action<dom.Event> value);

      public static extern implicit operator Action<dom.Event>(
        dom.EventListenerOrEventListenerObject value);

      [Template("{0}")]
      public static extern dom.EventListenerOrEventListenerObject Create(dom.EventListener value);

      [Template("{0}")]
      public static extern dom.EventListenerOrEventListenerObject Create(
        dom.EventListenerObject value);

      public static extern implicit operator dom.EventListenerOrEventListenerObject(
        dom.EventListener value);

      public static extern implicit operator dom.EventListenerOrEventListenerObject(
        dom.EventListenerObject value);

      public static extern explicit operator dom.EventListener(
        dom.EventListenerOrEventListenerObject value);

      public static extern explicit operator dom.EventListenerObject(
        dom.EventListenerOrEventListenerObject value);
    }

    [Name("System.String")]
    [ExportedAs("ScrollBehavior")]
    public class ScrollBehavior : LiteralType<string>
    {
      [Template("<self>\"auto\"")]
      public static readonly dom.Literals.Types.auto auto;
      [Template("<self>\"instant\"")]
      public static readonly dom.Literals.Types.instant instant;
      [Template("<self>\"smooth\"")]
      public static readonly dom.Literals.Types.smooth smooth;

      private extern ScrollBehavior();

      public static extern implicit operator dom.ScrollBehavior(dom.Literals.Types.auto value);

      public static extern implicit operator dom.ScrollBehavior(dom.Literals.Types.instant value);

      public static extern implicit operator dom.ScrollBehavior(dom.Literals.Types.smooth value);
    }

    [Name("System.String")]
    [ExportedAs("ScrollLogicalPosition")]
    public class ScrollLogicalPosition : LiteralType<string>
    {
      [Template("<self>\"start\"")]
      public static readonly dom.Literals.Types.start start;
      [Template("<self>\"center\"")]
      public static readonly dom.Literals.Types.center center;
      [Template("<self>\"end\"")]
      public static readonly dom.Literals.Types.end end;
      [Template("<self>\"nearest\"")]
      public static readonly dom.Literals.Types.nearest nearest;

      private extern ScrollLogicalPosition();

      public static extern implicit operator dom.ScrollLogicalPosition(
        dom.Literals.Types.start value);

      public static extern implicit operator dom.ScrollLogicalPosition(
        dom.Literals.Types.center value);

      public static extern implicit operator dom.ScrollLogicalPosition(
        dom.Literals.Types.end value);

      public static extern implicit operator dom.ScrollLogicalPosition(
        dom.Literals.Types.nearest value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class MouseWheelEvent : TypeAlias<dom.WheelEvent>
    {
      public static extern implicit operator dom.MouseWheelEvent(dom.WheelEvent value);
    }

    [Name("System.String")]
    [ExportedAs("ScrollRestoration")]
    public class ScrollRestoration : LiteralType<string>
    {
      [Template("<self>\"auto\"")]
      public static readonly dom.Literals.Types.auto auto;
      [Template("<self>\"manual\"")]
      public static readonly dom.Literals.Types.manual manual;

      private extern ScrollRestoration();

      public static extern implicit operator dom.ScrollRestoration(dom.Literals.Types.auto value);

      public static extern implicit operator dom.ScrollRestoration(
        dom.Literals.Types.manual value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class FormDataEntryValue : TypeAlias<Union<string, dom.File>>
    {
      public static extern implicit operator dom.FormDataEntryValue(Union<string, dom.File> value);

      [Template("{0}")]
      public static extern dom.FormDataEntryValue Create(string value);

      [Template("{0}")]
      public static extern dom.FormDataEntryValue Create(dom.File value);

      public static extern implicit operator dom.FormDataEntryValue(string value);

      public static extern implicit operator dom.FormDataEntryValue(dom.File value);

      public static extern explicit operator string(dom.FormDataEntryValue value);

      public static extern explicit operator dom.File(dom.FormDataEntryValue value);
    }

    [Name("System.String")]
    [ExportedAs("InsertPosition")]
    public class InsertPosition : LiteralType<string>
    {
      [Template("<self>\"beforebegin\"")]
      public static readonly dom.Literals.Types.beforebegin beforebegin;
      [Template("<self>\"afterbegin\"")]
      public static readonly dom.Literals.Types.afterbegin afterbegin;
      [Template("<self>\"beforeend\"")]
      public static readonly dom.Literals.Types.beforeend beforeend;
      [Template("<self>\"afterend\"")]
      public static readonly dom.Literals.Types.afterend afterend;

      private extern InsertPosition();

      public static extern implicit operator dom.InsertPosition(
        dom.Literals.Types.beforebegin value);

      public static extern implicit operator dom.InsertPosition(
        dom.Literals.Types.afterbegin value);

      public static extern implicit operator dom.InsertPosition(
        dom.Literals.Types.beforeend value);

      public static extern implicit operator dom.InsertPosition(dom.Literals.Types.afterend value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class HeadersInit : TypeAlias<Union<dom.Headers, string[][], dom.HeadersInit.HeadersInitConfig>>
    {
      public static extern implicit operator dom.HeadersInit(
        Union<dom.Headers, string[][], dom.HeadersInit.HeadersInitConfig> value);

      [Template("{0}")]
      public static extern dom.HeadersInit Create(dom.Headers value);

      [Template("{0}")]
      public static extern dom.HeadersInit Create(string[][] value);

      [Template("{0}")]
      public static extern dom.HeadersInit Create(dom.HeadersInit.HeadersInitConfig value);

      public static extern implicit operator dom.HeadersInit(dom.Headers value);

      public static extern implicit operator dom.HeadersInit(string[][] value);

      public static extern implicit operator dom.HeadersInit(
        dom.HeadersInit.HeadersInitConfig value);

      public static extern explicit operator dom.Headers(dom.HeadersInit value);

      public static extern explicit operator string[][](dom.HeadersInit value);

      public static extern explicit operator dom.HeadersInit.HeadersInitConfig(
        dom.HeadersInit value);

      [ObjectLiteral]
      public class HeadersInitConfig : IObject
      {
        public extern string this[string key] { get; set; }
      }
    }

    [Name("System.String")]
    [ExportedAs("OrientationLockType")]
    public class OrientationLockType : LiteralType<string>
    {
      [Template("<self>\"any\"")]
      public static readonly dom.Literals.Types.any any;
      [Template("<self>\"natural\"")]
      public static readonly dom.Literals.Types.natural natural;
      [Template("<self>\"portrait\"")]
      public static readonly dom.Literals.Types.portrait portrait;
      [Template("<self>\"landscape\"")]
      public static readonly dom.Literals.Types.landscape landscape;
      [Template("<self>\"portrait-primary\"")]
      public static readonly dom.Literals.Types.portrait_primary portrait_primary;
      [Template("<self>\"portrait-secondary\"")]
      public static readonly dom.Literals.Types.portrait_secondary portrait_secondary;
      [Template("<self>\"landscape-primary\"")]
      public static readonly dom.Literals.Types.landscape_primary landscape_primary;
      [Template("<self>\"landscape-secondary\"")]
      public static readonly dom.Literals.Types.landscape_secondary landscape_secondary;

      private extern OrientationLockType();

      public static extern implicit operator dom.OrientationLockType(dom.Literals.Types.any value);

      public static extern implicit operator dom.OrientationLockType(
        dom.Literals.Types.natural value);

      public static extern implicit operator dom.OrientationLockType(
        dom.Literals.Types.portrait value);

      public static extern implicit operator dom.OrientationLockType(
        dom.Literals.Types.landscape value);

      public static extern implicit operator dom.OrientationLockType(
        dom.Literals.Types.portrait_primary value);

      public static extern implicit operator dom.OrientationLockType(
        dom.Literals.Types.portrait_secondary value);

      public static extern implicit operator dom.OrientationLockType(
        dom.Literals.Types.landscape_primary value);

      public static extern implicit operator dom.OrientationLockType(
        dom.Literals.Types.landscape_secondary value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class IDBValidKey : TypeAlias<Union<double, string, es5.Date, dom.IDBArrayKey>>
    {
      public static extern implicit operator dom.IDBValidKey(
        Union<double, string, es5.Date, dom.IDBArrayKey> value);

      [Template("{0}")]
      public static extern dom.IDBValidKey Create(double value);

      [Template("{0}")]
      public static extern dom.IDBValidKey Create(string value);

      [Template("{0}")]
      public static extern dom.IDBValidKey Create(es5.Date value);

      [Template("{0}")]
      public static extern dom.IDBValidKey Create(dom.IDBArrayKey value);

      public static extern implicit operator dom.IDBValidKey(double value);

      public static extern implicit operator dom.IDBValidKey(string value);

      public static extern implicit operator dom.IDBValidKey(es5.Date value);

      public static extern implicit operator dom.IDBValidKey(dom.IDBArrayKey value);

      public static extern explicit operator double(dom.IDBValidKey value);

      public static extern explicit operator string(dom.IDBValidKey value);

      public static extern explicit operator es5.Date(dom.IDBValidKey value);

      public static extern explicit operator dom.IDBArrayKey(dom.IDBValidKey value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class AlgorithmIdentifier : TypeAlias<Union<string, dom.Algorithm>>
    {
      public static extern implicit operator dom.AlgorithmIdentifier(
        Union<string, dom.Algorithm> value);

      [Template("{0}")]
      public static extern dom.AlgorithmIdentifier Create(string value);

      [Template("{0}")]
      public static extern dom.AlgorithmIdentifier Create(dom.Algorithm value);

      public static extern implicit operator dom.AlgorithmIdentifier(string value);

      public static extern implicit operator dom.AlgorithmIdentifier(dom.Algorithm value);

      public static extern explicit operator string(dom.AlgorithmIdentifier value);

      public static extern explicit operator dom.Algorithm(dom.AlgorithmIdentifier value);
    }

    [Name("System.String")]
    [ExportedAs("MutationRecordType")]
    public class MutationRecordType : LiteralType<string>
    {
      [Template("<self>\"attributes\"")]
      public static readonly dom.Literals.Types.attributes attributes;
      [Template("<self>\"characterData\"")]
      public static readonly dom.Literals.Types.characterData characterData;
      [Template("<self>\"childList\"")]
      public static readonly dom.Literals.Types.childList childList;

      private extern MutationRecordType();

      public static extern implicit operator dom.MutationRecordType(
        dom.Literals.Types.attributes value);

      public static extern implicit operator dom.MutationRecordType(
        dom.Literals.Types.characterData value);

      public static extern implicit operator dom.MutationRecordType(
        dom.Literals.Types.childList value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class AAGUID : TypeAlias<string>
    {
      public static extern implicit operator dom.AAGUID(string value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class BodyInit : TypeAlias<object>
    {
    }

    [IgnoreCast]
    [Virtual]
    public abstract class ByteString : TypeAlias<string>
    {
      public static extern implicit operator dom.ByteString(string value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class ConstrainBoolean : TypeAlias<Union<bool, dom.ConstrainBooleanParameters>>
    {
      public static extern implicit operator dom.ConstrainBoolean(
        Union<bool, dom.ConstrainBooleanParameters> value);

      [Template("{0}")]
      public static extern dom.ConstrainBoolean Create(bool value);

      [Template("{0}")]
      public static extern dom.ConstrainBoolean Create(dom.ConstrainBooleanParameters value);

      public static extern implicit operator dom.ConstrainBoolean(bool value);

      public static extern implicit operator dom.ConstrainBoolean(
        dom.ConstrainBooleanParameters value);

      public static extern explicit operator bool(dom.ConstrainBoolean value);

      public static extern explicit operator dom.ConstrainBooleanParameters(
        dom.ConstrainBoolean value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class ConstrainDOMString : TypeAlias<Union<string, string[], dom.ConstrainDOMStringParameters>>
    {
      public static extern implicit operator dom.ConstrainDOMString(
        Union<string, string[], dom.ConstrainDOMStringParameters> value);

      [Template("{0}")]
      public static extern dom.ConstrainDOMString Create(string value);

      [Template("{0}")]
      public static extern dom.ConstrainDOMString Create(string[] value);

      [Template("{0}")]
      public static extern dom.ConstrainDOMString Create(dom.ConstrainDOMStringParameters value);

      public static extern implicit operator dom.ConstrainDOMString(string value);

      public static extern implicit operator dom.ConstrainDOMString(string[] value);

      public static extern implicit operator dom.ConstrainDOMString(
        dom.ConstrainDOMStringParameters value);

      public static extern explicit operator string(dom.ConstrainDOMString value);

      public static extern explicit operator string[](dom.ConstrainDOMString value);

      public static extern explicit operator dom.ConstrainDOMStringParameters(
        dom.ConstrainDOMString value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class ConstrainDouble : TypeAlias<Union<double, dom.ConstrainDoubleRange>>
    {
      public static extern implicit operator dom.ConstrainDouble(
        Union<double, dom.ConstrainDoubleRange> value);

      [Template("{0}")]
      public static extern dom.ConstrainDouble Create(double value);

      [Template("{0}")]
      public static extern dom.ConstrainDouble Create(dom.ConstrainDoubleRange value);

      public static extern implicit operator dom.ConstrainDouble(double value);

      public static extern implicit operator dom.ConstrainDouble(dom.ConstrainDoubleRange value);

      public static extern explicit operator double(dom.ConstrainDouble value);

      public static extern explicit operator dom.ConstrainDoubleRange(dom.ConstrainDouble value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class ConstrainLong : TypeAlias<Union<double, dom.ConstrainLongRange>>
    {
      public static extern implicit operator dom.ConstrainLong(
        Union<double, dom.ConstrainLongRange> value);

      [Template("{0}")]
      public static extern dom.ConstrainLong Create(double value);

      [Template("{0}")]
      public static extern dom.ConstrainLong Create(dom.ConstrainLongRange value);

      public static extern implicit operator dom.ConstrainLong(double value);

      public static extern implicit operator dom.ConstrainLong(dom.ConstrainLongRange value);

      public static extern explicit operator double(dom.ConstrainLong value);

      public static extern explicit operator dom.ConstrainLongRange(dom.ConstrainLong value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class CryptoOperationData : TypeAlias<es5.ArrayBufferView>
    {
      public static extern implicit operator dom.CryptoOperationData(es5.ArrayBufferView value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLbitfield : TypeAlias<double>
    {
      public static extern implicit operator dom.GLbitfield(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLboolean : TypeAlias<bool>
    {
      public static extern implicit operator dom.GLboolean(bool value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLbyte : TypeAlias<double>
    {
      public static extern implicit operator dom.GLbyte(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLclampf : TypeAlias<double>
    {
      public static extern implicit operator dom.GLclampf(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLenum : TypeAlias<double>
    {
      public static extern implicit operator dom.GLenum(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLfloat : TypeAlias<double>
    {
      public static extern implicit operator dom.GLfloat(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLint : TypeAlias<double>
    {
      public static extern implicit operator dom.GLint(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLintptr : TypeAlias<double>
    {
      public static extern implicit operator dom.GLintptr(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLshort : TypeAlias<double>
    {
      public static extern implicit operator dom.GLshort(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLsizei : TypeAlias<double>
    {
      public static extern implicit operator dom.GLsizei(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLsizeiptr : TypeAlias<double>
    {
      public static extern implicit operator dom.GLsizeiptr(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLubyte : TypeAlias<double>
    {
      public static extern implicit operator dom.GLubyte(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLuint : TypeAlias<double>
    {
      public static extern implicit operator dom.GLuint(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GLushort : TypeAlias<double>
    {
      public static extern implicit operator dom.GLushort(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class IDBKeyPath : TypeAlias<string>
    {
      public static extern implicit operator dom.IDBKeyPath(string value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class MSInboundPayload : TypeAlias<Union<dom.MSVideoRecvPayload, dom.MSAudioRecvPayload>>
    {
      public static extern implicit operator dom.MSInboundPayload(
        Union<dom.MSVideoRecvPayload, dom.MSAudioRecvPayload> value);

      [Template("{0}")]
      public static extern dom.MSInboundPayload Create(dom.MSVideoRecvPayload value);

      [Template("{0}")]
      public static extern dom.MSInboundPayload Create(dom.MSAudioRecvPayload value);

      public static extern implicit operator dom.MSInboundPayload(dom.MSVideoRecvPayload value);

      public static extern implicit operator dom.MSInboundPayload(dom.MSAudioRecvPayload value);

      public static extern explicit operator dom.MSVideoRecvPayload(dom.MSInboundPayload value);

      public static extern explicit operator dom.MSAudioRecvPayload(dom.MSInboundPayload value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class MSLocalClientEvent : TypeAlias<Union<dom.MSLocalClientEventBase, dom.MSAudioLocalClientEvent>>
    {
      public static extern implicit operator dom.MSLocalClientEvent(
        Union<dom.MSLocalClientEventBase, dom.MSAudioLocalClientEvent> value);

      [Template("{0}")]
      public static extern dom.MSLocalClientEvent Create(dom.MSLocalClientEventBase value);

      [Template("{0}")]
      public static extern dom.MSLocalClientEvent Create(dom.MSAudioLocalClientEvent value);

      public static extern implicit operator dom.MSLocalClientEvent(
        dom.MSLocalClientEventBase value);

      public static extern implicit operator dom.MSLocalClientEvent(
        dom.MSAudioLocalClientEvent value);

      public static extern explicit operator dom.MSLocalClientEventBase(
        dom.MSLocalClientEvent value);

      public static extern explicit operator dom.MSAudioLocalClientEvent(
        dom.MSLocalClientEvent value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class MSOutboundPayload : TypeAlias<Union<dom.MSVideoSendPayload, dom.MSAudioSendPayload>>
    {
      public static extern implicit operator dom.MSOutboundPayload(
        Union<dom.MSVideoSendPayload, dom.MSAudioSendPayload> value);

      [Template("{0}")]
      public static extern dom.MSOutboundPayload Create(dom.MSVideoSendPayload value);

      [Template("{0}")]
      public static extern dom.MSOutboundPayload Create(dom.MSAudioSendPayload value);

      public static extern implicit operator dom.MSOutboundPayload(dom.MSVideoSendPayload value);

      public static extern implicit operator dom.MSOutboundPayload(dom.MSAudioSendPayload value);

      public static extern explicit operator dom.MSVideoSendPayload(dom.MSOutboundPayload value);

      public static extern explicit operator dom.MSAudioSendPayload(dom.MSOutboundPayload value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class RTCIceGatherCandidate : TypeAlias<Union<dom.RTCIceCandidateDictionary, dom.RTCIceCandidateComplete>>
    {
      public static extern implicit operator dom.RTCIceGatherCandidate(
        Union<dom.RTCIceCandidateDictionary, dom.RTCIceCandidateComplete> value);

      [Template("{0}")]
      public static extern dom.RTCIceGatherCandidate Create(dom.RTCIceCandidateDictionary value);

      [Template("{0}")]
      public static extern dom.RTCIceGatherCandidate Create(dom.RTCIceCandidateComplete value);

      public static extern implicit operator dom.RTCIceGatherCandidate(
        dom.RTCIceCandidateDictionary value);

      public static extern implicit operator dom.RTCIceGatherCandidate(
        dom.RTCIceCandidateComplete value);

      public static extern explicit operator dom.RTCIceCandidateDictionary(
        dom.RTCIceGatherCandidate value);

      public static extern explicit operator dom.RTCIceCandidateComplete(
        dom.RTCIceGatherCandidate value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class RTCTransport : TypeAlias<Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport>>
    {
      public static extern implicit operator dom.RTCTransport(
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> value);

      [Template("{0}")]
      public static extern dom.RTCTransport Create(dom.RTCDtlsTransport value);

      [Template("{0}")]
      public static extern dom.RTCTransport Create(dom.RTCSrtpSdesTransport value);

      public static extern implicit operator dom.RTCTransport(dom.RTCDtlsTransport value);

      public static extern implicit operator dom.RTCTransport(dom.RTCSrtpSdesTransport value);

      public static extern explicit operator dom.RTCDtlsTransport(dom.RTCTransport value);

      public static extern explicit operator dom.RTCSrtpSdesTransport(dom.RTCTransport value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class RequestInfo : TypeAlias<Union<dom.Request, string>>
    {
      public static extern implicit operator dom.RequestInfo(Union<dom.Request, string> value);

      [Template("{0}")]
      public static extern dom.RequestInfo Create(dom.Request value);

      [Template("{0}")]
      public static extern dom.RequestInfo Create(string value);

      public static extern implicit operator dom.RequestInfo(dom.Request value);

      public static extern implicit operator dom.RequestInfo(string value);

      public static extern explicit operator dom.Request(dom.RequestInfo value);

      public static extern explicit operator string(dom.RequestInfo value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class USVString : TypeAlias<string>
    {
      public static extern implicit operator dom.USVString(string value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class payloadtype : TypeAlias<double>
    {
      public static extern implicit operator dom.payloadtype(double value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class BufferSource : TypeAlias<Union<es5.ArrayBuffer, es5.ArrayBufferView>>
    {
      public static extern implicit operator dom.BufferSource(
        Union<es5.ArrayBuffer, es5.ArrayBufferView> value);

      [Template("{0}")]
      public static extern dom.BufferSource Create(es5.ArrayBuffer value);

      [Template("{0}")]
      public static extern dom.BufferSource Create(es5.ArrayBufferView value);

      public static extern implicit operator dom.BufferSource(es5.ArrayBuffer value);

      public static extern implicit operator dom.BufferSource(es5.ArrayBufferView value);

      public static extern explicit operator es5.ArrayBuffer(dom.BufferSource value);

      public static extern explicit operator es5.ArrayBufferView(dom.BufferSource value);
    }

    [Name("System.String")]
    [ExportedAs("ClientTypes")]
    public class ClientTypes : LiteralType<string>
    {
      [Template("<self>\"window\"")]
      public static readonly dom.Literals.Types.window window;
      [Template("<self>\"worker\"")]
      public static readonly dom.Literals.Types.worker worker;
      [Template("<self>\"sharedworker\"")]
      public static readonly dom.Literals.Types.sharedworker sharedworker;
      [Template("<self>\"all\"")]
      public static readonly dom.Literals.Types.all all;

      private extern ClientTypes();

      public static extern implicit operator dom.ClientTypes(dom.Literals.Types.window value);

      public static extern implicit operator dom.ClientTypes(dom.Literals.Types.worker value);

      public static extern implicit operator dom.ClientTypes(
        dom.Literals.Types.sharedworker value);

      public static extern implicit operator dom.ClientTypes(dom.Literals.Types.all value);
    }

    [Name("System.String")]
    [ExportedAs("AppendMode")]
    public class AppendMode : LiteralType<string>
    {
      [Template("<self>\"segments\"")]
      public static readonly dom.Literals.Types.segments segments;
      [Template("<self>\"sequence\"")]
      public static readonly dom.Literals.Types.sequence sequence;

      private extern AppendMode();

      public static extern implicit operator dom.AppendMode(dom.Literals.Types.segments value);

      public static extern implicit operator dom.AppendMode(dom.Literals.Types.sequence value);
    }

    [Name("System.String")]
    [ExportedAs("AudioContextLatencyCategory")]
    public class AudioContextLatencyCategory : LiteralType<string>
    {
      [Template("<self>\"balanced\"")]
      public static readonly dom.Literals.Types.balanced balanced;
      [Template("<self>\"interactive\"")]
      public static readonly dom.Literals.Types.interactive interactive;
      [Template("<self>\"playback\"")]
      public static readonly dom.Literals.Types.playback playback;

      private extern AudioContextLatencyCategory();

      public static extern implicit operator dom.AudioContextLatencyCategory(
        dom.Literals.Types.balanced value);

      public static extern implicit operator dom.AudioContextLatencyCategory(
        dom.Literals.Types.interactive value);

      public static extern implicit operator dom.AudioContextLatencyCategory(
        dom.Literals.Types.playback value);
    }

    [Name("System.String")]
    [ExportedAs("AudioContextState")]
    public class AudioContextState : LiteralType<string>
    {
      [Template("<self>\"suspended\"")]
      public static readonly dom.Literals.Types.suspended suspended;
      [Template("<self>\"running\"")]
      public static readonly dom.Literals.Types.running running;
      [Template("<self>\"closed\"")]
      public static readonly dom.Literals.Types.closed closed;

      private extern AudioContextState();

      public static extern implicit operator dom.AudioContextState(
        dom.Literals.Types.suspended value);

      public static extern implicit operator dom.AudioContextState(
        dom.Literals.Types.running value);

      public static extern implicit operator dom.AudioContextState(
        dom.Literals.Types.closed value);
    }

    [Name("System.String")]
    [ExportedAs("BinaryType")]
    public class BinaryType : LiteralType<string>
    {
      [Template("<self>\"blob\"")]
      public static readonly dom.Literals.Types.blob blob;
      [Template("<self>\"arraybuffer\"")]
      public static readonly dom.Literals.Types.arraybuffer arraybuffer;

      private extern BinaryType();

      public static extern implicit operator dom.BinaryType(dom.Literals.Types.blob value);

      public static extern implicit operator dom.BinaryType(dom.Literals.Types.arraybuffer value);
    }

    [Name("System.String")]
    [ExportedAs("BiquadFilterType")]
    public class BiquadFilterType : LiteralType<string>
    {
      [Template("<self>\"lowpass\"")]
      public static readonly dom.Literals.Types.lowpass lowpass;
      [Template("<self>\"highpass\"")]
      public static readonly dom.Literals.Types.highpass highpass;
      [Template("<self>\"bandpass\"")]
      public static readonly dom.Literals.Types.bandpass bandpass;
      [Template("<self>\"lowshelf\"")]
      public static readonly dom.Literals.Types.lowshelf lowshelf;
      [Template("<self>\"highshelf\"")]
      public static readonly dom.Literals.Types.highshelf highshelf;
      [Template("<self>\"peaking\"")]
      public static readonly dom.Literals.Types.peaking peaking;
      [Template("<self>\"notch\"")]
      public static readonly dom.Literals.Types.notch notch;
      [Template("<self>\"allpass\"")]
      public static readonly dom.Literals.Types.allpass allpass;

      private extern BiquadFilterType();

      public static extern implicit operator dom.BiquadFilterType(
        dom.Literals.Types.lowpass value);

      public static extern implicit operator dom.BiquadFilterType(
        dom.Literals.Types.highpass value);

      public static extern implicit operator dom.BiquadFilterType(
        dom.Literals.Types.bandpass value);

      public static extern implicit operator dom.BiquadFilterType(
        dom.Literals.Types.lowshelf value);

      public static extern implicit operator dom.BiquadFilterType(
        dom.Literals.Types.highshelf value);

      public static extern implicit operator dom.BiquadFilterType(
        dom.Literals.Types.peaking value);

      public static extern implicit operator dom.BiquadFilterType(dom.Literals.Types.notch value);

      public static extern implicit operator dom.BiquadFilterType(
        dom.Literals.Types.allpass value);
    }

    [Name("System.String")]
    [ExportedAs("CanPlayTypeResult")]
    public class CanPlayTypeResult : LiteralType<string>
    {
      [Template("<self>\"\"")]
      public static readonly dom.Literals.Types._ _;
      [Template("<self>\"maybe\"")]
      public static readonly dom.Literals.Types.maybe maybe;
      [Template("<self>\"probably\"")]
      public static readonly dom.Literals.Types.probably probably;

      private extern CanPlayTypeResult();

      public static extern implicit operator dom.CanPlayTypeResult(dom.Literals.Types._ value);

      public static extern implicit operator dom.CanPlayTypeResult(dom.Literals.Types.maybe value);

      public static extern implicit operator dom.CanPlayTypeResult(
        dom.Literals.Types.probably value);
    }

    [Name("System.String")]
    [ExportedAs("CanvasFillRule")]
    public class CanvasFillRule : LiteralType<string>
    {
      [Template("<self>\"nonzero\"")]
      public static readonly dom.Literals.Types.nonzero nonzero;
      [Template("<self>\"evenodd\"")]
      public static readonly dom.Literals.Types.evenodd evenodd;

      private extern CanvasFillRule();

      public static extern implicit operator dom.CanvasFillRule(dom.Literals.Types.nonzero value);

      public static extern implicit operator dom.CanvasFillRule(dom.Literals.Types.evenodd value);
    }

    [Name("System.String")]
    [ExportedAs("ChannelCountMode")]
    public class ChannelCountMode : LiteralType<string>
    {
      [Template("<self>\"max\"")]
      public static readonly dom.Literals.Types.max max;
      [Template("<self>\"clamped-max\"")]
      public static readonly dom.Literals.Types.clamped_max clamped_max;
      [Template("<self>\"explicit\"")]
      public static readonly dom.Literals.Types.@explicit @explicit;

      private extern ChannelCountMode();

      public static extern implicit operator dom.ChannelCountMode(dom.Literals.Types.max value);

      public static extern implicit operator dom.ChannelCountMode(
        dom.Literals.Types.clamped_max value);

      public static extern implicit operator dom.ChannelCountMode(
        dom.Literals.Types.@explicit value);
    }

    [Name("System.String")]
    [ExportedAs("ChannelInterpretation")]
    public class ChannelInterpretation : LiteralType<string>
    {
      [Template("<self>\"speakers\"")]
      public static readonly dom.Literals.Types.speakers speakers;
      [Template("<self>\"discrete\"")]
      public static readonly dom.Literals.Types.discrete discrete;

      private extern ChannelInterpretation();

      public static extern implicit operator dom.ChannelInterpretation(
        dom.Literals.Types.speakers value);

      public static extern implicit operator dom.ChannelInterpretation(
        dom.Literals.Types.discrete value);
    }

    [Name("System.String")]
    [ExportedAs("DisplayCaptureSurfaceType")]
    public class DisplayCaptureSurfaceType : LiteralType<string>
    {
      [Template("<self>\"monitor\"")]
      public static readonly dom.Literals.Types.monitor monitor;
      [Template("<self>\"window\"")]
      public static readonly dom.Literals.Types.window window;
      [Template("<self>\"application\"")]
      public static readonly dom.Literals.Types.application application;
      [Template("<self>\"browser\"")]
      public static readonly dom.Literals.Types.browser browser;

      private extern DisplayCaptureSurfaceType();

      public static extern implicit operator dom.DisplayCaptureSurfaceType(
        dom.Literals.Types.monitor value);

      public static extern implicit operator dom.DisplayCaptureSurfaceType(
        dom.Literals.Types.window value);

      public static extern implicit operator dom.DisplayCaptureSurfaceType(
        dom.Literals.Types.application value);

      public static extern implicit operator dom.DisplayCaptureSurfaceType(
        dom.Literals.Types.browser value);
    }

    [Name("System.String")]
    [ExportedAs("DistanceModelType")]
    public class DistanceModelType : LiteralType<string>
    {
      [Template("<self>\"linear\"")]
      public static readonly dom.Literals.Types.linear linear;
      [Template("<self>\"inverse\"")]
      public static readonly dom.Literals.Types.inverse inverse;
      [Template("<self>\"exponential\"")]
      public static readonly dom.Literals.Types.exponential exponential;

      private extern DistanceModelType();

      public static extern implicit operator dom.DistanceModelType(
        dom.Literals.Types.linear value);

      public static extern implicit operator dom.DistanceModelType(
        dom.Literals.Types.inverse value);

      public static extern implicit operator dom.DistanceModelType(
        dom.Literals.Types.exponential value);
    }

    [Name("System.String")]
    [ExportedAs("EndOfStreamError")]
    public class EndOfStreamError : LiteralType<string>
    {
      [Template("<self>\"network\"")]
      public static readonly dom.Literals.Types.network network;
      [Template("<self>\"decode\"")]
      public static readonly dom.Literals.Types.decode decode;

      private extern EndOfStreamError();

      public static extern implicit operator dom.EndOfStreamError(
        dom.Literals.Types.network value);

      public static extern implicit operator dom.EndOfStreamError(dom.Literals.Types.decode value);
    }

    [Name("System.String")]
    [ExportedAs("ExpandGranularity")]
    public class ExpandGranularity : LiteralType<string>
    {
      [Template("<self>\"character\"")]
      public static readonly dom.Literals.Types.character character;
      [Template("<self>\"word\"")]
      public static readonly dom.Literals.Types.word word;
      [Template("<self>\"sentence\"")]
      public static readonly dom.Literals.Types.sentence sentence;
      [Template("<self>\"textedit\"")]
      public static readonly dom.Literals.Types.textedit textedit;

      private extern ExpandGranularity();

      public static extern implicit operator dom.ExpandGranularity(
        dom.Literals.Types.character value);

      public static extern implicit operator dom.ExpandGranularity(dom.Literals.Types.word value);

      public static extern implicit operator dom.ExpandGranularity(
        dom.Literals.Types.sentence value);

      public static extern implicit operator dom.ExpandGranularity(
        dom.Literals.Types.textedit value);
    }

    [Name("System.String")]
    [ExportedAs("GamepadHand")]
    public class GamepadHand : LiteralType<string>
    {
      [Template("<self>\"\"")]
      public static readonly dom.Literals.Types._ _;
      [Template("<self>\"left\"")]
      public static readonly dom.Literals.Types.left left;
      [Template("<self>\"right\"")]
      public static readonly dom.Literals.Types.right right;

      private extern GamepadHand();

      public static extern implicit operator dom.GamepadHand(dom.Literals.Types._ value);

      public static extern implicit operator dom.GamepadHand(dom.Literals.Types.left value);

      public static extern implicit operator dom.GamepadHand(dom.Literals.Types.right value);

      public static extern implicit operator dom.GamepadHand(dom.VREye value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class GamepadHapticActuatorType : TypeAlias<dom.Literals.Types.vibration>
    {
      public static extern implicit operator dom.GamepadHapticActuatorType(
        dom.Literals.Types.vibration value);

      public static extern implicit operator string(dom.GamepadHapticActuatorType value);

      [Template("{arg1} === {arg2}")]
      public static extern bool operator ==(
        dom.GamepadHapticActuatorType arg1,
        dom.GamepadHapticActuatorType arg2);

      [Template("{arg1} !== {arg2}")]
      public static extern bool operator !=(
        dom.GamepadHapticActuatorType arg1,
        dom.GamepadHapticActuatorType arg2);

      [Template("{arg1} === {arg2}")]
      public static extern bool operator ==(dom.GamepadHapticActuatorType arg1, string arg2);

      [Template("{arg1} !== {arg2}")]
      public static extern bool operator !=(dom.GamepadHapticActuatorType arg1, string arg2);

      [Template("{arg1} === {arg2}")]
      public static extern bool operator ==(string arg1, dom.GamepadHapticActuatorType arg2);

      [Template("{arg1} !== {arg2}")]
      public static extern bool operator !=(string arg1, dom.GamepadHapticActuatorType arg2);
    }

    [Name("System.String")]
    [ExportedAs("GamepadInputEmulationType")]
    public class GamepadInputEmulationType : LiteralType<string>
    {
      [Template("<self>\"mouse\"")]
      public static readonly dom.Literals.Types.mouse mouse;
      [Template("<self>\"keyboard\"")]
      public static readonly dom.Literals.Types.keyboard keyboard;
      [Template("<self>\"gamepad\"")]
      public static readonly dom.Literals.Types.gamepad gamepad;

      private extern GamepadInputEmulationType();

      public static extern implicit operator dom.GamepadInputEmulationType(
        dom.Literals.Types.mouse value);

      public static extern implicit operator dom.GamepadInputEmulationType(
        dom.Literals.Types.keyboard value);

      public static extern implicit operator dom.GamepadInputEmulationType(
        dom.Literals.Types.gamepad value);
    }

    [Name("System.String")]
    [ExportedAs("GamepadMappingType")]
    public class GamepadMappingType : LiteralType<string>
    {
      [Template("<self>\"\"")]
      public static readonly dom.Literals.Types._ _;
      [Template("<self>\"standard\"")]
      public static readonly dom.Literals.Types.standard standard;

      private extern GamepadMappingType();

      public static extern implicit operator dom.GamepadMappingType(dom.Literals.Types._ value);

      public static extern implicit operator dom.GamepadMappingType(
        dom.Literals.Types.standard value);
    }

    [Name("System.String")]
    [ExportedAs("IDBCursorDirection")]
    public class IDBCursorDirection : LiteralType<string>
    {
      [Template("<self>\"next\"")]
      public static readonly dom.Literals.Types.next next;
      [Template("<self>\"nextunique\"")]
      public static readonly dom.Literals.Types.nextunique nextunique;
      [Template("<self>\"prev\"")]
      public static readonly dom.Literals.Types.prev prev;
      [Template("<self>\"prevunique\"")]
      public static readonly dom.Literals.Types.prevunique prevunique;

      private extern IDBCursorDirection();

      public static extern implicit operator dom.IDBCursorDirection(dom.Literals.Types.next value);

      public static extern implicit operator dom.IDBCursorDirection(
        dom.Literals.Types.nextunique value);

      public static extern implicit operator dom.IDBCursorDirection(dom.Literals.Types.prev value);

      public static extern implicit operator dom.IDBCursorDirection(
        dom.Literals.Types.prevunique value);
    }

    [Name("System.String")]
    [ExportedAs("IDBRequestReadyState")]
    public class IDBRequestReadyState : LiteralType<string>
    {
      [Template("<self>\"pending\"")]
      public static readonly dom.Literals.Types.pending pending;
      [Template("<self>\"done\"")]
      public static readonly dom.Literals.Types.done done;

      private extern IDBRequestReadyState();

      public static extern implicit operator dom.IDBRequestReadyState(
        dom.Literals.Types.pending value);

      public static extern implicit operator dom.IDBRequestReadyState(
        dom.Literals.Types.done value);
    }

    [Name("System.String")]
    [ExportedAs("IDBTransactionMode")]
    public class IDBTransactionMode : LiteralType<string>
    {
      [Template("<self>\"readonly\"")]
      public static readonly dom.Literals.Types.@readonly @readonly;
      [Template("<self>\"readwrite\"")]
      public static readonly dom.Literals.Types.readwrite readwrite;
      [Template("<self>\"versionchange\"")]
      public static readonly dom.Literals.Types.versionchange versionchange;

      private extern IDBTransactionMode();

      public static extern implicit operator dom.IDBTransactionMode(
        dom.Literals.Types.@readonly value);

      public static extern implicit operator dom.IDBTransactionMode(
        dom.Literals.Types.readwrite value);

      public static extern implicit operator dom.IDBTransactionMode(
        dom.Literals.Types.versionchange value);
    }

    [Name("System.String")]
    [ExportedAs("KeyFormat")]
    public class KeyFormat : LiteralType<string>
    {
      [Template("<self>\"raw\"")]
      public static readonly dom.Literals.Types.raw raw;
      [Template("<self>\"spki\"")]
      public static readonly dom.Literals.Types.spki spki;
      [Template("<self>\"pkcs8\"")]
      public static readonly dom.Literals.Types.pkcs8 pkcs8;
      [Template("<self>\"jwk\"")]
      public static readonly dom.Literals.Types.jwk jwk;

      private extern KeyFormat();

      public static extern implicit operator dom.KeyFormat(dom.Literals.Types.raw value);

      public static extern implicit operator dom.KeyFormat(dom.Literals.Types.spki value);

      public static extern implicit operator dom.KeyFormat(dom.Literals.Types.pkcs8 value);

      public static extern implicit operator dom.KeyFormat(dom.Literals.Types.jwk value);

      public static extern implicit operator dom.KeyFormat(dom.Literals.Options.format value);
    }

    [Name("System.String")]
    [ExportedAs("KeyType")]
    public class KeyType : LiteralType<string>
    {
      [Template("<self>\"public\"")]
      public static readonly dom.Literals.Types.@public @public;
      [Template("<self>\"private\"")]
      public static readonly dom.Literals.Types.@private @private;
      [Template("<self>\"secret\"")]
      public static readonly dom.Literals.Types.secret secret;

      private extern KeyType();

      public static extern implicit operator dom.KeyType(dom.Literals.Types.@public value);

      public static extern implicit operator dom.KeyType(dom.Literals.Types.@private value);

      public static extern implicit operator dom.KeyType(dom.Literals.Types.secret value);
    }

    [Name("System.String")]
    [ExportedAs("KeyUsage")]
    public class KeyUsage : LiteralType<string>
    {
      [Template("<self>\"encrypt\"")]
      public static readonly dom.Literals.Types.encrypt encrypt;
      [Template("<self>\"decrypt\"")]
      public static readonly dom.Literals.Types.decrypt decrypt;
      [Template("<self>\"sign\"")]
      public static readonly dom.Literals.Types.sign sign;
      [Template("<self>\"verify\"")]
      public static readonly dom.Literals.Types.verify verify;
      [Template("<self>\"deriveKey\"")]
      public static readonly dom.Literals.Types.deriveKey deriveKey;
      [Template("<self>\"deriveBits\"")]
      public static readonly dom.Literals.Types.deriveBits deriveBits;
      [Template("<self>\"wrapKey\"")]
      public static readonly dom.Literals.Types.wrapKey wrapKey;
      [Template("<self>\"unwrapKey\"")]
      public static readonly dom.Literals.Types.unwrapKey unwrapKey;

      private extern KeyUsage();

      public static extern implicit operator dom.KeyUsage(dom.Literals.Types.encrypt value);

      public static extern implicit operator dom.KeyUsage(dom.Literals.Types.decrypt value);

      public static extern implicit operator dom.KeyUsage(dom.Literals.Types.sign value);

      public static extern implicit operator dom.KeyUsage(dom.Literals.Types.verify value);

      public static extern implicit operator dom.KeyUsage(dom.Literals.Types.deriveKey value);

      public static extern implicit operator dom.KeyUsage(dom.Literals.Types.deriveBits value);

      public static extern implicit operator dom.KeyUsage(dom.Literals.Types.wrapKey value);

      public static extern implicit operator dom.KeyUsage(dom.Literals.Types.unwrapKey value);
    }

    [Name("System.String")]
    [ExportedAs("ListeningState")]
    public class ListeningState : LiteralType<string>
    {
      [Template("<self>\"inactive\"")]
      public static readonly dom.Literals.Types.inactive inactive;
      [Template("<self>\"active\"")]
      public static readonly dom.Literals.Types.active active;
      [Template("<self>\"disambiguation\"")]
      public static readonly dom.Literals.Types.disambiguation disambiguation;

      private extern ListeningState();

      public static extern implicit operator dom.ListeningState(dom.Literals.Types.inactive value);

      public static extern implicit operator dom.ListeningState(dom.Literals.Types.active value);

      public static extern implicit operator dom.ListeningState(
        dom.Literals.Types.disambiguation value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class MSCredentialType : TypeAlias<dom.Literals.Types.FIDO_2_0>
    {
      public static extern implicit operator dom.MSCredentialType(
        dom.Literals.Types.FIDO_2_0 value);

      public static extern implicit operator string(dom.MSCredentialType value);

      [Template("{arg1} === {arg2}")]
      public static extern bool operator ==(dom.MSCredentialType arg1, dom.MSCredentialType arg2);

      [Template("{arg1} !== {arg2}")]
      public static extern bool operator !=(dom.MSCredentialType arg1, dom.MSCredentialType arg2);

      [Template("{arg1} === {arg2}")]
      public static extern bool operator ==(dom.MSCredentialType arg1, string arg2);

      [Template("{arg1} !== {arg2}")]
      public static extern bool operator !=(dom.MSCredentialType arg1, string arg2);

      [Template("{arg1} === {arg2}")]
      public static extern bool operator ==(string arg1, dom.MSCredentialType arg2);

      [Template("{arg1} !== {arg2}")]
      public static extern bool operator !=(string arg1, dom.MSCredentialType arg2);
    }

    [Name("System.String")]
    [ExportedAs("MSIceAddrType")]
    public class MSIceAddrType : LiteralType<string>
    {
      [Template("<self>\"os\"")]
      public static readonly dom.Literals.Types.os os;
      [Template("<self>\"stun\"")]
      public static readonly dom.Literals.Types.stun stun;
      [Template("<self>\"turn\"")]
      public static readonly dom.Literals.Types.turn turn;
      [Template("<self>\"peer-derived\"")]
      public static readonly dom.Literals.Types.peer_derived peer_derived;

      private extern MSIceAddrType();

      public static extern implicit operator dom.MSIceAddrType(dom.Literals.Types.os value);

      public static extern implicit operator dom.MSIceAddrType(dom.Literals.Types.stun value);

      public static extern implicit operator dom.MSIceAddrType(dom.Literals.Types.turn value);

      public static extern implicit operator dom.MSIceAddrType(
        dom.Literals.Types.peer_derived value);
    }

    [Name("System.String")]
    [ExportedAs("MSIceType")]
    public class MSIceType : LiteralType<string>
    {
      [Template("<self>\"failed\"")]
      public static readonly dom.Literals.Types.failed failed;
      [Template("<self>\"direct\"")]
      public static readonly dom.Literals.Types.direct direct;
      [Template("<self>\"relay\"")]
      public static readonly dom.Literals.Types.relay relay;

      private extern MSIceType();

      public static extern implicit operator dom.MSIceType(dom.Literals.Types.failed value);

      public static extern implicit operator dom.MSIceType(dom.Literals.Types.direct value);

      public static extern implicit operator dom.MSIceType(dom.Literals.Types.relay value);
    }

    [Name("System.String")]
    [ExportedAs("MSStatsType")]
    public class MSStatsType : LiteralType<string>
    {
      [Template("<self>\"description\"")]
      public static readonly dom.Literals.Types.description description;
      [Template("<self>\"localclientevent\"")]
      public static readonly dom.Literals.Types.localclientevent localclientevent;
      [Template("<self>\"inbound-network\"")]
      public static readonly dom.Literals.Types.inbound_network inbound_network;
      [Template("<self>\"outbound-network\"")]
      public static readonly dom.Literals.Types.outbound_network outbound_network;
      [Template("<self>\"inbound-payload\"")]
      public static readonly dom.Literals.Types.inbound_payload inbound_payload;
      [Template("<self>\"outbound-payload\"")]
      public static readonly dom.Literals.Types.outbound_payload outbound_payload;
      [Template("<self>\"transportdiagnostics\"")]
      public static readonly dom.Literals.Types.transportdiagnostics transportdiagnostics;

      private extern MSStatsType();

      public static extern implicit operator dom.MSStatsType(dom.Literals.Types.description value);

      public static extern implicit operator dom.MSStatsType(
        dom.Literals.Types.localclientevent value);

      public static extern implicit operator dom.MSStatsType(
        dom.Literals.Types.inbound_network value);

      public static extern implicit operator dom.MSStatsType(
        dom.Literals.Types.outbound_network value);

      public static extern implicit operator dom.MSStatsType(
        dom.Literals.Types.inbound_payload value);

      public static extern implicit operator dom.MSStatsType(
        dom.Literals.Types.outbound_payload value);

      public static extern implicit operator dom.MSStatsType(
        dom.Literals.Types.transportdiagnostics value);
    }

    [Name("System.String")]
    [ExportedAs("MSTransportType")]
    public class MSTransportType : LiteralType<string>
    {
      [Template("<self>\"Embedded\"")]
      public static readonly dom.Literals.Types.Embedded Embedded;
      [Template("<self>\"USB\"")]
      public static readonly dom.Literals.Types.USB USB;
      [Template("<self>\"NFC\"")]
      public static readonly dom.Literals.Types.NFC NFC;
      [Template("<self>\"BT\"")]
      public static readonly dom.Literals.Types.BT BT;

      private extern MSTransportType();

      public static extern implicit operator dom.MSTransportType(
        dom.Literals.Types.Embedded value);

      public static extern implicit operator dom.MSTransportType(dom.Literals.Types.USB value);

      public static extern implicit operator dom.MSTransportType(dom.Literals.Types.NFC value);

      public static extern implicit operator dom.MSTransportType(dom.Literals.Types.BT value);
    }

    [Name("System.String")]
    [ExportedAs("MSWebViewPermissionState")]
    public class MSWebViewPermissionState : LiteralType<string>
    {
      [Template("<self>\"unknown\"")]
      public static readonly dom.Literals.Types.unknown unknown;
      [Template("<self>\"defer\"")]
      public static readonly dom.Literals.Types.defer defer;
      [Template("<self>\"allow\"")]
      public static readonly dom.Literals.Types.allow allow;
      [Template("<self>\"deny\"")]
      public static readonly dom.Literals.Types.deny deny;

      private extern MSWebViewPermissionState();

      public static extern implicit operator dom.MSWebViewPermissionState(
        dom.Literals.Types.unknown value);

      public static extern implicit operator dom.MSWebViewPermissionState(
        dom.Literals.Types.defer value);

      public static extern implicit operator dom.MSWebViewPermissionState(
        dom.Literals.Types.allow value);

      public static extern implicit operator dom.MSWebViewPermissionState(
        dom.Literals.Types.deny value);
    }

    [Name("System.String")]
    [ExportedAs("MSWebViewPermissionType")]
    public class MSWebViewPermissionType : LiteralType<string>
    {
      [Template("<self>\"geolocation\"")]
      public static readonly dom.Literals.Types.geolocation geolocation;
      [Template("<self>\"unlimitedIndexedDBQuota\"")]
      public static readonly dom.Literals.Types.unlimitedIndexedDBQuota unlimitedIndexedDBQuota;
      [Template("<self>\"media\"")]
      public static readonly dom.Literals.Types.media media;
      [Template("<self>\"pointerlock\"")]
      public static readonly dom.Literals.Types.pointerlock pointerlock;
      [Template("<self>\"webnotifications\"")]
      public static readonly dom.Literals.Types.webnotifications webnotifications;

      private extern MSWebViewPermissionType();

      public static extern implicit operator dom.MSWebViewPermissionType(
        dom.Literals.Types.geolocation value);

      public static extern implicit operator dom.MSWebViewPermissionType(
        dom.Literals.Types.unlimitedIndexedDBQuota value);

      public static extern implicit operator dom.MSWebViewPermissionType(
        dom.Literals.Types.media value);

      public static extern implicit operator dom.MSWebViewPermissionType(
        dom.Literals.Types.pointerlock value);

      public static extern implicit operator dom.MSWebViewPermissionType(
        dom.Literals.Types.webnotifications value);
    }

    [Name("System.String")]
    [ExportedAs("MediaDeviceKind")]
    public class MediaDeviceKind : LiteralType<string>
    {
      [Template("<self>\"audioinput\"")]
      public static readonly dom.Literals.Types.audioinput audioinput;
      [Template("<self>\"audiooutput\"")]
      public static readonly dom.Literals.Types.audiooutput audiooutput;
      [Template("<self>\"videoinput\"")]
      public static readonly dom.Literals.Types.videoinput videoinput;

      private extern MediaDeviceKind();

      public static extern implicit operator dom.MediaDeviceKind(
        dom.Literals.Types.audioinput value);

      public static extern implicit operator dom.MediaDeviceKind(
        dom.Literals.Types.audiooutput value);

      public static extern implicit operator dom.MediaDeviceKind(
        dom.Literals.Types.videoinput value);
    }

    [Name("System.String")]
    [ExportedAs("MediaKeyMessageType")]
    public class MediaKeyMessageType : LiteralType<string>
    {
      [Template("<self>\"license-request\"")]
      public static readonly dom.Literals.Types.license_request license_request;
      [Template("<self>\"license-renewal\"")]
      public static readonly dom.Literals.Types.license_renewal license_renewal;
      [Template("<self>\"license-release\"")]
      public static readonly dom.Literals.Types.license_release license_release;
      [Template("<self>\"individualization-request\"")]
      public static readonly dom.Literals.Types.individualization_request individualization_request;

      private extern MediaKeyMessageType();

      public static extern implicit operator dom.MediaKeyMessageType(
        dom.Literals.Types.license_request value);

      public static extern implicit operator dom.MediaKeyMessageType(
        dom.Literals.Types.license_renewal value);

      public static extern implicit operator dom.MediaKeyMessageType(
        dom.Literals.Types.license_release value);

      public static extern implicit operator dom.MediaKeyMessageType(
        dom.Literals.Types.individualization_request value);
    }

    [Name("System.String")]
    [ExportedAs("MediaKeySessionType")]
    public class MediaKeySessionType : LiteralType<string>
    {
      [Template("<self>\"temporary\"")]
      public static readonly dom.Literals.Types.temporary temporary;
      [Template("<self>\"persistent-license\"")]
      public static readonly dom.Literals.Types.persistent_license persistent_license;
      [Template("<self>\"persistent-release-message\"")]
      public static readonly dom.Literals.Types.persistent_release_message persistent_release_message;

      private extern MediaKeySessionType();

      public static extern implicit operator dom.MediaKeySessionType(
        dom.Literals.Types.temporary value);

      public static extern implicit operator dom.MediaKeySessionType(
        dom.Literals.Types.persistent_license value);

      public static extern implicit operator dom.MediaKeySessionType(
        dom.Literals.Types.persistent_release_message value);
    }

    [Name("System.String")]
    [ExportedAs("MediaKeyStatus")]
    public class MediaKeyStatus : LiteralType<string>
    {
      [Template("<self>\"usable\"")]
      public static readonly dom.Literals.Types.usable usable;
      [Template("<self>\"expired\"")]
      public static readonly dom.Literals.Types.expired expired;
      [Template("<self>\"output-downscaled\"")]
      public static readonly dom.Literals.Types.output_downscaled output_downscaled;
      [Template("<self>\"output-not-allowed\"")]
      public static readonly dom.Literals.Types.output_not_allowed output_not_allowed;
      [Template("<self>\"status-pending\"")]
      public static readonly dom.Literals.Types.status_pending status_pending;
      [Template("<self>\"internal-error\"")]
      public static readonly dom.Literals.Types.internal_error internal_error;

      private extern MediaKeyStatus();

      public static extern implicit operator dom.MediaKeyStatus(dom.Literals.Types.usable value);

      public static extern implicit operator dom.MediaKeyStatus(dom.Literals.Types.expired value);

      public static extern implicit operator dom.MediaKeyStatus(
        dom.Literals.Types.output_downscaled value);

      public static extern implicit operator dom.MediaKeyStatus(
        dom.Literals.Types.output_not_allowed value);

      public static extern implicit operator dom.MediaKeyStatus(
        dom.Literals.Types.status_pending value);

      public static extern implicit operator dom.MediaKeyStatus(
        dom.Literals.Types.internal_error value);
    }

    [Name("System.String")]
    [ExportedAs("MediaKeysRequirement")]
    public class MediaKeysRequirement : LiteralType<string>
    {
      [Template("<self>\"required\"")]
      public static readonly dom.Literals.Types.required required;
      [Template("<self>\"optional\"")]
      public static readonly dom.Literals.Types.optional optional;
      [Template("<self>\"not-allowed\"")]
      public static readonly dom.Literals.Types.not_allowed not_allowed;

      private extern MediaKeysRequirement();

      public static extern implicit operator dom.MediaKeysRequirement(
        dom.Literals.Types.required value);

      public static extern implicit operator dom.MediaKeysRequirement(
        dom.Literals.Types.optional value);

      public static extern implicit operator dom.MediaKeysRequirement(
        dom.Literals.Types.not_allowed value);
    }

    [Name("System.String")]
    [ExportedAs("MediaStreamTrackState")]
    public class MediaStreamTrackState : LiteralType<string>
    {
      [Template("<self>\"live\"")]
      public static readonly dom.Literals.Types.live live;
      [Template("<self>\"ended\"")]
      public static readonly dom.Literals.Types.ended ended;

      private extern MediaStreamTrackState();

      public static extern implicit operator dom.MediaStreamTrackState(
        dom.Literals.Types.live value);

      public static extern implicit operator dom.MediaStreamTrackState(
        dom.Literals.Types.ended value);
    }

    [Name("System.String")]
    [ExportedAs("NavigationReason")]
    public class NavigationReason : LiteralType<string>
    {
      [Template("<self>\"up\"")]
      public static readonly dom.Literals.Types.up up;
      [Template("<self>\"down\"")]
      public static readonly dom.Literals.Types.down down;
      [Template("<self>\"left\"")]
      public static readonly dom.Literals.Types.left left;
      [Template("<self>\"right\"")]
      public static readonly dom.Literals.Types.right right;

      private extern NavigationReason();

      public static extern implicit operator dom.NavigationReason(dom.Literals.Types.up value);

      public static extern implicit operator dom.NavigationReason(dom.Literals.Types.down value);

      public static extern implicit operator dom.NavigationReason(dom.Literals.Types.left value);

      public static extern implicit operator dom.NavigationReason(dom.Literals.Types.right value);

      public static extern implicit operator dom.NavigationReason(dom.VREye value);
    }

    [Name("System.String")]
    [ExportedAs("NavigationType")]
    public class NavigationType : LiteralType<string>
    {
      [Template("<self>\"navigate\"")]
      public static readonly dom.Literals.Types.navigate navigate;
      [Template("<self>\"reload\"")]
      public static readonly dom.Literals.Types.reload reload;
      [Template("<self>\"back_forward\"")]
      public static readonly dom.Literals.Types.back_forward back_forward;
      [Template("<self>\"prerender\"")]
      public static readonly dom.Literals.Types.prerender prerender;

      private extern NavigationType();

      public static extern implicit operator dom.NavigationType(dom.Literals.Types.navigate value);

      public static extern implicit operator dom.NavigationType(dom.Literals.Types.reload value);

      public static extern implicit operator dom.NavigationType(
        dom.Literals.Types.back_forward value);

      public static extern implicit operator dom.NavigationType(
        dom.Literals.Types.prerender value);
    }

    [Name("System.String")]
    [ExportedAs("NotificationDirection")]
    public class NotificationDirection : LiteralType<string>
    {
      [Template("<self>\"auto\"")]
      public static readonly dom.Literals.Types.auto auto;
      [Template("<self>\"ltr\"")]
      public static readonly dom.Literals.Types.ltr ltr;
      [Template("<self>\"rtl\"")]
      public static readonly dom.Literals.Types.rtl rtl;

      private extern NotificationDirection();

      public static extern implicit operator dom.NotificationDirection(
        dom.Literals.Types.auto value);

      public static extern implicit operator dom.NotificationDirection(
        dom.Literals.Types.ltr value);

      public static extern implicit operator dom.NotificationDirection(
        dom.Literals.Types.rtl value);
    }

    [Name("System.String")]
    [ExportedAs("NotificationPermission")]
    public class NotificationPermission : LiteralType<string>
    {
      [Template("<self>\"default\"")]
      public static readonly dom.Literals.Types.@default @default;
      [Template("<self>\"denied\"")]
      public static readonly dom.Literals.Types.denied denied;
      [Template("<self>\"granted\"")]
      public static readonly dom.Literals.Types.granted granted;

      private extern NotificationPermission();

      public static extern implicit operator dom.NotificationPermission(
        dom.Literals.Types.@default value);

      public static extern implicit operator dom.NotificationPermission(
        dom.Literals.Types.denied value);

      public static extern implicit operator dom.NotificationPermission(
        dom.Literals.Types.granted value);
    }

    [Name("System.String")]
    [ExportedAs("OscillatorType")]
    public class OscillatorType : LiteralType<string>
    {
      [Template("<self>\"sine\"")]
      public static readonly dom.Literals.Types.sine sine;
      [Template("<self>\"square\"")]
      public static readonly dom.Literals.Types.square square;
      [Template("<self>\"sawtooth\"")]
      public static readonly dom.Literals.Types.sawtooth sawtooth;
      [Template("<self>\"triangle\"")]
      public static readonly dom.Literals.Types.triangle triangle;
      [Template("<self>\"custom\"")]
      public static readonly dom.Literals.Types.custom custom;

      private extern OscillatorType();

      public static extern implicit operator dom.OscillatorType(dom.Literals.Types.sine value);

      public static extern implicit operator dom.OscillatorType(dom.Literals.Types.square value);

      public static extern implicit operator dom.OscillatorType(dom.Literals.Types.sawtooth value);

      public static extern implicit operator dom.OscillatorType(dom.Literals.Types.triangle value);

      public static extern implicit operator dom.OscillatorType(dom.Literals.Types.custom value);
    }

    [Name("System.String")]
    [ExportedAs("OverSampleType")]
    public class OverSampleType : LiteralType<string>
    {
      [Template("<self>\"none\"")]
      public static readonly dom.Literals.Types.none none;
      [Template("<self>\"2x\"")]
      public static readonly dom.Literals.Types._2x _2x;
      [Template("<self>\"4x\"")]
      public static readonly dom.Literals.Types._4x _4x;

      private extern OverSampleType();

      public static extern implicit operator dom.OverSampleType(dom.Literals.Types.none value);

      public static extern implicit operator dom.OverSampleType(dom.Literals.Types._2x value);

      public static extern implicit operator dom.OverSampleType(dom.Literals.Types._4x value);
    }

    [Name("System.String")]
    [ExportedAs("PanningModelType")]
    public class PanningModelType : LiteralType<string>
    {
      [Template("<self>\"equalpower\"")]
      public static readonly dom.Literals.Types.equalpower equalpower;
      [Template("<self>\"HRTF\"")]
      public static readonly dom.Literals.Types.HRTF HRTF;

      private extern PanningModelType();

      public static extern implicit operator dom.PanningModelType(
        dom.Literals.Types.equalpower value);

      public static extern implicit operator dom.PanningModelType(dom.Literals.Types.HRTF value);
    }

    [Name("System.String")]
    [ExportedAs("PaymentComplete")]
    public class PaymentComplete : LiteralType<string>
    {
      [Template("<self>\"success\"")]
      public static readonly dom.Literals.Types.success success;
      [Template("<self>\"fail\"")]
      public static readonly dom.Literals.Types.fail fail;
      [Template("<self>\"unknown\"")]
      public static readonly dom.Literals.Types.unknown unknown;

      private extern PaymentComplete();

      public static extern implicit operator dom.PaymentComplete(dom.Literals.Types.success value);

      public static extern implicit operator dom.PaymentComplete(dom.Literals.Types.fail value);

      public static extern implicit operator dom.PaymentComplete(dom.Literals.Types.unknown value);
    }

    [Name("System.String")]
    [ExportedAs("PaymentShippingType")]
    public class PaymentShippingType : LiteralType<string>
    {
      [Template("<self>\"shipping\"")]
      public static readonly dom.Literals.Types.shipping shipping;
      [Template("<self>\"delivery\"")]
      public static readonly dom.Literals.Types.delivery delivery;
      [Template("<self>\"pickup\"")]
      public static readonly dom.Literals.Types.pickup pickup;

      private extern PaymentShippingType();

      public static extern implicit operator dom.PaymentShippingType(
        dom.Literals.Types.shipping value);

      public static extern implicit operator dom.PaymentShippingType(
        dom.Literals.Types.delivery value);

      public static extern implicit operator dom.PaymentShippingType(
        dom.Literals.Types.pickup value);
    }

    [Name("System.String")]
    [ExportedAs("PushEncryptionKeyName")]
    public class PushEncryptionKeyName : LiteralType<string>
    {
      [Template("<self>\"p256dh\"")]
      public static readonly dom.Literals.Types.p256dh p256dh;
      [Template("<self>\"auth\"")]
      public static readonly dom.Literals.Types.auth auth;

      private extern PushEncryptionKeyName();

      public static extern implicit operator dom.PushEncryptionKeyName(
        dom.Literals.Types.p256dh value);

      public static extern implicit operator dom.PushEncryptionKeyName(
        dom.Literals.Types.auth value);
    }

    [Name("System.String")]
    [ExportedAs("PushPermissionState")]
    public class PushPermissionState : LiteralType<string>
    {
      [Template("<self>\"granted\"")]
      public static readonly dom.Literals.Types.granted granted;
      [Template("<self>\"denied\"")]
      public static readonly dom.Literals.Types.denied denied;
      [Template("<self>\"prompt\"")]
      public static readonly dom.Literals.Types.prompt prompt;

      private extern PushPermissionState();

      public static extern implicit operator dom.PushPermissionState(
        dom.Literals.Types.granted value);

      public static extern implicit operator dom.PushPermissionState(
        dom.Literals.Types.denied value);

      public static extern implicit operator dom.PushPermissionState(
        dom.Literals.Types.prompt value);
    }

    [Name("System.String")]
    [ExportedAs("RTCBundlePolicy")]
    public class RTCBundlePolicy : LiteralType<string>
    {
      [Template("<self>\"balanced\"")]
      public static readonly dom.Literals.Types.balanced balanced;
      [Template("<self>\"max-compat\"")]
      public static readonly dom.Literals.Types.max_compat max_compat;
      [Template("<self>\"max-bundle\"")]
      public static readonly dom.Literals.Types.max_bundle max_bundle;

      private extern RTCBundlePolicy();

      public static extern implicit operator dom.RTCBundlePolicy(
        dom.Literals.Types.balanced value);

      public static extern implicit operator dom.RTCBundlePolicy(
        dom.Literals.Types.max_compat value);

      public static extern implicit operator dom.RTCBundlePolicy(
        dom.Literals.Types.max_bundle value);
    }

    [Name("System.String")]
    [ExportedAs("RTCDegradationPreference")]
    public class RTCDegradationPreference : LiteralType<string>
    {
      [Template("<self>\"maintain-framerate\"")]
      public static readonly dom.Literals.Types.maintain_framerate maintain_framerate;
      [Template("<self>\"maintain-resolution\"")]
      public static readonly dom.Literals.Types.maintain_resolution maintain_resolution;
      [Template("<self>\"balanced\"")]
      public static readonly dom.Literals.Types.balanced balanced;

      private extern RTCDegradationPreference();

      public static extern implicit operator dom.RTCDegradationPreference(
        dom.Literals.Types.maintain_framerate value);

      public static extern implicit operator dom.RTCDegradationPreference(
        dom.Literals.Types.maintain_resolution value);

      public static extern implicit operator dom.RTCDegradationPreference(
        dom.Literals.Types.balanced value);
    }

    [Name("System.String")]
    [ExportedAs("RTCDtlsRole")]
    public class RTCDtlsRole : LiteralType<string>
    {
      [Template("<self>\"auto\"")]
      public static readonly dom.Literals.Types.auto auto;
      [Template("<self>\"client\"")]
      public static readonly dom.Literals.Types.client client;
      [Template("<self>\"server\"")]
      public static readonly dom.Literals.Types.server server;

      private extern RTCDtlsRole();

      public static extern implicit operator dom.RTCDtlsRole(dom.Literals.Types.auto value);

      public static extern implicit operator dom.RTCDtlsRole(dom.Literals.Types.client value);

      public static extern implicit operator dom.RTCDtlsRole(dom.Literals.Types.server value);
    }

    [Name("System.String")]
    [ExportedAs("RTCDtlsTransportState")]
    public class RTCDtlsTransportState : LiteralType<string>
    {
      [Template("<self>\"new\"")]
      public static readonly dom.Literals.Types.@new @new;
      [Template("<self>\"connecting\"")]
      public static readonly dom.Literals.Types.connecting connecting;
      [Template("<self>\"connected\"")]
      public static readonly dom.Literals.Types.connected connected;
      [Template("<self>\"closed\"")]
      public static readonly dom.Literals.Types.closed closed;

      private extern RTCDtlsTransportState();

      public static extern implicit operator dom.RTCDtlsTransportState(
        dom.Literals.Types.@new value);

      public static extern implicit operator dom.RTCDtlsTransportState(
        dom.Literals.Types.connecting value);

      public static extern implicit operator dom.RTCDtlsTransportState(
        dom.Literals.Types.connected value);

      public static extern implicit operator dom.RTCDtlsTransportState(
        dom.Literals.Types.closed value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceCandidateType")]
    public class RTCIceCandidateType : LiteralType<string>
    {
      [Template("<self>\"host\"")]
      public static readonly dom.Literals.Types.host host;
      [Template("<self>\"srflx\"")]
      public static readonly dom.Literals.Types.srflx srflx;
      [Template("<self>\"prflx\"")]
      public static readonly dom.Literals.Types.prflx prflx;
      [Template("<self>\"relay\"")]
      public static readonly dom.Literals.Types.relay relay;

      private extern RTCIceCandidateType();

      public static extern implicit operator dom.RTCIceCandidateType(
        dom.Literals.Types.host value);

      public static extern implicit operator dom.RTCIceCandidateType(
        dom.Literals.Types.srflx value);

      public static extern implicit operator dom.RTCIceCandidateType(
        dom.Literals.Types.prflx value);

      public static extern implicit operator dom.RTCIceCandidateType(
        dom.Literals.Types.relay value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceComponent")]
    public class RTCIceComponent : LiteralType<string>
    {
      [Template("<self>\"RTP\"")]
      public static readonly dom.Literals.Types.RTP RTP;
      [Template("<self>\"RTCP\"")]
      public static readonly dom.Literals.Types.RTCP RTCP;

      private extern RTCIceComponent();

      public static extern implicit operator dom.RTCIceComponent(dom.Literals.Types.RTP value);

      public static extern implicit operator dom.RTCIceComponent(dom.Literals.Types.RTCP value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceConnectionState")]
    public class RTCIceConnectionState : LiteralType<string>
    {
      [Template("<self>\"new\"")]
      public static readonly dom.Literals.Types.@new @new;
      [Template("<self>\"checking\"")]
      public static readonly dom.Literals.Types.checking checking;
      [Template("<self>\"connected\"")]
      public static readonly dom.Literals.Types.connected connected;
      [Template("<self>\"completed\"")]
      public static readonly dom.Literals.Types.completed completed;
      [Template("<self>\"failed\"")]
      public static readonly dom.Literals.Types.failed failed;
      [Template("<self>\"disconnected\"")]
      public static readonly dom.Literals.Types.disconnected disconnected;
      [Template("<self>\"closed\"")]
      public static readonly dom.Literals.Types.closed closed;

      private extern RTCIceConnectionState();

      public static extern implicit operator dom.RTCIceConnectionState(
        dom.Literals.Types.@new value);

      public static extern implicit operator dom.RTCIceConnectionState(
        dom.Literals.Types.checking value);

      public static extern implicit operator dom.RTCIceConnectionState(
        dom.Literals.Types.connected value);

      public static extern implicit operator dom.RTCIceConnectionState(
        dom.Literals.Types.completed value);

      public static extern implicit operator dom.RTCIceConnectionState(
        dom.Literals.Types.failed value);

      public static extern implicit operator dom.RTCIceConnectionState(
        dom.Literals.Types.disconnected value);

      public static extern implicit operator dom.RTCIceConnectionState(
        dom.Literals.Types.closed value);

      public static extern implicit operator dom.RTCIceConnectionState(
        dom.RTCIceTransportState value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceGatherPolicy")]
    public class RTCIceGatherPolicy : LiteralType<string>
    {
      [Template("<self>\"all\"")]
      public static readonly dom.Literals.Types.all all;
      [Template("<self>\"nohost\"")]
      public static readonly dom.Literals.Types.nohost nohost;
      [Template("<self>\"relay\"")]
      public static readonly dom.Literals.Types.relay relay;

      private extern RTCIceGatherPolicy();

      public static extern implicit operator dom.RTCIceGatherPolicy(dom.Literals.Types.all value);

      public static extern implicit operator dom.RTCIceGatherPolicy(
        dom.Literals.Types.nohost value);

      public static extern implicit operator dom.RTCIceGatherPolicy(
        dom.Literals.Types.relay value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceGathererState")]
    public class RTCIceGathererState : LiteralType<string>
    {
      [Template("<self>\"new\"")]
      public static readonly dom.Literals.Types.@new @new;
      [Template("<self>\"gathering\"")]
      public static readonly dom.Literals.Types.gathering gathering;
      [Template("<self>\"complete\"")]
      public static readonly dom.Literals.Types.complete complete;

      private extern RTCIceGathererState();

      public static extern implicit operator dom.RTCIceGathererState(
        dom.Literals.Types.@new value);

      public static extern implicit operator dom.RTCIceGathererState(
        dom.Literals.Types.gathering value);

      public static extern implicit operator dom.RTCIceGathererState(
        dom.Literals.Types.complete value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceGatheringState")]
    public class RTCIceGatheringState : LiteralType<string>
    {
      [Template("<self>\"new\"")]
      public static readonly dom.Literals.Types.@new @new;
      [Template("<self>\"gathering\"")]
      public static readonly dom.Literals.Types.gathering gathering;
      [Template("<self>\"complete\"")]
      public static readonly dom.Literals.Types.complete complete;

      private extern RTCIceGatheringState();

      public static extern implicit operator dom.RTCIceGatheringState(
        dom.Literals.Types.@new value);

      public static extern implicit operator dom.RTCIceGatheringState(
        dom.Literals.Types.gathering value);

      public static extern implicit operator dom.RTCIceGatheringState(
        dom.Literals.Types.complete value);

      public static extern implicit operator dom.RTCIceGatheringState(
        dom.RTCIceGathererState value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceProtocol")]
    public class RTCIceProtocol : LiteralType<string>
    {
      [Template("<self>\"udp\"")]
      public static readonly dom.Literals.Types.udp udp;
      [Template("<self>\"tcp\"")]
      public static readonly dom.Literals.Types.tcp tcp;

      private extern RTCIceProtocol();

      public static extern implicit operator dom.RTCIceProtocol(dom.Literals.Types.udp value);

      public static extern implicit operator dom.RTCIceProtocol(dom.Literals.Types.tcp value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceRole")]
    public class RTCIceRole : LiteralType<string>
    {
      [Template("<self>\"controlling\"")]
      public static readonly dom.Literals.Types.controlling controlling;
      [Template("<self>\"controlled\"")]
      public static readonly dom.Literals.Types.controlled controlled;

      private extern RTCIceRole();

      public static extern implicit operator dom.RTCIceRole(dom.Literals.Types.controlling value);

      public static extern implicit operator dom.RTCIceRole(dom.Literals.Types.controlled value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceTcpCandidateType")]
    public class RTCIceTcpCandidateType : LiteralType<string>
    {
      [Template("<self>\"active\"")]
      public static readonly dom.Literals.Types.active active;
      [Template("<self>\"passive\"")]
      public static readonly dom.Literals.Types.passive passive;
      [Template("<self>\"so\"")]
      public static readonly dom.Literals.Types.so so;

      private extern RTCIceTcpCandidateType();

      public static extern implicit operator dom.RTCIceTcpCandidateType(
        dom.Literals.Types.active value);

      public static extern implicit operator dom.RTCIceTcpCandidateType(
        dom.Literals.Types.passive value);

      public static extern implicit operator dom.RTCIceTcpCandidateType(
        dom.Literals.Types.so value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceTransportPolicy")]
    public class RTCIceTransportPolicy : LiteralType<string>
    {
      [Template("<self>\"none\"")]
      public static readonly dom.Literals.Types.none none;
      [Template("<self>\"relay\"")]
      public static readonly dom.Literals.Types.relay relay;
      [Template("<self>\"all\"")]
      public static readonly dom.Literals.Types.all all;

      private extern RTCIceTransportPolicy();

      public static extern implicit operator dom.RTCIceTransportPolicy(
        dom.Literals.Types.none value);

      public static extern implicit operator dom.RTCIceTransportPolicy(
        dom.Literals.Types.relay value);

      public static extern implicit operator dom.RTCIceTransportPolicy(
        dom.Literals.Types.all value);
    }

    [Name("System.String")]
    [ExportedAs("RTCIceTransportState")]
    public class RTCIceTransportState : LiteralType<string>
    {
      [Template("<self>\"new\"")]
      public static readonly dom.Literals.Types.@new @new;
      [Template("<self>\"checking\"")]
      public static readonly dom.Literals.Types.checking checking;
      [Template("<self>\"connected\"")]
      public static readonly dom.Literals.Types.connected connected;
      [Template("<self>\"completed\"")]
      public static readonly dom.Literals.Types.completed completed;
      [Template("<self>\"disconnected\"")]
      public static readonly dom.Literals.Types.disconnected disconnected;
      [Template("<self>\"closed\"")]
      public static readonly dom.Literals.Types.closed closed;

      private extern RTCIceTransportState();

      public static extern implicit operator dom.RTCIceTransportState(
        dom.Literals.Types.@new value);

      public static extern implicit operator dom.RTCIceTransportState(
        dom.Literals.Types.checking value);

      public static extern implicit operator dom.RTCIceTransportState(
        dom.Literals.Types.connected value);

      public static extern implicit operator dom.RTCIceTransportState(
        dom.Literals.Types.completed value);

      public static extern implicit operator dom.RTCIceTransportState(
        dom.Literals.Types.disconnected value);

      public static extern implicit operator dom.RTCIceTransportState(
        dom.Literals.Types.closed value);
    }

    [Name("System.String")]
    [ExportedAs("RTCSdpType")]
    public class RTCSdpType : LiteralType<string>
    {
      [Template("<self>\"offer\"")]
      public static readonly dom.Literals.Types.offer offer;
      [Template("<self>\"pranswer\"")]
      public static readonly dom.Literals.Types.pranswer pranswer;
      [Template("<self>\"answer\"")]
      public static readonly dom.Literals.Types.answer answer;

      private extern RTCSdpType();

      public static extern implicit operator dom.RTCSdpType(dom.Literals.Types.offer value);

      public static extern implicit operator dom.RTCSdpType(dom.Literals.Types.pranswer value);

      public static extern implicit operator dom.RTCSdpType(dom.Literals.Types.answer value);
    }

    [Name("System.String")]
    [ExportedAs("RTCSignalingState")]
    public class RTCSignalingState : LiteralType<string>
    {
      [Template("<self>\"stable\"")]
      public static readonly dom.Literals.Types.stable stable;
      [Template("<self>\"have-local-offer\"")]
      public static readonly dom.Literals.Types.have_local_offer have_local_offer;
      [Template("<self>\"have-remote-offer\"")]
      public static readonly dom.Literals.Types.have_remote_offer have_remote_offer;
      [Template("<self>\"have-local-pranswer\"")]
      public static readonly dom.Literals.Types.have_local_pranswer have_local_pranswer;
      [Template("<self>\"have-remote-pranswer\"")]
      public static readonly dom.Literals.Types.have_remote_pranswer have_remote_pranswer;
      [Template("<self>\"closed\"")]
      public static readonly dom.Literals.Types.closed closed;

      private extern RTCSignalingState();

      public static extern implicit operator dom.RTCSignalingState(
        dom.Literals.Types.stable value);

      public static extern implicit operator dom.RTCSignalingState(
        dom.Literals.Types.have_local_offer value);

      public static extern implicit operator dom.RTCSignalingState(
        dom.Literals.Types.have_remote_offer value);

      public static extern implicit operator dom.RTCSignalingState(
        dom.Literals.Types.have_local_pranswer value);

      public static extern implicit operator dom.RTCSignalingState(
        dom.Literals.Types.have_remote_pranswer value);

      public static extern implicit operator dom.RTCSignalingState(
        dom.Literals.Types.closed value);
    }

    [Name("System.String")]
    [ExportedAs("RTCStatsIceCandidatePairState")]
    public class RTCStatsIceCandidatePairState : LiteralType<string>
    {
      [Template("<self>\"frozen\"")]
      public static readonly dom.Literals.Types.frozen frozen;
      [Template("<self>\"waiting\"")]
      public static readonly dom.Literals.Types.waiting waiting;
      [Template("<self>\"inprogress\"")]
      public static readonly dom.Literals.Types.inprogress inprogress;
      [Template("<self>\"failed\"")]
      public static readonly dom.Literals.Types.failed failed;
      [Template("<self>\"succeeded\"")]
      public static readonly dom.Literals.Types.succeeded succeeded;
      [Template("<self>\"cancelled\"")]
      public static readonly dom.Literals.Types.cancelled cancelled;

      private extern RTCStatsIceCandidatePairState();

      public static extern implicit operator dom.RTCStatsIceCandidatePairState(
        dom.Literals.Types.frozen value);

      public static extern implicit operator dom.RTCStatsIceCandidatePairState(
        dom.Literals.Types.waiting value);

      public static extern implicit operator dom.RTCStatsIceCandidatePairState(
        dom.Literals.Types.inprogress value);

      public static extern implicit operator dom.RTCStatsIceCandidatePairState(
        dom.Literals.Types.failed value);

      public static extern implicit operator dom.RTCStatsIceCandidatePairState(
        dom.Literals.Types.succeeded value);

      public static extern implicit operator dom.RTCStatsIceCandidatePairState(
        dom.Literals.Types.cancelled value);
    }

    [Name("System.String")]
    [ExportedAs("RTCStatsIceCandidateType")]
    public class RTCStatsIceCandidateType : LiteralType<string>
    {
      [Template("<self>\"host\"")]
      public static readonly dom.Literals.Types.host host;
      [Template("<self>\"serverreflexive\"")]
      public static readonly dom.Literals.Types.serverreflexive serverreflexive;
      [Template("<self>\"peerreflexive\"")]
      public static readonly dom.Literals.Types.peerreflexive peerreflexive;
      [Template("<self>\"relayed\"")]
      public static readonly dom.Literals.Types.relayed relayed;

      private extern RTCStatsIceCandidateType();

      public static extern implicit operator dom.RTCStatsIceCandidateType(
        dom.Literals.Types.host value);

      public static extern implicit operator dom.RTCStatsIceCandidateType(
        dom.Literals.Types.serverreflexive value);

      public static extern implicit operator dom.RTCStatsIceCandidateType(
        dom.Literals.Types.peerreflexive value);

      public static extern implicit operator dom.RTCStatsIceCandidateType(
        dom.Literals.Types.relayed value);
    }

    [Name("System.String")]
    [ExportedAs("RTCStatsType")]
    public class RTCStatsType : LiteralType<string>
    {
      [Template("<self>\"inboundrtp\"")]
      public static readonly dom.Literals.Types.inboundrtp inboundrtp;
      [Template("<self>\"outboundrtp\"")]
      public static readonly dom.Literals.Types.outboundrtp outboundrtp;
      [Template("<self>\"session\"")]
      public static readonly dom.Literals.Types.session session;
      [Template("<self>\"datachannel\"")]
      public static readonly dom.Literals.Types.datachannel datachannel;
      [Template("<self>\"track\"")]
      public static readonly dom.Literals.Types.track track;
      [Template("<self>\"transport\"")]
      public static readonly dom.Literals.Types.transport transport;
      [Template("<self>\"candidatepair\"")]
      public static readonly dom.Literals.Types.candidatepair candidatepair;
      [Template("<self>\"localcandidate\"")]
      public static readonly dom.Literals.Types.localcandidate localcandidate;
      [Template("<self>\"remotecandidate\"")]
      public static readonly dom.Literals.Types.remotecandidate remotecandidate;

      private extern RTCStatsType();

      public static extern implicit operator dom.RTCStatsType(dom.Literals.Types.inboundrtp value);

      public static extern implicit operator dom.RTCStatsType(
        dom.Literals.Types.outboundrtp value);

      public static extern implicit operator dom.RTCStatsType(dom.Literals.Types.session value);

      public static extern implicit operator dom.RTCStatsType(
        dom.Literals.Types.datachannel value);

      public static extern implicit operator dom.RTCStatsType(dom.Literals.Types.track value);

      public static extern implicit operator dom.RTCStatsType(dom.Literals.Types.transport value);

      public static extern implicit operator dom.RTCStatsType(
        dom.Literals.Types.candidatepair value);

      public static extern implicit operator dom.RTCStatsType(
        dom.Literals.Types.localcandidate value);

      public static extern implicit operator dom.RTCStatsType(
        dom.Literals.Types.remotecandidate value);
    }

    [Name("System.String")]
    [ExportedAs("ReadyState")]
    public class ReadyState : LiteralType<string>
    {
      [Template("<self>\"closed\"")]
      public static readonly dom.Literals.Types.closed closed;
      [Template("<self>\"open\"")]
      public static readonly dom.Literals.Types.open open;
      [Template("<self>\"ended\"")]
      public static readonly dom.Literals.Types.ended ended;

      private extern ReadyState();

      public static extern implicit operator dom.ReadyState(dom.Literals.Types.closed value);

      public static extern implicit operator dom.ReadyState(dom.Literals.Types.open value);

      public static extern implicit operator dom.ReadyState(dom.Literals.Types.ended value);

      public static extern implicit operator dom.ReadyState(dom.Literals.Options.mode value);
    }

    [Name("System.String")]
    [ExportedAs("ReferrerPolicy")]
    public class ReferrerPolicy : LiteralType<string>
    {
      [Template("<self>\"\"")]
      public static readonly dom.Literals.Types._ _;
      [Template("<self>\"no-referrer\"")]
      public static readonly dom.Literals.Types.no_referrer no_referrer;
      [Template("<self>\"no-referrer-when-downgrade\"")]
      public static readonly dom.Literals.Types.no_referrer_when_downgrade no_referrer_when_downgrade;
      [Template("<self>\"origin-only\"")]
      public static readonly dom.Literals.Types.origin_only origin_only;
      [Template("<self>\"origin-when-cross-origin\"")]
      public static readonly dom.Literals.Types.origin_when_cross_origin origin_when_cross_origin;
      [Template("<self>\"unsafe-url\"")]
      public static readonly dom.Literals.Types.unsafe_url unsafe_url;

      private extern ReferrerPolicy();

      public static extern implicit operator dom.ReferrerPolicy(dom.Literals.Types._ value);

      public static extern implicit operator dom.ReferrerPolicy(
        dom.Literals.Types.no_referrer value);

      public static extern implicit operator dom.ReferrerPolicy(
        dom.Literals.Types.no_referrer_when_downgrade value);

      public static extern implicit operator dom.ReferrerPolicy(
        dom.Literals.Types.origin_only value);

      public static extern implicit operator dom.ReferrerPolicy(
        dom.Literals.Types.origin_when_cross_origin value);

      public static extern implicit operator dom.ReferrerPolicy(
        dom.Literals.Types.unsafe_url value);
    }

    [Name("System.String")]
    [ExportedAs("RequestCache")]
    public class RequestCache : LiteralType<string>
    {
      [Template("<self>\"default\"")]
      public static readonly dom.Literals.Types.@default @default;
      [Template("<self>\"no-store\"")]
      public static readonly dom.Literals.Types.no_store no_store;
      [Template("<self>\"reload\"")]
      public static readonly dom.Literals.Types.reload reload;
      [Template("<self>\"no-cache\"")]
      public static readonly dom.Literals.Types.no_cache no_cache;
      [Template("<self>\"force-cache\"")]
      public static readonly dom.Literals.Types.force_cache force_cache;

      private extern RequestCache();

      public static extern implicit operator dom.RequestCache(dom.Literals.Types.@default value);

      public static extern implicit operator dom.RequestCache(dom.Literals.Types.no_store value);

      public static extern implicit operator dom.RequestCache(dom.Literals.Types.reload value);

      public static extern implicit operator dom.RequestCache(dom.Literals.Types.no_cache value);

      public static extern implicit operator dom.RequestCache(
        dom.Literals.Types.force_cache value);
    }

    [Name("System.String")]
    [ExportedAs("RequestCredentials")]
    public class RequestCredentials : LiteralType<string>
    {
      [Template("<self>\"omit\"")]
      public static readonly dom.Literals.Types.omit omit;
      [Template("<self>\"same-origin\"")]
      public static readonly dom.Literals.Types.same_origin same_origin;
      [Template("<self>\"include\"")]
      public static readonly dom.Literals.Types.include include;

      private extern RequestCredentials();

      public static extern implicit operator dom.RequestCredentials(dom.Literals.Types.omit value);

      public static extern implicit operator dom.RequestCredentials(
        dom.Literals.Types.same_origin value);

      public static extern implicit operator dom.RequestCredentials(
        dom.Literals.Types.include value);
    }

    [Name("System.String")]
    [ExportedAs("RequestDestination")]
    public class RequestDestination : LiteralType<string>
    {
      [Template("<self>\"\"")]
      public static readonly dom.Literals.Types._ _;
      [Template("<self>\"document\"")]
      public static readonly dom.Literals.Types.document document;
      [Template("<self>\"sharedworker\"")]
      public static readonly dom.Literals.Types.sharedworker sharedworker;
      [Template("<self>\"subresource\"")]
      public static readonly dom.Literals.Types.subresource subresource;
      [Template("<self>\"unknown\"")]
      public static readonly dom.Literals.Types.unknown unknown;
      [Template("<self>\"worker\"")]
      public static readonly dom.Literals.Types.worker worker;

      private extern RequestDestination();

      public static extern implicit operator dom.RequestDestination(dom.Literals.Types._ value);

      public static extern implicit operator dom.RequestDestination(
        dom.Literals.Types.document value);

      public static extern implicit operator dom.RequestDestination(
        dom.Literals.Types.sharedworker value);

      public static extern implicit operator dom.RequestDestination(
        dom.Literals.Types.subresource value);

      public static extern implicit operator dom.RequestDestination(
        dom.Literals.Types.unknown value);

      public static extern implicit operator dom.RequestDestination(
        dom.Literals.Types.worker value);
    }

    [Name("System.String")]
    [ExportedAs("RequestMode")]
    public class RequestMode : LiteralType<string>
    {
      [Template("<self>\"navigate\"")]
      public static readonly dom.Literals.Types.navigate navigate;
      [Template("<self>\"same-origin\"")]
      public static readonly dom.Literals.Types.same_origin same_origin;
      [Template("<self>\"no-cors\"")]
      public static readonly dom.Literals.Types.no_cors no_cors;
      [Template("<self>\"cors\"")]
      public static readonly dom.Literals.Types.cors cors;

      private extern RequestMode();

      public static extern implicit operator dom.RequestMode(dom.Literals.Types.navigate value);

      public static extern implicit operator dom.RequestMode(dom.Literals.Types.same_origin value);

      public static extern implicit operator dom.RequestMode(dom.Literals.Types.no_cors value);

      public static extern implicit operator dom.RequestMode(dom.Literals.Types.cors value);
    }

    [Name("System.String")]
    [ExportedAs("RequestRedirect")]
    public class RequestRedirect : LiteralType<string>
    {
      [Template("<self>\"follow\"")]
      public static readonly dom.Literals.Types.follow follow;
      [Template("<self>\"error\"")]
      public static readonly dom.Literals.Types.error error;
      [Template("<self>\"manual\"")]
      public static readonly dom.Literals.Types.manual manual;

      private extern RequestRedirect();

      public static extern implicit operator dom.RequestRedirect(dom.Literals.Types.follow value);

      public static extern implicit operator dom.RequestRedirect(dom.Literals.Types.error value);

      public static extern implicit operator dom.RequestRedirect(dom.Literals.Types.manual value);
    }

    [Name("System.String")]
    [ExportedAs("RequestType")]
    public class RequestType : LiteralType<string>
    {
      [Template("<self>\"\"")]
      public static readonly dom.Literals.Types._ _;
      [Template("<self>\"audio\"")]
      public static readonly dom.Literals.Types.audio audio;
      [Template("<self>\"font\"")]
      public static readonly dom.Literals.Types.font font;
      [Template("<self>\"image\"")]
      public static readonly dom.Literals.Types.image image;
      [Template("<self>\"script\"")]
      public static readonly dom.Literals.Types.script script;
      [Template("<self>\"style\"")]
      public static readonly dom.Literals.Types.style style;
      [Template("<self>\"track\"")]
      public static readonly dom.Literals.Types.track track;
      [Template("<self>\"video\"")]
      public static readonly dom.Literals.Types.video video;

      private extern RequestType();

      public static extern implicit operator dom.RequestType(dom.Literals.Types._ value);

      public static extern implicit operator dom.RequestType(dom.Literals.Types.audio value);

      public static extern implicit operator dom.RequestType(dom.Literals.Types.font value);

      public static extern implicit operator dom.RequestType(dom.Literals.Types.image value);

      public static extern implicit operator dom.RequestType(dom.Literals.Types.script value);

      public static extern implicit operator dom.RequestType(dom.Literals.Types.style value);

      public static extern implicit operator dom.RequestType(dom.Literals.Types.track value);

      public static extern implicit operator dom.RequestType(dom.Literals.Types.video value);
    }

    [Name("System.String")]
    [ExportedAs("ResponseType")]
    public class ResponseType : LiteralType<string>
    {
      [Template("<self>\"basic\"")]
      public static readonly dom.Literals.Types.basic basic;
      [Template("<self>\"cors\"")]
      public static readonly dom.Literals.Types.cors cors;
      [Template("<self>\"default\"")]
      public static readonly dom.Literals.Types.@default @default;
      [Template("<self>\"error\"")]
      public static readonly dom.Literals.Types.error error;
      [Template("<self>\"opaque\"")]
      public static readonly dom.Literals.Types.opaque opaque;
      [Template("<self>\"opaqueredirect\"")]
      public static readonly dom.Literals.Types.opaqueredirect opaqueredirect;

      private extern ResponseType();

      public static extern implicit operator dom.ResponseType(dom.Literals.Types.basic value);

      public static extern implicit operator dom.ResponseType(dom.Literals.Types.cors value);

      public static extern implicit operator dom.ResponseType(dom.Literals.Types.@default value);

      public static extern implicit operator dom.ResponseType(dom.Literals.Types.error value);

      public static extern implicit operator dom.ResponseType(dom.Literals.Types.opaque value);

      public static extern implicit operator dom.ResponseType(
        dom.Literals.Types.opaqueredirect value);
    }

    [IgnoreCast]
    [Virtual]
    public abstract class ScopedCredentialType : TypeAlias<dom.Literals.Types.ScopedCred>
    {
      public static extern implicit operator dom.ScopedCredentialType(
        dom.Literals.Types.ScopedCred value);

      public static extern implicit operator string(dom.ScopedCredentialType value);

      [Template("{arg1} === {arg2}")]
      public static extern bool operator ==(
        dom.ScopedCredentialType arg1,
        dom.ScopedCredentialType arg2);

      [Template("{arg1} !== {arg2}")]
      public static extern bool operator !=(
        dom.ScopedCredentialType arg1,
        dom.ScopedCredentialType arg2);

      [Template("{arg1} === {arg2}")]
      public static extern bool operator ==(dom.ScopedCredentialType arg1, string arg2);

      [Template("{arg1} !== {arg2}")]
      public static extern bool operator !=(dom.ScopedCredentialType arg1, string arg2);

      [Template("{arg1} === {arg2}")]
      public static extern bool operator ==(string arg1, dom.ScopedCredentialType arg2);

      [Template("{arg1} !== {arg2}")]
      public static extern bool operator !=(string arg1, dom.ScopedCredentialType arg2);
    }

    [Name("System.String")]
    [ExportedAs("ServiceWorkerState")]
    public class ServiceWorkerState : LiteralType<string>
    {
      [Template("<self>\"installing\"")]
      public static readonly dom.Literals.Types.installing installing;
      [Template("<self>\"installed\"")]
      public static readonly dom.Literals.Types.installed installed;
      [Template("<self>\"activating\"")]
      public static readonly dom.Literals.Types.activating activating;
      [Template("<self>\"activated\"")]
      public static readonly dom.Literals.Types.activated activated;
      [Template("<self>\"redundant\"")]
      public static readonly dom.Literals.Types.redundant redundant;

      private extern ServiceWorkerState();

      public static extern implicit operator dom.ServiceWorkerState(
        dom.Literals.Types.installing value);

      public static extern implicit operator dom.ServiceWorkerState(
        dom.Literals.Types.installed value);

      public static extern implicit operator dom.ServiceWorkerState(
        dom.Literals.Types.activating value);

      public static extern implicit operator dom.ServiceWorkerState(
        dom.Literals.Types.activated value);

      public static extern implicit operator dom.ServiceWorkerState(
        dom.Literals.Types.redundant value);
    }

    [Name("System.String")]
    [ExportedAs("TextTrackKind")]
    public class TextTrackKind : LiteralType<string>
    {
      [Template("<self>\"subtitles\"")]
      public static readonly dom.Literals.Types.subtitles subtitles;
      [Template("<self>\"captions\"")]
      public static readonly dom.Literals.Types.captions captions;
      [Template("<self>\"descriptions\"")]
      public static readonly dom.Literals.Types.descriptions descriptions;
      [Template("<self>\"chapters\"")]
      public static readonly dom.Literals.Types.chapters chapters;
      [Template("<self>\"metadata\"")]
      public static readonly dom.Literals.Types.metadata metadata;

      private extern TextTrackKind();

      public static extern implicit operator dom.TextTrackKind(dom.Literals.Types.subtitles value);

      public static extern implicit operator dom.TextTrackKind(dom.Literals.Types.captions value);

      public static extern implicit operator dom.TextTrackKind(
        dom.Literals.Types.descriptions value);

      public static extern implicit operator dom.TextTrackKind(dom.Literals.Types.chapters value);

      public static extern implicit operator dom.TextTrackKind(dom.Literals.Types.metadata value);
    }

    [Name("System.String")]
    [ExportedAs("TextTrackMode")]
    public class TextTrackMode : LiteralType<string>
    {
      [Template("<self>\"disabled\"")]
      public static readonly dom.Literals.Types.disabled disabled;
      [Template("<self>\"hidden\"")]
      public static readonly dom.Literals.Types.hidden hidden;
      [Template("<self>\"showing\"")]
      public static readonly dom.Literals.Types.showing showing;

      private extern TextTrackMode();

      public static extern implicit operator dom.TextTrackMode(dom.Literals.Types.disabled value);

      public static extern implicit operator dom.TextTrackMode(dom.Literals.Types.hidden value);

      public static extern implicit operator dom.TextTrackMode(dom.Literals.Types.showing value);
    }

    [Name("System.String")]
    [ExportedAs("Transport")]
    public class Transport : LiteralType<string>
    {
      [Template("<self>\"usb\"")]
      public static readonly dom.Literals.Types.usb usb;
      [Template("<self>\"nfc\"")]
      public static readonly dom.Literals.Types.nfc nfc;
      [Template("<self>\"ble\"")]
      public static readonly dom.Literals.Types.ble ble;

      private extern Transport();

      public static extern implicit operator dom.Transport(dom.Literals.Types.usb value);

      public static extern implicit operator dom.Transport(dom.Literals.Types.nfc value);

      public static extern implicit operator dom.Transport(dom.Literals.Types.ble value);
    }

    [Name("System.String")]
    [ExportedAs("VRDisplayEventReason")]
    public class VRDisplayEventReason : LiteralType<string>
    {
      [Template("<self>\"mounted\"")]
      public static readonly dom.Literals.Types.mounted mounted;
      [Template("<self>\"navigation\"")]
      public static readonly dom.Literals.Types.navigation navigation;
      [Template("<self>\"requested\"")]
      public static readonly dom.Literals.Types.requested requested;
      [Template("<self>\"unmounted\"")]
      public static readonly dom.Literals.Types.unmounted unmounted;

      private extern VRDisplayEventReason();

      public static extern implicit operator dom.VRDisplayEventReason(
        dom.Literals.Types.mounted value);

      public static extern implicit operator dom.VRDisplayEventReason(
        dom.Literals.Types.navigation value);

      public static extern implicit operator dom.VRDisplayEventReason(
        dom.Literals.Types.requested value);

      public static extern implicit operator dom.VRDisplayEventReason(
        dom.Literals.Types.unmounted value);
    }

    [Name("System.String")]
    [ExportedAs("VREye")]
    public class VREye : LiteralType<string>
    {
      [Template("<self>\"left\"")]
      public static readonly dom.Literals.Types.left left;
      [Template("<self>\"right\"")]
      public static readonly dom.Literals.Types.right right;

      private extern VREye();

      public static extern implicit operator dom.VREye(dom.Literals.Types.left value);

      public static extern implicit operator dom.VREye(dom.Literals.Types.right value);
    }

    [Name("System.String")]
    [ExportedAs("VideoFacingModeEnum")]
    public class VideoFacingModeEnum : LiteralType<string>
    {
      [Template("<self>\"user\"")]
      public static readonly dom.Literals.Types.user user;
      [Template("<self>\"environment\"")]
      public static readonly dom.Literals.Types.environment environment;
      [Template("<self>\"left\"")]
      public static readonly dom.Literals.Types.left left;
      [Template("<self>\"right\"")]
      public static readonly dom.Literals.Types.right right;

      private extern VideoFacingModeEnum();

      public static extern implicit operator dom.VideoFacingModeEnum(
        dom.Literals.Types.user value);

      public static extern implicit operator dom.VideoFacingModeEnum(
        dom.Literals.Types.environment value);

      public static extern implicit operator dom.VideoFacingModeEnum(
        dom.Literals.Types.left value);

      public static extern implicit operator dom.VideoFacingModeEnum(
        dom.Literals.Types.right value);

      public static extern implicit operator dom.VideoFacingModeEnum(dom.VREye value);
    }

    [Name("System.String")]
    [ExportedAs("VisibilityState")]
    public class VisibilityState : LiteralType<string>
    {
      [Template("<self>\"hidden\"")]
      public static readonly dom.Literals.Types.hidden hidden;
      [Template("<self>\"visible\"")]
      public static readonly dom.Literals.Types.visible visible;
      [Template("<self>\"prerender\"")]
      public static readonly dom.Literals.Types.prerender prerender;
      [Template("<self>\"unloaded\"")]
      public static readonly dom.Literals.Types.unloaded unloaded;

      private extern VisibilityState();

      public static extern implicit operator dom.VisibilityState(dom.Literals.Types.hidden value);

      public static extern implicit operator dom.VisibilityState(dom.Literals.Types.visible value);

      public static extern implicit operator dom.VisibilityState(
        dom.Literals.Types.prerender value);

      public static extern implicit operator dom.VisibilityState(
        dom.Literals.Types.unloaded value);
    }

    [Name("System.String")]
    [ExportedAs("XMLHttpRequestResponseType")]
    public class XMLHttpRequestResponseType : LiteralType<string>
    {
      [Template("<self>\"\"")]
      public static readonly dom.Literals.Types._ _;
      [Template("<self>\"arraybuffer\"")]
      public static readonly dom.Literals.Types.arraybuffer arraybuffer;
      [Template("<self>\"blob\"")]
      public static readonly dom.Literals.Types.blob blob;
      [Template("<self>\"document\"")]
      public static readonly dom.Literals.Types.document document;
      [Template("<self>\"json\"")]
      public static readonly dom.Literals.Types.json json;
      [Template("<self>\"text\"")]
      public static readonly dom.Literals.Types.text text;

      private extern XMLHttpRequestResponseType();

      public static extern implicit operator dom.XMLHttpRequestResponseType(
        dom.Literals.Types._ value);

      public static extern implicit operator dom.XMLHttpRequestResponseType(
        dom.Literals.Types.arraybuffer value);

      public static extern implicit operator dom.XMLHttpRequestResponseType(
        dom.Literals.Types.blob value);

      public static extern implicit operator dom.XMLHttpRequestResponseType(
        dom.Literals.Types.document value);

      public static extern implicit operator dom.XMLHttpRequestResponseType(
        dom.Literals.Types.json value);

      public static extern implicit operator dom.XMLHttpRequestResponseType(
        dom.Literals.Types.text value);

      public static extern implicit operator dom.XMLHttpRequestResponseType(dom.BinaryType value);
    }

    [Virtual]
    public abstract class ANGLE_instanced_arraysTypeConfig : IObject
    {
      private dom.ANGLE_instanced_arrays _prototype_BackingField;

      public virtual dom.ANGLE_instanced_arrays prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ANGLE_instanced_arrays New();

      public abstract double VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE { get; }
    }

    [Virtual]
    public abstract class AbortControllerTypeConfig : IObject
    {
      private dom.AbortController _prototype_BackingField;

      public virtual dom.AbortController prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AbortController New();
    }

    [Virtual]
    public abstract class AbortSignalTypeConfig : IObject
    {
      private dom.AbortSignal _prototype_BackingField;

      public virtual dom.AbortSignal prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AbortSignal New();
    }

    [Virtual]
    public abstract class AnalyserNodeTypeConfig : IObject
    {
      private dom.AnalyserNode _prototype_BackingField;

      public virtual dom.AnalyserNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AnalyserNode New();
    }

    [Virtual]
    public abstract class AnimationTypeConfig : IObject
    {
      private dom.Animation _prototype_BackingField;

      public virtual dom.Animation prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Animation New();

      [Template("new {this}({0})")]
      public abstract dom.Animation New(dom.AnimationEffectReadOnly effect);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Animation New(
        dom.AnimationEffectReadOnly effect,
        dom.AnimationTimeline timeline);
    }

    [Virtual]
    public abstract class AnimationEventTypeConfig : IObject
    {
      private dom.AnimationEvent _prototype_BackingField;

      public virtual dom.AnimationEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.AnimationEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.AnimationEvent New(
        string typeArg,
        dom.AnimationEventInit eventInitDict);
    }

    [Virtual]
    public abstract class AnimationPlaybackEventTypeConfig : IObject
    {
      private dom.AnimationPlaybackEvent _prototype_BackingField;

      public virtual dom.AnimationPlaybackEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.AnimationPlaybackEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.AnimationPlaybackEvent New(
        string type,
        dom.AnimationPlaybackEventInit eventInitDict);
    }

    [Virtual]
    public abstract class ApplicationCacheTypeConfig : IObject
    {
      private dom.ApplicationCache _prototype_BackingField;

      public virtual dom.ApplicationCache prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ApplicationCache New();

      public abstract ushort CHECKING { get; }

      public abstract ushort DOWNLOADING { get; }

      public abstract ushort IDLE { get; }

      public abstract ushort OBSOLETE { get; }

      public abstract ushort UNCACHED { get; }

      public abstract ushort UPDATEREADY { get; }
    }

    [Virtual]
    public abstract class AttrTypeConfig : IObject
    {
      private dom.Attr _prototype_BackingField;

      public virtual dom.Attr prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Attr New();
    }

    [Virtual]
    public abstract class AudioBufferTypeConfig : IObject
    {
      private dom.AudioBuffer _prototype_BackingField;

      public virtual dom.AudioBuffer prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioBuffer New();
    }

    [Virtual]
    public abstract class AudioBufferSourceNodeTypeConfig : IObject
    {
      private dom.AudioBufferSourceNode _prototype_BackingField;

      public virtual dom.AudioBufferSourceNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioBufferSourceNode New();
    }

    [Virtual]
    public abstract class AudioContextTypeConfig : IObject
    {
      private dom.AudioContext _prototype_BackingField;

      public virtual dom.AudioContext prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioContext New();
    }

    [Virtual]
    public abstract class AudioDestinationNodeTypeConfig : IObject
    {
      private dom.AudioDestinationNode _prototype_BackingField;

      public virtual dom.AudioDestinationNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioDestinationNode New();
    }

    [Virtual]
    public abstract class AudioListenerTypeConfig : IObject
    {
      private dom.AudioListener _prototype_BackingField;

      public virtual dom.AudioListener prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioListener New();
    }

    [Virtual]
    public abstract class AudioNodeTypeConfig : IObject
    {
      private dom.AudioNode _prototype_BackingField;

      public virtual dom.AudioNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioNode New();
    }

    [Virtual]
    public abstract class AudioParamTypeConfig : IObject
    {
      private dom.AudioParam _prototype_BackingField;

      public virtual dom.AudioParam prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioParam New();
    }

    [Virtual]
    public abstract class AudioProcessingEventTypeConfig : IObject
    {
      private dom.AudioProcessingEvent _prototype_BackingField;

      public virtual dom.AudioProcessingEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioProcessingEvent New();
    }

    [Virtual]
    public abstract class AudioTrackTypeConfig : IObject
    {
      private dom.AudioTrack _prototype_BackingField;

      public virtual dom.AudioTrack prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioTrack New();
    }

    [Virtual]
    public abstract class AudioTrackListTypeConfig : IObject
    {
      private dom.AudioTrackList _prototype_BackingField;

      public virtual dom.AudioTrackList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.AudioTrackList New();
    }

    [Virtual]
    public abstract class BarPropTypeConfig : IObject
    {
      private dom.BarProp _prototype_BackingField;

      public virtual dom.BarProp prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.BarProp New();
    }

    [Virtual]
    public abstract class BeforeUnloadEventTypeConfig : IObject
    {
      private dom.BeforeUnloadEvent _prototype_BackingField;

      public virtual dom.BeforeUnloadEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.BeforeUnloadEvent New();
    }

    [Virtual]
    public abstract class BhxBrowserTypeConfig : IObject
    {
      private dom.BhxBrowser _prototype_BackingField;

      public virtual dom.BhxBrowser prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.BhxBrowser New();
    }

    [Virtual]
    public abstract class BiquadFilterNodeTypeConfig : IObject
    {
      private dom.BiquadFilterNode _prototype_BackingField;

      public virtual dom.BiquadFilterNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.BiquadFilterNode New();
    }

    [Virtual]
    public abstract class BlobTypeConfig : IObject
    {
      private dom.Blob _prototype_BackingField;

      public virtual dom.Blob prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Blob New();

      [Template("new {this}({0})")]
      public abstract dom.Blob New(object[] blobParts);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Blob New(object[] blobParts, dom.BlobPropertyBag options);
    }

    [Virtual]
    public abstract class BroadcastChannelTypeConfig : IObject
    {
      private dom.BroadcastChannel _prototype_BackingField;

      public virtual dom.BroadcastChannel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.BroadcastChannel New(string name);
    }

    [Virtual]
    public abstract class ByteLengthQueuingStrategyTypeConfig : IObject
    {
      private dom.ByteLengthQueuingStrategy _prototype_BackingField;

      public virtual dom.ByteLengthQueuingStrategy prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.ByteLengthQueuingStrategy New(dom.QueuingStrategy strategy);
    }

    [Virtual]
    public abstract class CDATASectionTypeConfig : IObject
    {
      private dom.CDATASection _prototype_BackingField;

      public virtual dom.CDATASection prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CDATASection New();
    }

    [Virtual]
    public abstract class CSSConditionRuleTypeConfig : IObject
    {
      private dom.CSSConditionRule _prototype_BackingField;

      public virtual dom.CSSConditionRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSConditionRule New();
    }

    [Virtual]
    public abstract class CSSFontFaceRuleTypeConfig : IObject
    {
      private dom.CSSFontFaceRule _prototype_BackingField;

      public virtual dom.CSSFontFaceRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSFontFaceRule New();
    }

    [Virtual]
    public abstract class CSSGroupingRuleTypeConfig : IObject
    {
      private dom.CSSGroupingRule _prototype_BackingField;

      public virtual dom.CSSGroupingRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSGroupingRule New();
    }

    [Virtual]
    public abstract class CSSImportRuleTypeConfig : IObject
    {
      private dom.CSSImportRule _prototype_BackingField;

      public virtual dom.CSSImportRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSImportRule New();
    }

    [Virtual]
    public abstract class CSSKeyframeRuleTypeConfig : IObject
    {
      private dom.CSSKeyframeRule _prototype_BackingField;

      public virtual dom.CSSKeyframeRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSKeyframeRule New();
    }

    [Virtual]
    public abstract class CSSKeyframesRuleTypeConfig : IObject
    {
      private dom.CSSKeyframesRule _prototype_BackingField;

      public virtual dom.CSSKeyframesRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSKeyframesRule New();
    }

    [Virtual]
    public abstract class CSSMediaRuleTypeConfig : IObject
    {
      private dom.CSSMediaRule _prototype_BackingField;

      public virtual dom.CSSMediaRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSMediaRule New();
    }

    [Virtual]
    public abstract class CSSNamespaceRuleTypeConfig : IObject
    {
      private dom.CSSNamespaceRule _prototype_BackingField;

      public virtual dom.CSSNamespaceRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSNamespaceRule New();
    }

    [Virtual]
    public abstract class CSSPageRuleTypeConfig : IObject
    {
      private dom.CSSPageRule _prototype_BackingField;

      public virtual dom.CSSPageRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSPageRule New();
    }

    [Virtual]
    public abstract class CSSRuleTypeConfig : IObject
    {
      private dom.CSSRule _prototype_BackingField;

      public virtual dom.CSSRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSRule New();

      public abstract ushort CHARSET_RULE { get; }

      public abstract ushort FONT_FACE_RULE { get; }

      public abstract ushort IMPORT_RULE { get; }

      public abstract double KEYFRAMES_RULE { get; }

      public abstract double KEYFRAME_RULE { get; }

      public abstract ushort MEDIA_RULE { get; }

      public abstract ushort NAMESPACE_RULE { get; }

      public abstract ushort PAGE_RULE { get; }

      public abstract ushort STYLE_RULE { get; }

      public abstract double SUPPORTS_RULE { get; }

      public abstract double UNKNOWN_RULE { get; }

      public abstract double VIEWPORT_RULE { get; }
    }

    [Virtual]
    public abstract class CSSRuleListTypeConfig : IObject
    {
      private dom.CSSRuleList _prototype_BackingField;

      public virtual dom.CSSRuleList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSRuleList New();
    }

    [Virtual]
    public abstract class CSSStyleDeclarationTypeConfig : IObject
    {
      private dom.CSSStyleDeclaration _prototype_BackingField;

      public virtual dom.CSSStyleDeclaration prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSStyleDeclaration New();
    }

    [Virtual]
    public abstract class CSSStyleRuleTypeConfig : IObject
    {
      private dom.CSSStyleRule _prototype_BackingField;

      public virtual dom.CSSStyleRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSStyleRule New();
    }

    [Virtual]
    public abstract class CSSStyleSheetTypeConfig : IObject
    {
      private dom.CSSStyleSheet _prototype_BackingField;

      public virtual dom.CSSStyleSheet prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSStyleSheet New();
    }

    [Virtual]
    public abstract class CSSSupportsRuleTypeConfig : IObject
    {
      private dom.CSSSupportsRule _prototype_BackingField;

      public virtual dom.CSSSupportsRule prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CSSSupportsRule New();
    }

    [Virtual]
    public abstract class CacheTypeConfig : IObject
    {
      private dom.Cache _prototype_BackingField;

      public virtual dom.Cache prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Cache New();
    }

    [Virtual]
    public abstract class CacheStorageTypeConfig : IObject
    {
      private dom.CacheStorage _prototype_BackingField;

      public virtual dom.CacheStorage prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CacheStorage New();
    }

    [Virtual]
    public abstract class CanvasGradientTypeConfig : IObject
    {
      private dom.CanvasGradient _prototype_BackingField;

      public virtual dom.CanvasGradient prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CanvasGradient New();
    }

    [Virtual]
    public abstract class CanvasPatternTypeConfig : IObject
    {
      private dom.CanvasPattern _prototype_BackingField;

      public virtual dom.CanvasPattern prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CanvasPattern New();
    }

    [Virtual]
    public abstract class CanvasRenderingContext2DTypeConfig : IObject
    {
      private dom.CanvasRenderingContext2D _prototype_BackingField;

      public virtual dom.CanvasRenderingContext2D prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CanvasRenderingContext2D New();
    }

    [Virtual]
    public abstract class ChannelMergerNodeTypeConfig : IObject
    {
      private dom.ChannelMergerNode _prototype_BackingField;

      public virtual dom.ChannelMergerNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ChannelMergerNode New();
    }

    [Virtual]
    public abstract class ChannelSplitterNodeTypeConfig : IObject
    {
      private dom.ChannelSplitterNode _prototype_BackingField;

      public virtual dom.ChannelSplitterNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ChannelSplitterNode New();
    }

    [Virtual]
    public abstract class CharacterDataTypeConfig : IObject
    {
      private dom.CharacterData _prototype_BackingField;

      public virtual dom.CharacterData prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CharacterData New();
    }

    [Virtual]
    public abstract class ClientRectTypeConfig : IObject
    {
      private dom.ClientRect _prototype_BackingField;

      public virtual dom.ClientRect prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ClientRect New();
    }

    [Virtual]
    public abstract class ClientRectListTypeConfig : IObject
    {
      private dom.ClientRectList _prototype_BackingField;

      public virtual dom.ClientRectList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ClientRectList New();
    }

    [Virtual]
    public abstract class ClipboardEventTypeConfig : IObject
    {
      private dom.ClipboardEvent _prototype_BackingField;

      public virtual dom.ClipboardEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.ClipboardEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.ClipboardEvent New(string type, dom.ClipboardEventInit eventInitDict);
    }

    [Virtual]
    public abstract class CloseEventTypeConfig : IObject
    {
      private dom.CloseEvent _prototype_BackingField;

      public virtual dom.CloseEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.CloseEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.CloseEvent New(string type, dom.CloseEventInit eventInitDict);
    }

    [Virtual]
    public abstract class CommentTypeConfig : IObject
    {
      private dom.Comment _prototype_BackingField;

      public virtual dom.Comment prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Comment New();

      [Template("new {this}({0})")]
      public abstract dom.Comment New(string data);
    }

    [Virtual]
    public abstract class CompositionEventTypeConfig : IObject
    {
      private dom.CompositionEvent _prototype_BackingField;

      public virtual dom.CompositionEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.CompositionEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.CompositionEvent New(
        string typeArg,
        dom.CompositionEventInit eventInitDict);
    }

    [Virtual]
    public abstract class ConsoleTypeConfig : IObject
    {
      private dom.Console _prototype_BackingField;

      public virtual dom.Console prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Console New();
    }

    [Virtual]
    public abstract class ContentScriptGlobalScopeTypeConfig : IObject
    {
      private dom.ContentScriptGlobalScope _prototype_BackingField;

      public virtual dom.ContentScriptGlobalScope prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ContentScriptGlobalScope New();
    }

    [Virtual]
    public abstract class ConvolverNodeTypeConfig : IObject
    {
      private dom.ConvolverNode _prototype_BackingField;

      public virtual dom.ConvolverNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ConvolverNode New();
    }

    [Virtual]
    public abstract class CoordinatesTypeConfig : IObject
    {
      private dom.Coordinates _prototype_BackingField;

      public virtual dom.Coordinates prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Coordinates New();
    }

    [Virtual]
    public abstract class CountQueuingStrategyTypeConfig : IObject
    {
      private dom.CountQueuingStrategy _prototype_BackingField;

      public virtual dom.CountQueuingStrategy prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.CountQueuingStrategy New(dom.QueuingStrategy strategy);
    }

    [Virtual]
    public abstract class CryptoTypeConfig : IObject
    {
      private dom.Crypto _prototype_BackingField;

      public virtual dom.Crypto prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Crypto New();
    }

    [Virtual]
    public abstract class CryptoKeyTypeConfig : IObject
    {
      private dom.CryptoKey _prototype_BackingField;

      public virtual dom.CryptoKey prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CryptoKey New();
    }

    [Virtual]
    public abstract class CryptoKeyPairTypeConfig : IObject
    {
      private dom.CryptoKeyPair _prototype_BackingField;

      public virtual dom.CryptoKeyPair prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.CryptoKeyPair New();
    }

    [Virtual]
    public abstract class CustomEvent2Config : IObject
    {
      private dom.CustomEvent<object> _prototype_BackingField;

      public virtual dom.CustomEvent<object> prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.CustomEvent<T> New<T>(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.CustomEvent<T> New<T>(
        string typeArg,
        dom.CustomEventInit<T> eventInitDict);
    }

    [Virtual]
    public abstract class DOMErrorTypeConfig : IObject
    {
      private dom.DOMError _prototype_BackingField;

      public virtual dom.DOMError prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMError New();
    }

    [Virtual]
    public abstract class DOMExceptionTypeConfig : IObject
    {
      private dom.DOMException _prototype_BackingField;

      public virtual dom.DOMException prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMException New();

      [Template("new {this}({0})")]
      public abstract dom.DOMException New(string message);

      [Template("new {this}({0}, {1})")]
      public abstract dom.DOMException New(string message, string name);

      public abstract double ABORT_ERR { get; }

      public abstract double DATA_CLONE_ERR { get; }

      public abstract double DOMSTRING_SIZE_ERR { get; }

      public abstract double HIERARCHY_REQUEST_ERR { get; }

      public abstract double INDEX_SIZE_ERR { get; }

      public abstract double INUSE_ATTRIBUTE_ERR { get; }

      public abstract double INVALID_ACCESS_ERR { get; }

      public abstract double INVALID_CHARACTER_ERR { get; }

      public abstract double INVALID_MODIFICATION_ERR { get; }

      public abstract double INVALID_NODE_TYPE_ERR { get; }

      public abstract double INVALID_STATE_ERR { get; }

      public abstract double NAMESPACE_ERR { get; }

      public abstract double NETWORK_ERR { get; }

      public abstract double NOT_FOUND_ERR { get; }

      public abstract double NOT_SUPPORTED_ERR { get; }

      public abstract double NO_DATA_ALLOWED_ERR { get; }

      public abstract double NO_MODIFICATION_ALLOWED_ERR { get; }

      public abstract double PARSE_ERR { get; }

      public abstract double QUOTA_EXCEEDED_ERR { get; }

      public abstract double SECURITY_ERR { get; }

      public abstract double SERIALIZE_ERR { get; }

      public abstract double SYNTAX_ERR { get; }

      public abstract double TIMEOUT_ERR { get; }

      public abstract double TYPE_MISMATCH_ERR { get; }

      public abstract double URL_MISMATCH_ERR { get; }

      public abstract double VALIDATION_ERR { get; }

      public abstract double WRONG_DOCUMENT_ERR { get; }
    }

    [Virtual]
    public abstract class DOMImplementationTypeConfig : IObject
    {
      private dom.DOMImplementation _prototype_BackingField;

      public virtual dom.DOMImplementation prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMImplementation New();
    }

    [Virtual]
    public abstract class DOMParserTypeConfig : IObject
    {
      private dom.DOMParser _prototype_BackingField;

      public virtual dom.DOMParser prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMParser New();
    }

    [Virtual]
    public abstract class DOMRectTypeConfig : IObject
    {
      private dom.DOMRect _prototype_BackingField;

      public virtual dom.DOMRect prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMRect New();

      [Template("new {this}({0})")]
      public abstract dom.DOMRect New(double x);

      [Template("new {this}({0}, {1})")]
      public abstract dom.DOMRect New(double x, double y);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.DOMRect New(double x, double y, double width);

      [Template("new {this}({0}, {1}, {2}, {3})")]
      public abstract dom.DOMRect New(double x, double y, double width, double height);

      public abstract dom.DOMRect fromRect();

      public abstract dom.DOMRect fromRect(dom.DOMRectInit rectangle);
    }

    [Virtual]
    public abstract class DOMRectReadOnlyTypeConfig : IObject
    {
      private dom.DOMRectReadOnly _prototype_BackingField;

      public virtual dom.DOMRectReadOnly prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMRectReadOnly New();

      [Template("new {this}({0})")]
      public abstract dom.DOMRectReadOnly New(double x);

      [Template("new {this}({0}, {1})")]
      public abstract dom.DOMRectReadOnly New(double x, double y);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.DOMRectReadOnly New(double x, double y, double width);

      [Template("new {this}({0}, {1}, {2}, {3})")]
      public abstract dom.DOMRectReadOnly New(double x, double y, double width, double height);

      public abstract dom.DOMRectReadOnly fromRect();

      public abstract dom.DOMRectReadOnly fromRect(dom.DOMRectInit rectangle);
    }

    [Virtual]
    public abstract class DOMSettableTokenListTypeConfig : IObject
    {
      private dom.DOMSettableTokenList _prototype_BackingField;

      public virtual dom.DOMSettableTokenList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMSettableTokenList New();
    }

    [Virtual]
    public abstract class DOMStringListTypeConfig : IObject
    {
      private dom.DOMStringList _prototype_BackingField;

      public virtual dom.DOMStringList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMStringList New();
    }

    [Virtual]
    public abstract class DOMStringMapTypeConfig : IObject
    {
      private dom.DOMStringMap _prototype_BackingField;

      public virtual dom.DOMStringMap prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMStringMap New();
    }

    [Virtual]
    public abstract class DOMTokenListTypeConfig : IObject
    {
      private dom.DOMTokenList _prototype_BackingField;

      public virtual dom.DOMTokenList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DOMTokenList New();
    }

    [Virtual]
    public abstract class DataCueTypeConfig : IObject
    {
      private dom.DataCue _prototype_BackingField;

      public virtual dom.DataCue prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DataCue New();
    }

    [Virtual]
    public abstract class DataTransferTypeConfig : IObject
    {
      private dom.DataTransfer _prototype_BackingField;

      public virtual dom.DataTransfer prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DataTransfer New();
    }

    [Virtual]
    public abstract class DataTransferItemTypeConfig : IObject
    {
      private dom.DataTransferItem _prototype_BackingField;

      public virtual dom.DataTransferItem prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DataTransferItem New();
    }

    [Virtual]
    public abstract class DataTransferItemListTypeConfig : IObject
    {
      private dom.DataTransferItemList _prototype_BackingField;

      public virtual dom.DataTransferItemList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DataTransferItemList New();
    }

    [Virtual]
    public abstract class DeferredPermissionRequestTypeConfig : IObject
    {
      private dom.DeferredPermissionRequest _prototype_BackingField;

      public virtual dom.DeferredPermissionRequest prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DeferredPermissionRequest New();
    }

    [Virtual]
    public abstract class DelayNodeTypeConfig : IObject
    {
      private dom.DelayNode _prototype_BackingField;

      public virtual dom.DelayNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DelayNode New();
    }

    [Virtual]
    public abstract class DeviceAccelerationTypeConfig : IObject
    {
      private dom.DeviceAcceleration _prototype_BackingField;

      public virtual dom.DeviceAcceleration prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DeviceAcceleration New();
    }

    [Virtual]
    public abstract class DeviceLightEventTypeConfig : IObject
    {
      private dom.DeviceLightEvent _prototype_BackingField;

      public virtual dom.DeviceLightEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.DeviceLightEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.DeviceLightEvent New(
        string typeArg,
        dom.DeviceLightEventInit eventInitDict);
    }

    [Virtual]
    public abstract class DeviceMotionEventTypeConfig : IObject
    {
      private dom.DeviceMotionEvent _prototype_BackingField;

      public virtual dom.DeviceMotionEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.DeviceMotionEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.DeviceMotionEvent New(
        string typeArg,
        dom.DeviceMotionEventInit eventInitDict);
    }

    [Virtual]
    public abstract class DeviceOrientationEventTypeConfig : IObject
    {
      private dom.DeviceOrientationEvent _prototype_BackingField;

      public virtual dom.DeviceOrientationEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.DeviceOrientationEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.DeviceOrientationEvent New(
        string typeArg,
        dom.DeviceOrientationEventInit eventInitDict);
    }

    [Virtual]
    public abstract class DeviceRotationRateTypeConfig : IObject
    {
      private dom.DeviceRotationRate _prototype_BackingField;

      public virtual dom.DeviceRotationRate prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DeviceRotationRate New();
    }

    [Virtual]
    public abstract class DocumentType2Config : IObject
    {
      private dom.Document _prototype_BackingField;

      public virtual dom.Document prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Document New();
    }

    [Virtual]
    public abstract class DocumentFragmentTypeConfig : IObject
    {
      private dom.DocumentFragment _prototype_BackingField;

      public virtual dom.DocumentFragment prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DocumentFragment New();
    }

    [Virtual]
    public abstract class DocumentTypeTypeConfig : IObject
    {
      private dom.DocumentType _prototype_BackingField;

      public virtual dom.DocumentType prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DocumentType New();
    }

    [Virtual]
    public abstract class DragEventTypeConfig : IObject
    {
      private dom.DragEvent _prototype_BackingField;

      public virtual dom.DragEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.DragEvent New(dom.Literals.Options.type type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.DragEvent New(
        dom.Literals.Options.type type,
        dom.DragEventTypeConfig.NewConfig dragEventInit);

      [ObjectLiteral]
      public class NewConfig : IObject
      {
        private dom.DataTransfer _dataTransfer_BackingField;

        public dom.DataTransfer dataTransfer
        {
          get
          {
            return this._dataTransfer_BackingField;
          }
          set
          {
            this._dataTransfer_BackingField = value;
          }
        }
      }
    }

    [Virtual]
    public abstract class DynamicsCompressorNodeTypeConfig : IObject
    {
      private dom.DynamicsCompressorNode _prototype_BackingField;

      public virtual dom.DynamicsCompressorNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.DynamicsCompressorNode New();
    }

    [Virtual]
    public abstract class EXT_texture_filter_anisotropicTypeConfig : IObject
    {
      private dom.EXT_texture_filter_anisotropic _prototype_BackingField;

      public virtual dom.EXT_texture_filter_anisotropic prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.EXT_texture_filter_anisotropic New();

      public abstract double MAX_TEXTURE_MAX_ANISOTROPY_EXT { get; }

      public abstract double TEXTURE_MAX_ANISOTROPY_EXT { get; }
    }

    [Virtual]
    public abstract class ElementTypeConfig : IObject
    {
      private dom.Element _prototype_BackingField;

      public virtual dom.Element prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Element New();
    }

    [Virtual]
    public abstract class ErrorEventTypeConfig : IObject
    {
      private dom.ErrorEvent _prototype_BackingField;

      public virtual dom.ErrorEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.ErrorEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.ErrorEvent New(string typeArg, dom.ErrorEventInit eventInitDict);
    }

    [Virtual]
    public abstract class EventTypeConfig : IObject
    {
      private dom.Event _prototype_BackingField;

      public virtual dom.Event prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.Event New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Event New(string typeArg, dom.EventInit eventInitDict);

      public abstract ushort AT_TARGET { get; }

      public abstract ushort BUBBLING_PHASE { get; }

      public abstract ushort CAPTURING_PHASE { get; }

      public abstract ushort NONE { get; }
    }

    [Virtual]
    public abstract class EventSourceTypeConfig : IObject
    {
      private dom.EventSource _prototype_BackingField;

      public virtual dom.EventSource prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.EventSource New(string url);

      [Template("new {this}({0}, {1})")]
      public abstract dom.EventSource New(string url, dom.EventSourceInit eventSourceInitDict);
    }

    [Virtual]
    public abstract class EventTargetTypeConfig : IObject
    {
      private dom.EventTarget _prototype_BackingField;

      public virtual dom.EventTarget prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.EventTarget New();
    }

    [Virtual]
    public abstract class ExtensionScriptApisTypeConfig : IObject
    {
      private dom.ExtensionScriptApis _prototype_BackingField;

      public virtual dom.ExtensionScriptApis prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ExtensionScriptApis New();
    }

    [Virtual]
    public abstract class ExternalTypeConfig : IObject
    {
      private dom.External _prototype_BackingField;

      public virtual dom.External prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.External New();
    }

    [Virtual]
    public abstract class FileTypeConfig : IObject
    {
      private dom.File _prototype_BackingField;

      public virtual dom.File prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.File New(
        Union<es5.ArrayBuffer, es5.ArrayBufferView, dom.Blob, string>[] parts,
        string filename);

      [Template("new {this}({0}, {1})")]
      public abstract dom.File New(es5.ArrayBuffer[] parts, string filename);

      [Template("new {this}({0}, {1})")]
      public abstract dom.File New(es5.ArrayBufferView[] parts, string filename);

      [Template("new {this}({0}, {1})")]
      public abstract dom.File New(dom.Blob[] parts, string filename);

      [Template("new {this}({0}, {1})")]
      public abstract dom.File New(string[] parts, string filename);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.File New(
        Union<es5.ArrayBuffer, es5.ArrayBufferView, dom.Blob, string>[] parts,
        string filename,
        dom.FilePropertyBag properties);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.File New(
        es5.ArrayBuffer[] parts,
        string filename,
        dom.FilePropertyBag properties);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.File New(
        es5.ArrayBufferView[] parts,
        string filename,
        dom.FilePropertyBag properties);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.File New(
        dom.Blob[] parts,
        string filename,
        dom.FilePropertyBag properties);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.File New(
        string[] parts,
        string filename,
        dom.FilePropertyBag properties);
    }

    [Virtual]
    public abstract class FileListTypeConfig : IObject
    {
      private dom.FileList _prototype_BackingField;

      public virtual dom.FileList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.FileList New();
    }

    [Virtual]
    public abstract class FileReaderTypeConfig : IObject
    {
      private dom.FileReader _prototype_BackingField;

      public virtual dom.FileReader prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.FileReader New();

      public abstract ushort DONE { get; }

      public abstract ushort EMPTY { get; }

      public abstract ushort LOADING { get; }
    }

    [Virtual]
    public abstract class FocusEventTypeConfig : IObject
    {
      private dom.FocusEvent _prototype_BackingField;

      public virtual dom.FocusEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.FocusEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.FocusEvent New(string typeArg, dom.FocusEventInit eventInitDict);
    }

    [Virtual]
    public abstract class FocusNavigationEventTypeConfig : IObject
    {
      private dom.FocusNavigationEvent _prototype_BackingField;

      public virtual dom.FocusNavigationEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.FocusNavigationEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.FocusNavigationEvent New(
        string type,
        dom.FocusNavigationEventInit eventInitDict);
    }

    [Virtual]
    public abstract class FormDataTypeConfig : IObject
    {
      private dom.FormData _prototype_BackingField;

      public virtual dom.FormData prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.FormData New();

      [Template("new {this}({0})")]
      public abstract dom.FormData New(dom.HTMLFormElement form);
    }

    [Virtual]
    public abstract class GainNodeTypeConfig : IObject
    {
      private dom.GainNode _prototype_BackingField;

      public virtual dom.GainNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.GainNode New();
    }

    [Virtual]
    public abstract class GamepadTypeConfig : IObject
    {
      private dom.Gamepad _prototype_BackingField;

      public virtual dom.Gamepad prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Gamepad New();
    }

    [Virtual]
    public abstract class GamepadButtonTypeConfig : IObject
    {
      private dom.GamepadButton _prototype_BackingField;

      public virtual dom.GamepadButton prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.GamepadButton New();
    }

    [Virtual]
    public abstract class GamepadEventTypeConfig : IObject
    {
      private dom.GamepadEvent _prototype_BackingField;

      public virtual dom.GamepadEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.GamepadEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.GamepadEvent New(string typeArg, dom.GamepadEventInit eventInitDict);
    }

    [Virtual]
    public abstract class GamepadHapticActuatorType2Config : IObject
    {
      private dom.GamepadHapticActuator _prototype_BackingField;

      public virtual dom.GamepadHapticActuator prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.GamepadHapticActuator New();
    }

    [Virtual]
    public abstract class GamepadPoseTypeConfig : IObject
    {
      private dom.GamepadPose _prototype_BackingField;

      public virtual dom.GamepadPose prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.GamepadPose New();
    }

    [Virtual]
    public abstract class GeolocationTypeConfig : IObject
    {
      private dom.Geolocation _prototype_BackingField;

      public virtual dom.Geolocation prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Geolocation New();
    }

    [Virtual]
    public abstract class HTMLAllCollectionTypeConfig : IObject
    {
      private dom.HTMLAllCollection _prototype_BackingField;

      public virtual dom.HTMLAllCollection prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLAllCollection New();
    }

    [Virtual]
    public abstract class HTMLAnchorElementTypeConfig : IObject
    {
      private dom.HTMLAnchorElement _prototype_BackingField;

      public virtual dom.HTMLAnchorElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLAnchorElement New();
    }

    [Virtual]
    public abstract class HTMLAppletElementTypeConfig : IObject
    {
      private dom.HTMLAppletElement _prototype_BackingField;

      public virtual dom.HTMLAppletElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLAppletElement New();
    }

    [Virtual]
    public abstract class HTMLAreaElementTypeConfig : IObject
    {
      private dom.HTMLAreaElement _prototype_BackingField;

      public virtual dom.HTMLAreaElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLAreaElement New();
    }

    [Virtual]
    public abstract class HTMLAreasCollectionTypeConfig : IObject
    {
      private dom.HTMLAreasCollection _prototype_BackingField;

      public virtual dom.HTMLAreasCollection prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLAreasCollection New();
    }

    [Virtual]
    public abstract class HTMLAudioElementTypeConfig : IObject
    {
      private dom.HTMLAudioElement _prototype_BackingField;

      public virtual dom.HTMLAudioElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLAudioElement New();
    }

    [Virtual]
    public abstract class HTMLBRElementTypeConfig : IObject
    {
      private dom.HTMLBRElement _prototype_BackingField;

      public virtual dom.HTMLBRElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLBRElement New();
    }

    [Virtual]
    public abstract class HTMLBaseElementTypeConfig : IObject
    {
      private dom.HTMLBaseElement _prototype_BackingField;

      public virtual dom.HTMLBaseElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLBaseElement New();
    }

    [Virtual]
    public abstract class HTMLBaseFontElementTypeConfig : IObject
    {
      private dom.HTMLBaseFontElement _prototype_BackingField;

      public virtual dom.HTMLBaseFontElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLBaseFontElement New();
    }

    [Virtual]
    public abstract class HTMLBodyElementTypeConfig : IObject
    {
      private dom.HTMLBodyElement _prototype_BackingField;

      public virtual dom.HTMLBodyElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLBodyElement New();
    }

    [Virtual]
    public abstract class HTMLButtonElementTypeConfig : IObject
    {
      private dom.HTMLButtonElement _prototype_BackingField;

      public virtual dom.HTMLButtonElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLButtonElement New();
    }

    [Virtual]
    public abstract class HTMLCanvasElementTypeConfig : IObject
    {
      private dom.HTMLCanvasElement _prototype_BackingField;

      public virtual dom.HTMLCanvasElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLCanvasElement New();
    }

    [Virtual]
    public abstract class HTMLCollectionTypeConfig : IObject
    {
      private dom.HTMLCollection _prototype_BackingField;

      public virtual dom.HTMLCollection prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLCollection New();
    }

    [Virtual]
    public abstract class HTMLDListElementTypeConfig : IObject
    {
      private dom.HTMLDListElement _prototype_BackingField;

      public virtual dom.HTMLDListElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLDListElement New();
    }

    [Virtual]
    public abstract class HTMLDataElementTypeConfig : IObject
    {
      private dom.HTMLDataElement _prototype_BackingField;

      public virtual dom.HTMLDataElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLDataElement New();
    }

    [Virtual]
    public abstract class HTMLDataListElementTypeConfig : IObject
    {
      private dom.HTMLDataListElement _prototype_BackingField;

      public virtual dom.HTMLDataListElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLDataListElement New();
    }

    [Virtual]
    public abstract class HTMLDetailsElementTypeConfig : IObject
    {
      private dom.HTMLDetailsElement _prototype_BackingField;

      public virtual dom.HTMLDetailsElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLDetailsElement New();
    }

    [Virtual]
    public abstract class HTMLDialogElementTypeConfig : IObject
    {
      private dom.HTMLDialogElement _prototype_BackingField;

      public virtual dom.HTMLDialogElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLDialogElement New();
    }

    [Virtual]
    public abstract class HTMLDirectoryElementTypeConfig : IObject
    {
      private dom.HTMLDirectoryElement _prototype_BackingField;

      public virtual dom.HTMLDirectoryElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLDirectoryElement New();
    }

    [Virtual]
    public abstract class HTMLDivElementTypeConfig : IObject
    {
      private dom.HTMLDivElement _prototype_BackingField;

      public virtual dom.HTMLDivElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLDivElement New();
    }

    [Virtual]
    public abstract class HTMLDocumentTypeConfig : IObject
    {
      private dom.HTMLDocument _prototype_BackingField;

      public virtual dom.HTMLDocument prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLDocument New();
    }

    [Virtual]
    public abstract class HTMLElementTypeConfig : IObject
    {
      private dom.HTMLElement _prototype_BackingField;

      public virtual dom.HTMLElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLElement New();
    }

    [Virtual]
    public abstract class HTMLEmbedElementTypeConfig : IObject
    {
      private dom.HTMLEmbedElement _prototype_BackingField;

      public virtual dom.HTMLEmbedElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLEmbedElement New();
    }

    [Virtual]
    public abstract class HTMLFieldSetElementTypeConfig : IObject
    {
      private dom.HTMLFieldSetElement _prototype_BackingField;

      public virtual dom.HTMLFieldSetElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLFieldSetElement New();
    }

    [Virtual]
    public abstract class HTMLFontElementTypeConfig : IObject
    {
      private dom.HTMLFontElement _prototype_BackingField;

      public virtual dom.HTMLFontElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLFontElement New();
    }

    [Virtual]
    public abstract class HTMLFormControlsCollectionTypeConfig : IObject
    {
      private dom.HTMLFormControlsCollection _prototype_BackingField;

      public virtual dom.HTMLFormControlsCollection prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLFormControlsCollection New();
    }

    [Virtual]
    public abstract class HTMLFormElementTypeConfig : IObject
    {
      private dom.HTMLFormElement _prototype_BackingField;

      public virtual dom.HTMLFormElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLFormElement New();
    }

    [Virtual]
    public abstract class HTMLFrameElementTypeConfig : IObject
    {
      private dom.HTMLFrameElement _prototype_BackingField;

      public virtual dom.HTMLFrameElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLFrameElement New();
    }

    [Virtual]
    public abstract class HTMLFrameSetElementTypeConfig : IObject
    {
      private dom.HTMLFrameSetElement _prototype_BackingField;

      public virtual dom.HTMLFrameSetElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLFrameSetElement New();
    }

    [Virtual]
    public abstract class HTMLHRElementTypeConfig : IObject
    {
      private dom.HTMLHRElement _prototype_BackingField;

      public virtual dom.HTMLHRElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLHRElement New();
    }

    [Virtual]
    public abstract class HTMLHeadElementTypeConfig : IObject
    {
      private dom.HTMLHeadElement _prototype_BackingField;

      public virtual dom.HTMLHeadElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLHeadElement New();
    }

    [Virtual]
    public abstract class HTMLHeadingElementTypeConfig : IObject
    {
      private dom.HTMLHeadingElement _prototype_BackingField;

      public virtual dom.HTMLHeadingElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLHeadingElement New();
    }

    [Virtual]
    public abstract class HTMLHtmlElementTypeConfig : IObject
    {
      private dom.HTMLHtmlElement _prototype_BackingField;

      public virtual dom.HTMLHtmlElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLHtmlElement New();
    }

    [Virtual]
    public abstract class HTMLIFrameElementTypeConfig : IObject
    {
      private dom.HTMLIFrameElement _prototype_BackingField;

      public virtual dom.HTMLIFrameElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLIFrameElement New();
    }

    [Virtual]
    public abstract class HTMLImageElementTypeConfig : IObject
    {
      private dom.HTMLImageElement _prototype_BackingField;

      public virtual dom.HTMLImageElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLImageElement New();
    }

    [Virtual]
    public abstract class HTMLInputElementTypeConfig : IObject
    {
      private dom.HTMLInputElement _prototype_BackingField;

      public virtual dom.HTMLInputElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLInputElement New();
    }

    [Virtual]
    public abstract class HTMLLIElementTypeConfig : IObject
    {
      private dom.HTMLLIElement _prototype_BackingField;

      public virtual dom.HTMLLIElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLLIElement New();
    }

    [Virtual]
    public abstract class HTMLLabelElementTypeConfig : IObject
    {
      private dom.HTMLLabelElement _prototype_BackingField;

      public virtual dom.HTMLLabelElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLLabelElement New();
    }

    [Virtual]
    public abstract class HTMLLegendElementTypeConfig : IObject
    {
      private dom.HTMLLegendElement _prototype_BackingField;

      public virtual dom.HTMLLegendElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLLegendElement New();
    }

    [Virtual]
    public abstract class HTMLLinkElementTypeConfig : IObject
    {
      private dom.HTMLLinkElement _prototype_BackingField;

      public virtual dom.HTMLLinkElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLLinkElement New();
    }

    [Virtual]
    public abstract class HTMLMainElementTypeConfig : IObject
    {
      private dom.HTMLMainElement _prototype_BackingField;

      public virtual dom.HTMLMainElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLMainElement New();
    }

    [Virtual]
    public abstract class HTMLMapElementTypeConfig : IObject
    {
      private dom.HTMLMapElement _prototype_BackingField;

      public virtual dom.HTMLMapElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLMapElement New();
    }

    [Virtual]
    public abstract class HTMLMarqueeElementTypeConfig : IObject
    {
      private dom.HTMLMarqueeElement _prototype_BackingField;

      public virtual dom.HTMLMarqueeElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLMarqueeElement New();
    }

    [Virtual]
    public abstract class HTMLMediaElementTypeConfig : IObject
    {
      private dom.HTMLMediaElement _prototype_BackingField;

      public virtual dom.HTMLMediaElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLMediaElement New();

      public abstract ushort HAVE_CURRENT_DATA { get; }

      public abstract ushort HAVE_ENOUGH_DATA { get; }

      public abstract ushort HAVE_FUTURE_DATA { get; }

      public abstract ushort HAVE_METADATA { get; }

      public abstract ushort HAVE_NOTHING { get; }

      public abstract ushort NETWORK_EMPTY { get; }

      public abstract ushort NETWORK_IDLE { get; }

      public abstract ushort NETWORK_LOADING { get; }

      public abstract ushort NETWORK_NO_SOURCE { get; }
    }

    [Virtual]
    public abstract class HTMLMenuElementTypeConfig : IObject
    {
      private dom.HTMLMenuElement _prototype_BackingField;

      public virtual dom.HTMLMenuElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLMenuElement New();
    }

    [Virtual]
    public abstract class HTMLMetaElementTypeConfig : IObject
    {
      private dom.HTMLMetaElement _prototype_BackingField;

      public virtual dom.HTMLMetaElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLMetaElement New();
    }

    [Virtual]
    public abstract class HTMLMeterElementTypeConfig : IObject
    {
      private dom.HTMLMeterElement _prototype_BackingField;

      public virtual dom.HTMLMeterElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLMeterElement New();
    }

    [Virtual]
    public abstract class HTMLModElementTypeConfig : IObject
    {
      private dom.HTMLModElement _prototype_BackingField;

      public virtual dom.HTMLModElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLModElement New();
    }

    [Virtual]
    public abstract class HTMLOListElementTypeConfig : IObject
    {
      private dom.HTMLOListElement _prototype_BackingField;

      public virtual dom.HTMLOListElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLOListElement New();
    }

    [Virtual]
    public abstract class HTMLObjectElementTypeConfig : IObject
    {
      private dom.HTMLObjectElement _prototype_BackingField;

      public virtual dom.HTMLObjectElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLObjectElement New();
    }

    [Virtual]
    public abstract class HTMLOptGroupElementTypeConfig : IObject
    {
      private dom.HTMLOptGroupElement _prototype_BackingField;

      public virtual dom.HTMLOptGroupElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLOptGroupElement New();
    }

    [Virtual]
    public abstract class HTMLOptionElementTypeConfig : IObject
    {
      private dom.HTMLOptionElement _prototype_BackingField;

      public virtual dom.HTMLOptionElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLOptionElement New();
    }

    [Virtual]
    public abstract class HTMLOptionsCollectionTypeConfig : IObject
    {
      private dom.HTMLOptionsCollection _prototype_BackingField;

      public virtual dom.HTMLOptionsCollection prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLOptionsCollection New();
    }

    [Virtual]
    public abstract class HTMLOutputElementTypeConfig : IObject
    {
      private dom.HTMLOutputElement _prototype_BackingField;

      public virtual dom.HTMLOutputElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLOutputElement New();
    }

    [Virtual]
    public abstract class HTMLParagraphElementTypeConfig : IObject
    {
      private dom.HTMLParagraphElement _prototype_BackingField;

      public virtual dom.HTMLParagraphElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLParagraphElement New();
    }

    [Virtual]
    public abstract class HTMLParamElementTypeConfig : IObject
    {
      private dom.HTMLParamElement _prototype_BackingField;

      public virtual dom.HTMLParamElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLParamElement New();
    }

    [Virtual]
    public abstract class HTMLPictureElementTypeConfig : IObject
    {
      private dom.HTMLPictureElement _prototype_BackingField;

      public virtual dom.HTMLPictureElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLPictureElement New();
    }

    [Virtual]
    public abstract class HTMLPreElementTypeConfig : IObject
    {
      private dom.HTMLPreElement _prototype_BackingField;

      public virtual dom.HTMLPreElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLPreElement New();
    }

    [Virtual]
    public abstract class HTMLProgressElementTypeConfig : IObject
    {
      private dom.HTMLProgressElement _prototype_BackingField;

      public virtual dom.HTMLProgressElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLProgressElement New();
    }

    [Virtual]
    public abstract class HTMLQuoteElementTypeConfig : IObject
    {
      private dom.HTMLQuoteElement _prototype_BackingField;

      public virtual dom.HTMLQuoteElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLQuoteElement New();
    }

    [Virtual]
    public abstract class HTMLScriptElementTypeConfig : IObject
    {
      private dom.HTMLScriptElement _prototype_BackingField;

      public virtual dom.HTMLScriptElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLScriptElement New();
    }

    [Virtual]
    public abstract class HTMLSelectElementTypeConfig : IObject
    {
      private dom.HTMLSelectElement _prototype_BackingField;

      public virtual dom.HTMLSelectElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLSelectElement New();
    }

    [Virtual]
    public abstract class HTMLSourceElementTypeConfig : IObject
    {
      private dom.HTMLSourceElement _prototype_BackingField;

      public virtual dom.HTMLSourceElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLSourceElement New();
    }

    [Virtual]
    public abstract class HTMLSpanElementTypeConfig : IObject
    {
      private dom.HTMLSpanElement _prototype_BackingField;

      public virtual dom.HTMLSpanElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLSpanElement New();
    }

    [Virtual]
    public abstract class HTMLStyleElementTypeConfig : IObject
    {
      private dom.HTMLStyleElement _prototype_BackingField;

      public virtual dom.HTMLStyleElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLStyleElement New();
    }

    [Virtual]
    public abstract class HTMLSummaryElementTypeConfig : IObject
    {
      private dom.HTMLSummaryElement _prototype_BackingField;

      public virtual dom.HTMLSummaryElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLSummaryElement New();
    }

    [Virtual]
    public abstract class HTMLTableCaptionElementTypeConfig : IObject
    {
      private dom.HTMLTableCaptionElement _prototype_BackingField;

      public virtual dom.HTMLTableCaptionElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTableCaptionElement New();
    }

    [Virtual]
    public abstract class HTMLTableCellElementTypeConfig : IObject
    {
      private dom.HTMLTableCellElement _prototype_BackingField;

      public virtual dom.HTMLTableCellElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTableCellElement New();
    }

    [Virtual]
    public abstract class HTMLTableColElementTypeConfig : IObject
    {
      private dom.HTMLTableColElement _prototype_BackingField;

      public virtual dom.HTMLTableColElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTableColElement New();
    }

    [Virtual]
    public abstract class HTMLTableDataCellElementTypeConfig : IObject
    {
      private dom.HTMLTableDataCellElement _prototype_BackingField;

      public virtual dom.HTMLTableDataCellElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTableDataCellElement New();
    }

    [Virtual]
    public abstract class HTMLTableElementTypeConfig : IObject
    {
      private dom.HTMLTableElement _prototype_BackingField;

      public virtual dom.HTMLTableElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTableElement New();
    }

    [Virtual]
    public abstract class HTMLTableHeaderCellElementTypeConfig : IObject
    {
      private dom.HTMLTableHeaderCellElement _prototype_BackingField;

      public virtual dom.HTMLTableHeaderCellElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTableHeaderCellElement New();
    }

    [Virtual]
    public abstract class HTMLTableRowElementTypeConfig : IObject
    {
      private dom.HTMLTableRowElement _prototype_BackingField;

      public virtual dom.HTMLTableRowElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTableRowElement New();
    }

    [Virtual]
    public abstract class HTMLTableSectionElementTypeConfig : IObject
    {
      private dom.HTMLTableSectionElement _prototype_BackingField;

      public virtual dom.HTMLTableSectionElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTableSectionElement New();
    }

    [Virtual]
    public abstract class HTMLTemplateElementTypeConfig : IObject
    {
      private dom.HTMLTemplateElement _prototype_BackingField;

      public virtual dom.HTMLTemplateElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTemplateElement New();
    }

    [Virtual]
    public abstract class HTMLTextAreaElementTypeConfig : IObject
    {
      private dom.HTMLTextAreaElement _prototype_BackingField;

      public virtual dom.HTMLTextAreaElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTextAreaElement New();
    }

    [Virtual]
    public abstract class HTMLTimeElementTypeConfig : IObject
    {
      private dom.HTMLTimeElement _prototype_BackingField;

      public virtual dom.HTMLTimeElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTimeElement New();
    }

    [Virtual]
    public abstract class HTMLTitleElementTypeConfig : IObject
    {
      private dom.HTMLTitleElement _prototype_BackingField;

      public virtual dom.HTMLTitleElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTitleElement New();
    }

    [Virtual]
    public abstract class HTMLTrackElementTypeConfig : IObject
    {
      private dom.HTMLTrackElement _prototype_BackingField;

      public virtual dom.HTMLTrackElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLTrackElement New();

      public abstract ushort ERROR { get; }

      public abstract ushort LOADED { get; }

      public abstract ushort LOADING { get; }

      public abstract ushort NONE { get; }
    }

    [Virtual]
    public abstract class HTMLUListElementTypeConfig : IObject
    {
      private dom.HTMLUListElement _prototype_BackingField;

      public virtual dom.HTMLUListElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLUListElement New();
    }

    [Virtual]
    public abstract class HTMLUnknownElementTypeConfig : IObject
    {
      private dom.HTMLUnknownElement _prototype_BackingField;

      public virtual dom.HTMLUnknownElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLUnknownElement New();
    }

    [Virtual]
    public abstract class HTMLVideoElementTypeConfig : IObject
    {
      private dom.HTMLVideoElement _prototype_BackingField;

      public virtual dom.HTMLVideoElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLVideoElement New();
    }

    [Virtual]
    public abstract class HTMLegendElementTypeConfig : IObject
    {
      private dom.HTMLegendElement _prototype_BackingField;

      public virtual dom.HTMLegendElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.HTMLegendElement New();
    }

    [Virtual]
    public abstract class HashChangeEventTypeConfig : IObject
    {
      private dom.HashChangeEvent _prototype_BackingField;

      public virtual dom.HashChangeEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.HashChangeEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.HashChangeEvent New(string type, dom.HashChangeEventInit eventInitDict);
    }

    [Virtual]
    public abstract class HeadersTypeConfig : IObject
    {
      private dom.Headers _prototype_BackingField;

      public virtual dom.Headers prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Headers New();

      [Template("new {this}({0})")]
      public abstract dom.Headers New(dom.HeadersInit init);

      [Template("new {this}({0})")]
      public abstract dom.Headers New(
        Union<dom.Headers, string[][], dom.HeadersInit.HeadersInitConfig> init);

      [Template("new {this}({0})")]
      public abstract dom.Headers New(dom.Headers init);

      [Template("new {this}({0})")]
      public abstract dom.Headers New(string[][] init);

      [Template("new {this}({0})")]
      public abstract dom.Headers New(dom.HeadersInit.HeadersInitConfig init);
    }

    [Virtual]
    public abstract class HistoryTypeConfig : IObject
    {
      private dom.History _prototype_BackingField;

      public virtual dom.History prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.History New();
    }

    [Virtual]
    public abstract class IDBCursorTypeConfig : IObject
    {
      private dom.IDBCursor _prototype_BackingField;

      public virtual dom.IDBCursor prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBCursor New();

      public abstract string NEXT { get; }

      public abstract string NEXT_NO_DUPLICATE { get; }

      public abstract string PREV { get; }

      public abstract string PREV_NO_DUPLICATE { get; }
    }

    [Virtual]
    public abstract class IDBCursorWithValueTypeConfig : IObject
    {
      private dom.IDBCursorWithValue _prototype_BackingField;

      public virtual dom.IDBCursorWithValue prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBCursorWithValue New();
    }

    [Virtual]
    public abstract class IDBDatabaseTypeConfig : IObject
    {
      private dom.IDBDatabase _prototype_BackingField;

      public virtual dom.IDBDatabase prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBDatabase New();
    }

    [Virtual]
    public abstract class IDBFactoryTypeConfig : IObject
    {
      private dom.IDBFactory _prototype_BackingField;

      public virtual dom.IDBFactory prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBFactory New();
    }

    [Virtual]
    public abstract class IDBIndexTypeConfig : IObject
    {
      private dom.IDBIndex _prototype_BackingField;

      public virtual dom.IDBIndex prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBIndex New();
    }

    [Virtual]
    public abstract class IDBKeyRangeTypeConfig : IObject
    {
      private dom.IDBKeyRange _prototype_BackingField;

      public virtual dom.IDBKeyRange prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBKeyRange New();

      public abstract dom.IDBKeyRange bound(object lower, object upper);

      public abstract dom.IDBKeyRange bound(object lower, object upper, bool lowerOpen);

      public abstract dom.IDBKeyRange bound(
        object lower,
        object upper,
        bool lowerOpen,
        bool upperOpen);

      public abstract dom.IDBKeyRange lowerBound(object lower);

      public abstract dom.IDBKeyRange lowerBound(object lower, bool open);

      public abstract dom.IDBKeyRange only(object value);

      public abstract dom.IDBKeyRange upperBound(object upper);

      public abstract dom.IDBKeyRange upperBound(object upper, bool open);
    }

    [Virtual]
    public abstract class IDBObjectStoreTypeConfig : IObject
    {
      private dom.IDBObjectStore _prototype_BackingField;

      public virtual dom.IDBObjectStore prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBObjectStore New();
    }

    [Virtual]
    public abstract class IDBOpenDBRequestTypeConfig : IObject
    {
      private dom.IDBOpenDBRequest _prototype_BackingField;

      public virtual dom.IDBOpenDBRequest prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBOpenDBRequest New();
    }

    [Virtual]
    public abstract class IDBRequestTypeConfig : IObject
    {
      private dom.IDBRequest _prototype_BackingField;

      public virtual dom.IDBRequest prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBRequest New();
    }

    [Virtual]
    public abstract class IDBTransactionTypeConfig : IObject
    {
      private dom.IDBTransaction _prototype_BackingField;

      public virtual dom.IDBTransaction prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBTransaction New();

      public abstract string READ_ONLY { get; }

      public abstract string READ_WRITE { get; }

      public abstract string VERSION_CHANGE { get; }
    }

    [Virtual]
    public abstract class IDBVersionChangeEventTypeConfig : IObject
    {
      private dom.IDBVersionChangeEvent _prototype_BackingField;

      public virtual dom.IDBVersionChangeEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IDBVersionChangeEvent New();
    }

    [Virtual]
    public abstract class IIRFilterNodeTypeConfig : IObject
    {
      private dom.IIRFilterNode _prototype_BackingField;

      public virtual dom.IIRFilterNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.IIRFilterNode New();
    }

    [Virtual]
    public abstract class ImageDataTypeConfig : IObject
    {
      private dom.ImageData _prototype_BackingField;

      public virtual dom.ImageData prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.ImageData New(double width, double height);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.ImageData New(
        es5.Uint8ClampedArray array,
        double width,
        double height);
    }

    [Virtual]
    public abstract class IntersectionObserverTypeConfig : IObject
    {
      private dom.IntersectionObserver _prototype_BackingField;

      public virtual dom.IntersectionObserver prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.IntersectionObserver New(dom.IntersectionObserverCallback callback);

      [Template("new {this}({0}, {1})")]
      public abstract dom.IntersectionObserver New(
        dom.IntersectionObserverCallback callback,
        dom.IntersectionObserverInit options);
    }

    [Virtual]
    public abstract class IntersectionObserverEntryTypeConfig : IObject
    {
      private dom.IntersectionObserverEntry _prototype_BackingField;

      public virtual dom.IntersectionObserverEntry prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.IntersectionObserverEntry New(
        dom.IntersectionObserverEntryInit intersectionObserverEntryInit);
    }

    [Virtual]
    public abstract class KeyboardEventTypeConfig : IObject
    {
      private dom.KeyboardEvent _prototype_BackingField;

      public virtual dom.KeyboardEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.KeyboardEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.KeyboardEvent New(string typeArg, dom.KeyboardEventInit eventInitDict);

      public abstract double DOM_KEY_LOCATION_JOYSTICK { get; }

      public abstract uint DOM_KEY_LOCATION_LEFT { get; }

      public abstract double DOM_KEY_LOCATION_MOBILE { get; }

      public abstract uint DOM_KEY_LOCATION_NUMPAD { get; }

      public abstract uint DOM_KEY_LOCATION_RIGHT { get; }

      public abstract uint DOM_KEY_LOCATION_STANDARD { get; }
    }

    [Virtual]
    public abstract class ListeningStateChangedEventTypeConfig : IObject
    {
      private dom.ListeningStateChangedEvent _prototype_BackingField;

      public virtual dom.ListeningStateChangedEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ListeningStateChangedEvent New();
    }

    [Virtual]
    public abstract class LocationTypeConfig : IObject
    {
      private dom.Location _prototype_BackingField;

      public virtual dom.Location prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Location New();
    }

    [Virtual]
    public abstract class MSAssertionTypeConfig : IObject
    {
      private dom.MSAssertion _prototype_BackingField;

      public virtual dom.MSAssertion prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSAssertion New();
    }

    [Virtual]
    public abstract class MSBlobBuilderTypeConfig : IObject
    {
      private dom.MSBlobBuilder _prototype_BackingField;

      public virtual dom.MSBlobBuilder prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSBlobBuilder New();
    }

    [Virtual]
    public abstract class MSCredentialsTypeConfig : IObject
    {
      private dom.MSCredentials _prototype_BackingField;

      public virtual dom.MSCredentials prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSCredentials New();
    }

    [Virtual]
    public abstract class MSDCCEventTypeConfig : IObject
    {
      private dom.MSDCCEvent _prototype_BackingField;

      public virtual dom.MSDCCEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.MSDCCEvent New(string type, dom.MSDCCEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MSDSHEventTypeConfig : IObject
    {
      private dom.MSDSHEvent _prototype_BackingField;

      public virtual dom.MSDSHEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.MSDSHEvent New(string type, dom.MSDSHEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MSFIDOCredentialAssertionTypeConfig : IObject
    {
      private dom.MSFIDOCredentialAssertion _prototype_BackingField;

      public virtual dom.MSFIDOCredentialAssertion prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSFIDOCredentialAssertion New();
    }

    [Virtual]
    public abstract class MSFIDOSignatureTypeConfig : IObject
    {
      private dom.MSFIDOSignature _prototype_BackingField;

      public virtual dom.MSFIDOSignature prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSFIDOSignature New();
    }

    [Virtual]
    public abstract class MSFIDOSignatureAssertionTypeConfig : IObject
    {
      private dom.MSFIDOSignatureAssertion _prototype_BackingField;

      public virtual dom.MSFIDOSignatureAssertion prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSFIDOSignatureAssertion New();
    }

    [Virtual]
    public abstract class MSGestureTypeConfig : IObject
    {
      private dom.MSGesture _prototype_BackingField;

      public virtual dom.MSGesture prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSGesture New();
    }

    [Virtual]
    public abstract class MSGestureEventTypeConfig : IObject
    {
      private dom.MSGestureEvent _prototype_BackingField;

      public virtual dom.MSGestureEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSGestureEvent New();

      public abstract double MSGESTURE_FLAG_BEGIN { get; }

      public abstract double MSGESTURE_FLAG_CANCEL { get; }

      public abstract double MSGESTURE_FLAG_END { get; }

      public abstract double MSGESTURE_FLAG_INERTIA { get; }

      public abstract double MSGESTURE_FLAG_NONE { get; }
    }

    [Virtual]
    public abstract class MSGraphicsTrustTypeConfig : IObject
    {
      private dom.MSGraphicsTrust _prototype_BackingField;

      public virtual dom.MSGraphicsTrust prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSGraphicsTrust New();
    }

    [Virtual]
    public abstract class MSInputMethodContextTypeConfig : IObject
    {
      private dom.MSInputMethodContext _prototype_BackingField;

      public virtual dom.MSInputMethodContext prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSInputMethodContext New();
    }

    [Virtual]
    public abstract class MSMediaKeyErrorTypeConfig : IObject
    {
      private dom.MSMediaKeyError _prototype_BackingField;

      public virtual dom.MSMediaKeyError prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSMediaKeyError New();

      public abstract double MS_MEDIA_KEYERR_CLIENT { get; }

      public abstract double MS_MEDIA_KEYERR_DOMAIN { get; }

      public abstract double MS_MEDIA_KEYERR_HARDWARECHANGE { get; }

      public abstract double MS_MEDIA_KEYERR_OUTPUT { get; }

      public abstract double MS_MEDIA_KEYERR_SERVICE { get; }

      public abstract double MS_MEDIA_KEYERR_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class MSMediaKeyMessageEventTypeConfig : IObject
    {
      private dom.MSMediaKeyMessageEvent _prototype_BackingField;

      public virtual dom.MSMediaKeyMessageEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSMediaKeyMessageEvent New();
    }

    [Virtual]
    public abstract class MSMediaKeyNeededEventTypeConfig : IObject
    {
      private dom.MSMediaKeyNeededEvent _prototype_BackingField;

      public virtual dom.MSMediaKeyNeededEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSMediaKeyNeededEvent New();
    }

    [Virtual]
    public abstract class MSMediaKeySessionTypeConfig : IObject
    {
      private dom.MSMediaKeySession _prototype_BackingField;

      public virtual dom.MSMediaKeySession prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSMediaKeySession New();
    }

    [Virtual]
    public abstract class MSMediaKeysTypeConfig : IObject
    {
      private dom.MSMediaKeys _prototype_BackingField;

      public virtual dom.MSMediaKeys prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.MSMediaKeys New(string keySystem);

      public abstract bool isTypeSupported(string keySystem);

      public abstract bool isTypeSupported(string keySystem, string type);

      public abstract string isTypeSupportedWithFeatures(string keySystem);

      public abstract string isTypeSupportedWithFeatures(string keySystem, string type);
    }

    [Virtual]
    public abstract class MSPointerEventTypeConfig : IObject
    {
      private dom.MSPointerEvent _prototype_BackingField;

      public virtual dom.MSPointerEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.MSPointerEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.MSPointerEvent New(string typeArg, dom.PointerEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MSStreamTypeConfig : IObject
    {
      private dom.MSStream _prototype_BackingField;

      public virtual dom.MSStream prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSStream New();
    }

    [Virtual]
    public abstract class MSStreamReaderTypeConfig : IObject
    {
      private dom.MSStreamReader _prototype_BackingField;

      public virtual dom.MSStreamReader prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MSStreamReader New();

      public abstract double DONE { get; }

      public abstract double EMPTY { get; }

      public abstract double LOADING { get; }
    }

    [Virtual]
    public abstract class MediaDeviceInfoTypeConfig : IObject
    {
      private dom.MediaDeviceInfo _prototype_BackingField;

      public virtual dom.MediaDeviceInfo prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaDeviceInfo New();
    }

    [Virtual]
    public abstract class MediaDevicesTypeConfig : IObject
    {
      private dom.MediaDevices _prototype_BackingField;

      public virtual dom.MediaDevices prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaDevices New();
    }

    [Virtual]
    public abstract class MediaElementAudioSourceNodeTypeConfig : IObject
    {
      private dom.MediaElementAudioSourceNode _prototype_BackingField;

      public virtual dom.MediaElementAudioSourceNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaElementAudioSourceNode New();
    }

    [Virtual]
    public abstract class MediaEncryptedEventTypeConfig : IObject
    {
      private dom.MediaEncryptedEvent _prototype_BackingField;

      public virtual dom.MediaEncryptedEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.MediaEncryptedEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.MediaEncryptedEvent New(
        string type,
        dom.MediaEncryptedEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MediaErrorTypeConfig : IObject
    {
      private dom.MediaError _prototype_BackingField;

      public virtual dom.MediaError prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaError New();

      public abstract ushort MEDIA_ERR_ABORTED { get; }

      public abstract ushort MEDIA_ERR_DECODE { get; }

      public abstract ushort MEDIA_ERR_NETWORK { get; }

      public abstract ushort MEDIA_ERR_SRC_NOT_SUPPORTED { get; }

      public abstract double MS_MEDIA_ERR_ENCRYPTED { get; }
    }

    [Virtual]
    public abstract class MediaKeyMessageEventTypeConfig : IObject
    {
      private dom.MediaKeyMessageEvent _prototype_BackingField;

      public virtual dom.MediaKeyMessageEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.MediaKeyMessageEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.MediaKeyMessageEvent New(
        string type,
        dom.MediaKeyMessageEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MediaKeySessionType2Config : IObject
    {
      private dom.MediaKeySession _prototype_BackingField;

      public virtual dom.MediaKeySession prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaKeySession New();
    }

    [Virtual]
    public abstract class MediaKeyStatusMapTypeConfig : IObject
    {
      private dom.MediaKeyStatusMap _prototype_BackingField;

      public virtual dom.MediaKeyStatusMap prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaKeyStatusMap New();
    }

    [Virtual]
    public abstract class MediaKeySystemAccessTypeConfig : IObject
    {
      private dom.MediaKeySystemAccess _prototype_BackingField;

      public virtual dom.MediaKeySystemAccess prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaKeySystemAccess New();
    }

    [Virtual]
    public abstract class MediaKeysTypeConfig : IObject
    {
      private dom.MediaKeys _prototype_BackingField;

      public virtual dom.MediaKeys prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaKeys New();
    }

    [Virtual]
    public abstract class MediaListTypeConfig : IObject
    {
      private dom.MediaList _prototype_BackingField;

      public virtual dom.MediaList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaList New();
    }

    [Virtual]
    public abstract class MediaQueryListTypeConfig : IObject
    {
      private dom.MediaQueryList _prototype_BackingField;

      public virtual dom.MediaQueryList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaQueryList New();
    }

    [Virtual]
    public abstract class MediaSourceTypeConfig : IObject
    {
      private dom.MediaSource _prototype_BackingField;

      public virtual dom.MediaSource prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaSource New();

      public abstract bool isTypeSupported(string type);
    }

    [Virtual]
    public abstract class MediaStreamTypeConfig : IObject
    {
      private dom.MediaStream _prototype_BackingField;

      public virtual dom.MediaStream prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaStream New();

      [Template("new {this}({0})")]
      public abstract dom.MediaStream New(dom.MediaStream stream);

      [Template("new {this}({0})")]
      public abstract dom.MediaStream New(dom.MediaStreamTrack[] tracks);
    }

    [Virtual]
    public abstract class MediaStreamAudioSourceNodeTypeConfig : IObject
    {
      private dom.MediaStreamAudioSourceNode _prototype_BackingField;

      public virtual dom.MediaStreamAudioSourceNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaStreamAudioSourceNode New();
    }

    [Virtual]
    public abstract class MediaStreamErrorTypeConfig : IObject
    {
      private dom.MediaStreamError _prototype_BackingField;

      public virtual dom.MediaStreamError prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaStreamError New();
    }

    [Virtual]
    public abstract class MediaStreamErrorEventTypeConfig : IObject
    {
      private dom.MediaStreamErrorEvent _prototype_BackingField;

      public virtual dom.MediaStreamErrorEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.MediaStreamErrorEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.MediaStreamErrorEvent New(
        string typeArg,
        dom.MediaStreamErrorEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MediaStreamEventTypeConfig : IObject
    {
      private dom.MediaStreamEvent _prototype_BackingField;

      public virtual dom.MediaStreamEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.MediaStreamEvent New(
        string type,
        dom.MediaStreamEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MediaStreamTrackTypeConfig : IObject
    {
      private dom.MediaStreamTrack _prototype_BackingField;

      public virtual dom.MediaStreamTrack prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MediaStreamTrack New();
    }

    [Virtual]
    public abstract class MediaStreamTrackEventTypeConfig : IObject
    {
      private dom.MediaStreamTrackEvent _prototype_BackingField;

      public virtual dom.MediaStreamTrackEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.MediaStreamTrackEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.MediaStreamTrackEvent New(
        string typeArg,
        dom.MediaStreamTrackEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MessageChannelTypeConfig : IObject
    {
      private dom.MessageChannel _prototype_BackingField;

      public virtual dom.MessageChannel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MessageChannel New();
    }

    [Virtual]
    public abstract class MessageEventTypeConfig : IObject
    {
      private dom.MessageEvent _prototype_BackingField;

      public virtual dom.MessageEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.MessageEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.MessageEvent New(string type, dom.MessageEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MessagePortTypeConfig : IObject
    {
      private dom.MessagePort _prototype_BackingField;

      public virtual dom.MessagePort prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MessagePort New();
    }

    [Virtual]
    public abstract class MimeTypeTypeConfig : IObject
    {
      private dom.MimeType _prototype_BackingField;

      public virtual dom.MimeType prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MimeType New();
    }

    [Virtual]
    public abstract class MimeTypeArrayTypeConfig : IObject
    {
      private dom.MimeTypeArray _prototype_BackingField;

      public virtual dom.MimeTypeArray prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MimeTypeArray New();
    }

    [Virtual]
    public abstract class MouseEventTypeConfig : IObject
    {
      private dom.MouseEvent _prototype_BackingField;

      public virtual dom.MouseEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.MouseEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.MouseEvent New(string typeArg, dom.MouseEventInit eventInitDict);
    }

    [Virtual]
    public abstract class MutationEventTypeConfig : IObject
    {
      private dom.MutationEvent _prototype_BackingField;

      public virtual dom.MutationEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MutationEvent New();

      public abstract double ADDITION { get; }

      public abstract double MODIFICATION { get; }

      public abstract double REMOVAL { get; }
    }

    [Virtual]
    public abstract class MutationObserverTypeConfig : IObject
    {
      private dom.MutationObserver _prototype_BackingField;

      public virtual dom.MutationObserver prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.MutationObserver New(dom.MutationCallback callback);
    }

    [Virtual]
    public abstract class MutationRecordType2Config : IObject
    {
      private dom.MutationRecord _prototype_BackingField;

      public virtual dom.MutationRecord prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.MutationRecord New();
    }

    [Virtual]
    public abstract class NamedNodeMapTypeConfig : IObject
    {
      private dom.NamedNodeMap _prototype_BackingField;

      public virtual dom.NamedNodeMap prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.NamedNodeMap New();
    }

    [Virtual]
    public abstract class NavigatorTypeConfig : IObject
    {
      private dom.Navigator _prototype_BackingField;

      public virtual dom.Navigator prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Navigator New();
    }

    [Virtual]
    public abstract class NodeTypeConfig : IObject
    {
      private dom.Node _prototype_BackingField;

      public virtual dom.Node prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Node New();

      public abstract ushort ATTRIBUTE_NODE { get; }

      public abstract ushort CDATA_SECTION_NODE { get; }

      public abstract ushort COMMENT_NODE { get; }

      public abstract ushort DOCUMENT_FRAGMENT_NODE { get; }

      public abstract ushort DOCUMENT_NODE { get; }

      public abstract ushort DOCUMENT_POSITION_CONTAINED_BY { get; }

      public abstract ushort DOCUMENT_POSITION_CONTAINS { get; }

      public abstract ushort DOCUMENT_POSITION_DISCONNECTED { get; }

      public abstract ushort DOCUMENT_POSITION_FOLLOWING { get; }

      public abstract ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC { get; }

      public abstract ushort DOCUMENT_POSITION_PRECEDING { get; }

      public abstract ushort DOCUMENT_TYPE_NODE { get; }

      public abstract ushort ELEMENT_NODE { get; }

      public abstract ushort ENTITY_NODE { get; }

      public abstract ushort ENTITY_REFERENCE_NODE { get; }

      public abstract ushort NOTATION_NODE { get; }

      public abstract ushort PROCESSING_INSTRUCTION_NODE { get; }

      public abstract ushort TEXT_NODE { get; }
    }

    [Virtual]
    public abstract class NodeFilter2Config : IObject
    {
      public abstract ushort FILTER_ACCEPT { get; }

      public abstract ushort FILTER_REJECT { get; }

      public abstract ushort FILTER_SKIP { get; }

      public abstract uint SHOW_ALL { get; }

      public abstract uint SHOW_ATTRIBUTE { get; }

      public abstract uint SHOW_CDATA_SECTION { get; }

      public abstract uint SHOW_COMMENT { get; }

      public abstract uint SHOW_DOCUMENT { get; }

      public abstract uint SHOW_DOCUMENT_FRAGMENT { get; }

      public abstract uint SHOW_DOCUMENT_TYPE { get; }

      public abstract uint SHOW_ELEMENT { get; }

      public abstract uint SHOW_ENTITY { get; }

      public abstract uint SHOW_ENTITY_REFERENCE { get; }

      public abstract uint SHOW_NOTATION { get; }

      public abstract uint SHOW_PROCESSING_INSTRUCTION { get; }

      public abstract uint SHOW_TEXT { get; }
    }

    [Virtual]
    public abstract class NodeIteratorTypeConfig : IObject
    {
      private dom.NodeIterator _prototype_BackingField;

      public virtual dom.NodeIterator prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.NodeIterator New();
    }

    [Virtual]
    public abstract class NodeListTypeConfig : IObject
    {
      private dom.NodeList _prototype_BackingField;

      public virtual dom.NodeList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.NodeList New();
    }

    [Virtual]
    public abstract class NotificationTypeConfig : IObject
    {
      private dom.Notification _prototype_BackingField;

      public virtual dom.Notification prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.Notification New(string title);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Notification New(string title, dom.NotificationOptions options);

      public abstract es5.Promise<dom.NotificationPermission> requestPermission();

      public abstract es5.Promise<dom.NotificationPermission> requestPermission(
        dom.NotificationPermissionCallback callback);
    }

    [Virtual]
    public abstract class OES_element_index_uintTypeConfig : IObject
    {
      private dom.OES_element_index_uint _prototype_BackingField;

      public virtual dom.OES_element_index_uint prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.OES_element_index_uint New();
    }

    [Virtual]
    public abstract class OES_standard_derivativesTypeConfig : IObject
    {
      private dom.OES_standard_derivatives _prototype_BackingField;

      public virtual dom.OES_standard_derivatives prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.OES_standard_derivatives New();

      public abstract double FRAGMENT_SHADER_DERIVATIVE_HINT_OES { get; }
    }

    [Virtual]
    public abstract class OES_texture_floatTypeConfig : IObject
    {
      private dom.OES_texture_float _prototype_BackingField;

      public virtual dom.OES_texture_float prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.OES_texture_float New();
    }

    [Virtual]
    public abstract class OES_texture_float_linearTypeConfig : IObject
    {
      private dom.OES_texture_float_linear _prototype_BackingField;

      public virtual dom.OES_texture_float_linear prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.OES_texture_float_linear New();
    }

    [Virtual]
    public abstract class OES_texture_half_floatTypeConfig : IObject
    {
      private dom.OES_texture_half_float _prototype_BackingField;

      public virtual dom.OES_texture_half_float prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.OES_texture_half_float New();

      public abstract double HALF_FLOAT_OES { get; }
    }

    [Virtual]
    public abstract class OES_texture_half_float_linearTypeConfig : IObject
    {
      private dom.OES_texture_half_float_linear _prototype_BackingField;

      public virtual dom.OES_texture_half_float_linear prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.OES_texture_half_float_linear New();
    }

    [Virtual]
    public abstract class OfflineAudioCompletionEventTypeConfig : IObject
    {
      private dom.OfflineAudioCompletionEvent _prototype_BackingField;

      public virtual dom.OfflineAudioCompletionEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.OfflineAudioCompletionEvent New();
    }

    [Virtual]
    public abstract class OfflineAudioContextTypeConfig : IObject
    {
      private dom.OfflineAudioContext _prototype_BackingField;

      public virtual dom.OfflineAudioContext prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.OfflineAudioContext New(
        double numberOfChannels,
        double length,
        double sampleRate);
    }

    [Virtual]
    public abstract class OscillatorNodeTypeConfig : IObject
    {
      private dom.OscillatorNode _prototype_BackingField;

      public virtual dom.OscillatorNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.OscillatorNode New();
    }

    [Virtual]
    public abstract class OverflowEventTypeConfig : IObject
    {
      private dom.OverflowEvent _prototype_BackingField;

      public virtual dom.OverflowEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.OverflowEvent New();

      public abstract double BOTH { get; }

      public abstract double HORIZONTAL { get; }

      public abstract double VERTICAL { get; }
    }

    [Virtual]
    public abstract class PageTransitionEventTypeConfig : IObject
    {
      private dom.PageTransitionEvent _prototype_BackingField;

      public virtual dom.PageTransitionEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PageTransitionEvent New();
    }

    [Virtual]
    public abstract class PannerNodeTypeConfig : IObject
    {
      private dom.PannerNode _prototype_BackingField;

      public virtual dom.PannerNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PannerNode New();
    }

    [Virtual]
    public abstract class Path2DTypeConfig : IObject
    {
      private dom.Path2D _prototype_BackingField;

      public virtual dom.Path2D prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Path2D New();

      [Template("new {this}({0})")]
      public abstract dom.Path2D New(Union<dom.Path2D, string> d);

      [Template("new {this}({0})")]
      public abstract dom.Path2D New(dom.Path2D d);

      [Template("new {this}({0})")]
      public abstract dom.Path2D New(string d);
    }

    [Virtual]
    public abstract class PaymentAddressTypeConfig : IObject
    {
      private dom.PaymentAddress _prototype_BackingField;

      public virtual dom.PaymentAddress prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PaymentAddress New();
    }

    [Virtual]
    public abstract class PaymentRequestTypeConfig : IObject
    {
      private dom.PaymentRequest _prototype_BackingField;

      public virtual dom.PaymentRequest prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.PaymentRequest New(
        dom.PaymentMethodData[] methodData,
        dom.PaymentDetailsInit details);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.PaymentRequest New(
        dom.PaymentMethodData[] methodData,
        dom.PaymentDetailsInit details,
        dom.PaymentOptions options);
    }

    [Virtual]
    public abstract class PaymentRequestUpdateEventTypeConfig : IObject
    {
      private dom.PaymentRequestUpdateEvent _prototype_BackingField;

      public virtual dom.PaymentRequestUpdateEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.PaymentRequestUpdateEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.PaymentRequestUpdateEvent New(
        string type,
        dom.PaymentRequestUpdateEventInit eventInitDict);
    }

    [Virtual]
    public abstract class PaymentResponseTypeConfig : IObject
    {
      private dom.PaymentResponse _prototype_BackingField;

      public virtual dom.PaymentResponse prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PaymentResponse New();
    }

    [Virtual]
    public abstract class PerfWidgetExternalTypeConfig : IObject
    {
      private dom.PerfWidgetExternal _prototype_BackingField;

      public virtual dom.PerfWidgetExternal prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PerfWidgetExternal New();
    }

    [Virtual]
    public abstract class PerformanceTypeConfig : IObject
    {
      private dom.Performance _prototype_BackingField;

      public virtual dom.Performance prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Performance New();
    }

    [Virtual]
    public abstract class PerformanceEntryTypeConfig : IObject
    {
      private dom.PerformanceEntry _prototype_BackingField;

      public virtual dom.PerformanceEntry prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PerformanceEntry New();
    }

    [Virtual]
    public abstract class PerformanceMarkTypeConfig : IObject
    {
      private dom.PerformanceMark _prototype_BackingField;

      public virtual dom.PerformanceMark prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PerformanceMark New();
    }

    [Virtual]
    public abstract class PerformanceMeasureTypeConfig : IObject
    {
      private dom.PerformanceMeasure _prototype_BackingField;

      public virtual dom.PerformanceMeasure prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PerformanceMeasure New();
    }

    [Virtual]
    public abstract class PerformanceNavigationTypeConfig : IObject
    {
      private dom.PerformanceNavigation _prototype_BackingField;

      public virtual dom.PerformanceNavigation prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PerformanceNavigation New();

      public abstract ushort TYPE_BACK_FORWARD { get; }

      public abstract ushort TYPE_NAVIGATE { get; }

      public abstract ushort TYPE_RELOAD { get; }

      public abstract ushort TYPE_RESERVED { get; }
    }

    [Virtual]
    public abstract class PerformanceNavigationTimingTypeConfig : IObject
    {
      private dom.PerformanceNavigationTiming _prototype_BackingField;

      public virtual dom.PerformanceNavigationTiming prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PerformanceNavigationTiming New();
    }

    [Virtual]
    public abstract class PerformanceResourceTimingTypeConfig : IObject
    {
      private dom.PerformanceResourceTiming _prototype_BackingField;

      public virtual dom.PerformanceResourceTiming prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PerformanceResourceTiming New();
    }

    [Virtual]
    public abstract class PerformanceTimingTypeConfig : IObject
    {
      private dom.PerformanceTiming _prototype_BackingField;

      public virtual dom.PerformanceTiming prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PerformanceTiming New();
    }

    [Virtual]
    public abstract class PeriodicWaveTypeConfig : IObject
    {
      private dom.PeriodicWave _prototype_BackingField;

      public virtual dom.PeriodicWave prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PeriodicWave New();
    }

    [Virtual]
    public abstract class PermissionRequestTypeConfig : IObject
    {
      private dom.PermissionRequest _prototype_BackingField;

      public virtual dom.PermissionRequest prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PermissionRequest New();
    }

    [Virtual]
    public abstract class PermissionRequestedEventTypeConfig : IObject
    {
      private dom.PermissionRequestedEvent _prototype_BackingField;

      public virtual dom.PermissionRequestedEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PermissionRequestedEvent New();
    }

    [Virtual]
    public abstract class PluginTypeConfig : IObject
    {
      private dom.Plugin _prototype_BackingField;

      public virtual dom.Plugin prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Plugin New();
    }

    [Virtual]
    public abstract class PluginArrayTypeConfig : IObject
    {
      private dom.PluginArray _prototype_BackingField;

      public virtual dom.PluginArray prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PluginArray New();
    }

    [Virtual]
    public abstract class PointerEventTypeConfig : IObject
    {
      private dom.PointerEvent _prototype_BackingField;

      public virtual dom.PointerEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.PointerEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.PointerEvent New(string typeArg, dom.PointerEventInit eventInitDict);
    }

    [Virtual]
    public abstract class PopStateEventTypeConfig : IObject
    {
      private dom.PopStateEvent _prototype_BackingField;

      public virtual dom.PopStateEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.PopStateEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.PopStateEvent New(string type, dom.PopStateEventInit eventInitDict);
    }

    [Virtual]
    public abstract class PositionTypeConfig : IObject
    {
      private dom.Position _prototype_BackingField;

      public virtual dom.Position prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Position New();
    }

    [Virtual]
    public abstract class PositionErrorTypeConfig : IObject
    {
      private dom.PositionError _prototype_BackingField;

      public virtual dom.PositionError prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PositionError New();

      public abstract double PERMISSION_DENIED { get; }

      public abstract double POSITION_UNAVAILABLE { get; }

      public abstract double TIMEOUT { get; }
    }

    [Virtual]
    public abstract class ProcessingInstructionTypeConfig : IObject
    {
      private dom.ProcessingInstruction _prototype_BackingField;

      public virtual dom.ProcessingInstruction prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ProcessingInstruction New();
    }

    [Virtual]
    public abstract class ProgressEventTypeConfig : IObject
    {
      private dom.ProgressEvent _prototype_BackingField;

      public virtual dom.ProgressEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.ProgressEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.ProgressEvent New(string typeArg, dom.ProgressEventInit eventInitDict);
    }

    [Virtual]
    public abstract class PushManagerTypeConfig : IObject
    {
      private dom.PushManager _prototype_BackingField;

      public virtual dom.PushManager prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PushManager New();
    }

    [Virtual]
    public abstract class PushSubscriptionTypeConfig : IObject
    {
      private dom.PushSubscription _prototype_BackingField;

      public virtual dom.PushSubscription prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PushSubscription New();
    }

    [Virtual]
    public abstract class PushSubscriptionOptionsTypeConfig : IObject
    {
      private dom.PushSubscriptionOptions _prototype_BackingField;

      public virtual dom.PushSubscriptionOptions prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.PushSubscriptionOptions New();
    }

    [Virtual]
    public abstract class RTCDTMFToneChangeEventTypeConfig : IObject
    {
      private dom.RTCDTMFToneChangeEvent _prototype_BackingField;

      public virtual dom.RTCDTMFToneChangeEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.RTCDTMFToneChangeEvent New(
        string typeArg,
        dom.RTCDTMFToneChangeEventInit eventInitDict);
    }

    [Virtual]
    public abstract class RTCDtlsTransportTypeConfig : IObject
    {
      private dom.RTCDtlsTransport _prototype_BackingField;

      public virtual dom.RTCDtlsTransport prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.RTCDtlsTransport New(dom.RTCIceTransport transport);
    }

    [Virtual]
    public abstract class RTCDtlsTransportStateChangedEventTypeConfig : IObject
    {
      private dom.RTCDtlsTransportStateChangedEvent _prototype_BackingField;

      public virtual dom.RTCDtlsTransportStateChangedEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RTCDtlsTransportStateChangedEvent New();
    }

    [Virtual]
    public abstract class RTCDtmfSenderTypeConfig : IObject
    {
      private dom.RTCDtmfSender _prototype_BackingField;

      public virtual dom.RTCDtmfSender prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.RTCDtmfSender New(dom.RTCRtpSender sender);
    }

    [Virtual]
    public abstract class RTCIceCandidateType2Config : IObject
    {
      private dom.RTCIceCandidate _prototype_BackingField;

      public virtual dom.RTCIceCandidate prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RTCIceCandidate New();

      [Template("new {this}({0})")]
      public abstract dom.RTCIceCandidate New(dom.RTCIceCandidateInit candidateInitDict);
    }

    [Virtual]
    public abstract class RTCIceCandidatePairChangedEventTypeConfig : IObject
    {
      private dom.RTCIceCandidatePairChangedEvent _prototype_BackingField;

      public virtual dom.RTCIceCandidatePairChangedEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RTCIceCandidatePairChangedEvent New();
    }

    [Virtual]
    public abstract class RTCIceGathererTypeConfig : IObject
    {
      private dom.RTCIceGatherer _prototype_BackingField;

      public virtual dom.RTCIceGatherer prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.RTCIceGatherer New(dom.RTCIceGatherOptions options);
    }

    [Virtual]
    public abstract class RTCIceGathererEventTypeConfig : IObject
    {
      private dom.RTCIceGathererEvent _prototype_BackingField;

      public virtual dom.RTCIceGathererEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RTCIceGathererEvent New();
    }

    [Virtual]
    public abstract class RTCIceTransportTypeConfig : IObject
    {
      private dom.RTCIceTransport _prototype_BackingField;

      public virtual dom.RTCIceTransport prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RTCIceTransport New();
    }

    [Virtual]
    public abstract class RTCIceTransportStateChangedEventTypeConfig : IObject
    {
      private dom.RTCIceTransportStateChangedEvent _prototype_BackingField;

      public virtual dom.RTCIceTransportStateChangedEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RTCIceTransportStateChangedEvent New();
    }

    [Virtual]
    public abstract class RTCPeerConnectionTypeConfig : IObject
    {
      private dom.RTCPeerConnection _prototype_BackingField;

      public virtual dom.RTCPeerConnection prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.RTCPeerConnection New(dom.RTCConfiguration configuration);
    }

    [Virtual]
    public abstract class RTCPeerConnectionIceEventTypeConfig : IObject
    {
      private dom.RTCPeerConnectionIceEvent _prototype_BackingField;

      public virtual dom.RTCPeerConnectionIceEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.RTCPeerConnectionIceEvent New(
        string type,
        dom.RTCPeerConnectionIceEventInit eventInitDict);
    }

    [Virtual]
    public abstract class RTCRtpReceiverTypeConfig : IObject
    {
      private dom.RTCRtpReceiver _prototype_BackingField;

      public virtual dom.RTCRtpReceiver prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.RTCRtpReceiver New(
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
        string kind);

      [Template("new {this}({0}, {1})")]
      public abstract dom.RTCRtpReceiver New(dom.RTCDtlsTransport transport, string kind);

      [Template("new {this}({0}, {1})")]
      public abstract dom.RTCRtpReceiver New(dom.RTCSrtpSdesTransport transport, string kind);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.RTCRtpReceiver New(
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
        string kind,
        dom.RTCDtlsTransport rtcpTransport);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.RTCRtpReceiver New(
        dom.RTCDtlsTransport transport,
        string kind,
        dom.RTCDtlsTransport rtcpTransport);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.RTCRtpReceiver New(
        dom.RTCSrtpSdesTransport transport,
        string kind,
        dom.RTCDtlsTransport rtcpTransport);

      public abstract dom.RTCRtpCapabilities getCapabilities();

      public abstract dom.RTCRtpCapabilities getCapabilities(string kind);
    }

    [Virtual]
    public abstract class RTCRtpSenderTypeConfig : IObject
    {
      private dom.RTCRtpSender _prototype_BackingField;

      public virtual dom.RTCRtpSender prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.RTCRtpSender New(
        dom.MediaStreamTrack track,
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport);

      [Template("new {this}({0}, {1})")]
      public abstract dom.RTCRtpSender New(
        dom.MediaStreamTrack track,
        dom.RTCDtlsTransport transport);

      [Template("new {this}({0}, {1})")]
      public abstract dom.RTCRtpSender New(
        dom.MediaStreamTrack track,
        dom.RTCSrtpSdesTransport transport);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.RTCRtpSender New(
        dom.MediaStreamTrack track,
        Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
        dom.RTCDtlsTransport rtcpTransport);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.RTCRtpSender New(
        dom.MediaStreamTrack track,
        dom.RTCDtlsTransport transport,
        dom.RTCDtlsTransport rtcpTransport);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.RTCRtpSender New(
        dom.MediaStreamTrack track,
        dom.RTCSrtpSdesTransport transport,
        dom.RTCDtlsTransport rtcpTransport);

      public abstract dom.RTCRtpCapabilities getCapabilities();

      public abstract dom.RTCRtpCapabilities getCapabilities(string kind);
    }

    [Virtual]
    public abstract class RTCSessionDescriptionTypeConfig : IObject
    {
      private dom.RTCSessionDescription _prototype_BackingField;

      public virtual dom.RTCSessionDescription prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RTCSessionDescription New();

      [Template("new {this}({0})")]
      public abstract dom.RTCSessionDescription New(
        dom.RTCSessionDescriptionInit descriptionInitDict);
    }

    [Virtual]
    public abstract class RTCSrtpSdesTransportTypeConfig : IObject
    {
      private dom.RTCSrtpSdesTransport _prototype_BackingField;

      public virtual dom.RTCSrtpSdesTransport prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.RTCSrtpSdesTransport New(
        dom.RTCIceTransport transport,
        dom.RTCSrtpSdesParameters encryptParameters,
        dom.RTCSrtpSdesParameters decryptParameters);

      public abstract dom.RTCSrtpSdesParameters[] getLocalParameters();
    }

    [Virtual]
    public abstract class RTCSsrcConflictEventTypeConfig : IObject
    {
      private dom.RTCSsrcConflictEvent _prototype_BackingField;

      public virtual dom.RTCSsrcConflictEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RTCSsrcConflictEvent New();
    }

    [Virtual]
    public abstract class RTCStatsProviderTypeConfig : IObject
    {
      private dom.RTCStatsProvider _prototype_BackingField;

      public virtual dom.RTCStatsProvider prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RTCStatsProvider New();
    }

    [Virtual]
    public abstract class RandomSourceTypeConfig : IObject
    {
      private dom.RandomSource _prototype_BackingField;

      public virtual dom.RandomSource prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.RandomSource New();
    }

    [Virtual]
    public abstract class RangeTypeConfig : IObject
    {
      private dom.Range _prototype_BackingField;

      public virtual dom.Range prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Range New();

      public abstract ushort END_TO_END { get; }

      public abstract ushort END_TO_START { get; }

      public abstract ushort START_TO_END { get; }

      public abstract ushort START_TO_START { get; }
    }

    [Virtual]
    public abstract class ReadableStreamTypeConfig : IObject
    {
      private dom.ReadableStream _prototype_BackingField;

      public virtual dom.ReadableStream prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ReadableStream New();
    }

    [Virtual]
    public abstract class ReadableStreamReaderTypeConfig : IObject
    {
      private dom.ReadableStreamReader _prototype_BackingField;

      public virtual dom.ReadableStreamReader prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ReadableStreamReader New();
    }

    [Virtual]
    public abstract class RequestType2Config : IObject
    {
      private dom.Request _prototype_BackingField;

      public virtual dom.Request prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.Request New(Union<dom.Request, string> input);

      [Template("new {this}({0})")]
      public abstract dom.Request New(dom.Request input);

      [Template("new {this}({0})")]
      public abstract dom.Request New(string input);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Request New(Union<dom.Request, string> input, dom.RequestInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Request New(dom.Request input, dom.RequestInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Request New(string input, dom.RequestInit init);
    }

    [Virtual]
    public abstract class ResponseType2Config : IObject
    {
      private dom.Response _prototype_BackingField;

      public virtual dom.Response prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Response New();

      [Template("new {this}({0})")]
      public abstract dom.Response New(
        Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(dom.Blob body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.Int8Array body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.Int16Array body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.Int32Array body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.Uint8Array body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.Uint16Array body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.Uint32Array body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.Uint8ClampedArray body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.Float32Array body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.Float64Array body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.DataView body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(es5.ArrayBuffer body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(dom.FormData body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(string body);

      [Template("new {this}({0})")]
      public abstract dom.Response New(Null body);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(
        Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body,
        dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(dom.Blob body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.Int8Array body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.Int16Array body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.Int32Array body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.Uint8Array body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.Uint16Array body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.Uint32Array body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.Uint8ClampedArray body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.Float32Array body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.Float64Array body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.DataView body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(es5.ArrayBuffer body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(dom.FormData body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(string body, dom.ResponseInit init);

      [Template("new {this}({0}, {1})")]
      public abstract dom.Response New(Null body, dom.ResponseInit init);

      public abstract dom.Response error();

      public abstract dom.Response redirect(string url);

      public abstract dom.Response redirect(string url, ushort status);
    }

    [Virtual]
    public abstract class SVGAElementTypeConfig : IObject
    {
      private dom.SVGAElement _prototype_BackingField;

      public virtual dom.SVGAElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAElement New();
    }

    [Virtual]
    public abstract class SVGAngleTypeConfig : IObject
    {
      private dom.SVGAngle _prototype_BackingField;

      public virtual dom.SVGAngle prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAngle New();

      public abstract ushort SVG_ANGLETYPE_DEG { get; }

      public abstract ushort SVG_ANGLETYPE_GRAD { get; }

      public abstract ushort SVG_ANGLETYPE_RAD { get; }

      public abstract ushort SVG_ANGLETYPE_UNKNOWN { get; }

      public abstract ushort SVG_ANGLETYPE_UNSPECIFIED { get; }
    }

    [Virtual]
    public abstract class SVGAnimatedAngleTypeConfig : IObject
    {
      private dom.SVGAnimatedAngle _prototype_BackingField;

      public virtual dom.SVGAnimatedAngle prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedAngle New();
    }

    [Virtual]
    public abstract class SVGAnimatedBooleanTypeConfig : IObject
    {
      private dom.SVGAnimatedBoolean _prototype_BackingField;

      public virtual dom.SVGAnimatedBoolean prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedBoolean New();
    }

    [Virtual]
    public abstract class SVGAnimatedEnumerationTypeConfig : IObject
    {
      private dom.SVGAnimatedEnumeration _prototype_BackingField;

      public virtual dom.SVGAnimatedEnumeration prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedEnumeration New();
    }

    [Virtual]
    public abstract class SVGAnimatedIntegerTypeConfig : IObject
    {
      private dom.SVGAnimatedInteger _prototype_BackingField;

      public virtual dom.SVGAnimatedInteger prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedInteger New();
    }

    [Virtual]
    public abstract class SVGAnimatedLengthTypeConfig : IObject
    {
      private dom.SVGAnimatedLength _prototype_BackingField;

      public virtual dom.SVGAnimatedLength prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedLength New();
    }

    [Virtual]
    public abstract class SVGAnimatedLengthListTypeConfig : IObject
    {
      private dom.SVGAnimatedLengthList _prototype_BackingField;

      public virtual dom.SVGAnimatedLengthList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedLengthList New();
    }

    [Virtual]
    public abstract class SVGAnimatedNumberTypeConfig : IObject
    {
      private dom.SVGAnimatedNumber _prototype_BackingField;

      public virtual dom.SVGAnimatedNumber prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedNumber New();
    }

    [Virtual]
    public abstract class SVGAnimatedNumberListTypeConfig : IObject
    {
      private dom.SVGAnimatedNumberList _prototype_BackingField;

      public virtual dom.SVGAnimatedNumberList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedNumberList New();
    }

    [Virtual]
    public abstract class SVGAnimatedPreserveAspectRatioTypeConfig : IObject
    {
      private dom.SVGAnimatedPreserveAspectRatio _prototype_BackingField;

      public virtual dom.SVGAnimatedPreserveAspectRatio prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedPreserveAspectRatio New();
    }

    [Virtual]
    public abstract class SVGAnimatedRectTypeConfig : IObject
    {
      private dom.SVGAnimatedRect _prototype_BackingField;

      public virtual dom.SVGAnimatedRect prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedRect New();
    }

    [Virtual]
    public abstract class SVGAnimatedStringTypeConfig : IObject
    {
      private dom.SVGAnimatedString _prototype_BackingField;

      public virtual dom.SVGAnimatedString prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedString New();
    }

    [Virtual]
    public abstract class SVGAnimatedTransformListTypeConfig : IObject
    {
      private dom.SVGAnimatedTransformList _prototype_BackingField;

      public virtual dom.SVGAnimatedTransformList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGAnimatedTransformList New();
    }

    [Virtual]
    public abstract class SVGCircleElementTypeConfig : IObject
    {
      private dom.SVGCircleElement _prototype_BackingField;

      public virtual dom.SVGCircleElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGCircleElement New();
    }

    [Virtual]
    public abstract class SVGClipPathElementTypeConfig : IObject
    {
      private dom.SVGClipPathElement _prototype_BackingField;

      public virtual dom.SVGClipPathElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGClipPathElement New();
    }

    [Virtual]
    public abstract class SVGComponentTransferFunctionElementTypeConfig : IObject
    {
      private dom.SVGComponentTransferFunctionElement _prototype_BackingField;

      public virtual dom.SVGComponentTransferFunctionElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGComponentTransferFunctionElement New();

      public abstract double SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE { get; }

      public abstract double SVG_FECOMPONENTTRANSFER_TYPE_GAMMA { get; }

      public abstract double SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY { get; }

      public abstract double SVG_FECOMPONENTTRANSFER_TYPE_LINEAR { get; }

      public abstract double SVG_FECOMPONENTTRANSFER_TYPE_TABLE { get; }

      public abstract double SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGDefsElementTypeConfig : IObject
    {
      private dom.SVGDefsElement _prototype_BackingField;

      public virtual dom.SVGDefsElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGDefsElement New();
    }

    [Virtual]
    public abstract class SVGDescElementTypeConfig : IObject
    {
      private dom.SVGDescElement _prototype_BackingField;

      public virtual dom.SVGDescElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGDescElement New();
    }

    [Virtual]
    public abstract class SVGElementTypeConfig : IObject
    {
      private dom.SVGElement _prototype_BackingField;

      public virtual dom.SVGElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGElement New();
    }

    [Virtual]
    public abstract class SVGElementInstanceTypeConfig : IObject
    {
      private dom.SVGElementInstance _prototype_BackingField;

      public virtual dom.SVGElementInstance prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGElementInstance New();
    }

    [Virtual]
    public abstract class SVGElementInstanceListTypeConfig : IObject
    {
      private dom.SVGElementInstanceList _prototype_BackingField;

      public virtual dom.SVGElementInstanceList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGElementInstanceList New();
    }

    [Virtual]
    public abstract class SVGEllipseElementTypeConfig : IObject
    {
      private dom.SVGEllipseElement _prototype_BackingField;

      public virtual dom.SVGEllipseElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGEllipseElement New();
    }

    [Virtual]
    public abstract class SVGFEBlendElementTypeConfig : IObject
    {
      private dom.SVGFEBlendElement _prototype_BackingField;

      public virtual dom.SVGFEBlendElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEBlendElement New();

      public abstract double SVG_FEBLEND_MODE_COLOR { get; }

      public abstract double SVG_FEBLEND_MODE_COLOR_BURN { get; }

      public abstract double SVG_FEBLEND_MODE_COLOR_DODGE { get; }

      public abstract double SVG_FEBLEND_MODE_DARKEN { get; }

      public abstract double SVG_FEBLEND_MODE_DIFFERENCE { get; }

      public abstract double SVG_FEBLEND_MODE_EXCLUSION { get; }

      public abstract double SVG_FEBLEND_MODE_HARD_LIGHT { get; }

      public abstract double SVG_FEBLEND_MODE_HUE { get; }

      public abstract double SVG_FEBLEND_MODE_LIGHTEN { get; }

      public abstract double SVG_FEBLEND_MODE_LUMINOSITY { get; }

      public abstract double SVG_FEBLEND_MODE_MULTIPLY { get; }

      public abstract double SVG_FEBLEND_MODE_NORMAL { get; }

      public abstract double SVG_FEBLEND_MODE_OVERLAY { get; }

      public abstract double SVG_FEBLEND_MODE_SATURATION { get; }

      public abstract double SVG_FEBLEND_MODE_SCREEN { get; }

      public abstract double SVG_FEBLEND_MODE_SOFT_LIGHT { get; }

      public abstract double SVG_FEBLEND_MODE_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGFEColorMatrixElementTypeConfig : IObject
    {
      private dom.SVGFEColorMatrixElement _prototype_BackingField;

      public virtual dom.SVGFEColorMatrixElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEColorMatrixElement New();

      public abstract double SVG_FECOLORMATRIX_TYPE_HUEROTATE { get; }

      public abstract double SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA { get; }

      public abstract double SVG_FECOLORMATRIX_TYPE_MATRIX { get; }

      public abstract double SVG_FECOLORMATRIX_TYPE_SATURATE { get; }

      public abstract double SVG_FECOLORMATRIX_TYPE_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGFEComponentTransferElementTypeConfig : IObject
    {
      private dom.SVGFEComponentTransferElement _prototype_BackingField;

      public virtual dom.SVGFEComponentTransferElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEComponentTransferElement New();
    }

    [Virtual]
    public abstract class SVGFECompositeElementTypeConfig : IObject
    {
      private dom.SVGFECompositeElement _prototype_BackingField;

      public virtual dom.SVGFECompositeElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFECompositeElement New();

      public abstract double SVG_FECOMPOSITE_OPERATOR_ARITHMETIC { get; }

      public abstract double SVG_FECOMPOSITE_OPERATOR_ATOP { get; }

      public abstract double SVG_FECOMPOSITE_OPERATOR_IN { get; }

      public abstract double SVG_FECOMPOSITE_OPERATOR_OUT { get; }

      public abstract double SVG_FECOMPOSITE_OPERATOR_OVER { get; }

      public abstract double SVG_FECOMPOSITE_OPERATOR_UNKNOWN { get; }

      public abstract double SVG_FECOMPOSITE_OPERATOR_XOR { get; }
    }

    [Virtual]
    public abstract class SVGFEConvolveMatrixElementTypeConfig : IObject
    {
      private dom.SVGFEConvolveMatrixElement _prototype_BackingField;

      public virtual dom.SVGFEConvolveMatrixElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEConvolveMatrixElement New();

      public abstract double SVG_EDGEMODE_DUPLICATE { get; }

      public abstract double SVG_EDGEMODE_NONE { get; }

      public abstract double SVG_EDGEMODE_UNKNOWN { get; }

      public abstract double SVG_EDGEMODE_WRAP { get; }
    }

    [Virtual]
    public abstract class SVGFEDiffuseLightingElementTypeConfig : IObject
    {
      private dom.SVGFEDiffuseLightingElement _prototype_BackingField;

      public virtual dom.SVGFEDiffuseLightingElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEDiffuseLightingElement New();
    }

    [Virtual]
    public abstract class SVGFEDisplacementMapElementTypeConfig : IObject
    {
      private dom.SVGFEDisplacementMapElement _prototype_BackingField;

      public virtual dom.SVGFEDisplacementMapElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEDisplacementMapElement New();

      public abstract double SVG_CHANNEL_A { get; }

      public abstract double SVG_CHANNEL_B { get; }

      public abstract double SVG_CHANNEL_G { get; }

      public abstract double SVG_CHANNEL_R { get; }

      public abstract double SVG_CHANNEL_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGFEDistantLightElementTypeConfig : IObject
    {
      private dom.SVGFEDistantLightElement _prototype_BackingField;

      public virtual dom.SVGFEDistantLightElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEDistantLightElement New();
    }

    [Virtual]
    public abstract class SVGFEFloodElementTypeConfig : IObject
    {
      private dom.SVGFEFloodElement _prototype_BackingField;

      public virtual dom.SVGFEFloodElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEFloodElement New();
    }

    [Virtual]
    public abstract class SVGFEFuncAElementTypeConfig : IObject
    {
      private dom.SVGFEFuncAElement _prototype_BackingField;

      public virtual dom.SVGFEFuncAElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEFuncAElement New();
    }

    [Virtual]
    public abstract class SVGFEFuncBElementTypeConfig : IObject
    {
      private dom.SVGFEFuncBElement _prototype_BackingField;

      public virtual dom.SVGFEFuncBElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEFuncBElement New();
    }

    [Virtual]
    public abstract class SVGFEFuncGElementTypeConfig : IObject
    {
      private dom.SVGFEFuncGElement _prototype_BackingField;

      public virtual dom.SVGFEFuncGElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEFuncGElement New();
    }

    [Virtual]
    public abstract class SVGFEFuncRElementTypeConfig : IObject
    {
      private dom.SVGFEFuncRElement _prototype_BackingField;

      public virtual dom.SVGFEFuncRElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEFuncRElement New();
    }

    [Virtual]
    public abstract class SVGFEGaussianBlurElementTypeConfig : IObject
    {
      private dom.SVGFEGaussianBlurElement _prototype_BackingField;

      public virtual dom.SVGFEGaussianBlurElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEGaussianBlurElement New();
    }

    [Virtual]
    public abstract class SVGFEImageElementTypeConfig : IObject
    {
      private dom.SVGFEImageElement _prototype_BackingField;

      public virtual dom.SVGFEImageElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEImageElement New();
    }

    [Virtual]
    public abstract class SVGFEMergeElementTypeConfig : IObject
    {
      private dom.SVGFEMergeElement _prototype_BackingField;

      public virtual dom.SVGFEMergeElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEMergeElement New();
    }

    [Virtual]
    public abstract class SVGFEMergeNodeElementTypeConfig : IObject
    {
      private dom.SVGFEMergeNodeElement _prototype_BackingField;

      public virtual dom.SVGFEMergeNodeElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEMergeNodeElement New();
    }

    [Virtual]
    public abstract class SVGFEMorphologyElementTypeConfig : IObject
    {
      private dom.SVGFEMorphologyElement _prototype_BackingField;

      public virtual dom.SVGFEMorphologyElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEMorphologyElement New();

      public abstract double SVG_MORPHOLOGY_OPERATOR_DILATE { get; }

      public abstract double SVG_MORPHOLOGY_OPERATOR_ERODE { get; }

      public abstract double SVG_MORPHOLOGY_OPERATOR_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGFEOffsetElementTypeConfig : IObject
    {
      private dom.SVGFEOffsetElement _prototype_BackingField;

      public virtual dom.SVGFEOffsetElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEOffsetElement New();
    }

    [Virtual]
    public abstract class SVGFEPointLightElementTypeConfig : IObject
    {
      private dom.SVGFEPointLightElement _prototype_BackingField;

      public virtual dom.SVGFEPointLightElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFEPointLightElement New();
    }

    [Virtual]
    public abstract class SVGFESpecularLightingElementTypeConfig : IObject
    {
      private dom.SVGFESpecularLightingElement _prototype_BackingField;

      public virtual dom.SVGFESpecularLightingElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFESpecularLightingElement New();
    }

    [Virtual]
    public abstract class SVGFESpotLightElementTypeConfig : IObject
    {
      private dom.SVGFESpotLightElement _prototype_BackingField;

      public virtual dom.SVGFESpotLightElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFESpotLightElement New();
    }

    [Virtual]
    public abstract class SVGFETileElementTypeConfig : IObject
    {
      private dom.SVGFETileElement _prototype_BackingField;

      public virtual dom.SVGFETileElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFETileElement New();
    }

    [Virtual]
    public abstract class SVGFETurbulenceElementTypeConfig : IObject
    {
      private dom.SVGFETurbulenceElement _prototype_BackingField;

      public virtual dom.SVGFETurbulenceElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFETurbulenceElement New();

      public abstract double SVG_STITCHTYPE_NOSTITCH { get; }

      public abstract double SVG_STITCHTYPE_STITCH { get; }

      public abstract double SVG_STITCHTYPE_UNKNOWN { get; }

      public abstract double SVG_TURBULENCE_TYPE_FRACTALNOISE { get; }

      public abstract double SVG_TURBULENCE_TYPE_TURBULENCE { get; }

      public abstract double SVG_TURBULENCE_TYPE_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGFilterElementTypeConfig : IObject
    {
      private dom.SVGFilterElement _prototype_BackingField;

      public virtual dom.SVGFilterElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGFilterElement New();
    }

    [Virtual]
    public abstract class SVGForeignObjectElementTypeConfig : IObject
    {
      private dom.SVGForeignObjectElement _prototype_BackingField;

      public virtual dom.SVGForeignObjectElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGForeignObjectElement New();
    }

    [Virtual]
    public abstract class SVGGElementTypeConfig : IObject
    {
      private dom.SVGGElement _prototype_BackingField;

      public virtual dom.SVGGElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGGElement New();
    }

    [Virtual]
    public abstract class SVGGradientElementTypeConfig : IObject
    {
      private dom.SVGGradientElement _prototype_BackingField;

      public virtual dom.SVGGradientElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGGradientElement New();

      public abstract ushort SVG_SPREADMETHOD_PAD { get; }

      public abstract ushort SVG_SPREADMETHOD_REFLECT { get; }

      public abstract ushort SVG_SPREADMETHOD_REPEAT { get; }

      public abstract ushort SVG_SPREADMETHOD_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGGraphicsElementTypeConfig : IObject
    {
      private dom.SVGGraphicsElement _prototype_BackingField;

      public virtual dom.SVGGraphicsElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGGraphicsElement New();
    }

    [Virtual]
    public abstract class SVGImageElementTypeConfig : IObject
    {
      private dom.SVGImageElement _prototype_BackingField;

      public virtual dom.SVGImageElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGImageElement New();
    }

    [Virtual]
    public abstract class SVGLengthTypeConfig : IObject
    {
      private dom.SVGLength _prototype_BackingField;

      public virtual dom.SVGLength prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGLength New();

      public abstract ushort SVG_LENGTHTYPE_CM { get; }

      public abstract ushort SVG_LENGTHTYPE_EMS { get; }

      public abstract ushort SVG_LENGTHTYPE_EXS { get; }

      public abstract ushort SVG_LENGTHTYPE_IN { get; }

      public abstract ushort SVG_LENGTHTYPE_MM { get; }

      public abstract ushort SVG_LENGTHTYPE_NUMBER { get; }

      public abstract ushort SVG_LENGTHTYPE_PC { get; }

      public abstract ushort SVG_LENGTHTYPE_PERCENTAGE { get; }

      public abstract ushort SVG_LENGTHTYPE_PT { get; }

      public abstract ushort SVG_LENGTHTYPE_PX { get; }

      public abstract ushort SVG_LENGTHTYPE_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGLengthListTypeConfig : IObject
    {
      private dom.SVGLengthList _prototype_BackingField;

      public virtual dom.SVGLengthList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGLengthList New();
    }

    [Virtual]
    public abstract class SVGLineElementTypeConfig : IObject
    {
      private dom.SVGLineElement _prototype_BackingField;

      public virtual dom.SVGLineElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGLineElement New();
    }

    [Virtual]
    public abstract class SVGLinearGradientElementTypeConfig : IObject
    {
      private dom.SVGLinearGradientElement _prototype_BackingField;

      public virtual dom.SVGLinearGradientElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGLinearGradientElement New();
    }

    [Virtual]
    public abstract class SVGMarkerElementTypeConfig : IObject
    {
      private dom.SVGMarkerElement _prototype_BackingField;

      public virtual dom.SVGMarkerElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGMarkerElement New();

      public abstract ushort SVG_MARKERUNITS_STROKEWIDTH { get; }

      public abstract ushort SVG_MARKERUNITS_UNKNOWN { get; }

      public abstract ushort SVG_MARKERUNITS_USERSPACEONUSE { get; }

      public abstract ushort SVG_MARKER_ORIENT_ANGLE { get; }

      public abstract ushort SVG_MARKER_ORIENT_AUTO { get; }

      public abstract ushort SVG_MARKER_ORIENT_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGMaskElementTypeConfig : IObject
    {
      private dom.SVGMaskElement _prototype_BackingField;

      public virtual dom.SVGMaskElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGMaskElement New();
    }

    [Virtual]
    public abstract class SVGMatrixTypeConfig : IObject
    {
      private dom.SVGMatrix _prototype_BackingField;

      public virtual dom.SVGMatrix prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGMatrix New();
    }

    [Virtual]
    public abstract class SVGMetadataElementTypeConfig : IObject
    {
      private dom.SVGMetadataElement _prototype_BackingField;

      public virtual dom.SVGMetadataElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGMetadataElement New();
    }

    [Virtual]
    public abstract class SVGNumberTypeConfig : IObject
    {
      private dom.SVGNumber _prototype_BackingField;

      public virtual dom.SVGNumber prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGNumber New();
    }

    [Virtual]
    public abstract class SVGNumberListTypeConfig : IObject
    {
      private dom.SVGNumberList _prototype_BackingField;

      public virtual dom.SVGNumberList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGNumberList New();
    }

    [Virtual]
    public abstract class SVGPathElementTypeConfig : IObject
    {
      private dom.SVGPathElement _prototype_BackingField;

      public virtual dom.SVGPathElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathElement New();
    }

    [Virtual]
    public abstract class SVGPathSegTypeConfig : IObject
    {
      private dom.SVGPathSeg _prototype_BackingField;

      public virtual dom.SVGPathSeg prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSeg New();

      public abstract double PATHSEG_ARC_ABS { get; }

      public abstract double PATHSEG_ARC_REL { get; }

      public abstract double PATHSEG_CLOSEPATH { get; }

      public abstract double PATHSEG_CURVETO_CUBIC_ABS { get; }

      public abstract double PATHSEG_CURVETO_CUBIC_REL { get; }

      public abstract double PATHSEG_CURVETO_CUBIC_SMOOTH_ABS { get; }

      public abstract double PATHSEG_CURVETO_CUBIC_SMOOTH_REL { get; }

      public abstract double PATHSEG_CURVETO_QUADRATIC_ABS { get; }

      public abstract double PATHSEG_CURVETO_QUADRATIC_REL { get; }

      public abstract double PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS { get; }

      public abstract double PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL { get; }

      public abstract double PATHSEG_LINETO_ABS { get; }

      public abstract double PATHSEG_LINETO_HORIZONTAL_ABS { get; }

      public abstract double PATHSEG_LINETO_HORIZONTAL_REL { get; }

      public abstract double PATHSEG_LINETO_REL { get; }

      public abstract double PATHSEG_LINETO_VERTICAL_ABS { get; }

      public abstract double PATHSEG_LINETO_VERTICAL_REL { get; }

      public abstract double PATHSEG_MOVETO_ABS { get; }

      public abstract double PATHSEG_MOVETO_REL { get; }

      public abstract double PATHSEG_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGPathSegArcAbsTypeConfig : IObject
    {
      private dom.SVGPathSegArcAbs _prototype_BackingField;

      public virtual dom.SVGPathSegArcAbs prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegArcAbs New();
    }

    [Virtual]
    public abstract class SVGPathSegArcRelTypeConfig : IObject
    {
      private dom.SVGPathSegArcRel _prototype_BackingField;

      public virtual dom.SVGPathSegArcRel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegArcRel New();
    }

    [Virtual]
    public abstract class SVGPathSegClosePathTypeConfig : IObject
    {
      private dom.SVGPathSegClosePath _prototype_BackingField;

      public virtual dom.SVGPathSegClosePath prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegClosePath New();
    }

    [Virtual]
    public abstract class SVGPathSegCurvetoCubicAbsTypeConfig : IObject
    {
      private dom.SVGPathSegCurvetoCubicAbs _prototype_BackingField;

      public virtual dom.SVGPathSegCurvetoCubicAbs prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegCurvetoCubicAbs New();
    }

    [Virtual]
    public abstract class SVGPathSegCurvetoCubicRelTypeConfig : IObject
    {
      private dom.SVGPathSegCurvetoCubicRel _prototype_BackingField;

      public virtual dom.SVGPathSegCurvetoCubicRel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegCurvetoCubicRel New();
    }

    [Virtual]
    public abstract class SVGPathSegCurvetoCubicSmoothAbsTypeConfig : IObject
    {
      private dom.SVGPathSegCurvetoCubicSmoothAbs _prototype_BackingField;

      public virtual dom.SVGPathSegCurvetoCubicSmoothAbs prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegCurvetoCubicSmoothAbs New();
    }

    [Virtual]
    public abstract class SVGPathSegCurvetoCubicSmoothRelTypeConfig : IObject
    {
      private dom.SVGPathSegCurvetoCubicSmoothRel _prototype_BackingField;

      public virtual dom.SVGPathSegCurvetoCubicSmoothRel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegCurvetoCubicSmoothRel New();
    }

    [Virtual]
    public abstract class SVGPathSegCurvetoQuadraticAbsTypeConfig : IObject
    {
      private dom.SVGPathSegCurvetoQuadraticAbs _prototype_BackingField;

      public virtual dom.SVGPathSegCurvetoQuadraticAbs prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegCurvetoQuadraticAbs New();
    }

    [Virtual]
    public abstract class SVGPathSegCurvetoQuadraticRelTypeConfig : IObject
    {
      private dom.SVGPathSegCurvetoQuadraticRel _prototype_BackingField;

      public virtual dom.SVGPathSegCurvetoQuadraticRel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegCurvetoQuadraticRel New();
    }

    [Virtual]
    public abstract class SVGPathSegCurvetoQuadraticSmoothAbsTypeConfig : IObject
    {
      private dom.SVGPathSegCurvetoQuadraticSmoothAbs _prototype_BackingField;

      public virtual dom.SVGPathSegCurvetoQuadraticSmoothAbs prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegCurvetoQuadraticSmoothAbs New();
    }

    [Virtual]
    public abstract class SVGPathSegCurvetoQuadraticSmoothRelTypeConfig : IObject
    {
      private dom.SVGPathSegCurvetoQuadraticSmoothRel _prototype_BackingField;

      public virtual dom.SVGPathSegCurvetoQuadraticSmoothRel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegCurvetoQuadraticSmoothRel New();
    }

    [Virtual]
    public abstract class SVGPathSegLinetoAbsTypeConfig : IObject
    {
      private dom.SVGPathSegLinetoAbs _prototype_BackingField;

      public virtual dom.SVGPathSegLinetoAbs prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegLinetoAbs New();
    }

    [Virtual]
    public abstract class SVGPathSegLinetoHorizontalAbsTypeConfig : IObject
    {
      private dom.SVGPathSegLinetoHorizontalAbs _prototype_BackingField;

      public virtual dom.SVGPathSegLinetoHorizontalAbs prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegLinetoHorizontalAbs New();
    }

    [Virtual]
    public abstract class SVGPathSegLinetoHorizontalRelTypeConfig : IObject
    {
      private dom.SVGPathSegLinetoHorizontalRel _prototype_BackingField;

      public virtual dom.SVGPathSegLinetoHorizontalRel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegLinetoHorizontalRel New();
    }

    [Virtual]
    public abstract class SVGPathSegLinetoRelTypeConfig : IObject
    {
      private dom.SVGPathSegLinetoRel _prototype_BackingField;

      public virtual dom.SVGPathSegLinetoRel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegLinetoRel New();
    }

    [Virtual]
    public abstract class SVGPathSegLinetoVerticalAbsTypeConfig : IObject
    {
      private dom.SVGPathSegLinetoVerticalAbs _prototype_BackingField;

      public virtual dom.SVGPathSegLinetoVerticalAbs prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegLinetoVerticalAbs New();
    }

    [Virtual]
    public abstract class SVGPathSegLinetoVerticalRelTypeConfig : IObject
    {
      private dom.SVGPathSegLinetoVerticalRel _prototype_BackingField;

      public virtual dom.SVGPathSegLinetoVerticalRel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegLinetoVerticalRel New();
    }

    [Virtual]
    public abstract class SVGPathSegListTypeConfig : IObject
    {
      private dom.SVGPathSegList _prototype_BackingField;

      public virtual dom.SVGPathSegList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegList New();
    }

    [Virtual]
    public abstract class SVGPathSegMovetoAbsTypeConfig : IObject
    {
      private dom.SVGPathSegMovetoAbs _prototype_BackingField;

      public virtual dom.SVGPathSegMovetoAbs prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegMovetoAbs New();
    }

    [Virtual]
    public abstract class SVGPathSegMovetoRelTypeConfig : IObject
    {
      private dom.SVGPathSegMovetoRel _prototype_BackingField;

      public virtual dom.SVGPathSegMovetoRel prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPathSegMovetoRel New();
    }

    [Virtual]
    public abstract class SVGPatternElementTypeConfig : IObject
    {
      private dom.SVGPatternElement _prototype_BackingField;

      public virtual dom.SVGPatternElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPatternElement New();
    }

    [Virtual]
    public abstract class SVGPointTypeConfig : IObject
    {
      private dom.SVGPoint _prototype_BackingField;

      public virtual dom.SVGPoint prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPoint New();
    }

    [Virtual]
    public abstract class SVGPointListTypeConfig : IObject
    {
      private dom.SVGPointList _prototype_BackingField;

      public virtual dom.SVGPointList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPointList New();
    }

    [Virtual]
    public abstract class SVGPolygonElementTypeConfig : IObject
    {
      private dom.SVGPolygonElement _prototype_BackingField;

      public virtual dom.SVGPolygonElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPolygonElement New();
    }

    [Virtual]
    public abstract class SVGPolylineElementTypeConfig : IObject
    {
      private dom.SVGPolylineElement _prototype_BackingField;

      public virtual dom.SVGPolylineElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPolylineElement New();
    }

    [Virtual]
    public abstract class SVGPreserveAspectRatioTypeConfig : IObject
    {
      private dom.SVGPreserveAspectRatio _prototype_BackingField;

      public virtual dom.SVGPreserveAspectRatio prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGPreserveAspectRatio New();

      public abstract ushort SVG_MEETORSLICE_MEET { get; }

      public abstract ushort SVG_MEETORSLICE_SLICE { get; }

      public abstract ushort SVG_MEETORSLICE_UNKNOWN { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_NONE { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_UNKNOWN { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_XMAXYMAX { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_XMAXYMID { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_XMAXYMIN { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_XMIDYMAX { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_XMIDYMID { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_XMIDYMIN { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_XMINYMAX { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_XMINYMID { get; }

      public abstract ushort SVG_PRESERVEASPECTRATIO_XMINYMIN { get; }
    }

    [Virtual]
    public abstract class SVGRadialGradientElementTypeConfig : IObject
    {
      private dom.SVGRadialGradientElement _prototype_BackingField;

      public virtual dom.SVGRadialGradientElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGRadialGradientElement New();
    }

    [Virtual]
    public abstract class SVGRectTypeConfig : IObject
    {
      private dom.SVGRect _prototype_BackingField;

      public virtual dom.SVGRect prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGRect New();
    }

    [Virtual]
    public abstract class SVGRectElementTypeConfig : IObject
    {
      private dom.SVGRectElement _prototype_BackingField;

      public virtual dom.SVGRectElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGRectElement New();
    }

    [Virtual]
    public abstract class SVGSVGElementTypeConfig : IObject
    {
      private dom.SVGSVGElement _prototype_BackingField;

      public virtual dom.SVGSVGElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGSVGElement New();
    }

    [Virtual]
    public abstract class SVGScriptElementTypeConfig : IObject
    {
      private dom.SVGScriptElement _prototype_BackingField;

      public virtual dom.SVGScriptElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGScriptElement New();
    }

    [Virtual]
    public abstract class SVGStopElementTypeConfig : IObject
    {
      private dom.SVGStopElement _prototype_BackingField;

      public virtual dom.SVGStopElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGStopElement New();
    }

    [Virtual]
    public abstract class SVGStringListTypeConfig : IObject
    {
      private dom.SVGStringList _prototype_BackingField;

      public virtual dom.SVGStringList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGStringList New();
    }

    [Virtual]
    public abstract class SVGStylableTypeConfig : IObject
    {
      private dom.SVGStylable _prototype_BackingField;

      public virtual dom.SVGStylable prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGStylable New();
    }

    [Virtual]
    public abstract class SVGStyleElementTypeConfig : IObject
    {
      private dom.SVGStyleElement _prototype_BackingField;

      public virtual dom.SVGStyleElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGStyleElement New();
    }

    [Virtual]
    public abstract class SVGSwitchElementTypeConfig : IObject
    {
      private dom.SVGSwitchElement _prototype_BackingField;

      public virtual dom.SVGSwitchElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGSwitchElement New();
    }

    [Virtual]
    public abstract class SVGSymbolElementTypeConfig : IObject
    {
      private dom.SVGSymbolElement _prototype_BackingField;

      public virtual dom.SVGSymbolElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGSymbolElement New();
    }

    [Virtual]
    public abstract class SVGTSpanElementTypeConfig : IObject
    {
      private dom.SVGTSpanElement _prototype_BackingField;

      public virtual dom.SVGTSpanElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGTSpanElement New();
    }

    [Virtual]
    public abstract class SVGTextContentElementTypeConfig : IObject
    {
      private dom.SVGTextContentElement _prototype_BackingField;

      public virtual dom.SVGTextContentElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGTextContentElement New();

      public abstract ushort LENGTHADJUST_SPACING { get; }

      public abstract ushort LENGTHADJUST_SPACINGANDGLYPHS { get; }

      public abstract ushort LENGTHADJUST_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGTextElementTypeConfig : IObject
    {
      private dom.SVGTextElement _prototype_BackingField;

      public virtual dom.SVGTextElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGTextElement New();
    }

    [Virtual]
    public abstract class SVGTextPathElementTypeConfig : IObject
    {
      private dom.SVGTextPathElement _prototype_BackingField;

      public virtual dom.SVGTextPathElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGTextPathElement New();

      public abstract ushort TEXTPATH_METHODTYPE_ALIGN { get; }

      public abstract ushort TEXTPATH_METHODTYPE_STRETCH { get; }

      public abstract ushort TEXTPATH_METHODTYPE_UNKNOWN { get; }

      public abstract ushort TEXTPATH_SPACINGTYPE_AUTO { get; }

      public abstract ushort TEXTPATH_SPACINGTYPE_EXACT { get; }

      public abstract ushort TEXTPATH_SPACINGTYPE_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGTextPositioningElementTypeConfig : IObject
    {
      private dom.SVGTextPositioningElement _prototype_BackingField;

      public virtual dom.SVGTextPositioningElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGTextPositioningElement New();
    }

    [Virtual]
    public abstract class SVGTitleElementTypeConfig : IObject
    {
      private dom.SVGTitleElement _prototype_BackingField;

      public virtual dom.SVGTitleElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGTitleElement New();
    }

    [Virtual]
    public abstract class SVGTransformTypeConfig : IObject
    {
      private dom.SVGTransform _prototype_BackingField;

      public virtual dom.SVGTransform prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGTransform New();

      public abstract ushort SVG_TRANSFORM_MATRIX { get; }

      public abstract ushort SVG_TRANSFORM_ROTATE { get; }

      public abstract ushort SVG_TRANSFORM_SCALE { get; }

      public abstract ushort SVG_TRANSFORM_SKEWX { get; }

      public abstract ushort SVG_TRANSFORM_SKEWY { get; }

      public abstract ushort SVG_TRANSFORM_TRANSLATE { get; }

      public abstract ushort SVG_TRANSFORM_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGTransformListTypeConfig : IObject
    {
      private dom.SVGTransformList _prototype_BackingField;

      public virtual dom.SVGTransformList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGTransformList New();
    }

    [Virtual]
    public abstract class SVGUseElementTypeConfig : IObject
    {
      private dom.SVGUseElement _prototype_BackingField;

      public virtual dom.SVGUseElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGUseElement New();
    }

    [Virtual]
    public abstract class SVGViewElementTypeConfig : IObject
    {
      private dom.SVGViewElement _prototype_BackingField;

      public virtual dom.SVGViewElement prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGViewElement New();
    }

    [Virtual]
    public abstract class SVGZoomAndPan2Config : IObject
    {
      public abstract ushort SVG_ZOOMANDPAN_DISABLE { get; }

      public abstract ushort SVG_ZOOMANDPAN_MAGNIFY { get; }

      public abstract ushort SVG_ZOOMANDPAN_UNKNOWN { get; }
    }

    [Virtual]
    public abstract class SVGZoomEventTypeConfig : IObject
    {
      private dom.SVGZoomEvent _prototype_BackingField;

      public virtual dom.SVGZoomEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SVGZoomEvent New();
    }

    [Virtual]
    public abstract class ScopedCredentialType2Config : IObject
    {
      private dom.ScopedCredential _prototype_BackingField;

      public virtual dom.ScopedCredential prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ScopedCredential New();
    }

    [Virtual]
    public abstract class ScopedCredentialInfoTypeConfig : IObject
    {
      private dom.ScopedCredentialInfo _prototype_BackingField;

      public virtual dom.ScopedCredentialInfo prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ScopedCredentialInfo New();
    }

    [Virtual]
    public abstract class ScreenTypeConfig : IObject
    {
      private dom.Screen _prototype_BackingField;

      public virtual dom.Screen prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Screen New();
    }

    [Virtual]
    public abstract class ScriptProcessorNodeTypeConfig : IObject
    {
      private dom.ScriptProcessorNode _prototype_BackingField;

      public virtual dom.ScriptProcessorNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ScriptProcessorNode New();
    }

    [Virtual]
    public abstract class SecurityPolicyViolationEventTypeConfig : IObject
    {
      private dom.SecurityPolicyViolationEvent _prototype_BackingField;

      public virtual dom.SecurityPolicyViolationEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.SecurityPolicyViolationEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.SecurityPolicyViolationEvent New(
        string type,
        dom.SecurityPolicyViolationEventInit eventInitDict);
    }

    [Virtual]
    public abstract class SelectionTypeConfig : IObject
    {
      private dom.Selection _prototype_BackingField;

      public virtual dom.Selection prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Selection New();
    }

    [Virtual]
    public abstract class ServiceWorkerTypeConfig : IObject
    {
      private dom.ServiceWorker _prototype_BackingField;

      public virtual dom.ServiceWorker prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ServiceWorker New();
    }

    [Virtual]
    public abstract class ServiceWorkerContainerTypeConfig : IObject
    {
      private dom.ServiceWorkerContainer _prototype_BackingField;

      public virtual dom.ServiceWorkerContainer prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ServiceWorkerContainer New();
    }

    [Virtual]
    public abstract class ServiceWorkerMessageEventTypeConfig : IObject
    {
      private dom.ServiceWorkerMessageEvent _prototype_BackingField;

      public virtual dom.ServiceWorkerMessageEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.ServiceWorkerMessageEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.ServiceWorkerMessageEvent New(
        string type,
        dom.ServiceWorkerMessageEventInit eventInitDict);
    }

    [Virtual]
    public abstract class ServiceWorkerRegistrationTypeConfig : IObject
    {
      private dom.ServiceWorkerRegistration _prototype_BackingField;

      public virtual dom.ServiceWorkerRegistration prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ServiceWorkerRegistration New();
    }

    [Virtual]
    public abstract class SourceBufferTypeConfig : IObject
    {
      private dom.SourceBuffer _prototype_BackingField;

      public virtual dom.SourceBuffer prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SourceBuffer New();
    }

    [Virtual]
    public abstract class SourceBufferListTypeConfig : IObject
    {
      private dom.SourceBufferList _prototype_BackingField;

      public virtual dom.SourceBufferList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SourceBufferList New();
    }

    [Virtual]
    public abstract class SpeechSynthesisTypeConfig : IObject
    {
      private dom.SpeechSynthesis _prototype_BackingField;

      public virtual dom.SpeechSynthesis prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SpeechSynthesis New();
    }

    [Virtual]
    public abstract class SpeechSynthesisEventTypeConfig : IObject
    {
      private dom.SpeechSynthesisEvent _prototype_BackingField;

      public virtual dom.SpeechSynthesisEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.SpeechSynthesisEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.SpeechSynthesisEvent New(
        string type,
        dom.SpeechSynthesisEventInit eventInitDict);
    }

    [Virtual]
    public abstract class SpeechSynthesisUtteranceTypeConfig : IObject
    {
      private dom.SpeechSynthesisUtterance _prototype_BackingField;

      public virtual dom.SpeechSynthesisUtterance prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SpeechSynthesisUtterance New();

      [Template("new {this}({0})")]
      public abstract dom.SpeechSynthesisUtterance New(string text);
    }

    [Virtual]
    public abstract class SpeechSynthesisVoiceTypeConfig : IObject
    {
      private dom.SpeechSynthesisVoice _prototype_BackingField;

      public virtual dom.SpeechSynthesisVoice prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SpeechSynthesisVoice New();
    }

    [Virtual]
    public abstract class StereoPannerNodeTypeConfig : IObject
    {
      private dom.StereoPannerNode _prototype_BackingField;

      public virtual dom.StereoPannerNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.StereoPannerNode New();
    }

    [Virtual]
    public abstract class StorageTypeConfig : IObject
    {
      private dom.Storage _prototype_BackingField;

      public virtual dom.Storage prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Storage New();
    }

    [Virtual]
    public abstract class StorageEventTypeConfig : IObject
    {
      private dom.StorageEvent _prototype_BackingField;

      public virtual dom.StorageEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.StorageEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.StorageEvent New(string type, dom.StorageEventInit eventInitDict);
    }

    [Virtual]
    public abstract class StyleMediaTypeConfig : IObject
    {
      private dom.StyleMedia _prototype_BackingField;

      public virtual dom.StyleMedia prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.StyleMedia New();
    }

    [Virtual]
    public abstract class StyleSheetTypeConfig : IObject
    {
      private dom.StyleSheet _prototype_BackingField;

      public virtual dom.StyleSheet prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.StyleSheet New();
    }

    [Virtual]
    public abstract class StyleSheetListTypeConfig : IObject
    {
      private dom.StyleSheetList _prototype_BackingField;

      public virtual dom.StyleSheetList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.StyleSheetList New();
    }

    [Virtual]
    public abstract class SubtleCryptoTypeConfig : IObject
    {
      private dom.SubtleCrypto _prototype_BackingField;

      public virtual dom.SubtleCrypto prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SubtleCrypto New();
    }

    [Virtual]
    public abstract class SyncManagerTypeConfig : IObject
    {
      private dom.SyncManager _prototype_BackingField;

      public virtual dom.SyncManager prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.SyncManager New();
    }

    [Virtual]
    public abstract class TextTypeConfig : IObject
    {
      private dom.Text _prototype_BackingField;

      public virtual dom.Text prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Text New();

      [Template("new {this}({0})")]
      public abstract dom.Text New(string data);
    }

    [Virtual]
    public abstract class TextDecoderTypeConfig : IObject
    {
      private dom.TextDecoder _prototype_BackingField;

      public virtual dom.TextDecoder prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TextDecoder New();

      [Template("new {this}({0})")]
      public abstract dom.TextDecoder New(string label);

      [Template("new {this}({0}, {1})")]
      public abstract dom.TextDecoder New(string label, dom.TextDecoderOptions options);
    }

    [Virtual]
    public abstract class TextEncoderTypeConfig : IObject
    {
      private dom.TextEncoder _prototype_BackingField;

      public virtual dom.TextEncoder prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TextEncoder New();
    }

    [Virtual]
    public abstract class TextEventTypeConfig : IObject
    {
      private dom.TextEvent _prototype_BackingField;

      public virtual dom.TextEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TextEvent New();

      public abstract double DOM_INPUT_METHOD_DROP { get; }

      public abstract double DOM_INPUT_METHOD_HANDWRITING { get; }

      public abstract double DOM_INPUT_METHOD_IME { get; }

      public abstract double DOM_INPUT_METHOD_KEYBOARD { get; }

      public abstract double DOM_INPUT_METHOD_MULTIMODAL { get; }

      public abstract double DOM_INPUT_METHOD_OPTION { get; }

      public abstract double DOM_INPUT_METHOD_PASTE { get; }

      public abstract double DOM_INPUT_METHOD_SCRIPT { get; }

      public abstract double DOM_INPUT_METHOD_UNKNOWN { get; }

      public abstract double DOM_INPUT_METHOD_VOICE { get; }
    }

    [Virtual]
    public abstract class TextMetricsTypeConfig : IObject
    {
      private dom.TextMetrics _prototype_BackingField;

      public virtual dom.TextMetrics prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TextMetrics New();
    }

    [Virtual]
    public abstract class TextTrackTypeConfig : IObject
    {
      private dom.TextTrack _prototype_BackingField;

      public virtual dom.TextTrack prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TextTrack New();

      public abstract double DISABLED { get; }

      public abstract double ERROR { get; }

      public abstract double HIDDEN { get; }

      public abstract double LOADED { get; }

      public abstract double LOADING { get; }

      public abstract double NONE { get; }

      public abstract double SHOWING { get; }
    }

    [Virtual]
    public abstract class TextTrackCueTypeConfig : IObject
    {
      private dom.TextTrackCue _prototype_BackingField;

      public virtual dom.TextTrackCue prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.TextTrackCue New(double startTime, double endTime, string text);
    }

    [Virtual]
    public abstract class TextTrackCueListTypeConfig : IObject
    {
      private dom.TextTrackCueList _prototype_BackingField;

      public virtual dom.TextTrackCueList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TextTrackCueList New();
    }

    [Virtual]
    public abstract class TextTrackListTypeConfig : IObject
    {
      private dom.TextTrackList _prototype_BackingField;

      public virtual dom.TextTrackList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TextTrackList New();
    }

    [Virtual]
    public abstract class TimeRangesTypeConfig : IObject
    {
      private dom.TimeRanges _prototype_BackingField;

      public virtual dom.TimeRanges prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TimeRanges New();
    }

    [Virtual]
    public abstract class TouchTypeConfig : IObject
    {
      private dom.Touch _prototype_BackingField;

      public virtual dom.Touch prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Touch New();
    }

    [Virtual]
    public abstract class TouchEventTypeConfig : IObject
    {
      private dom.TouchEvent _prototype_BackingField;

      public virtual dom.TouchEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.TouchEvent New(string type);

      [Template("new {this}({0}, {1})")]
      public abstract dom.TouchEvent New(string type, dom.TouchEventInit touchEventInit);
    }

    [Virtual]
    public abstract class TouchListTypeConfig : IObject
    {
      private dom.TouchList _prototype_BackingField;

      public virtual dom.TouchList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TouchList New();
    }

    [Virtual]
    public abstract class TrackEventTypeConfig : IObject
    {
      private dom.TrackEvent _prototype_BackingField;

      public virtual dom.TrackEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.TrackEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.TrackEvent New(string typeArg, dom.TrackEventInit eventInitDict);
    }

    [Virtual]
    public abstract class TransitionEventTypeConfig : IObject
    {
      private dom.TransitionEvent _prototype_BackingField;

      public virtual dom.TransitionEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.TransitionEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.TransitionEvent New(
        string typeArg,
        dom.TransitionEventInit eventInitDict);
    }

    [Virtual]
    public abstract class TreeWalkerTypeConfig : IObject
    {
      private dom.TreeWalker _prototype_BackingField;

      public virtual dom.TreeWalker prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.TreeWalker New();
    }

    [Virtual]
    public abstract class UIEventTypeConfig : IObject
    {
      private dom.UIEvent _prototype_BackingField;

      public virtual dom.UIEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.UIEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.UIEvent New(string typeArg, dom.UIEventInit eventInitDict);
    }

    [Virtual]
    public abstract class URLTypeConfig : IObject
    {
      private dom.URL _prototype_BackingField;

      public virtual dom.URL prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.URL New(string url);

      [Template("new {this}({0}, {1})")]
      public abstract dom.URL New(string url, Union<string, dom.URL> @base);

      [Template("new {this}({0}, {1})")]
      public abstract dom.URL New(string url, string @base);

      [Template("new {this}({0}, {1})")]
      public abstract dom.URL New(string url, dom.URL @base);

      public abstract string createObjectURL(object @object);

      public abstract string createObjectURL(object @object, dom.ObjectURLOptions options);

      public abstract void revokeObjectURL(string url);
    }

    [Virtual]
    public abstract class URLSearchParamsTypeConfig : IObject
    {
      private dom.URLSearchParams _prototype_BackingField;

      public virtual dom.URLSearchParams prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.URLSearchParams New();

      [Template("new {this}({0})")]
      public abstract dom.URLSearchParams New(Union<string, dom.URLSearchParams> init);

      [Template("new {this}({0})")]
      public abstract dom.URLSearchParams New(string init);

      [Template("new {this}({0})")]
      public abstract dom.URLSearchParams New(dom.URLSearchParams init);
    }

    [Virtual]
    public abstract class VRDisplayTypeConfig : IObject
    {
      private dom.VRDisplay _prototype_BackingField;

      public virtual dom.VRDisplay prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.VRDisplay New();
    }

    [Virtual]
    public abstract class VRDisplayCapabilitiesTypeConfig : IObject
    {
      private dom.VRDisplayCapabilities _prototype_BackingField;

      public virtual dom.VRDisplayCapabilities prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.VRDisplayCapabilities New();
    }

    [Virtual]
    public abstract class VRDisplayEventTypeConfig : IObject
    {
      private dom.VRDisplayEvent _prototype_BackingField;

      public virtual dom.VRDisplayEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0}, {1})")]
      public abstract dom.VRDisplayEvent New(string type, dom.VRDisplayEventInit eventInitDict);
    }

    [Virtual]
    public abstract class VREyeParametersTypeConfig : IObject
    {
      private dom.VREyeParameters _prototype_BackingField;

      public virtual dom.VREyeParameters prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.VREyeParameters New();
    }

    [Virtual]
    public abstract class VRFieldOfViewTypeConfig : IObject
    {
      private dom.VRFieldOfView _prototype_BackingField;

      public virtual dom.VRFieldOfView prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.VRFieldOfView New();
    }

    [Virtual]
    public abstract class VRFrameDataTypeConfig : IObject
    {
      private dom.VRFrameData _prototype_BackingField;

      public virtual dom.VRFrameData prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.VRFrameData New();
    }

    [Virtual]
    public abstract class VRPoseTypeConfig : IObject
    {
      private dom.VRPose _prototype_BackingField;

      public virtual dom.VRPose prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.VRPose New();
    }

    [Virtual]
    public abstract class ValidityStateTypeConfig : IObject
    {
      private dom.ValidityState _prototype_BackingField;

      public virtual dom.ValidityState prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.ValidityState New();
    }

    [Virtual]
    public abstract class VideoPlaybackQualityTypeConfig : IObject
    {
      private dom.VideoPlaybackQuality _prototype_BackingField;

      public virtual dom.VideoPlaybackQuality prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.VideoPlaybackQuality New();
    }

    [Virtual]
    public abstract class VideoTrackTypeConfig : IObject
    {
      private dom.VideoTrack _prototype_BackingField;

      public virtual dom.VideoTrack prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.VideoTrack New();
    }

    [Virtual]
    public abstract class VideoTrackListTypeConfig : IObject
    {
      private dom.VideoTrackList _prototype_BackingField;

      public virtual dom.VideoTrackList prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.VideoTrackList New();
    }

    [Virtual]
    public abstract class WEBGL_compressed_texture_s3tcTypeConfig : IObject
    {
      private dom.WEBGL_compressed_texture_s3tc _prototype_BackingField;

      public virtual dom.WEBGL_compressed_texture_s3tc prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WEBGL_compressed_texture_s3tc New();

      public abstract double COMPRESSED_RGBA_S3TC_DXT1_EXT { get; }

      public abstract double COMPRESSED_RGBA_S3TC_DXT3_EXT { get; }

      public abstract double COMPRESSED_RGBA_S3TC_DXT5_EXT { get; }

      public abstract double COMPRESSED_RGB_S3TC_DXT1_EXT { get; }
    }

    [Virtual]
    public abstract class WEBGL_debug_renderer_infoTypeConfig : IObject
    {
      private dom.WEBGL_debug_renderer_info _prototype_BackingField;

      public virtual dom.WEBGL_debug_renderer_info prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WEBGL_debug_renderer_info New();

      public abstract double UNMASKED_RENDERER_WEBGL { get; }

      public abstract double UNMASKED_VENDOR_WEBGL { get; }
    }

    [Virtual]
    public abstract class WEBGL_depth_textureTypeConfig : IObject
    {
      private dom.WEBGL_depth_texture _prototype_BackingField;

      public virtual dom.WEBGL_depth_texture prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WEBGL_depth_texture New();

      public abstract double UNSIGNED_INT_24_8_WEBGL { get; }
    }

    [Virtual]
    public abstract class WaveShaperNodeTypeConfig : IObject
    {
      private dom.WaveShaperNode _prototype_BackingField;

      public virtual dom.WaveShaperNode prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WaveShaperNode New();
    }

    [Virtual]
    public abstract class WebAuthenticationTypeConfig : IObject
    {
      private dom.WebAuthentication _prototype_BackingField;

      public virtual dom.WebAuthentication prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebAuthentication New();
    }

    [Virtual]
    public abstract class WebAuthnAssertionTypeConfig : IObject
    {
      private dom.WebAuthnAssertion _prototype_BackingField;

      public virtual dom.WebAuthnAssertion prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebAuthnAssertion New();
    }

    [Virtual]
    public abstract class WebGLActiveInfoTypeConfig : IObject
    {
      private dom.WebGLActiveInfo _prototype_BackingField;

      public virtual dom.WebGLActiveInfo prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLActiveInfo New();
    }

    [Virtual]
    public abstract class WebGLBufferTypeConfig : IObject
    {
      private dom.WebGLBuffer _prototype_BackingField;

      public virtual dom.WebGLBuffer prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLBuffer New();
    }

    [Virtual]
    public abstract class WebGLContextEventTypeConfig : IObject
    {
      private dom.WebGLContextEvent _prototype_BackingField;

      public virtual dom.WebGLContextEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.WebGLContextEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.WebGLContextEvent New(
        string typeArg,
        dom.WebGLContextEventInit eventInitDict);
    }

    [Virtual]
    public abstract class WebGLFramebufferTypeConfig : IObject
    {
      private dom.WebGLFramebuffer _prototype_BackingField;

      public virtual dom.WebGLFramebuffer prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLFramebuffer New();
    }

    [Virtual]
    public abstract class WebGLObjectTypeConfig : IObject
    {
      private dom.WebGLObject _prototype_BackingField;

      public virtual dom.WebGLObject prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLObject New();
    }

    [Virtual]
    public abstract class WebGLProgramTypeConfig : IObject
    {
      private dom.WebGLProgram _prototype_BackingField;

      public virtual dom.WebGLProgram prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLProgram New();
    }

    [Virtual]
    public abstract class WebGLRenderbufferTypeConfig : IObject
    {
      private dom.WebGLRenderbuffer _prototype_BackingField;

      public virtual dom.WebGLRenderbuffer prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLRenderbuffer New();
    }

    [Virtual]
    public abstract class WebGLRenderingContextTypeConfig : IObject
    {
      private dom.WebGLRenderingContext _prototype_BackingField;

      public virtual dom.WebGLRenderingContext prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLRenderingContext New();

      public abstract uint ACTIVE_ATTRIBUTES { get; }

      public abstract uint ACTIVE_TEXTURE { get; }

      public abstract uint ACTIVE_UNIFORMS { get; }

      public abstract uint ALIASED_LINE_WIDTH_RANGE { get; }

      public abstract uint ALIASED_POINT_SIZE_RANGE { get; }

      public abstract uint ALPHA { get; }

      public abstract uint ALPHA_BITS { get; }

      public abstract uint ALWAYS { get; }

      public abstract uint ARRAY_BUFFER { get; }

      public abstract uint ARRAY_BUFFER_BINDING { get; }

      public abstract uint ATTACHED_SHADERS { get; }

      public abstract uint BACK { get; }

      public abstract uint BLEND { get; }

      public abstract uint BLEND_COLOR { get; }

      public abstract uint BLEND_DST_ALPHA { get; }

      public abstract uint BLEND_DST_RGB { get; }

      public abstract uint BLEND_EQUATION { get; }

      public abstract uint BLEND_EQUATION_ALPHA { get; }

      public abstract uint BLEND_EQUATION_RGB { get; }

      public abstract uint BLEND_SRC_ALPHA { get; }

      public abstract uint BLEND_SRC_RGB { get; }

      public abstract uint BLUE_BITS { get; }

      public abstract uint BOOL { get; }

      public abstract uint BOOL_VEC2 { get; }

      public abstract uint BOOL_VEC3 { get; }

      public abstract uint BOOL_VEC4 { get; }

      public abstract uint BROWSER_DEFAULT_WEBGL { get; }

      public abstract uint BUFFER_SIZE { get; }

      public abstract uint BUFFER_USAGE { get; }

      public abstract uint BYTE { get; }

      public abstract uint CCW { get; }

      public abstract uint CLAMP_TO_EDGE { get; }

      public abstract uint COLOR_ATTACHMENT0 { get; }

      public abstract uint COLOR_BUFFER_BIT { get; }

      public abstract uint COLOR_CLEAR_VALUE { get; }

      public abstract uint COLOR_WRITEMASK { get; }

      public abstract uint COMPILE_STATUS { get; }

      public abstract uint COMPRESSED_TEXTURE_FORMATS { get; }

      public abstract uint CONSTANT_ALPHA { get; }

      public abstract uint CONSTANT_COLOR { get; }

      public abstract uint CONTEXT_LOST_WEBGL { get; }

      public abstract uint CULL_FACE { get; }

      public abstract uint CULL_FACE_MODE { get; }

      public abstract uint CURRENT_PROGRAM { get; }

      public abstract uint CURRENT_VERTEX_ATTRIB { get; }

      public abstract uint CW { get; }

      public abstract uint DECR { get; }

      public abstract uint DECR_WRAP { get; }

      public abstract uint DELETE_STATUS { get; }

      public abstract uint DEPTH_ATTACHMENT { get; }

      public abstract uint DEPTH_BITS { get; }

      public abstract uint DEPTH_BUFFER_BIT { get; }

      public abstract uint DEPTH_CLEAR_VALUE { get; }

      public abstract uint DEPTH_COMPONENT { get; }

      public abstract uint DEPTH_COMPONENT16 { get; }

      public abstract uint DEPTH_FUNC { get; }

      public abstract uint DEPTH_RANGE { get; }

      public abstract uint DEPTH_STENCIL { get; }

      public abstract uint DEPTH_STENCIL_ATTACHMENT { get; }

      public abstract uint DEPTH_TEST { get; }

      public abstract uint DEPTH_WRITEMASK { get; }

      public abstract uint DITHER { get; }

      public abstract uint DONT_CARE { get; }

      public abstract uint DST_ALPHA { get; }

      public abstract uint DST_COLOR { get; }

      public abstract uint DYNAMIC_DRAW { get; }

      public abstract uint ELEMENT_ARRAY_BUFFER { get; }

      public abstract uint ELEMENT_ARRAY_BUFFER_BINDING { get; }

      public abstract uint EQUAL { get; }

      public abstract uint FASTEST { get; }

      public abstract uint FLOAT { get; }

      public abstract uint FLOAT_MAT2 { get; }

      public abstract uint FLOAT_MAT3 { get; }

      public abstract uint FLOAT_MAT4 { get; }

      public abstract uint FLOAT_VEC2 { get; }

      public abstract uint FLOAT_VEC3 { get; }

      public abstract uint FLOAT_VEC4 { get; }

      public abstract uint FRAGMENT_SHADER { get; }

      public abstract uint FRAMEBUFFER { get; }

      public abstract uint FRAMEBUFFER_ATTACHMENT_OBJECT_NAME { get; }

      public abstract uint FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE { get; }

      public abstract uint FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE { get; }

      public abstract uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL { get; }

      public abstract uint FRAMEBUFFER_BINDING { get; }

      public abstract uint FRAMEBUFFER_COMPLETE { get; }

      public abstract uint FRAMEBUFFER_INCOMPLETE_ATTACHMENT { get; }

      public abstract uint FRAMEBUFFER_INCOMPLETE_DIMENSIONS { get; }

      public abstract uint FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT { get; }

      public abstract uint FRAMEBUFFER_UNSUPPORTED { get; }

      public abstract uint FRONT { get; }

      public abstract uint FRONT_AND_BACK { get; }

      public abstract uint FRONT_FACE { get; }

      public abstract uint FUNC_ADD { get; }

      public abstract uint FUNC_REVERSE_SUBTRACT { get; }

      public abstract uint FUNC_SUBTRACT { get; }

      public abstract uint GENERATE_MIPMAP_HINT { get; }

      public abstract uint GEQUAL { get; }

      public abstract uint GREATER { get; }

      public abstract uint GREEN_BITS { get; }

      public abstract uint HIGH_FLOAT { get; }

      public abstract uint HIGH_INT { get; }

      public abstract uint IMPLEMENTATION_COLOR_READ_FORMAT { get; }

      public abstract uint IMPLEMENTATION_COLOR_READ_TYPE { get; }

      public abstract uint INCR { get; }

      public abstract uint INCR_WRAP { get; }

      public abstract uint INT { get; }

      public abstract uint INT_VEC2 { get; }

      public abstract uint INT_VEC3 { get; }

      public abstract uint INT_VEC4 { get; }

      public abstract uint INVALID_ENUM { get; }

      public abstract uint INVALID_FRAMEBUFFER_OPERATION { get; }

      public abstract uint INVALID_OPERATION { get; }

      public abstract uint INVALID_VALUE { get; }

      public abstract uint INVERT { get; }

      public abstract uint KEEP { get; }

      public abstract uint LEQUAL { get; }

      public abstract uint LESS { get; }

      public abstract uint LINEAR { get; }

      public abstract uint LINEAR_MIPMAP_LINEAR { get; }

      public abstract uint LINEAR_MIPMAP_NEAREST { get; }

      public abstract uint LINES { get; }

      public abstract uint LINE_LOOP { get; }

      public abstract uint LINE_STRIP { get; }

      public abstract uint LINE_WIDTH { get; }

      public abstract uint LINK_STATUS { get; }

      public abstract uint LOW_FLOAT { get; }

      public abstract uint LOW_INT { get; }

      public abstract uint LUMINANCE { get; }

      public abstract uint LUMINANCE_ALPHA { get; }

      public abstract uint MAX_COMBINED_TEXTURE_IMAGE_UNITS { get; }

      public abstract uint MAX_CUBE_MAP_TEXTURE_SIZE { get; }

      public abstract uint MAX_FRAGMENT_UNIFORM_VECTORS { get; }

      public abstract uint MAX_RENDERBUFFER_SIZE { get; }

      public abstract uint MAX_TEXTURE_IMAGE_UNITS { get; }

      public abstract uint MAX_TEXTURE_SIZE { get; }

      public abstract uint MAX_VARYING_VECTORS { get; }

      public abstract uint MAX_VERTEX_ATTRIBS { get; }

      public abstract uint MAX_VERTEX_TEXTURE_IMAGE_UNITS { get; }

      public abstract uint MAX_VERTEX_UNIFORM_VECTORS { get; }

      public abstract uint MAX_VIEWPORT_DIMS { get; }

      public abstract uint MEDIUM_FLOAT { get; }

      public abstract uint MEDIUM_INT { get; }

      public abstract uint MIRRORED_REPEAT { get; }

      public abstract uint NEAREST { get; }

      public abstract uint NEAREST_MIPMAP_LINEAR { get; }

      public abstract uint NEAREST_MIPMAP_NEAREST { get; }

      public abstract uint NEVER { get; }

      public abstract uint NICEST { get; }

      public abstract uint NONE { get; }

      public abstract uint NOTEQUAL { get; }

      public abstract uint NO_ERROR { get; }

      public abstract uint ONE { get; }

      public abstract uint ONE_MINUS_CONSTANT_ALPHA { get; }

      public abstract uint ONE_MINUS_CONSTANT_COLOR { get; }

      public abstract uint ONE_MINUS_DST_ALPHA { get; }

      public abstract uint ONE_MINUS_DST_COLOR { get; }

      public abstract uint ONE_MINUS_SRC_ALPHA { get; }

      public abstract uint ONE_MINUS_SRC_COLOR { get; }

      public abstract uint OUT_OF_MEMORY { get; }

      public abstract uint PACK_ALIGNMENT { get; }

      public abstract uint POINTS { get; }

      public abstract uint POLYGON_OFFSET_FACTOR { get; }

      public abstract uint POLYGON_OFFSET_FILL { get; }

      public abstract uint POLYGON_OFFSET_UNITS { get; }

      public abstract uint RED_BITS { get; }

      public abstract uint RENDERBUFFER { get; }

      public abstract uint RENDERBUFFER_ALPHA_SIZE { get; }

      public abstract uint RENDERBUFFER_BINDING { get; }

      public abstract uint RENDERBUFFER_BLUE_SIZE { get; }

      public abstract uint RENDERBUFFER_DEPTH_SIZE { get; }

      public abstract uint RENDERBUFFER_GREEN_SIZE { get; }

      public abstract uint RENDERBUFFER_HEIGHT { get; }

      public abstract uint RENDERBUFFER_INTERNAL_FORMAT { get; }

      public abstract uint RENDERBUFFER_RED_SIZE { get; }

      public abstract uint RENDERBUFFER_STENCIL_SIZE { get; }

      public abstract uint RENDERBUFFER_WIDTH { get; }

      public abstract uint RENDERER { get; }

      public abstract uint REPEAT { get; }

      public abstract uint REPLACE { get; }

      public abstract uint RGB { get; }

      public abstract uint RGB565 { get; }

      public abstract uint RGB5_A1 { get; }

      public abstract uint RGBA { get; }

      public abstract uint RGBA4 { get; }

      public abstract uint SAMPLER_2D { get; }

      public abstract uint SAMPLER_CUBE { get; }

      public abstract uint SAMPLES { get; }

      public abstract uint SAMPLE_ALPHA_TO_COVERAGE { get; }

      public abstract uint SAMPLE_BUFFERS { get; }

      public abstract uint SAMPLE_COVERAGE { get; }

      public abstract uint SAMPLE_COVERAGE_INVERT { get; }

      public abstract uint SAMPLE_COVERAGE_VALUE { get; }

      public abstract uint SCISSOR_BOX { get; }

      public abstract uint SCISSOR_TEST { get; }

      public abstract uint SHADER_TYPE { get; }

      public abstract uint SHADING_LANGUAGE_VERSION { get; }

      public abstract uint SHORT { get; }

      public abstract uint SRC_ALPHA { get; }

      public abstract uint SRC_ALPHA_SATURATE { get; }

      public abstract uint SRC_COLOR { get; }

      public abstract uint STATIC_DRAW { get; }

      public abstract uint STENCIL_ATTACHMENT { get; }

      public abstract uint STENCIL_BACK_FAIL { get; }

      public abstract uint STENCIL_BACK_FUNC { get; }

      public abstract uint STENCIL_BACK_PASS_DEPTH_FAIL { get; }

      public abstract uint STENCIL_BACK_PASS_DEPTH_PASS { get; }

      public abstract uint STENCIL_BACK_REF { get; }

      public abstract uint STENCIL_BACK_VALUE_MASK { get; }

      public abstract uint STENCIL_BACK_WRITEMASK { get; }

      public abstract uint STENCIL_BITS { get; }

      public abstract uint STENCIL_BUFFER_BIT { get; }

      public abstract uint STENCIL_CLEAR_VALUE { get; }

      public abstract uint STENCIL_FAIL { get; }

      public abstract uint STENCIL_FUNC { get; }

      public abstract uint STENCIL_INDEX { get; }

      public abstract uint STENCIL_INDEX8 { get; }

      public abstract uint STENCIL_PASS_DEPTH_FAIL { get; }

      public abstract uint STENCIL_PASS_DEPTH_PASS { get; }

      public abstract uint STENCIL_REF { get; }

      public abstract uint STENCIL_TEST { get; }

      public abstract uint STENCIL_VALUE_MASK { get; }

      public abstract uint STENCIL_WRITEMASK { get; }

      public abstract uint STREAM_DRAW { get; }

      public abstract uint SUBPIXEL_BITS { get; }

      public abstract uint TEXTURE { get; }

      public abstract uint TEXTURE0 { get; }

      public abstract uint TEXTURE1 { get; }

      public abstract uint TEXTURE10 { get; }

      public abstract uint TEXTURE11 { get; }

      public abstract uint TEXTURE12 { get; }

      public abstract uint TEXTURE13 { get; }

      public abstract uint TEXTURE14 { get; }

      public abstract uint TEXTURE15 { get; }

      public abstract uint TEXTURE16 { get; }

      public abstract uint TEXTURE17 { get; }

      public abstract uint TEXTURE18 { get; }

      public abstract uint TEXTURE19 { get; }

      public abstract uint TEXTURE2 { get; }

      public abstract uint TEXTURE20 { get; }

      public abstract uint TEXTURE21 { get; }

      public abstract uint TEXTURE22 { get; }

      public abstract uint TEXTURE23 { get; }

      public abstract uint TEXTURE24 { get; }

      public abstract uint TEXTURE25 { get; }

      public abstract uint TEXTURE26 { get; }

      public abstract uint TEXTURE27 { get; }

      public abstract uint TEXTURE28 { get; }

      public abstract uint TEXTURE29 { get; }

      public abstract uint TEXTURE3 { get; }

      public abstract uint TEXTURE30 { get; }

      public abstract uint TEXTURE31 { get; }

      public abstract uint TEXTURE4 { get; }

      public abstract uint TEXTURE5 { get; }

      public abstract uint TEXTURE6 { get; }

      public abstract uint TEXTURE7 { get; }

      public abstract uint TEXTURE8 { get; }

      public abstract uint TEXTURE9 { get; }

      public abstract uint TEXTURE_2D { get; }

      public abstract uint TEXTURE_BINDING_2D { get; }

      public abstract uint TEXTURE_BINDING_CUBE_MAP { get; }

      public abstract uint TEXTURE_CUBE_MAP { get; }

      public abstract uint TEXTURE_CUBE_MAP_NEGATIVE_X { get; }

      public abstract uint TEXTURE_CUBE_MAP_NEGATIVE_Y { get; }

      public abstract uint TEXTURE_CUBE_MAP_NEGATIVE_Z { get; }

      public abstract uint TEXTURE_CUBE_MAP_POSITIVE_X { get; }

      public abstract uint TEXTURE_CUBE_MAP_POSITIVE_Y { get; }

      public abstract uint TEXTURE_CUBE_MAP_POSITIVE_Z { get; }

      public abstract uint TEXTURE_MAG_FILTER { get; }

      public abstract uint TEXTURE_MIN_FILTER { get; }

      public abstract uint TEXTURE_WRAP_S { get; }

      public abstract uint TEXTURE_WRAP_T { get; }

      public abstract uint TRIANGLES { get; }

      public abstract uint TRIANGLE_FAN { get; }

      public abstract uint TRIANGLE_STRIP { get; }

      public abstract uint UNPACK_ALIGNMENT { get; }

      public abstract uint UNPACK_COLORSPACE_CONVERSION_WEBGL { get; }

      public abstract uint UNPACK_FLIP_Y_WEBGL { get; }

      public abstract uint UNPACK_PREMULTIPLY_ALPHA_WEBGL { get; }

      public abstract uint UNSIGNED_BYTE { get; }

      public abstract uint UNSIGNED_INT { get; }

      public abstract uint UNSIGNED_SHORT { get; }

      public abstract uint UNSIGNED_SHORT_4_4_4_4 { get; }

      public abstract uint UNSIGNED_SHORT_5_5_5_1 { get; }

      public abstract uint UNSIGNED_SHORT_5_6_5 { get; }

      public abstract uint VALIDATE_STATUS { get; }

      public abstract uint VENDOR { get; }

      public abstract uint VERSION { get; }

      public abstract uint VERTEX_ATTRIB_ARRAY_BUFFER_BINDING { get; }

      public abstract uint VERTEX_ATTRIB_ARRAY_ENABLED { get; }

      public abstract uint VERTEX_ATTRIB_ARRAY_NORMALIZED { get; }

      public abstract uint VERTEX_ATTRIB_ARRAY_POINTER { get; }

      public abstract uint VERTEX_ATTRIB_ARRAY_SIZE { get; }

      public abstract uint VERTEX_ATTRIB_ARRAY_STRIDE { get; }

      public abstract uint VERTEX_ATTRIB_ARRAY_TYPE { get; }

      public abstract uint VERTEX_SHADER { get; }

      public abstract uint VIEWPORT { get; }

      public abstract uint ZERO { get; }
    }

    [Virtual]
    public abstract class WebGLShaderTypeConfig : IObject
    {
      private dom.WebGLShader _prototype_BackingField;

      public virtual dom.WebGLShader prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLShader New();
    }

    [Virtual]
    public abstract class WebGLShaderPrecisionFormatTypeConfig : IObject
    {
      private dom.WebGLShaderPrecisionFormat _prototype_BackingField;

      public virtual dom.WebGLShaderPrecisionFormat prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLShaderPrecisionFormat New();
    }

    [Virtual]
    public abstract class WebGLTextureTypeConfig : IObject
    {
      private dom.WebGLTexture _prototype_BackingField;

      public virtual dom.WebGLTexture prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLTexture New();
    }

    [Virtual]
    public abstract class WebGLUniformLocationTypeConfig : IObject
    {
      private dom.WebGLUniformLocation _prototype_BackingField;

      public virtual dom.WebGLUniformLocation prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebGLUniformLocation New();
    }

    [Virtual]
    public abstract class WebKitCSSMatrixTypeConfig : IObject
    {
      private dom.WebKitCSSMatrix _prototype_BackingField;

      public virtual dom.WebKitCSSMatrix prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebKitCSSMatrix New();

      [Template("new {this}({0})")]
      public abstract dom.WebKitCSSMatrix New(string text);
    }

    [Virtual]
    public abstract class WebKitDirectoryEntryTypeConfig : IObject
    {
      private dom.WebKitDirectoryEntry _prototype_BackingField;

      public virtual dom.WebKitDirectoryEntry prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebKitDirectoryEntry New();
    }

    [Virtual]
    public abstract class WebKitDirectoryReaderTypeConfig : IObject
    {
      private dom.WebKitDirectoryReader _prototype_BackingField;

      public virtual dom.WebKitDirectoryReader prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebKitDirectoryReader New();
    }

    [Virtual]
    public abstract class WebKitEntryTypeConfig : IObject
    {
      private dom.WebKitEntry _prototype_BackingField;

      public virtual dom.WebKitEntry prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebKitEntry New();
    }

    [Virtual]
    public abstract class WebKitFileEntryTypeConfig : IObject
    {
      private dom.WebKitFileEntry _prototype_BackingField;

      public virtual dom.WebKitFileEntry prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebKitFileEntry New();
    }

    [Virtual]
    public abstract class WebKitFileSystemTypeConfig : IObject
    {
      private dom.WebKitFileSystem _prototype_BackingField;

      public virtual dom.WebKitFileSystem prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebKitFileSystem New();
    }

    [Virtual]
    public abstract class WebKitPointTypeConfig : IObject
    {
      private dom.WebKitPoint _prototype_BackingField;

      public virtual dom.WebKitPoint prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WebKitPoint New();

      [Template("new {this}({0})")]
      public abstract dom.WebKitPoint New(double x);

      [Template("new {this}({0}, {1})")]
      public abstract dom.WebKitPoint New(double x, double y);
    }

    [Virtual]
    public abstract class WebSocketTypeConfig : IObject
    {
      private dom.WebSocket _prototype_BackingField;

      public virtual dom.WebSocket prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.WebSocket New(string url);

      [Template("new {this}({0}, {1})")]
      public abstract dom.WebSocket New(string url, Union<string, string[]> protocols);

      [Template("new {this}({0}, {1})")]
      public abstract dom.WebSocket New(string url, string protocols);

      [Template("new {this}({0}, {1})")]
      public abstract dom.WebSocket New(string url, string[] protocols);

      public abstract ushort CLOSED { get; }

      public abstract ushort CLOSING { get; }

      public abstract ushort CONNECTING { get; }

      public abstract ushort OPEN { get; }
    }

    [Virtual]
    public abstract class WheelEventTypeConfig : IObject
    {
      private dom.WheelEvent _prototype_BackingField;

      public virtual dom.WheelEvent prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.WheelEvent New(string typeArg);

      [Template("new {this}({0}, {1})")]
      public abstract dom.WheelEvent New(string typeArg, dom.WheelEventInit eventInitDict);

      public abstract uint DOM_DELTA_LINE { get; }

      public abstract uint DOM_DELTA_PAGE { get; }

      public abstract uint DOM_DELTA_PIXEL { get; }
    }

    [Virtual]
    public abstract class WindowTypeConfig : IObject
    {
      private dom.Window _prototype_BackingField;

      public virtual dom.Window prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.Window New();
    }

    [Virtual]
    public abstract class WorkerTypeConfig : IObject
    {
      private dom.Worker _prototype_BackingField;

      public virtual dom.Worker prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.Worker New(string stringUrl);
    }

    [Virtual]
    public abstract class WritableStreamTypeConfig : IObject
    {
      private dom.WritableStream _prototype_BackingField;

      public virtual dom.WritableStream prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WritableStream New();

      [Template("new {this}({0})")]
      public abstract dom.WritableStream New(dom.UnderlyingSink underlyingSink);

      [Template("new {this}({0}, {1})")]
      public abstract dom.WritableStream New(
        dom.UnderlyingSink underlyingSink,
        dom.QueuingStrategy strategy);
    }

    [Virtual]
    public abstract class WritableStreamDefaultControllerTypeConfig : IObject
    {
      private dom.WritableStreamDefaultController _prototype_BackingField;

      public virtual dom.WritableStreamDefaultController prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WritableStreamDefaultController New();
    }

    [Virtual]
    public abstract class WritableStreamDefaultWriterTypeConfig : IObject
    {
      private dom.WritableStreamDefaultWriter _prototype_BackingField;

      public virtual dom.WritableStreamDefaultWriter prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.WritableStreamDefaultWriter New();
    }

    [Virtual]
    public abstract class XMLDocumentTypeConfig : IObject
    {
      private dom.XMLDocument _prototype_BackingField;

      public virtual dom.XMLDocument prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.XMLDocument New();
    }

    [Virtual]
    public abstract class XMLHttpRequestTypeConfig : IObject
    {
      private dom.XMLHttpRequest _prototype_BackingField;

      public virtual dom.XMLHttpRequest prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.XMLHttpRequest New();

      public abstract ushort DONE { get; }

      public abstract ushort HEADERS_RECEIVED { get; }

      public abstract ushort LOADING { get; }

      public abstract ushort OPENED { get; }

      public abstract ushort UNSENT { get; }
    }

    [Virtual]
    public abstract class XMLHttpRequestUploadTypeConfig : IObject
    {
      private dom.XMLHttpRequestUpload _prototype_BackingField;

      public virtual dom.XMLHttpRequestUpload prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.XMLHttpRequestUpload New();
    }

    [Virtual]
    public abstract class XMLSerializerTypeConfig : IObject
    {
      private dom.XMLSerializer _prototype_BackingField;

      public virtual dom.XMLSerializer prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.XMLSerializer New();
    }

    [Virtual]
    public abstract class XPathEvaluatorTypeConfig : IObject
    {
      private dom.XPathEvaluator _prototype_BackingField;

      public virtual dom.XPathEvaluator prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.XPathEvaluator New();
    }

    [Virtual]
    public abstract class XPathExpressionTypeConfig : IObject
    {
      private dom.XPathExpression _prototype_BackingField;

      public virtual dom.XPathExpression prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.XPathExpression New();
    }

    [Virtual]
    public abstract class XPathNSResolverTypeConfig : IObject
    {
      private dom.XPathNSResolver _prototype_BackingField;

      public virtual dom.XPathNSResolver prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.XPathNSResolver New();
    }

    [Virtual]
    public abstract class XPathResultTypeConfig : IObject
    {
      private dom.XPathResult _prototype_BackingField;

      public virtual dom.XPathResult prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.XPathResult New();

      public abstract double ANY_TYPE { get; }

      public abstract double ANY_UNORDERED_NODE_TYPE { get; }

      public abstract double BOOLEAN_TYPE { get; }

      public abstract double FIRST_ORDERED_NODE_TYPE { get; }

      public abstract double NUMBER_TYPE { get; }

      public abstract double ORDERED_NODE_ITERATOR_TYPE { get; }

      public abstract double ORDERED_NODE_SNAPSHOT_TYPE { get; }

      public abstract double STRING_TYPE { get; }

      public abstract double UNORDERED_NODE_ITERATOR_TYPE { get; }

      public abstract double UNORDERED_NODE_SNAPSHOT_TYPE { get; }
    }

    [Virtual]
    public abstract class XSLTProcessorTypeConfig : IObject
    {
      private dom.XSLTProcessor _prototype_BackingField;

      public virtual dom.XSLTProcessor prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}()")]
      public abstract dom.XSLTProcessor New();
    }

    [Virtual]
    public abstract class webkitRTCPeerConnectionTypeConfig : IObject
    {
      private dom.webkitRTCPeerConnection _prototype_BackingField;

      public virtual dom.webkitRTCPeerConnection prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      [Template("new {this}({0})")]
      public abstract dom.webkitRTCPeerConnection New(dom.RTCConfiguration configuration);
    }

    [Virtual]
    public abstract class AudioConfig : IObject
    {
      [Template("new {this}()")]
      public abstract dom.HTMLAudioElement New();

      [Template("new {this}({0})")]
      public abstract dom.HTMLAudioElement New(string src);
    }

    [Virtual]
    public abstract class ImageConfig : IObject
    {
      [Template("new {this}()")]
      public abstract dom.HTMLImageElement New();

      [Template("new {this}({0})")]
      public abstract dom.HTMLImageElement New(double width);

      [Template("new {this}({0}, {1})")]
      public abstract dom.HTMLImageElement New(double width, double height);
    }

    [Virtual]
    public abstract class OptionConfig : IObject
    {
      [Template("new {this}()")]
      public abstract dom.HTMLOptionElement New();

      [Template("new {this}({0})")]
      public abstract dom.HTMLOptionElement New(string text);

      [Template("new {this}({0}, {1})")]
      public abstract dom.HTMLOptionElement New(string text, string value);

      [Template("new {this}({0}, {1}, {2})")]
      public abstract dom.HTMLOptionElement New(string text, string value, bool defaultSelected);

      [Template("new {this}({0}, {1}, {2}, {3})")]
      public abstract dom.HTMLOptionElement New(
        string text,
        string value,
        bool defaultSelected,
        bool selected);
    }

    [Generated]
    public delegate void onabortFn(dom.UIEvent ev);

    [Generated]
    public delegate void onbeforeunloadFn(dom.BeforeUnloadEvent ev);

    [Generated]
    public delegate void onblurFn(dom.FocusEvent ev);

    [Generated]
    public delegate void oncanplayFn(dom.Event ev);

    [Generated]
    public delegate void onclickFn(dom.MouseEvent ev);

    [Generated]
    public delegate void oncontextmenuFn(dom.PointerEvent ev);

    [Generated]
    public delegate void ondevicelightFn(dom.DeviceLightEvent ev);

    [Generated]
    public delegate void ondevicemotionFn(dom.DeviceMotionEvent ev);

    [Generated]
    public delegate void ondeviceorientationFn(dom.DeviceOrientationEvent ev);

    [Generated]
    public delegate void ondragFn(dom.DragEvent ev);

    [Generated]
    public delegate void onhashchangeFn(dom.HashChangeEvent ev);

    [Generated]
    public delegate void onkeydownFn(dom.KeyboardEvent ev);

    [Generated]
    public delegate void onmessageFn(dom.MessageEvent ev);

    [Generated]
    public delegate void onmousewheelFn(dom.WheelEvent ev);

    [Generated]
    public delegate void onpagehideFn(dom.PageTransitionEvent ev);

    [Generated]
    public delegate void onpopstateFn(dom.PopStateEvent ev);

    [Generated]
    public delegate void onprogressFn(dom.ProgressEvent ev);

    [Generated]
    public delegate void onstorageFn(dom.StorageEvent ev);

    [Generated]
    public delegate void ontouchcancelFn(dom.TouchEvent ev);

    [Generated]
    public delegate void ontouchendFn(dom.TouchEvent ev);

    [Generated]
    public delegate void ontouchmoveFn(dom.TouchEvent ev);

    [Generated]
    public delegate void ontouchstartFn(dom.TouchEvent ev);

    [Generated]
    public delegate void setIntervalFn(params object[] args);

    [Generated]
    public delegate void setTimeoutFn(params object[] args);

    [Generated]
    public delegate void setImmediateFn(params object[] args);

    [Generated]
    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public delegate void addEventListenerFn<K>(object ev);

    [Generated]
    [Where("K", typeof (KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
    public delegate void removeEventListenerFn<K>(object ev);

    public static class Literals
    {
      [Template("<self>\"drag\"")]
      public static readonly dom.Literals.Types.drag drag;
      [Template("<self>\"dragend\"")]
      public static readonly dom.Literals.Types.dragend dragend;
      [Template("<self>\"dragenter\"")]
      public static readonly dom.Literals.Types.dragenter dragenter;
      [Template("<self>\"dragexit\"")]
      public static readonly dom.Literals.Types.dragexit dragexit;
      [Template("<self>\"dragleave\"")]
      public static readonly dom.Literals.Types.dragleave dragleave;
      [Template("<self>\"dragover\"")]
      public static readonly dom.Literals.Types.dragover dragover;
      [Template("<self>\"dragstart\"")]
      public static readonly dom.Literals.Types.dragstart dragstart;
      [Template("<self>\"drop\"")]
      public static readonly dom.Literals.Types.drop drop;
      [Template("<self>\"auto\"")]
      public static readonly dom.Literals.Types.auto auto;
      [Template("<self>\"instant\"")]
      public static readonly dom.Literals.Types.instant instant;
      [Template("<self>\"smooth\"")]
      public static readonly dom.Literals.Types.smooth smooth;
      [Template("<self>\"start\"")]
      public static readonly dom.Literals.Types.start start;
      [Template("<self>\"center\"")]
      public static readonly dom.Literals.Types.center center;
      [Template("<self>\"end\"")]
      public static readonly dom.Literals.Types.end end;
      [Template("<self>\"nearest\"")]
      public static readonly dom.Literals.Types.nearest nearest;
      [Template("<self>\"manual\"")]
      public static readonly dom.Literals.Types.manual manual;
      [Template("<self>\"beforebegin\"")]
      public static readonly dom.Literals.Types.beforebegin beforebegin;
      [Template("<self>\"afterbegin\"")]
      public static readonly dom.Literals.Types.afterbegin afterbegin;
      [Template("<self>\"beforeend\"")]
      public static readonly dom.Literals.Types.beforeend beforeend;
      [Template("<self>\"afterend\"")]
      public static readonly dom.Literals.Types.afterend afterend;
      [Template("<self>\"any\"")]
      public static readonly dom.Literals.Types.any any;
      [Template("<self>\"natural\"")]
      public static readonly dom.Literals.Types.natural natural;
      [Template("<self>\"portrait\"")]
      public static readonly dom.Literals.Types.portrait portrait;
      [Template("<self>\"landscape\"")]
      public static readonly dom.Literals.Types.landscape landscape;
      [Template("<self>\"portrait-primary\"")]
      public static readonly dom.Literals.Types.portrait_primary portrait_primary;
      [Template("<self>\"portrait-secondary\"")]
      public static readonly dom.Literals.Types.portrait_secondary portrait_secondary;
      [Template("<self>\"landscape-primary\"")]
      public static readonly dom.Literals.Types.landscape_primary landscape_primary;
      [Template("<self>\"landscape-secondary\"")]
      public static readonly dom.Literals.Types.landscape_secondary landscape_secondary;
      [Template("<self>\"attributes\"")]
      public static readonly dom.Literals.Types.attributes attributes;
      [Template("<self>\"characterData\"")]
      public static readonly dom.Literals.Types.characterData characterData;
      [Template("<self>\"childList\"")]
      public static readonly dom.Literals.Types.childList childList;
      [Template("<self>\"window\"")]
      public static readonly dom.Literals.Types.window window;
      [Template("<self>\"worker\"")]
      public static readonly dom.Literals.Types.worker worker;
      [Template("<self>\"sharedworker\"")]
      public static readonly dom.Literals.Types.sharedworker sharedworker;
      [Template("<self>\"all\"")]
      public static readonly dom.Literals.Types.all all;
      [Template("<self>\"segments\"")]
      public static readonly dom.Literals.Types.segments segments;
      [Template("<self>\"sequence\"")]
      public static readonly dom.Literals.Types.sequence sequence;
      [Template("<self>\"balanced\"")]
      public static readonly dom.Literals.Types.balanced balanced;
      [Template("<self>\"interactive\"")]
      public static readonly dom.Literals.Types.interactive interactive;
      [Template("<self>\"playback\"")]
      public static readonly dom.Literals.Types.playback playback;
      [Template("<self>\"suspended\"")]
      public static readonly dom.Literals.Types.suspended suspended;
      [Template("<self>\"running\"")]
      public static readonly dom.Literals.Types.running running;
      [Template("<self>\"closed\"")]
      public static readonly dom.Literals.Types.closed closed;
      [Template("<self>\"blob\"")]
      public static readonly dom.Literals.Types.blob blob;
      [Template("<self>\"arraybuffer\"")]
      public static readonly dom.Literals.Types.arraybuffer arraybuffer;
      [Template("<self>\"lowpass\"")]
      public static readonly dom.Literals.Types.lowpass lowpass;
      [Template("<self>\"highpass\"")]
      public static readonly dom.Literals.Types.highpass highpass;
      [Template("<self>\"bandpass\"")]
      public static readonly dom.Literals.Types.bandpass bandpass;
      [Template("<self>\"lowshelf\"")]
      public static readonly dom.Literals.Types.lowshelf lowshelf;
      [Template("<self>\"highshelf\"")]
      public static readonly dom.Literals.Types.highshelf highshelf;
      [Template("<self>\"peaking\"")]
      public static readonly dom.Literals.Types.peaking peaking;
      [Template("<self>\"notch\"")]
      public static readonly dom.Literals.Types.notch notch;
      [Template("<self>\"allpass\"")]
      public static readonly dom.Literals.Types.allpass allpass;
      [Template("<self>\"\"")]
      public static readonly dom.Literals.Types._ _;
      [Template("<self>\"maybe\"")]
      public static readonly dom.Literals.Types.maybe maybe;
      [Template("<self>\"probably\"")]
      public static readonly dom.Literals.Types.probably probably;
      [Template("<self>\"nonzero\"")]
      public static readonly dom.Literals.Types.nonzero nonzero;
      [Template("<self>\"evenodd\"")]
      public static readonly dom.Literals.Types.evenodd evenodd;
      [Template("<self>\"max\"")]
      public static readonly dom.Literals.Types.max max;
      [Template("<self>\"clamped-max\"")]
      public static readonly dom.Literals.Types.clamped_max clamped_max;
      [Template("<self>\"explicit\"")]
      public static readonly dom.Literals.Types.@explicit @explicit;
      [Template("<self>\"speakers\"")]
      public static readonly dom.Literals.Types.speakers speakers;
      [Template("<self>\"discrete\"")]
      public static readonly dom.Literals.Types.discrete discrete;
      [Template("<self>\"monitor\"")]
      public static readonly dom.Literals.Types.monitor monitor;
      [Template("<self>\"application\"")]
      public static readonly dom.Literals.Types.application application;
      [Template("<self>\"browser\"")]
      public static readonly dom.Literals.Types.browser browser;
      [Template("<self>\"linear\"")]
      public static readonly dom.Literals.Types.linear linear;
      [Template("<self>\"inverse\"")]
      public static readonly dom.Literals.Types.inverse inverse;
      [Template("<self>\"exponential\"")]
      public static readonly dom.Literals.Types.exponential exponential;
      [Template("<self>\"network\"")]
      public static readonly dom.Literals.Types.network network;
      [Template("<self>\"decode\"")]
      public static readonly dom.Literals.Types.decode decode;
      [Template("<self>\"character\"")]
      public static readonly dom.Literals.Types.character character;
      [Template("<self>\"word\"")]
      public static readonly dom.Literals.Types.word word;
      [Template("<self>\"sentence\"")]
      public static readonly dom.Literals.Types.sentence sentence;
      [Template("<self>\"textedit\"")]
      public static readonly dom.Literals.Types.textedit textedit;
      [Template("<self>\"left\"")]
      public static readonly dom.Literals.Types.left left;
      [Template("<self>\"right\"")]
      public static readonly dom.Literals.Types.right right;
      [Template("<self>\"vibration\"")]
      public static readonly dom.Literals.Types.vibration vibration;
      [Template("<self>\"mouse\"")]
      public static readonly dom.Literals.Types.mouse mouse;
      [Template("<self>\"keyboard\"")]
      public static readonly dom.Literals.Types.keyboard keyboard;
      [Template("<self>\"gamepad\"")]
      public static readonly dom.Literals.Types.gamepad gamepad;
      [Template("<self>\"standard\"")]
      public static readonly dom.Literals.Types.standard standard;
      [Template("<self>\"next\"")]
      public static readonly dom.Literals.Types.next next;
      [Template("<self>\"nextunique\"")]
      public static readonly dom.Literals.Types.nextunique nextunique;
      [Template("<self>\"prev\"")]
      public static readonly dom.Literals.Types.prev prev;
      [Template("<self>\"prevunique\"")]
      public static readonly dom.Literals.Types.prevunique prevunique;
      [Template("<self>\"pending\"")]
      public static readonly dom.Literals.Types.pending pending;
      [Template("<self>\"done\"")]
      public static readonly dom.Literals.Types.done done;
      [Template("<self>\"readonly\"")]
      public static readonly dom.Literals.Types.@readonly @readonly;
      [Template("<self>\"readwrite\"")]
      public static readonly dom.Literals.Types.readwrite readwrite;
      [Template("<self>\"versionchange\"")]
      public static readonly dom.Literals.Types.versionchange versionchange;
      [Template("<self>\"raw\"")]
      public static readonly dom.Literals.Types.raw raw;
      [Template("<self>\"spki\"")]
      public static readonly dom.Literals.Types.spki spki;
      [Template("<self>\"pkcs8\"")]
      public static readonly dom.Literals.Types.pkcs8 pkcs8;
      [Template("<self>\"jwk\"")]
      public static readonly dom.Literals.Types.jwk jwk;
      [Template("<self>\"public\"")]
      public static readonly dom.Literals.Types.@public @public;
      [Template("<self>\"private\"")]
      public static readonly dom.Literals.Types.@private @private;
      [Template("<self>\"secret\"")]
      public static readonly dom.Literals.Types.secret secret;
      [Template("<self>\"encrypt\"")]
      public static readonly dom.Literals.Types.encrypt encrypt;
      [Template("<self>\"decrypt\"")]
      public static readonly dom.Literals.Types.decrypt decrypt;
      [Template("<self>\"sign\"")]
      public static readonly dom.Literals.Types.sign sign;
      [Template("<self>\"verify\"")]
      public static readonly dom.Literals.Types.verify verify;
      [Template("<self>\"deriveKey\"")]
      public static readonly dom.Literals.Types.deriveKey deriveKey;
      [Template("<self>\"deriveBits\"")]
      public static readonly dom.Literals.Types.deriveBits deriveBits;
      [Template("<self>\"wrapKey\"")]
      public static readonly dom.Literals.Types.wrapKey wrapKey;
      [Template("<self>\"unwrapKey\"")]
      public static readonly dom.Literals.Types.unwrapKey unwrapKey;
      [Template("<self>\"inactive\"")]
      public static readonly dom.Literals.Types.inactive inactive;
      [Template("<self>\"active\"")]
      public static readonly dom.Literals.Types.active active;
      [Template("<self>\"disambiguation\"")]
      public static readonly dom.Literals.Types.disambiguation disambiguation;
      [Template("<self>\"FIDO_2_0\"")]
      public static readonly dom.Literals.Types.FIDO_2_0 FIDO_2_0;
      [Template("<self>\"os\"")]
      public static readonly dom.Literals.Types.os os;
      [Template("<self>\"stun\"")]
      public static readonly dom.Literals.Types.stun stun;
      [Template("<self>\"turn\"")]
      public static readonly dom.Literals.Types.turn turn;
      [Template("<self>\"peer-derived\"")]
      public static readonly dom.Literals.Types.peer_derived peer_derived;
      [Template("<self>\"failed\"")]
      public static readonly dom.Literals.Types.failed failed;
      [Template("<self>\"direct\"")]
      public static readonly dom.Literals.Types.direct direct;
      [Template("<self>\"relay\"")]
      public static readonly dom.Literals.Types.relay relay;
      [Template("<self>\"description\"")]
      public static readonly dom.Literals.Types.description description;
      [Template("<self>\"localclientevent\"")]
      public static readonly dom.Literals.Types.localclientevent localclientevent;
      [Template("<self>\"inbound-network\"")]
      public static readonly dom.Literals.Types.inbound_network inbound_network;
      [Template("<self>\"outbound-network\"")]
      public static readonly dom.Literals.Types.outbound_network outbound_network;
      [Template("<self>\"inbound-payload\"")]
      public static readonly dom.Literals.Types.inbound_payload inbound_payload;
      [Template("<self>\"outbound-payload\"")]
      public static readonly dom.Literals.Types.outbound_payload outbound_payload;
      [Template("<self>\"transportdiagnostics\"")]
      public static readonly dom.Literals.Types.transportdiagnostics transportdiagnostics;
      [Template("<self>\"Embedded\"")]
      public static readonly dom.Literals.Types.Embedded Embedded;
      [Template("<self>\"USB\"")]
      public static readonly dom.Literals.Types.USB USB;
      [Template("<self>\"NFC\"")]
      public static readonly dom.Literals.Types.NFC NFC;
      [Template("<self>\"BT\"")]
      public static readonly dom.Literals.Types.BT BT;
      [Template("<self>\"unknown\"")]
      public static readonly dom.Literals.Types.unknown unknown;
      [Template("<self>\"defer\"")]
      public static readonly dom.Literals.Types.defer defer;
      [Template("<self>\"allow\"")]
      public static readonly dom.Literals.Types.allow allow;
      [Template("<self>\"deny\"")]
      public static readonly dom.Literals.Types.deny deny;
      [Template("<self>\"geolocation\"")]
      public static readonly dom.Literals.Types.geolocation geolocation;
      [Template("<self>\"unlimitedIndexedDBQuota\"")]
      public static readonly dom.Literals.Types.unlimitedIndexedDBQuota unlimitedIndexedDBQuota;
      [Template("<self>\"media\"")]
      public static readonly dom.Literals.Types.media media;
      [Template("<self>\"pointerlock\"")]
      public static readonly dom.Literals.Types.pointerlock pointerlock;
      [Template("<self>\"webnotifications\"")]
      public static readonly dom.Literals.Types.webnotifications webnotifications;
      [Template("<self>\"audioinput\"")]
      public static readonly dom.Literals.Types.audioinput audioinput;
      [Template("<self>\"audiooutput\"")]
      public static readonly dom.Literals.Types.audiooutput audiooutput;
      [Template("<self>\"videoinput\"")]
      public static readonly dom.Literals.Types.videoinput videoinput;
      [Template("<self>\"license-request\"")]
      public static readonly dom.Literals.Types.license_request license_request;
      [Template("<self>\"license-renewal\"")]
      public static readonly dom.Literals.Types.license_renewal license_renewal;
      [Template("<self>\"license-release\"")]
      public static readonly dom.Literals.Types.license_release license_release;
      [Template("<self>\"individualization-request\"")]
      public static readonly dom.Literals.Types.individualization_request individualization_request;
      [Template("<self>\"temporary\"")]
      public static readonly dom.Literals.Types.temporary temporary;
      [Template("<self>\"persistent-license\"")]
      public static readonly dom.Literals.Types.persistent_license persistent_license;
      [Template("<self>\"persistent-release-message\"")]
      public static readonly dom.Literals.Types.persistent_release_message persistent_release_message;
      [Template("<self>\"usable\"")]
      public static readonly dom.Literals.Types.usable usable;
      [Template("<self>\"expired\"")]
      public static readonly dom.Literals.Types.expired expired;
      [Template("<self>\"output-downscaled\"")]
      public static readonly dom.Literals.Types.output_downscaled output_downscaled;
      [Template("<self>\"output-not-allowed\"")]
      public static readonly dom.Literals.Types.output_not_allowed output_not_allowed;
      [Template("<self>\"status-pending\"")]
      public static readonly dom.Literals.Types.status_pending status_pending;
      [Template("<self>\"internal-error\"")]
      public static readonly dom.Literals.Types.internal_error internal_error;
      [Template("<self>\"required\"")]
      public static readonly dom.Literals.Types.required required;
      [Template("<self>\"optional\"")]
      public static readonly dom.Literals.Types.optional optional;
      [Template("<self>\"not-allowed\"")]
      public static readonly dom.Literals.Types.not_allowed not_allowed;
      [Template("<self>\"live\"")]
      public static readonly dom.Literals.Types.live live;
      [Template("<self>\"ended\"")]
      public static readonly dom.Literals.Types.ended ended;
      [Template("<self>\"up\"")]
      public static readonly dom.Literals.Types.up up;
      [Template("<self>\"down\"")]
      public static readonly dom.Literals.Types.down down;
      [Template("<self>\"navigate\"")]
      public static readonly dom.Literals.Types.navigate navigate;
      [Template("<self>\"reload\"")]
      public static readonly dom.Literals.Types.reload reload;
      [Template("<self>\"back_forward\"")]
      public static readonly dom.Literals.Types.back_forward back_forward;
      [Template("<self>\"prerender\"")]
      public static readonly dom.Literals.Types.prerender prerender;
      [Template("<self>\"ltr\"")]
      public static readonly dom.Literals.Types.ltr ltr;
      [Template("<self>\"rtl\"")]
      public static readonly dom.Literals.Types.rtl rtl;
      [Template("<self>\"default\"")]
      public static readonly dom.Literals.Types.@default @default;
      [Template("<self>\"denied\"")]
      public static readonly dom.Literals.Types.denied denied;
      [Template("<self>\"granted\"")]
      public static readonly dom.Literals.Types.granted granted;
      [Template("<self>\"sine\"")]
      public static readonly dom.Literals.Types.sine sine;
      [Template("<self>\"square\"")]
      public static readonly dom.Literals.Types.square square;
      [Template("<self>\"sawtooth\"")]
      public static readonly dom.Literals.Types.sawtooth sawtooth;
      [Template("<self>\"triangle\"")]
      public static readonly dom.Literals.Types.triangle triangle;
      [Template("<self>\"custom\"")]
      public static readonly dom.Literals.Types.custom custom;
      [Template("<self>\"none\"")]
      public static readonly dom.Literals.Types.none none;
      [Template("<self>\"2x\"")]
      public static readonly dom.Literals.Types._2x _2x;
      [Template("<self>\"4x\"")]
      public static readonly dom.Literals.Types._4x _4x;
      [Template("<self>\"equalpower\"")]
      public static readonly dom.Literals.Types.equalpower equalpower;
      [Template("<self>\"HRTF\"")]
      public static readonly dom.Literals.Types.HRTF HRTF;
      [Template("<self>\"success\"")]
      public static readonly dom.Literals.Types.success success;
      [Template("<self>\"fail\"")]
      public static readonly dom.Literals.Types.fail fail;
      [Template("<self>\"shipping\"")]
      public static readonly dom.Literals.Types.shipping shipping;
      [Template("<self>\"delivery\"")]
      public static readonly dom.Literals.Types.delivery delivery;
      [Template("<self>\"pickup\"")]
      public static readonly dom.Literals.Types.pickup pickup;
      [Template("<self>\"p256dh\"")]
      public static readonly dom.Literals.Types.p256dh p256dh;
      [Template("<self>\"auth\"")]
      public static readonly dom.Literals.Types.auth auth;
      [Template("<self>\"prompt\"")]
      public static readonly dom.Literals.Types.prompt prompt;
      [Template("<self>\"max-compat\"")]
      public static readonly dom.Literals.Types.max_compat max_compat;
      [Template("<self>\"max-bundle\"")]
      public static readonly dom.Literals.Types.max_bundle max_bundle;
      [Template("<self>\"maintain-framerate\"")]
      public static readonly dom.Literals.Types.maintain_framerate maintain_framerate;
      [Template("<self>\"maintain-resolution\"")]
      public static readonly dom.Literals.Types.maintain_resolution maintain_resolution;
      [Template("<self>\"client\"")]
      public static readonly dom.Literals.Types.client client;
      [Template("<self>\"server\"")]
      public static readonly dom.Literals.Types.server server;
      [Template("<self>\"new\"")]
      public static readonly dom.Literals.Types.@new @new;
      [Template("<self>\"connecting\"")]
      public static readonly dom.Literals.Types.connecting connecting;
      [Template("<self>\"connected\"")]
      public static readonly dom.Literals.Types.connected connected;
      [Template("<self>\"host\"")]
      public static readonly dom.Literals.Types.host host;
      [Template("<self>\"srflx\"")]
      public static readonly dom.Literals.Types.srflx srflx;
      [Template("<self>\"prflx\"")]
      public static readonly dom.Literals.Types.prflx prflx;
      [Template("<self>\"RTP\"")]
      public static readonly dom.Literals.Types.RTP RTP;
      [Template("<self>\"RTCP\"")]
      public static readonly dom.Literals.Types.RTCP RTCP;
      [Template("<self>\"checking\"")]
      public static readonly dom.Literals.Types.checking checking;
      [Template("<self>\"completed\"")]
      public static readonly dom.Literals.Types.completed completed;
      [Template("<self>\"disconnected\"")]
      public static readonly dom.Literals.Types.disconnected disconnected;
      [Template("<self>\"nohost\"")]
      public static readonly dom.Literals.Types.nohost nohost;
      [Template("<self>\"gathering\"")]
      public static readonly dom.Literals.Types.gathering gathering;
      [Template("<self>\"complete\"")]
      public static readonly dom.Literals.Types.complete complete;
      [Template("<self>\"udp\"")]
      public static readonly dom.Literals.Types.udp udp;
      [Template("<self>\"tcp\"")]
      public static readonly dom.Literals.Types.tcp tcp;
      [Template("<self>\"controlling\"")]
      public static readonly dom.Literals.Types.controlling controlling;
      [Template("<self>\"controlled\"")]
      public static readonly dom.Literals.Types.controlled controlled;
      [Template("<self>\"passive\"")]
      public static readonly dom.Literals.Types.passive passive;
      [Template("<self>\"so\"")]
      public static readonly dom.Literals.Types.so so;
      [Template("<self>\"offer\"")]
      public static readonly dom.Literals.Types.offer offer;
      [Template("<self>\"pranswer\"")]
      public static readonly dom.Literals.Types.pranswer pranswer;
      [Template("<self>\"answer\"")]
      public static readonly dom.Literals.Types.answer answer;
      [Template("<self>\"stable\"")]
      public static readonly dom.Literals.Types.stable stable;
      [Template("<self>\"have-local-offer\"")]
      public static readonly dom.Literals.Types.have_local_offer have_local_offer;
      [Template("<self>\"have-remote-offer\"")]
      public static readonly dom.Literals.Types.have_remote_offer have_remote_offer;
      [Template("<self>\"have-local-pranswer\"")]
      public static readonly dom.Literals.Types.have_local_pranswer have_local_pranswer;
      [Template("<self>\"have-remote-pranswer\"")]
      public static readonly dom.Literals.Types.have_remote_pranswer have_remote_pranswer;
      [Template("<self>\"frozen\"")]
      public static readonly dom.Literals.Types.frozen frozen;
      [Template("<self>\"waiting\"")]
      public static readonly dom.Literals.Types.waiting waiting;
      [Template("<self>\"inprogress\"")]
      public static readonly dom.Literals.Types.inprogress inprogress;
      [Template("<self>\"succeeded\"")]
      public static readonly dom.Literals.Types.succeeded succeeded;
      [Template("<self>\"cancelled\"")]
      public static readonly dom.Literals.Types.cancelled cancelled;
      [Template("<self>\"serverreflexive\"")]
      public static readonly dom.Literals.Types.serverreflexive serverreflexive;
      [Template("<self>\"peerreflexive\"")]
      public static readonly dom.Literals.Types.peerreflexive peerreflexive;
      [Template("<self>\"relayed\"")]
      public static readonly dom.Literals.Types.relayed relayed;
      [Template("<self>\"inboundrtp\"")]
      public static readonly dom.Literals.Types.inboundrtp inboundrtp;
      [Template("<self>\"outboundrtp\"")]
      public static readonly dom.Literals.Types.outboundrtp outboundrtp;
      [Template("<self>\"session\"")]
      public static readonly dom.Literals.Types.session session;
      [Template("<self>\"datachannel\"")]
      public static readonly dom.Literals.Types.datachannel datachannel;
      [Template("<self>\"track\"")]
      public static readonly dom.Literals.Types.track track;
      [Template("<self>\"transport\"")]
      public static readonly dom.Literals.Types.transport transport;
      [Template("<self>\"candidatepair\"")]
      public static readonly dom.Literals.Types.candidatepair candidatepair;
      [Template("<self>\"localcandidate\"")]
      public static readonly dom.Literals.Types.localcandidate localcandidate;
      [Template("<self>\"remotecandidate\"")]
      public static readonly dom.Literals.Types.remotecandidate remotecandidate;
      [Template("<self>\"open\"")]
      public static readonly dom.Literals.Types.open open;
      [Template("<self>\"no-referrer\"")]
      public static readonly dom.Literals.Types.no_referrer no_referrer;
      [Template("<self>\"no-referrer-when-downgrade\"")]
      public static readonly dom.Literals.Types.no_referrer_when_downgrade no_referrer_when_downgrade;
      [Template("<self>\"origin-only\"")]
      public static readonly dom.Literals.Types.origin_only origin_only;
      [Template("<self>\"origin-when-cross-origin\"")]
      public static readonly dom.Literals.Types.origin_when_cross_origin origin_when_cross_origin;
      [Template("<self>\"unsafe-url\"")]
      public static readonly dom.Literals.Types.unsafe_url unsafe_url;
      [Template("<self>\"no-store\"")]
      public static readonly dom.Literals.Types.no_store no_store;
      [Template("<self>\"no-cache\"")]
      public static readonly dom.Literals.Types.no_cache no_cache;
      [Template("<self>\"force-cache\"")]
      public static readonly dom.Literals.Types.force_cache force_cache;
      [Template("<self>\"omit\"")]
      public static readonly dom.Literals.Types.omit omit;
      [Template("<self>\"same-origin\"")]
      public static readonly dom.Literals.Types.same_origin same_origin;
      [Template("<self>\"include\"")]
      public static readonly dom.Literals.Types.include include;
      [Template("<self>\"document\"")]
      public static readonly dom.Literals.Types.document document;
      [Template("<self>\"subresource\"")]
      public static readonly dom.Literals.Types.subresource subresource;
      [Template("<self>\"no-cors\"")]
      public static readonly dom.Literals.Types.no_cors no_cors;
      [Template("<self>\"cors\"")]
      public static readonly dom.Literals.Types.cors cors;
      [Template("<self>\"follow\"")]
      public static readonly dom.Literals.Types.follow follow;
      [Template("<self>\"error\"")]
      public static readonly dom.Literals.Types.error error;
      [Template("<self>\"audio\"")]
      public static readonly dom.Literals.Types.audio audio;
      [Template("<self>\"font\"")]
      public static readonly dom.Literals.Types.font font;
      [Template("<self>\"image\"")]
      public static readonly dom.Literals.Types.image image;
      [Template("<self>\"script\"")]
      public static readonly dom.Literals.Types.script script;
      [Template("<self>\"style\"")]
      public static readonly dom.Literals.Types.style style;
      [Template("<self>\"video\"")]
      public static readonly dom.Literals.Types.video video;
      [Template("<self>\"basic\"")]
      public static readonly dom.Literals.Types.basic basic;
      [Template("<self>\"opaque\"")]
      public static readonly dom.Literals.Types.opaque opaque;
      [Template("<self>\"opaqueredirect\"")]
      public static readonly dom.Literals.Types.opaqueredirect opaqueredirect;
      [Template("<self>\"ScopedCred\"")]
      public static readonly dom.Literals.Types.ScopedCred ScopedCred;
      [Template("<self>\"installing\"")]
      public static readonly dom.Literals.Types.installing installing;
      [Template("<self>\"installed\"")]
      public static readonly dom.Literals.Types.installed installed;
      [Template("<self>\"activating\"")]
      public static readonly dom.Literals.Types.activating activating;
      [Template("<self>\"activated\"")]
      public static readonly dom.Literals.Types.activated activated;
      [Template("<self>\"redundant\"")]
      public static readonly dom.Literals.Types.redundant redundant;
      [Template("<self>\"subtitles\"")]
      public static readonly dom.Literals.Types.subtitles subtitles;
      [Template("<self>\"captions\"")]
      public static readonly dom.Literals.Types.captions captions;
      [Template("<self>\"descriptions\"")]
      public static readonly dom.Literals.Types.descriptions descriptions;
      [Template("<self>\"chapters\"")]
      public static readonly dom.Literals.Types.chapters chapters;
      [Template("<self>\"metadata\"")]
      public static readonly dom.Literals.Types.metadata metadata;
      [Template("<self>\"disabled\"")]
      public static readonly dom.Literals.Types.disabled disabled;
      [Template("<self>\"hidden\"")]
      public static readonly dom.Literals.Types.hidden hidden;
      [Template("<self>\"showing\"")]
      public static readonly dom.Literals.Types.showing showing;
      [Template("<self>\"usb\"")]
      public static readonly dom.Literals.Types.usb usb;
      [Template("<self>\"nfc\"")]
      public static readonly dom.Literals.Types.nfc nfc;
      [Template("<self>\"ble\"")]
      public static readonly dom.Literals.Types.ble ble;
      [Template("<self>\"mounted\"")]
      public static readonly dom.Literals.Types.mounted mounted;
      [Template("<self>\"navigation\"")]
      public static readonly dom.Literals.Types.navigation navigation;
      [Template("<self>\"requested\"")]
      public static readonly dom.Literals.Types.requested requested;
      [Template("<self>\"unmounted\"")]
      public static readonly dom.Literals.Types.unmounted unmounted;
      [Template("<self>\"user\"")]
      public static readonly dom.Literals.Types.user user;
      [Template("<self>\"environment\"")]
      public static readonly dom.Literals.Types.environment environment;
      [Template("<self>\"visible\"")]
      public static readonly dom.Literals.Types.visible visible;
      [Template("<self>\"unloaded\"")]
      public static readonly dom.Literals.Types.unloaded unloaded;
      [Template("<self>\"json\"")]
      public static readonly dom.Literals.Types.json json;
      [Template("<self>\"text\"")]
      public static readonly dom.Literals.Types.text text;
      [Template("<self>\"idle\"")]
      public static readonly dom.Literals.Types.idle idle;
      [Template("<self>\"paused\"")]
      public static readonly dom.Literals.Types.paused paused;
      [Template("<self>\"finished\"")]
      public static readonly dom.Literals.Types.finished finished;
      [Template("<self>\"normal\"")]
      public static readonly dom.Literals.Types.normal normal;
      [Template("<self>\"reverse\"")]
      public static readonly dom.Literals.Types.reverse reverse;
      [Template("<self>\"alternate\"")]
      public static readonly dom.Literals.Types.alternate alternate;
      [Template("<self>\"alternate-reverse\"")]
      public static readonly dom.Literals.Types.alternate_reverse alternate_reverse;
      [Template("<self>\"forwards\"")]
      public static readonly dom.Literals.Types.forwards forwards;
      [Template("<self>\"backwards\"")]
      public static readonly dom.Literals.Types.backwards backwards;
      [Template("<self>\"both\"")]
      public static readonly dom.Literals.Types.both both;
      [Template("<self>\"http://www.w3.org/1999/xhtml\"")]
      public static readonly dom.Literals.Types.http_SlashSlashwww_w3_orgSlash1999Slashxhtml http_SlashSlashwww_w3_orgSlash1999Slashxhtml;
      [Template("<self>\"http://www.w3.org/2000/svg\"")]
      public static readonly dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg http_SlashSlashwww_w3_orgSlash2000Slashsvg;
      [Template("<self>\"a\"")]
      public static readonly dom.Literals.Types.a a;
      [Template("<self>\"circle\"")]
      public static readonly dom.Literals.Types.circle circle;
      [Template("<self>\"clipPath\"")]
      public static readonly dom.Literals.Types.clipPath clipPath;
      [Template("<self>\"componentTransferFunction\"")]
      public static readonly dom.Literals.Types.componentTransferFunction componentTransferFunction;
      [Template("<self>\"defs\"")]
      public static readonly dom.Literals.Types.defs defs;
      [Template("<self>\"desc\"")]
      public static readonly dom.Literals.Types.desc desc;
      [Template("<self>\"ellipse\"")]
      public static readonly dom.Literals.Types.ellipse ellipse;
      [Template("<self>\"feBlend\"")]
      public static readonly dom.Literals.Types.feBlend feBlend;
      [Template("<self>\"feColorMatrix\"")]
      public static readonly dom.Literals.Types.feColorMatrix feColorMatrix;
      [Template("<self>\"feComponentTransfer\"")]
      public static readonly dom.Literals.Types.feComponentTransfer feComponentTransfer;
      [Template("<self>\"feComposite\"")]
      public static readonly dom.Literals.Types.feComposite feComposite;
      [Template("<self>\"feConvolveMatrix\"")]
      public static readonly dom.Literals.Types.feConvolveMatrix feConvolveMatrix;
      [Template("<self>\"feDiffuseLighting\"")]
      public static readonly dom.Literals.Types.feDiffuseLighting feDiffuseLighting;
      [Template("<self>\"feDisplacementMap\"")]
      public static readonly dom.Literals.Types.feDisplacementMap feDisplacementMap;
      [Template("<self>\"feDistantLight\"")]
      public static readonly dom.Literals.Types.feDistantLight feDistantLight;
      [Template("<self>\"feFlood\"")]
      public static readonly dom.Literals.Types.feFlood feFlood;
      [Template("<self>\"feFuncA\"")]
      public static readonly dom.Literals.Types.feFuncA feFuncA;
      [Template("<self>\"feFuncB\"")]
      public static readonly dom.Literals.Types.feFuncB feFuncB;
      [Template("<self>\"feFuncG\"")]
      public static readonly dom.Literals.Types.feFuncG feFuncG;
      [Template("<self>\"feFuncR\"")]
      public static readonly dom.Literals.Types.feFuncR feFuncR;
      [Template("<self>\"feGaussianBlur\"")]
      public static readonly dom.Literals.Types.feGaussianBlur feGaussianBlur;
      [Template("<self>\"feImage\"")]
      public static readonly dom.Literals.Types.feImage feImage;
      [Template("<self>\"feMerge\"")]
      public static readonly dom.Literals.Types.feMerge feMerge;
      [Template("<self>\"feMergeNode\"")]
      public static readonly dom.Literals.Types.feMergeNode feMergeNode;
      [Template("<self>\"feMorphology\"")]
      public static readonly dom.Literals.Types.feMorphology feMorphology;
      [Template("<self>\"feOffset\"")]
      public static readonly dom.Literals.Types.feOffset feOffset;
      [Template("<self>\"fePointLight\"")]
      public static readonly dom.Literals.Types.fePointLight fePointLight;
      [Template("<self>\"feSpecularLighting\"")]
      public static readonly dom.Literals.Types.feSpecularLighting feSpecularLighting;
      [Template("<self>\"feSpotLight\"")]
      public static readonly dom.Literals.Types.feSpotLight feSpotLight;
      [Template("<self>\"feTile\"")]
      public static readonly dom.Literals.Types.feTile feTile;
      [Template("<self>\"feTurbulence\"")]
      public static readonly dom.Literals.Types.feTurbulence feTurbulence;
      [Template("<self>\"filter\"")]
      public static readonly dom.Literals.Types.filter filter;
      [Template("<self>\"foreignObject\"")]
      public static readonly dom.Literals.Types.foreignObject foreignObject;
      [Template("<self>\"g\"")]
      public static readonly dom.Literals.Types.g g;
      [Template("<self>\"gradient\"")]
      public static readonly dom.Literals.Types.gradient gradient;
      [Template("<self>\"line\"")]
      public static readonly dom.Literals.Types.line line;
      [Template("<self>\"linearGradient\"")]
      public static readonly dom.Literals.Types.linearGradient linearGradient;
      [Template("<self>\"marker\"")]
      public static readonly dom.Literals.Types.marker marker;
      [Template("<self>\"mask\"")]
      public static readonly dom.Literals.Types.mask mask;
      [Template("<self>\"path\"")]
      public static readonly dom.Literals.Types.path path;
      [Template("<self>\"pattern\"")]
      public static readonly dom.Literals.Types.pattern pattern;
      [Template("<self>\"polygon\"")]
      public static readonly dom.Literals.Types.polygon polygon;
      [Template("<self>\"polyline\"")]
      public static readonly dom.Literals.Types.polyline polyline;
      [Template("<self>\"radialGradient\"")]
      public static readonly dom.Literals.Types.radialGradient radialGradient;
      [Template("<self>\"rect\"")]
      public static readonly dom.Literals.Types.rect rect;
      [Template("<self>\"svg\"")]
      public static readonly dom.Literals.Types.svg svg;
      [Template("<self>\"stop\"")]
      public static readonly dom.Literals.Types.stop stop;
      [Template("<self>\"switch\"")]
      public static readonly dom.Literals.Types.@switch @switch;
      [Template("<self>\"symbol\"")]
      public static readonly dom.Literals.Types.symbol symbol;
      [Template("<self>\"tspan\"")]
      public static readonly dom.Literals.Types.tspan tspan;
      [Template("<self>\"textContent\"")]
      public static readonly dom.Literals.Types.textContent textContent;
      [Template("<self>\"textPath\"")]
      public static readonly dom.Literals.Types.textPath textPath;
      [Template("<self>\"textPositioning\"")]
      public static readonly dom.Literals.Types.textPositioning textPositioning;
      [Template("<self>\"title\"")]
      public static readonly dom.Literals.Types.title title;
      [Template("<self>\"use\"")]
      public static readonly dom.Literals.Types.use use;
      [Template("<self>\"view\"")]
      public static readonly dom.Literals.Types.view view;
      [Template("<self>\"AnimationEvent\"")]
      public static readonly dom.Literals.Types.AnimationEvent AnimationEvent;
      [Template("<self>\"AnimationPlaybackEvent\"")]
      public static readonly dom.Literals.Types.AnimationPlaybackEvent AnimationPlaybackEvent;
      [Template("<self>\"AudioProcessingEvent\"")]
      public static readonly dom.Literals.Types.AudioProcessingEvent AudioProcessingEvent;
      [Template("<self>\"BeforeUnloadEvent\"")]
      public static readonly dom.Literals.Types.BeforeUnloadEvent BeforeUnloadEvent;
      [Template("<self>\"ClipboardEvent\"")]
      public static readonly dom.Literals.Types.ClipboardEvent ClipboardEvent;
      [Template("<self>\"CloseEvent\"")]
      public static readonly dom.Literals.Types.CloseEvent CloseEvent;
      [Template("<self>\"CompositionEvent\"")]
      public static readonly dom.Literals.Types.CompositionEvent CompositionEvent;
      [Template("<self>\"CustomEvent\"")]
      public static readonly dom.Literals.Types.CustomEvent CustomEvent;
      [Template("<self>\"DeviceLightEvent\"")]
      public static readonly dom.Literals.Types.DeviceLightEvent DeviceLightEvent;
      [Template("<self>\"DeviceMotionEvent\"")]
      public static readonly dom.Literals.Types.DeviceMotionEvent DeviceMotionEvent;
      [Template("<self>\"DeviceOrientationEvent\"")]
      public static readonly dom.Literals.Types.DeviceOrientationEvent DeviceOrientationEvent;
      [Template("<self>\"DragEvent\"")]
      public static readonly dom.Literals.Types.DragEvent DragEvent;
      [Template("<self>\"ErrorEvent\"")]
      public static readonly dom.Literals.Types.ErrorEvent ErrorEvent;
      [Template("<self>\"Event\"")]
      public static readonly dom.Literals.Types.Event Event;
      [Template("<self>\"Events\"")]
      public static readonly dom.Literals.Types.Events Events;
      [Template("<self>\"FocusEvent\"")]
      public static readonly dom.Literals.Types.FocusEvent FocusEvent;
      [Template("<self>\"FocusNavigationEvent\"")]
      public static readonly dom.Literals.Types.FocusNavigationEvent FocusNavigationEvent;
      [Template("<self>\"GamepadEvent\"")]
      public static readonly dom.Literals.Types.GamepadEvent GamepadEvent;
      [Template("<self>\"HashChangeEvent\"")]
      public static readonly dom.Literals.Types.HashChangeEvent HashChangeEvent;
      [Template("<self>\"IDBVersionChangeEvent\"")]
      public static readonly dom.Literals.Types.IDBVersionChangeEvent IDBVersionChangeEvent;
      [Template("<self>\"KeyboardEvent\"")]
      public static readonly dom.Literals.Types.KeyboardEvent KeyboardEvent;
      [Template("<self>\"ListeningStateChangedEvent\"")]
      public static readonly dom.Literals.Types.ListeningStateChangedEvent ListeningStateChangedEvent;
      [Template("<self>\"MSDCCEvent\"")]
      public static readonly dom.Literals.Types.MSDCCEvent MSDCCEvent;
      [Template("<self>\"MSDSHEvent\"")]
      public static readonly dom.Literals.Types.MSDSHEvent MSDSHEvent;
      [Template("<self>\"MSMediaKeyMessageEvent\"")]
      public static readonly dom.Literals.Types.MSMediaKeyMessageEvent MSMediaKeyMessageEvent;
      [Template("<self>\"MSMediaKeyNeededEvent\"")]
      public static readonly dom.Literals.Types.MSMediaKeyNeededEvent MSMediaKeyNeededEvent;
      [Template("<self>\"MediaEncryptedEvent\"")]
      public static readonly dom.Literals.Types.MediaEncryptedEvent MediaEncryptedEvent;
      [Template("<self>\"MediaKeyMessageEvent\"")]
      public static readonly dom.Literals.Types.MediaKeyMessageEvent MediaKeyMessageEvent;
      [Template("<self>\"MediaStreamErrorEvent\"")]
      public static readonly dom.Literals.Types.MediaStreamErrorEvent MediaStreamErrorEvent;
      [Template("<self>\"MediaStreamEvent\"")]
      public static readonly dom.Literals.Types.MediaStreamEvent MediaStreamEvent;
      [Template("<self>\"MediaStreamTrackEvent\"")]
      public static readonly dom.Literals.Types.MediaStreamTrackEvent MediaStreamTrackEvent;
      [Template("<self>\"MessageEvent\"")]
      public static readonly dom.Literals.Types.MessageEvent MessageEvent;
      [Template("<self>\"MouseEvent\"")]
      public static readonly dom.Literals.Types.MouseEvent MouseEvent;
      [Template("<self>\"MouseEvents\"")]
      public static readonly dom.Literals.Types.MouseEvents MouseEvents;
      [Template("<self>\"MutationEvent\"")]
      public static readonly dom.Literals.Types.MutationEvent MutationEvent;
      [Template("<self>\"MutationEvents\"")]
      public static readonly dom.Literals.Types.MutationEvents MutationEvents;
      [Template("<self>\"OfflineAudioCompletionEvent\"")]
      public static readonly dom.Literals.Types.OfflineAudioCompletionEvent OfflineAudioCompletionEvent;
      [Template("<self>\"OverflowEvent\"")]
      public static readonly dom.Literals.Types.OverflowEvent OverflowEvent;
      [Template("<self>\"PageTransitionEvent\"")]
      public static readonly dom.Literals.Types.PageTransitionEvent PageTransitionEvent;
      [Template("<self>\"PaymentRequestUpdateEvent\"")]
      public static readonly dom.Literals.Types.PaymentRequestUpdateEvent PaymentRequestUpdateEvent;
      [Template("<self>\"PermissionRequestedEvent\"")]
      public static readonly dom.Literals.Types.PermissionRequestedEvent PermissionRequestedEvent;
      [Template("<self>\"PointerEvent\"")]
      public static readonly dom.Literals.Types.PointerEvent PointerEvent;
      [Template("<self>\"PopStateEvent\"")]
      public static readonly dom.Literals.Types.PopStateEvent PopStateEvent;
      [Template("<self>\"ProgressEvent\"")]
      public static readonly dom.Literals.Types.ProgressEvent ProgressEvent;
      [Template("<self>\"PromiseRejectionEvent\"")]
      public static readonly dom.Literals.Types.PromiseRejectionEvent PromiseRejectionEvent;
      [Template("<self>\"RTCDTMFToneChangeEvent\"")]
      public static readonly dom.Literals.Types.RTCDTMFToneChangeEvent RTCDTMFToneChangeEvent;
      [Template("<self>\"RTCDtlsTransportStateChangedEvent\"")]
      public static readonly dom.Literals.Types.RTCDtlsTransportStateChangedEvent RTCDtlsTransportStateChangedEvent;
      [Template("<self>\"RTCIceCandidatePairChangedEvent\"")]
      public static readonly dom.Literals.Types.RTCIceCandidatePairChangedEvent RTCIceCandidatePairChangedEvent;
      [Template("<self>\"RTCIceGathererEvent\"")]
      public static readonly dom.Literals.Types.RTCIceGathererEvent RTCIceGathererEvent;
      [Template("<self>\"RTCIceTransportStateChangedEvent\"")]
      public static readonly dom.Literals.Types.RTCIceTransportStateChangedEvent RTCIceTransportStateChangedEvent;
      [Template("<self>\"RTCPeerConnectionIceEvent\"")]
      public static readonly dom.Literals.Types.RTCPeerConnectionIceEvent RTCPeerConnectionIceEvent;
      [Template("<self>\"RTCSsrcConflictEvent\"")]
      public static readonly dom.Literals.Types.RTCSsrcConflictEvent RTCSsrcConflictEvent;
      [Template("<self>\"SVGZoomEvent\"")]
      public static readonly dom.Literals.Types.SVGZoomEvent SVGZoomEvent;
      [Template("<self>\"SVGZoomEvents\"")]
      public static readonly dom.Literals.Types.SVGZoomEvents SVGZoomEvents;
      [Template("<self>\"SecurityPolicyViolationEvent\"")]
      public static readonly dom.Literals.Types.SecurityPolicyViolationEvent SecurityPolicyViolationEvent;
      [Template("<self>\"ServiceWorkerMessageEvent\"")]
      public static readonly dom.Literals.Types.ServiceWorkerMessageEvent ServiceWorkerMessageEvent;
      [Template("<self>\"SpeechSynthesisEvent\"")]
      public static readonly dom.Literals.Types.SpeechSynthesisEvent SpeechSynthesisEvent;
      [Template("<self>\"StorageEvent\"")]
      public static readonly dom.Literals.Types.StorageEvent StorageEvent;
      [Template("<self>\"TextEvent\"")]
      public static readonly dom.Literals.Types.TextEvent TextEvent;
      [Template("<self>\"TouchEvent\"")]
      public static readonly dom.Literals.Types.TouchEvent TouchEvent;
      [Template("<self>\"TrackEvent\"")]
      public static readonly dom.Literals.Types.TrackEvent TrackEvent;
      [Template("<self>\"TransitionEvent\"")]
      public static readonly dom.Literals.Types.TransitionEvent TransitionEvent;
      [Template("<self>\"UIEvent\"")]
      public static readonly dom.Literals.Types.UIEvent UIEvent;
      [Template("<self>\"UIEvents\"")]
      public static readonly dom.Literals.Types.UIEvents UIEvents;
      [Template("<self>\"VRDisplayEvent\"")]
      public static readonly dom.Literals.Types.VRDisplayEvent VRDisplayEvent;
      [Template("<self>\"VRDisplayEvent \"")]
      public static readonly dom.Literals.Types.VRDisplayEvent_ VRDisplayEvent_;
      [Template("<self>\"WebGLContextEvent\"")]
      public static readonly dom.Literals.Types.WebGLContextEvent WebGLContextEvent;
      [Template("<self>\"WheelEvent\"")]
      public static readonly dom.Literals.Types.WheelEvent WheelEvent;
      [Template("<self>\"2d\"")]
      public static readonly dom.Literals.Types._2d _2d;
      [Template("<self>\"webgl\"")]
      public static readonly dom.Literals.Types.webgl webgl;
      [Template("<self>\"experimental-webgl\"")]
      public static readonly dom.Literals.Types.experimental_webgl experimental_webgl;
      [Template("<self>\"async\"")]
      public static readonly dom.Literals.Types.async async;
      [Template("<self>\"sync\"")]
      public static readonly dom.Literals.Types.sync sync;
      [Template("<self>\"forward\"")]
      public static readonly dom.Literals.Types.forward forward;
      [Template("<self>\"backward\"")]
      public static readonly dom.Literals.Types.backward backward;
      [Template("<self>\"flipY\"")]
      public static readonly dom.Literals.Types.flipY flipY;
      [Template("<self>\"premultiply\"")]
      public static readonly dom.Literals.Types.premultiply premultiply;
      [Template("<self>\"pixelated\"")]
      public static readonly dom.Literals.Types.pixelated pixelated;
      [Template("<self>\"low\"")]
      public static readonly dom.Literals.Types.low low;
      [Template("<self>\"medium\"")]
      public static readonly dom.Literals.Types.medium medium;
      [Template("<self>\"high\"")]
      public static readonly dom.Literals.Types.high high;
      [Template("<self>\"EXT_blend_minmax\"")]
      public static readonly dom.Literals.Types.EXT_blend_minmax EXT_blend_minmax;
      [Template("<self>\"EXT_texture_filter_anisotropic\"")]
      public static readonly dom.Literals.Types.EXT_texture_filter_anisotropic EXT_texture_filter_anisotropic;
      [Template("<self>\"EXT_frag_depth\"")]
      public static readonly dom.Literals.Types.EXT_frag_depth EXT_frag_depth;
      [Template("<self>\"EXT_shader_texture_lod\"")]
      public static readonly dom.Literals.Types.EXT_shader_texture_lod EXT_shader_texture_lod;
      [Template("<self>\"EXT_sRGB\"")]
      public static readonly dom.Literals.Types.EXT_sRGB EXT_sRGB;
      [Template("<self>\"OES_vertex_array_object\"")]
      public static readonly dom.Literals.Types.OES_vertex_array_object OES_vertex_array_object;
      [Template("<self>\"WEBGL_color_buffer_float\"")]
      public static readonly dom.Literals.Types.WEBGL_color_buffer_float WEBGL_color_buffer_float;
      [Template("<self>\"WEBGL_compressed_texture_astc\"")]
      public static readonly dom.Literals.Types.WEBGL_compressed_texture_astc WEBGL_compressed_texture_astc;
      [Template("<self>\"WEBGL_compressed_texture_s3tc_srgb\"")]
      public static readonly dom.Literals.Types.WEBGL_compressed_texture_s3tc_srgb WEBGL_compressed_texture_s3tc_srgb;
      [Template("<self>\"WEBGL_debug_shaders\"")]
      public static readonly dom.Literals.Types.WEBGL_debug_shaders WEBGL_debug_shaders;
      [Template("<self>\"WEBGL_draw_buffers\"")]
      public static readonly dom.Literals.Types.WEBGL_draw_buffers WEBGL_draw_buffers;
      [Template("<self>\"WEBGL_lose_context\"")]
      public static readonly dom.Literals.Types.WEBGL_lose_context WEBGL_lose_context;
      [Template("<self>\"WEBGL_depth_texture\"")]
      public static readonly dom.Literals.Types.WEBGL_depth_texture WEBGL_depth_texture;
      [Template("<self>\"WEBGL_debug_renderer_info\"")]
      public static readonly dom.Literals.Types.WEBGL_debug_renderer_info WEBGL_debug_renderer_info;
      [Template("<self>\"WEBGL_compressed_texture_s3tc\"")]
      public static readonly dom.Literals.Types.WEBGL_compressed_texture_s3tc WEBGL_compressed_texture_s3tc;
      [Template("<self>\"OES_texture_half_float_linear\"")]
      public static readonly dom.Literals.Types.OES_texture_half_float_linear OES_texture_half_float_linear;
      [Template("<self>\"OES_texture_half_float\"")]
      public static readonly dom.Literals.Types.OES_texture_half_float OES_texture_half_float;
      [Template("<self>\"OES_texture_float_linear\"")]
      public static readonly dom.Literals.Types.OES_texture_float_linear OES_texture_float_linear;
      [Template("<self>\"OES_texture_float\"")]
      public static readonly dom.Literals.Types.OES_texture_float OES_texture_float;
      [Template("<self>\"OES_standard_derivatives\"")]
      public static readonly dom.Literals.Types.OES_standard_derivatives OES_standard_derivatives;
      [Template("<self>\"OES_element_index_uint\"")]
      public static readonly dom.Literals.Types.OES_element_index_uint OES_element_index_uint;
      [Template("<self>\"ANGLE_instanced_arrays\"")]
      public static readonly dom.Literals.Types.ANGLE_instanced_arrays ANGLE_instanced_arrays;

      public static class Types
      {
        [Name("System.String")]
        public class drag : LiteralType<string>
        {
          private extern drag();
        }

        [Name("System.String")]
        public class dragend : LiteralType<string>
        {
          private extern dragend();
        }

        [Name("System.String")]
        public class dragenter : LiteralType<string>
        {
          private extern dragenter();
        }

        [Name("System.String")]
        public class dragexit : LiteralType<string>
        {
          private extern dragexit();
        }

        [Name("System.String")]
        public class dragleave : LiteralType<string>
        {
          private extern dragleave();
        }

        [Name("System.String")]
        public class dragover : LiteralType<string>
        {
          private extern dragover();
        }

        [Name("System.String")]
        public class dragstart : LiteralType<string>
        {
          private extern dragstart();
        }

        [Name("System.String")]
        public class drop : LiteralType<string>
        {
          private extern drop();
        }

        [Name("System.String")]
        public class auto : LiteralType<string>
        {
          private extern auto();
        }

        [Name("System.String")]
        public class instant : LiteralType<string>
        {
          private extern instant();
        }

        [Name("System.String")]
        public class smooth : LiteralType<string>
        {
          private extern smooth();
        }

        [Name("System.String")]
        public class start : LiteralType<string>
        {
          private extern start();
        }

        [Name("System.String")]
        public class center : LiteralType<string>
        {
          private extern center();
        }

        [Name("System.String")]
        public class end : LiteralType<string>
        {
          private extern end();
        }

        [Name("System.String")]
        public class nearest : LiteralType<string>
        {
          private extern nearest();
        }

        [Name("System.String")]
        public class manual : LiteralType<string>
        {
          private extern manual();
        }

        [Name("System.String")]
        public class beforebegin : LiteralType<string>
        {
          private extern beforebegin();
        }

        [Name("System.String")]
        public class afterbegin : LiteralType<string>
        {
          private extern afterbegin();
        }

        [Name("System.String")]
        public class beforeend : LiteralType<string>
        {
          private extern beforeend();
        }

        [Name("System.String")]
        public class afterend : LiteralType<string>
        {
          private extern afterend();
        }

        [Name("System.String")]
        public class any : LiteralType<string>
        {
          private extern any();
        }

        [Name("System.String")]
        public class natural : LiteralType<string>
        {
          private extern natural();
        }

        [Name("System.String")]
        public class portrait : LiteralType<string>
        {
          private extern portrait();
        }

        [Name("System.String")]
        public class landscape : LiteralType<string>
        {
          private extern landscape();
        }

        [Name("System.String")]
        public class portrait_primary : LiteralType<string>
        {
          private extern portrait_primary();
        }

        [Name("System.String")]
        public class portrait_secondary : LiteralType<string>
        {
          private extern portrait_secondary();
        }

        [Name("System.String")]
        public class landscape_primary : LiteralType<string>
        {
          private extern landscape_primary();
        }

        [Name("System.String")]
        public class landscape_secondary : LiteralType<string>
        {
          private extern landscape_secondary();
        }

        [Name("System.String")]
        public class attributes : LiteralType<string>
        {
          private extern attributes();
        }

        [Name("System.String")]
        public class characterData : LiteralType<string>
        {
          private extern characterData();
        }

        [Name("System.String")]
        public class childList : LiteralType<string>
        {
          private extern childList();
        }

        [Name("System.String")]
        public class window : LiteralType<string>
        {
          private extern window();
        }

        [Name("System.String")]
        public class worker : LiteralType<string>
        {
          private extern worker();
        }

        [Name("System.String")]
        public class sharedworker : LiteralType<string>
        {
          private extern sharedworker();
        }

        [Name("System.String")]
        public class all : LiteralType<string>
        {
          private extern all();
        }

        [Name("System.String")]
        public class segments : LiteralType<string>
        {
          private extern segments();
        }

        [Name("System.String")]
        public class sequence : LiteralType<string>
        {
          private extern sequence();
        }

        [Name("System.String")]
        public class balanced : LiteralType<string>
        {
          private extern balanced();
        }

        [Name("System.String")]
        public class interactive : LiteralType<string>
        {
          private extern interactive();
        }

        [Name("System.String")]
        public class playback : LiteralType<string>
        {
          private extern playback();
        }

        [Name("System.String")]
        public class suspended : LiteralType<string>
        {
          private extern suspended();
        }

        [Name("System.String")]
        public class running : LiteralType<string>
        {
          private extern running();
        }

        [Name("System.String")]
        public class closed : LiteralType<string>
        {
          private extern closed();
        }

        [Name("System.String")]
        public class blob : LiteralType<string>
        {
          private extern blob();
        }

        [Name("System.String")]
        public class arraybuffer : LiteralType<string>
        {
          private extern arraybuffer();
        }

        [Name("System.String")]
        public class lowpass : LiteralType<string>
        {
          private extern lowpass();
        }

        [Name("System.String")]
        public class highpass : LiteralType<string>
        {
          private extern highpass();
        }

        [Name("System.String")]
        public class bandpass : LiteralType<string>
        {
          private extern bandpass();
        }

        [Name("System.String")]
        public class lowshelf : LiteralType<string>
        {
          private extern lowshelf();
        }

        [Name("System.String")]
        public class highshelf : LiteralType<string>
        {
          private extern highshelf();
        }

        [Name("System.String")]
        public class peaking : LiteralType<string>
        {
          private extern peaking();
        }

        [Name("System.String")]
        public class notch : LiteralType<string>
        {
          private extern notch();
        }

        [Name("System.String")]
        public class allpass : LiteralType<string>
        {
          private extern allpass();
        }

        [Name("System.String")]
        public class _ : LiteralType<string>
        {
          private extern _();
        }

        [Name("System.String")]
        public class maybe : LiteralType<string>
        {
          private extern maybe();
        }

        [Name("System.String")]
        public class probably : LiteralType<string>
        {
          private extern probably();
        }

        [Name("System.String")]
        public class nonzero : LiteralType<string>
        {
          private extern nonzero();
        }

        [Name("System.String")]
        public class evenodd : LiteralType<string>
        {
          private extern evenodd();
        }

        [Name("System.String")]
        public class max : LiteralType<string>
        {
          private extern max();
        }

        [Name("System.String")]
        public class clamped_max : LiteralType<string>
        {
          private extern clamped_max();
        }

        [Name("System.String")]
        public class @explicit : LiteralType<string>
        {
          private extern @explicit();
        }

        [Name("System.String")]
        public class speakers : LiteralType<string>
        {
          private extern speakers();
        }

        [Name("System.String")]
        public class discrete : LiteralType<string>
        {
          private extern discrete();
        }

        [Name("System.String")]
        public class monitor : LiteralType<string>
        {
          private extern monitor();
        }

        [Name("System.String")]
        public class application : LiteralType<string>
        {
          private extern application();
        }

        [Name("System.String")]
        public class browser : LiteralType<string>
        {
          private extern browser();
        }

        [Name("System.String")]
        public class linear : LiteralType<string>
        {
          private extern linear();
        }

        [Name("System.String")]
        public class inverse : LiteralType<string>
        {
          private extern inverse();
        }

        [Name("System.String")]
        public class exponential : LiteralType<string>
        {
          private extern exponential();
        }

        [Name("System.String")]
        public class network : LiteralType<string>
        {
          private extern network();
        }

        [Name("System.String")]
        public class decode : LiteralType<string>
        {
          private extern decode();
        }

        [Name("System.String")]
        public class character : LiteralType<string>
        {
          private extern character();
        }

        [Name("System.String")]
        public class word : LiteralType<string>
        {
          private extern word();
        }

        [Name("System.String")]
        public class sentence : LiteralType<string>
        {
          private extern sentence();
        }

        [Name("System.String")]
        public class textedit : LiteralType<string>
        {
          private extern textedit();
        }

        [Name("System.String")]
        public class left : LiteralType<string>
        {
          private extern left();
        }

        [Name("System.String")]
        public class right : LiteralType<string>
        {
          private extern right();
        }

        [Name("System.String")]
        public class vibration : LiteralType<string>
        {
          private extern vibration();
        }

        [Name("System.String")]
        public class mouse : LiteralType<string>
        {
          private extern mouse();
        }

        [Name("System.String")]
        public class keyboard : LiteralType<string>
        {
          private extern keyboard();
        }

        [Name("System.String")]
        public class gamepad : LiteralType<string>
        {
          private extern gamepad();
        }

        [Name("System.String")]
        public class standard : LiteralType<string>
        {
          private extern standard();
        }

        [Name("System.String")]
        public class next : LiteralType<string>
        {
          private extern next();
        }

        [Name("System.String")]
        public class nextunique : LiteralType<string>
        {
          private extern nextunique();
        }

        [Name("System.String")]
        public class prev : LiteralType<string>
        {
          private extern prev();
        }

        [Name("System.String")]
        public class prevunique : LiteralType<string>
        {
          private extern prevunique();
        }

        [Name("System.String")]
        public class pending : LiteralType<string>
        {
          private extern pending();
        }

        [Name("System.String")]
        public class done : LiteralType<string>
        {
          private extern done();
        }

        [Name("System.String")]
        public class @readonly : LiteralType<string>
        {
          private extern @readonly();
        }

        [Name("System.String")]
        public class readwrite : LiteralType<string>
        {
          private extern readwrite();
        }

        [Name("System.String")]
        public class versionchange : LiteralType<string>
        {
          private extern versionchange();
        }

        [Name("System.String")]
        public class raw : LiteralType<string>
        {
          private extern raw();
        }

        [Name("System.String")]
        public class spki : LiteralType<string>
        {
          private extern spki();
        }

        [Name("System.String")]
        public class pkcs8 : LiteralType<string>
        {
          private extern pkcs8();
        }

        [Name("System.String")]
        public class jwk : LiteralType<string>
        {
          private extern jwk();
        }

        [Name("System.String")]
        public class @public : LiteralType<string>
        {
          private extern @public();
        }

        [Name("System.String")]
        public class @private : LiteralType<string>
        {
          private extern @private();
        }

        [Name("System.String")]
        public class secret : LiteralType<string>
        {
          private extern secret();
        }

        [Name("System.String")]
        public class encrypt : LiteralType<string>
        {
          private extern encrypt();
        }

        [Name("System.String")]
        public class decrypt : LiteralType<string>
        {
          private extern decrypt();
        }

        [Name("System.String")]
        public class sign : LiteralType<string>
        {
          private extern sign();
        }

        [Name("System.String")]
        public class verify : LiteralType<string>
        {
          private extern verify();
        }

        [Name("System.String")]
        public class deriveKey : LiteralType<string>
        {
          private extern deriveKey();
        }

        [Name("System.String")]
        public class deriveBits : LiteralType<string>
        {
          private extern deriveBits();
        }

        [Name("System.String")]
        public class wrapKey : LiteralType<string>
        {
          private extern wrapKey();
        }

        [Name("System.String")]
        public class unwrapKey : LiteralType<string>
        {
          private extern unwrapKey();
        }

        [Name("System.String")]
        public class inactive : LiteralType<string>
        {
          private extern inactive();
        }

        [Name("System.String")]
        public class active : LiteralType<string>
        {
          private extern active();
        }

        [Name("System.String")]
        public class disambiguation : LiteralType<string>
        {
          private extern disambiguation();
        }

        [Name("System.String")]
        public class FIDO_2_0 : LiteralType<string>
        {
          private extern FIDO_2_0();
        }

        [Name("System.String")]
        public class os : LiteralType<string>
        {
          private extern os();
        }

        [Name("System.String")]
        public class stun : LiteralType<string>
        {
          private extern stun();
        }

        [Name("System.String")]
        public class turn : LiteralType<string>
        {
          private extern turn();
        }

        [Name("System.String")]
        public class peer_derived : LiteralType<string>
        {
          private extern peer_derived();
        }

        [Name("System.String")]
        public class failed : LiteralType<string>
        {
          private extern failed();
        }

        [Name("System.String")]
        public class direct : LiteralType<string>
        {
          private extern direct();
        }

        [Name("System.String")]
        public class relay : LiteralType<string>
        {
          private extern relay();
        }

        [Name("System.String")]
        public class description : LiteralType<string>
        {
          private extern description();
        }

        [Name("System.String")]
        public class localclientevent : LiteralType<string>
        {
          private extern localclientevent();
        }

        [Name("System.String")]
        public class inbound_network : LiteralType<string>
        {
          private extern inbound_network();
        }

        [Name("System.String")]
        public class outbound_network : LiteralType<string>
        {
          private extern outbound_network();
        }

        [Name("System.String")]
        public class inbound_payload : LiteralType<string>
        {
          private extern inbound_payload();
        }

        [Name("System.String")]
        public class outbound_payload : LiteralType<string>
        {
          private extern outbound_payload();
        }

        [Name("System.String")]
        public class transportdiagnostics : LiteralType<string>
        {
          private extern transportdiagnostics();
        }

        [Name("System.String")]
        public class Embedded : LiteralType<string>
        {
          private extern Embedded();
        }

        [Name("System.String")]
        public class USB : LiteralType<string>
        {
          private extern USB();
        }

        [Name("System.String")]
        public class NFC : LiteralType<string>
        {
          private extern NFC();
        }

        [Name("System.String")]
        public class BT : LiteralType<string>
        {
          private extern BT();
        }

        [Name("System.String")]
        public class unknown : LiteralType<string>
        {
          private extern unknown();
        }

        [Name("System.String")]
        public class defer : LiteralType<string>
        {
          private extern defer();
        }

        [Name("System.String")]
        public class allow : LiteralType<string>
        {
          private extern allow();
        }

        [Name("System.String")]
        public class deny : LiteralType<string>
        {
          private extern deny();
        }

        [Name("System.String")]
        public class geolocation : LiteralType<string>
        {
          private extern geolocation();
        }

        [Name("System.String")]
        public class unlimitedIndexedDBQuota : LiteralType<string>
        {
          private extern unlimitedIndexedDBQuota();
        }

        [Name("System.String")]
        public class media : LiteralType<string>
        {
          private extern media();
        }

        [Name("System.String")]
        public class pointerlock : LiteralType<string>
        {
          private extern pointerlock();
        }

        [Name("System.String")]
        public class webnotifications : LiteralType<string>
        {
          private extern webnotifications();
        }

        [Name("System.String")]
        public class audioinput : LiteralType<string>
        {
          private extern audioinput();
        }

        [Name("System.String")]
        public class audiooutput : LiteralType<string>
        {
          private extern audiooutput();
        }

        [Name("System.String")]
        public class videoinput : LiteralType<string>
        {
          private extern videoinput();
        }

        [Name("System.String")]
        public class license_request : LiteralType<string>
        {
          private extern license_request();
        }

        [Name("System.String")]
        public class license_renewal : LiteralType<string>
        {
          private extern license_renewal();
        }

        [Name("System.String")]
        public class license_release : LiteralType<string>
        {
          private extern license_release();
        }

        [Name("System.String")]
        public class individualization_request : LiteralType<string>
        {
          private extern individualization_request();
        }

        [Name("System.String")]
        public class temporary : LiteralType<string>
        {
          private extern temporary();
        }

        [Name("System.String")]
        public class persistent_license : LiteralType<string>
        {
          private extern persistent_license();
        }

        [Name("System.String")]
        public class persistent_release_message : LiteralType<string>
        {
          private extern persistent_release_message();
        }

        [Name("System.String")]
        public class usable : LiteralType<string>
        {
          private extern usable();
        }

        [Name("System.String")]
        public class expired : LiteralType<string>
        {
          private extern expired();
        }

        [Name("System.String")]
        public class output_downscaled : LiteralType<string>
        {
          private extern output_downscaled();
        }

        [Name("System.String")]
        public class output_not_allowed : LiteralType<string>
        {
          private extern output_not_allowed();
        }

        [Name("System.String")]
        public class status_pending : LiteralType<string>
        {
          private extern status_pending();
        }

        [Name("System.String")]
        public class internal_error : LiteralType<string>
        {
          private extern internal_error();
        }

        [Name("System.String")]
        public class required : LiteralType<string>
        {
          private extern required();
        }

        [Name("System.String")]
        public class optional : LiteralType<string>
        {
          private extern optional();
        }

        [Name("System.String")]
        public class not_allowed : LiteralType<string>
        {
          private extern not_allowed();
        }

        [Name("System.String")]
        public class live : LiteralType<string>
        {
          private extern live();
        }

        [Name("System.String")]
        public class ended : LiteralType<string>
        {
          private extern ended();
        }

        [Name("System.String")]
        public class up : LiteralType<string>
        {
          private extern up();
        }

        [Name("System.String")]
        public class down : LiteralType<string>
        {
          private extern down();
        }

        [Name("System.String")]
        public class navigate : LiteralType<string>
        {
          private extern navigate();
        }

        [Name("System.String")]
        public class reload : LiteralType<string>
        {
          private extern reload();
        }

        [Name("System.String")]
        public class back_forward : LiteralType<string>
        {
          private extern back_forward();
        }

        [Name("System.String")]
        public class prerender : LiteralType<string>
        {
          private extern prerender();
        }

        [Name("System.String")]
        public class ltr : LiteralType<string>
        {
          private extern ltr();
        }

        [Name("System.String")]
        public class rtl : LiteralType<string>
        {
          private extern rtl();
        }

        [Name("System.String")]
        public class @default : LiteralType<string>
        {
          private extern @default();
        }

        [Name("System.String")]
        public class denied : LiteralType<string>
        {
          private extern denied();
        }

        [Name("System.String")]
        public class granted : LiteralType<string>
        {
          private extern granted();
        }

        [Name("System.String")]
        public class sine : LiteralType<string>
        {
          private extern sine();
        }

        [Name("System.String")]
        public class square : LiteralType<string>
        {
          private extern square();
        }

        [Name("System.String")]
        public class sawtooth : LiteralType<string>
        {
          private extern sawtooth();
        }

        [Name("System.String")]
        public class triangle : LiteralType<string>
        {
          private extern triangle();
        }

        [Name("System.String")]
        public class custom : LiteralType<string>
        {
          private extern custom();
        }

        [Name("System.String")]
        public class none : LiteralType<string>
        {
          private extern none();
        }

        [Name("System.String")]
        public class _2x : LiteralType<string>
        {
          private extern _2x();
        }

        [Name("System.String")]
        public class _4x : LiteralType<string>
        {
          private extern _4x();
        }

        [Name("System.String")]
        public class equalpower : LiteralType<string>
        {
          private extern equalpower();
        }

        [Name("System.String")]
        public class HRTF : LiteralType<string>
        {
          private extern HRTF();
        }

        [Name("System.String")]
        public class success : LiteralType<string>
        {
          private extern success();
        }

        [Name("System.String")]
        public class fail : LiteralType<string>
        {
          private extern fail();
        }

        [Name("System.String")]
        public class shipping : LiteralType<string>
        {
          private extern shipping();
        }

        [Name("System.String")]
        public class delivery : LiteralType<string>
        {
          private extern delivery();
        }

        [Name("System.String")]
        public class pickup : LiteralType<string>
        {
          private extern pickup();
        }

        [Name("System.String")]
        public class p256dh : LiteralType<string>
        {
          private extern p256dh();
        }

        [Name("System.String")]
        public class auth : LiteralType<string>
        {
          private extern auth();
        }

        [Name("System.String")]
        public class prompt : LiteralType<string>
        {
          private extern prompt();
        }

        [Name("System.String")]
        public class max_compat : LiteralType<string>
        {
          private extern max_compat();
        }

        [Name("System.String")]
        public class max_bundle : LiteralType<string>
        {
          private extern max_bundle();
        }

        [Name("System.String")]
        public class maintain_framerate : LiteralType<string>
        {
          private extern maintain_framerate();
        }

        [Name("System.String")]
        public class maintain_resolution : LiteralType<string>
        {
          private extern maintain_resolution();
        }

        [Name("System.String")]
        public class client : LiteralType<string>
        {
          private extern client();
        }

        [Name("System.String")]
        public class server : LiteralType<string>
        {
          private extern server();
        }

        [Name("System.String")]
        public class @new : LiteralType<string>
        {
          private extern @new();
        }

        [Name("System.String")]
        public class connecting : LiteralType<string>
        {
          private extern connecting();
        }

        [Name("System.String")]
        public class connected : LiteralType<string>
        {
          private extern connected();
        }

        [Name("System.String")]
        public class host : LiteralType<string>
        {
          private extern host();
        }

        [Name("System.String")]
        public class srflx : LiteralType<string>
        {
          private extern srflx();
        }

        [Name("System.String")]
        public class prflx : LiteralType<string>
        {
          private extern prflx();
        }

        [Name("System.String")]
        public class RTP : LiteralType<string>
        {
          private extern RTP();
        }

        [Name("System.String")]
        public class RTCP : LiteralType<string>
        {
          private extern RTCP();
        }

        [Name("System.String")]
        public class checking : LiteralType<string>
        {
          private extern checking();
        }

        [Name("System.String")]
        public class completed : LiteralType<string>
        {
          private extern completed();
        }

        [Name("System.String")]
        public class disconnected : LiteralType<string>
        {
          private extern disconnected();
        }

        [Name("System.String")]
        public class nohost : LiteralType<string>
        {
          private extern nohost();
        }

        [Name("System.String")]
        public class gathering : LiteralType<string>
        {
          private extern gathering();
        }

        [Name("System.String")]
        public class complete : LiteralType<string>
        {
          private extern complete();
        }

        [Name("System.String")]
        public class udp : LiteralType<string>
        {
          private extern udp();
        }

        [Name("System.String")]
        public class tcp : LiteralType<string>
        {
          private extern tcp();
        }

        [Name("System.String")]
        public class controlling : LiteralType<string>
        {
          private extern controlling();
        }

        [Name("System.String")]
        public class controlled : LiteralType<string>
        {
          private extern controlled();
        }

        [Name("System.String")]
        public class passive : LiteralType<string>
        {
          private extern passive();
        }

        [Name("System.String")]
        public class so : LiteralType<string>
        {
          private extern so();
        }

        [Name("System.String")]
        public class offer : LiteralType<string>
        {
          private extern offer();
        }

        [Name("System.String")]
        public class pranswer : LiteralType<string>
        {
          private extern pranswer();
        }

        [Name("System.String")]
        public class answer : LiteralType<string>
        {
          private extern answer();
        }

        [Name("System.String")]
        public class stable : LiteralType<string>
        {
          private extern stable();
        }

        [Name("System.String")]
        public class have_local_offer : LiteralType<string>
        {
          private extern have_local_offer();
        }

        [Name("System.String")]
        public class have_remote_offer : LiteralType<string>
        {
          private extern have_remote_offer();
        }

        [Name("System.String")]
        public class have_local_pranswer : LiteralType<string>
        {
          private extern have_local_pranswer();
        }

        [Name("System.String")]
        public class have_remote_pranswer : LiteralType<string>
        {
          private extern have_remote_pranswer();
        }

        [Name("System.String")]
        public class frozen : LiteralType<string>
        {
          private extern frozen();
        }

        [Name("System.String")]
        public class waiting : LiteralType<string>
        {
          private extern waiting();
        }

        [Name("System.String")]
        public class inprogress : LiteralType<string>
        {
          private extern inprogress();
        }

        [Name("System.String")]
        public class succeeded : LiteralType<string>
        {
          private extern succeeded();
        }

        [Name("System.String")]
        public class cancelled : LiteralType<string>
        {
          private extern cancelled();
        }

        [Name("System.String")]
        public class serverreflexive : LiteralType<string>
        {
          private extern serverreflexive();
        }

        [Name("System.String")]
        public class peerreflexive : LiteralType<string>
        {
          private extern peerreflexive();
        }

        [Name("System.String")]
        public class relayed : LiteralType<string>
        {
          private extern relayed();
        }

        [Name("System.String")]
        public class inboundrtp : LiteralType<string>
        {
          private extern inboundrtp();
        }

        [Name("System.String")]
        public class outboundrtp : LiteralType<string>
        {
          private extern outboundrtp();
        }

        [Name("System.String")]
        public class session : LiteralType<string>
        {
          private extern session();
        }

        [Name("System.String")]
        public class datachannel : LiteralType<string>
        {
          private extern datachannel();
        }

        [Name("System.String")]
        public class track : LiteralType<string>
        {
          private extern track();
        }

        [Name("System.String")]
        public class transport : LiteralType<string>
        {
          private extern transport();
        }

        [Name("System.String")]
        public class candidatepair : LiteralType<string>
        {
          private extern candidatepair();
        }

        [Name("System.String")]
        public class localcandidate : LiteralType<string>
        {
          private extern localcandidate();
        }

        [Name("System.String")]
        public class remotecandidate : LiteralType<string>
        {
          private extern remotecandidate();
        }

        [Name("System.String")]
        public class open : LiteralType<string>
        {
          private extern open();
        }

        [Name("System.String")]
        public class no_referrer : LiteralType<string>
        {
          private extern no_referrer();
        }

        [Name("System.String")]
        public class no_referrer_when_downgrade : LiteralType<string>
        {
          private extern no_referrer_when_downgrade();
        }

        [Name("System.String")]
        public class origin_only : LiteralType<string>
        {
          private extern origin_only();
        }

        [Name("System.String")]
        public class origin_when_cross_origin : LiteralType<string>
        {
          private extern origin_when_cross_origin();
        }

        [Name("System.String")]
        public class unsafe_url : LiteralType<string>
        {
          private extern unsafe_url();
        }

        [Name("System.String")]
        public class no_store : LiteralType<string>
        {
          private extern no_store();
        }

        [Name("System.String")]
        public class no_cache : LiteralType<string>
        {
          private extern no_cache();
        }

        [Name("System.String")]
        public class force_cache : LiteralType<string>
        {
          private extern force_cache();
        }

        [Name("System.String")]
        public class omit : LiteralType<string>
        {
          private extern omit();
        }

        [Name("System.String")]
        public class same_origin : LiteralType<string>
        {
          private extern same_origin();
        }

        [Name("System.String")]
        public class include : LiteralType<string>
        {
          private extern include();
        }

        [Name("System.String")]
        public class document : LiteralType<string>
        {
          private extern document();
        }

        [Name("System.String")]
        public class subresource : LiteralType<string>
        {
          private extern subresource();
        }

        [Name("System.String")]
        public class no_cors : LiteralType<string>
        {
          private extern no_cors();
        }

        [Name("System.String")]
        public class cors : LiteralType<string>
        {
          private extern cors();
        }

        [Name("System.String")]
        public class follow : LiteralType<string>
        {
          private extern follow();
        }

        [Name("System.String")]
        public class error : LiteralType<string>
        {
          private extern error();
        }

        [Name("System.String")]
        public class audio : LiteralType<string>
        {
          private extern audio();
        }

        [Name("System.String")]
        public class font : LiteralType<string>
        {
          private extern font();
        }

        [Name("System.String")]
        public class image : LiteralType<string>
        {
          private extern image();
        }

        [Name("System.String")]
        public class script : LiteralType<string>
        {
          private extern script();
        }

        [Name("System.String")]
        public class style : LiteralType<string>
        {
          private extern style();
        }

        [Name("System.String")]
        public class video : LiteralType<string>
        {
          private extern video();
        }

        [Name("System.String")]
        public class basic : LiteralType<string>
        {
          private extern basic();
        }

        [Name("System.String")]
        public class opaque : LiteralType<string>
        {
          private extern opaque();
        }

        [Name("System.String")]
        public class opaqueredirect : LiteralType<string>
        {
          private extern opaqueredirect();
        }

        [Name("System.String")]
        public class ScopedCred : LiteralType<string>
        {
          private extern ScopedCred();
        }

        [Name("System.String")]
        public class installing : LiteralType<string>
        {
          private extern installing();
        }

        [Name("System.String")]
        public class installed : LiteralType<string>
        {
          private extern installed();
        }

        [Name("System.String")]
        public class activating : LiteralType<string>
        {
          private extern activating();
        }

        [Name("System.String")]
        public class activated : LiteralType<string>
        {
          private extern activated();
        }

        [Name("System.String")]
        public class redundant : LiteralType<string>
        {
          private extern redundant();
        }

        [Name("System.String")]
        public class subtitles : LiteralType<string>
        {
          private extern subtitles();
        }

        [Name("System.String")]
        public class captions : LiteralType<string>
        {
          private extern captions();
        }

        [Name("System.String")]
        public class descriptions : LiteralType<string>
        {
          private extern descriptions();
        }

        [Name("System.String")]
        public class chapters : LiteralType<string>
        {
          private extern chapters();
        }

        [Name("System.String")]
        public class metadata : LiteralType<string>
        {
          private extern metadata();
        }

        [Name("System.String")]
        public class disabled : LiteralType<string>
        {
          private extern disabled();
        }

        [Name("System.String")]
        public class hidden : LiteralType<string>
        {
          private extern hidden();
        }

        [Name("System.String")]
        public class showing : LiteralType<string>
        {
          private extern showing();
        }

        [Name("System.String")]
        public class usb : LiteralType<string>
        {
          private extern usb();
        }

        [Name("System.String")]
        public class nfc : LiteralType<string>
        {
          private extern nfc();
        }

        [Name("System.String")]
        public class ble : LiteralType<string>
        {
          private extern ble();
        }

        [Name("System.String")]
        public class mounted : LiteralType<string>
        {
          private extern mounted();
        }

        [Name("System.String")]
        public class navigation : LiteralType<string>
        {
          private extern navigation();
        }

        [Name("System.String")]
        public class requested : LiteralType<string>
        {
          private extern requested();
        }

        [Name("System.String")]
        public class unmounted : LiteralType<string>
        {
          private extern unmounted();
        }

        [Name("System.String")]
        public class user : LiteralType<string>
        {
          private extern user();
        }

        [Name("System.String")]
        public class environment : LiteralType<string>
        {
          private extern environment();
        }

        [Name("System.String")]
        public class visible : LiteralType<string>
        {
          private extern visible();
        }

        [Name("System.String")]
        public class unloaded : LiteralType<string>
        {
          private extern unloaded();
        }

        [Name("System.String")]
        public class json : LiteralType<string>
        {
          private extern json();
        }

        [Name("System.String")]
        public class text : LiteralType<string>
        {
          private extern text();
        }

        [Name("System.String")]
        public class idle : LiteralType<string>
        {
          private extern idle();
        }

        [Name("System.String")]
        public class paused : LiteralType<string>
        {
          private extern paused();
        }

        [Name("System.String")]
        public class finished : LiteralType<string>
        {
          private extern finished();
        }

        [Name("System.String")]
        public class normal : LiteralType<string>
        {
          private extern normal();
        }

        [Name("System.String")]
        public class reverse : LiteralType<string>
        {
          private extern reverse();
        }

        [Name("System.String")]
        public class alternate : LiteralType<string>
        {
          private extern alternate();
        }

        [Name("System.String")]
        public class alternate_reverse : LiteralType<string>
        {
          private extern alternate_reverse();
        }

        [Name("System.String")]
        public class forwards : LiteralType<string>
        {
          private extern forwards();
        }

        [Name("System.String")]
        public class backwards : LiteralType<string>
        {
          private extern backwards();
        }

        [Name("System.String")]
        public class both : LiteralType<string>
        {
          private extern both();
        }

        [Name("System.String")]
        public class http_SlashSlashwww_w3_orgSlash1999Slashxhtml : LiteralType<string>
        {
          private extern http_SlashSlashwww_w3_orgSlash1999Slashxhtml();
        }

        [Name("System.String")]
        public class http_SlashSlashwww_w3_orgSlash2000Slashsvg : LiteralType<string>
        {
          private extern http_SlashSlashwww_w3_orgSlash2000Slashsvg();
        }

        [Name("System.String")]
        public class a : LiteralType<string>
        {
          private extern a();
        }

        [Name("System.String")]
        public class circle : LiteralType<string>
        {
          private extern circle();
        }

        [Name("System.String")]
        public class clipPath : LiteralType<string>
        {
          private extern clipPath();
        }

        [Name("System.String")]
        public class componentTransferFunction : LiteralType<string>
        {
          private extern componentTransferFunction();
        }

        [Name("System.String")]
        public class defs : LiteralType<string>
        {
          private extern defs();
        }

        [Name("System.String")]
        public class desc : LiteralType<string>
        {
          private extern desc();
        }

        [Name("System.String")]
        public class ellipse : LiteralType<string>
        {
          private extern ellipse();
        }

        [Name("System.String")]
        public class feBlend : LiteralType<string>
        {
          private extern feBlend();
        }

        [Name("System.String")]
        public class feColorMatrix : LiteralType<string>
        {
          private extern feColorMatrix();
        }

        [Name("System.String")]
        public class feComponentTransfer : LiteralType<string>
        {
          private extern feComponentTransfer();
        }

        [Name("System.String")]
        public class feComposite : LiteralType<string>
        {
          private extern feComposite();
        }

        [Name("System.String")]
        public class feConvolveMatrix : LiteralType<string>
        {
          private extern feConvolveMatrix();
        }

        [Name("System.String")]
        public class feDiffuseLighting : LiteralType<string>
        {
          private extern feDiffuseLighting();
        }

        [Name("System.String")]
        public class feDisplacementMap : LiteralType<string>
        {
          private extern feDisplacementMap();
        }

        [Name("System.String")]
        public class feDistantLight : LiteralType<string>
        {
          private extern feDistantLight();
        }

        [Name("System.String")]
        public class feFlood : LiteralType<string>
        {
          private extern feFlood();
        }

        [Name("System.String")]
        public class feFuncA : LiteralType<string>
        {
          private extern feFuncA();
        }

        [Name("System.String")]
        public class feFuncB : LiteralType<string>
        {
          private extern feFuncB();
        }

        [Name("System.String")]
        public class feFuncG : LiteralType<string>
        {
          private extern feFuncG();
        }

        [Name("System.String")]
        public class feFuncR : LiteralType<string>
        {
          private extern feFuncR();
        }

        [Name("System.String")]
        public class feGaussianBlur : LiteralType<string>
        {
          private extern feGaussianBlur();
        }

        [Name("System.String")]
        public class feImage : LiteralType<string>
        {
          private extern feImage();
        }

        [Name("System.String")]
        public class feMerge : LiteralType<string>
        {
          private extern feMerge();
        }

        [Name("System.String")]
        public class feMergeNode : LiteralType<string>
        {
          private extern feMergeNode();
        }

        [Name("System.String")]
        public class feMorphology : LiteralType<string>
        {
          private extern feMorphology();
        }

        [Name("System.String")]
        public class feOffset : LiteralType<string>
        {
          private extern feOffset();
        }

        [Name("System.String")]
        public class fePointLight : LiteralType<string>
        {
          private extern fePointLight();
        }

        [Name("System.String")]
        public class feSpecularLighting : LiteralType<string>
        {
          private extern feSpecularLighting();
        }

        [Name("System.String")]
        public class feSpotLight : LiteralType<string>
        {
          private extern feSpotLight();
        }

        [Name("System.String")]
        public class feTile : LiteralType<string>
        {
          private extern feTile();
        }

        [Name("System.String")]
        public class feTurbulence : LiteralType<string>
        {
          private extern feTurbulence();
        }

        [Name("System.String")]
        public class filter : LiteralType<string>
        {
          private extern filter();
        }

        [Name("System.String")]
        public class foreignObject : LiteralType<string>
        {
          private extern foreignObject();
        }

        [Name("System.String")]
        public class g : LiteralType<string>
        {
          private extern g();
        }

        [Name("System.String")]
        public class gradient : LiteralType<string>
        {
          private extern gradient();
        }

        [Name("System.String")]
        public class line : LiteralType<string>
        {
          private extern line();
        }

        [Name("System.String")]
        public class linearGradient : LiteralType<string>
        {
          private extern linearGradient();
        }

        [Name("System.String")]
        public class marker : LiteralType<string>
        {
          private extern marker();
        }

        [Name("System.String")]
        public class mask : LiteralType<string>
        {
          private extern mask();
        }

        [Name("System.String")]
        public class path : LiteralType<string>
        {
          private extern path();
        }

        [Name("System.String")]
        public class pattern : LiteralType<string>
        {
          private extern pattern();
        }

        [Name("System.String")]
        public class polygon : LiteralType<string>
        {
          private extern polygon();
        }

        [Name("System.String")]
        public class polyline : LiteralType<string>
        {
          private extern polyline();
        }

        [Name("System.String")]
        public class radialGradient : LiteralType<string>
        {
          private extern radialGradient();
        }

        [Name("System.String")]
        public class rect : LiteralType<string>
        {
          private extern rect();
        }

        [Name("System.String")]
        public class svg : LiteralType<string>
        {
          private extern svg();
        }

        [Name("System.String")]
        public class stop : LiteralType<string>
        {
          private extern stop();
        }

        [Name("System.String")]
        public class @switch : LiteralType<string>
        {
          private extern @switch();
        }

        [Name("System.String")]
        public class symbol : LiteralType<string>
        {
          private extern symbol();
        }

        [Name("System.String")]
        public class tspan : LiteralType<string>
        {
          private extern tspan();
        }

        [Name("System.String")]
        public class textContent : LiteralType<string>
        {
          private extern textContent();
        }

        [Name("System.String")]
        public class textPath : LiteralType<string>
        {
          private extern textPath();
        }

        [Name("System.String")]
        public class textPositioning : LiteralType<string>
        {
          private extern textPositioning();
        }

        [Name("System.String")]
        public class title : LiteralType<string>
        {
          private extern title();
        }

        [Name("System.String")]
        public class use : LiteralType<string>
        {
          private extern use();
        }

        [Name("System.String")]
        public class view : LiteralType<string>
        {
          private extern view();
        }

        [Name("System.String")]
        public class AnimationEvent : LiteralType<string>
        {
          private extern AnimationEvent();
        }

        [Name("System.String")]
        public class AnimationPlaybackEvent : LiteralType<string>
        {
          private extern AnimationPlaybackEvent();
        }

        [Name("System.String")]
        public class AudioProcessingEvent : LiteralType<string>
        {
          private extern AudioProcessingEvent();
        }

        [Name("System.String")]
        public class BeforeUnloadEvent : LiteralType<string>
        {
          private extern BeforeUnloadEvent();
        }

        [Name("System.String")]
        public class ClipboardEvent : LiteralType<string>
        {
          private extern ClipboardEvent();
        }

        [Name("System.String")]
        public class CloseEvent : LiteralType<string>
        {
          private extern CloseEvent();
        }

        [Name("System.String")]
        public class CompositionEvent : LiteralType<string>
        {
          private extern CompositionEvent();
        }

        [Name("System.String")]
        public class CustomEvent : LiteralType<string>
        {
          private extern CustomEvent();
        }

        [Name("System.String")]
        public class DeviceLightEvent : LiteralType<string>
        {
          private extern DeviceLightEvent();
        }

        [Name("System.String")]
        public class DeviceMotionEvent : LiteralType<string>
        {
          private extern DeviceMotionEvent();
        }

        [Name("System.String")]
        public class DeviceOrientationEvent : LiteralType<string>
        {
          private extern DeviceOrientationEvent();
        }

        [Name("System.String")]
        public class DragEvent : LiteralType<string>
        {
          private extern DragEvent();
        }

        [Name("System.String")]
        public class ErrorEvent : LiteralType<string>
        {
          private extern ErrorEvent();
        }

        [Name("System.String")]
        public class Event : LiteralType<string>
        {
          private extern Event();
        }

        [Name("System.String")]
        public class Events : LiteralType<string>
        {
          private extern Events();
        }

        [Name("System.String")]
        public class FocusEvent : LiteralType<string>
        {
          private extern FocusEvent();
        }

        [Name("System.String")]
        public class FocusNavigationEvent : LiteralType<string>
        {
          private extern FocusNavigationEvent();
        }

        [Name("System.String")]
        public class GamepadEvent : LiteralType<string>
        {
          private extern GamepadEvent();
        }

        [Name("System.String")]
        public class HashChangeEvent : LiteralType<string>
        {
          private extern HashChangeEvent();
        }

        [Name("System.String")]
        public class IDBVersionChangeEvent : LiteralType<string>
        {
          private extern IDBVersionChangeEvent();
        }

        [Name("System.String")]
        public class KeyboardEvent : LiteralType<string>
        {
          private extern KeyboardEvent();
        }

        [Name("System.String")]
        public class ListeningStateChangedEvent : LiteralType<string>
        {
          private extern ListeningStateChangedEvent();
        }

        [Name("System.String")]
        public class MSDCCEvent : LiteralType<string>
        {
          private extern MSDCCEvent();
        }

        [Name("System.String")]
        public class MSDSHEvent : LiteralType<string>
        {
          private extern MSDSHEvent();
        }

        [Name("System.String")]
        public class MSMediaKeyMessageEvent : LiteralType<string>
        {
          private extern MSMediaKeyMessageEvent();
        }

        [Name("System.String")]
        public class MSMediaKeyNeededEvent : LiteralType<string>
        {
          private extern MSMediaKeyNeededEvent();
        }

        [Name("System.String")]
        public class MediaEncryptedEvent : LiteralType<string>
        {
          private extern MediaEncryptedEvent();
        }

        [Name("System.String")]
        public class MediaKeyMessageEvent : LiteralType<string>
        {
          private extern MediaKeyMessageEvent();
        }

        [Name("System.String")]
        public class MediaStreamErrorEvent : LiteralType<string>
        {
          private extern MediaStreamErrorEvent();
        }

        [Name("System.String")]
        public class MediaStreamEvent : LiteralType<string>
        {
          private extern MediaStreamEvent();
        }

        [Name("System.String")]
        public class MediaStreamTrackEvent : LiteralType<string>
        {
          private extern MediaStreamTrackEvent();
        }

        [Name("System.String")]
        public class MessageEvent : LiteralType<string>
        {
          private extern MessageEvent();
        }

        [Name("System.String")]
        public class MouseEvent : LiteralType<string>
        {
          private extern MouseEvent();
        }

        [Name("System.String")]
        public class MouseEvents : LiteralType<string>
        {
          private extern MouseEvents();
        }

        [Name("System.String")]
        public class MutationEvent : LiteralType<string>
        {
          private extern MutationEvent();
        }

        [Name("System.String")]
        public class MutationEvents : LiteralType<string>
        {
          private extern MutationEvents();
        }

        [Name("System.String")]
        public class OfflineAudioCompletionEvent : LiteralType<string>
        {
          private extern OfflineAudioCompletionEvent();
        }

        [Name("System.String")]
        public class OverflowEvent : LiteralType<string>
        {
          private extern OverflowEvent();
        }

        [Name("System.String")]
        public class PageTransitionEvent : LiteralType<string>
        {
          private extern PageTransitionEvent();
        }

        [Name("System.String")]
        public class PaymentRequestUpdateEvent : LiteralType<string>
        {
          private extern PaymentRequestUpdateEvent();
        }

        [Name("System.String")]
        public class PermissionRequestedEvent : LiteralType<string>
        {
          private extern PermissionRequestedEvent();
        }

        [Name("System.String")]
        public class PointerEvent : LiteralType<string>
        {
          private extern PointerEvent();
        }

        [Name("System.String")]
        public class PopStateEvent : LiteralType<string>
        {
          private extern PopStateEvent();
        }

        [Name("System.String")]
        public class ProgressEvent : LiteralType<string>
        {
          private extern ProgressEvent();
        }

        [Name("System.String")]
        public class PromiseRejectionEvent : LiteralType<string>
        {
          private extern PromiseRejectionEvent();
        }

        [Name("System.String")]
        public class RTCDTMFToneChangeEvent : LiteralType<string>
        {
          private extern RTCDTMFToneChangeEvent();
        }

        [Name("System.String")]
        public class RTCDtlsTransportStateChangedEvent : LiteralType<string>
        {
          private extern RTCDtlsTransportStateChangedEvent();
        }

        [Name("System.String")]
        public class RTCIceCandidatePairChangedEvent : LiteralType<string>
        {
          private extern RTCIceCandidatePairChangedEvent();
        }

        [Name("System.String")]
        public class RTCIceGathererEvent : LiteralType<string>
        {
          private extern RTCIceGathererEvent();
        }

        [Name("System.String")]
        public class RTCIceTransportStateChangedEvent : LiteralType<string>
        {
          private extern RTCIceTransportStateChangedEvent();
        }

        [Name("System.String")]
        public class RTCPeerConnectionIceEvent : LiteralType<string>
        {
          private extern RTCPeerConnectionIceEvent();
        }

        [Name("System.String")]
        public class RTCSsrcConflictEvent : LiteralType<string>
        {
          private extern RTCSsrcConflictEvent();
        }

        [Name("System.String")]
        public class SVGZoomEvent : LiteralType<string>
        {
          private extern SVGZoomEvent();
        }

        [Name("System.String")]
        public class SVGZoomEvents : LiteralType<string>
        {
          private extern SVGZoomEvents();
        }

        [Name("System.String")]
        public class SecurityPolicyViolationEvent : LiteralType<string>
        {
          private extern SecurityPolicyViolationEvent();
        }

        [Name("System.String")]
        public class ServiceWorkerMessageEvent : LiteralType<string>
        {
          private extern ServiceWorkerMessageEvent();
        }

        [Name("System.String")]
        public class SpeechSynthesisEvent : LiteralType<string>
        {
          private extern SpeechSynthesisEvent();
        }

        [Name("System.String")]
        public class StorageEvent : LiteralType<string>
        {
          private extern StorageEvent();
        }

        [Name("System.String")]
        public class TextEvent : LiteralType<string>
        {
          private extern TextEvent();
        }

        [Name("System.String")]
        public class TouchEvent : LiteralType<string>
        {
          private extern TouchEvent();
        }

        [Name("System.String")]
        public class TrackEvent : LiteralType<string>
        {
          private extern TrackEvent();
        }

        [Name("System.String")]
        public class TransitionEvent : LiteralType<string>
        {
          private extern TransitionEvent();
        }

        [Name("System.String")]
        public class UIEvent : LiteralType<string>
        {
          private extern UIEvent();
        }

        [Name("System.String")]
        public class UIEvents : LiteralType<string>
        {
          private extern UIEvents();
        }

        [Name("System.String")]
        public class VRDisplayEvent : LiteralType<string>
        {
          private extern VRDisplayEvent();
        }

        [Name("System.String")]
        public class VRDisplayEvent_ : LiteralType<string>
        {
          private extern VRDisplayEvent_();
        }

        [Name("System.String")]
        public class WebGLContextEvent : LiteralType<string>
        {
          private extern WebGLContextEvent();
        }

        [Name("System.String")]
        public class WheelEvent : LiteralType<string>
        {
          private extern WheelEvent();
        }

        [Name("System.String")]
        public class _2d : LiteralType<string>
        {
          private extern _2d();
        }

        [Name("System.String")]
        public class webgl : LiteralType<string>
        {
          private extern webgl();
        }

        [Name("System.String")]
        public class experimental_webgl : LiteralType<string>
        {
          private extern experimental_webgl();
        }

        [Name("System.String")]
        public class async : LiteralType<string>
        {
          private extern async();
        }

        [Name("System.String")]
        public class sync : LiteralType<string>
        {
          private extern sync();
        }

        [Name("System.String")]
        public class forward : LiteralType<string>
        {
          private extern forward();
        }

        [Name("System.String")]
        public class backward : LiteralType<string>
        {
          private extern backward();
        }

        [Name("System.String")]
        public class flipY : LiteralType<string>
        {
          private extern flipY();
        }

        [Name("System.String")]
        public class premultiply : LiteralType<string>
        {
          private extern premultiply();
        }

        [Name("System.String")]
        public class pixelated : LiteralType<string>
        {
          private extern pixelated();
        }

        [Name("System.String")]
        public class low : LiteralType<string>
        {
          private extern low();
        }

        [Name("System.String")]
        public class medium : LiteralType<string>
        {
          private extern medium();
        }

        [Name("System.String")]
        public class high : LiteralType<string>
        {
          private extern high();
        }

        [Name("System.String")]
        public class EXT_blend_minmax : LiteralType<string>
        {
          private extern EXT_blend_minmax();
        }

        [Name("System.String")]
        public class EXT_texture_filter_anisotropic : LiteralType<string>
        {
          private extern EXT_texture_filter_anisotropic();
        }

        [Name("System.String")]
        public class EXT_frag_depth : LiteralType<string>
        {
          private extern EXT_frag_depth();
        }

        [Name("System.String")]
        public class EXT_shader_texture_lod : LiteralType<string>
        {
          private extern EXT_shader_texture_lod();
        }

        [Name("System.String")]
        public class EXT_sRGB : LiteralType<string>
        {
          private extern EXT_sRGB();
        }

        [Name("System.String")]
        public class OES_vertex_array_object : LiteralType<string>
        {
          private extern OES_vertex_array_object();
        }

        [Name("System.String")]
        public class WEBGL_color_buffer_float : LiteralType<string>
        {
          private extern WEBGL_color_buffer_float();
        }

        [Name("System.String")]
        public class WEBGL_compressed_texture_astc : LiteralType<string>
        {
          private extern WEBGL_compressed_texture_astc();
        }

        [Name("System.String")]
        public class WEBGL_compressed_texture_s3tc_srgb : LiteralType<string>
        {
          private extern WEBGL_compressed_texture_s3tc_srgb();
        }

        [Name("System.String")]
        public class WEBGL_debug_shaders : LiteralType<string>
        {
          private extern WEBGL_debug_shaders();
        }

        [Name("System.String")]
        public class WEBGL_draw_buffers : LiteralType<string>
        {
          private extern WEBGL_draw_buffers();
        }

        [Name("System.String")]
        public class WEBGL_lose_context : LiteralType<string>
        {
          private extern WEBGL_lose_context();
        }

        [Name("System.String")]
        public class WEBGL_depth_texture : LiteralType<string>
        {
          private extern WEBGL_depth_texture();
        }

        [Name("System.String")]
        public class WEBGL_debug_renderer_info : LiteralType<string>
        {
          private extern WEBGL_debug_renderer_info();
        }

        [Name("System.String")]
        public class WEBGL_compressed_texture_s3tc : LiteralType<string>
        {
          private extern WEBGL_compressed_texture_s3tc();
        }

        [Name("System.String")]
        public class OES_texture_half_float_linear : LiteralType<string>
        {
          private extern OES_texture_half_float_linear();
        }

        [Name("System.String")]
        public class OES_texture_half_float : LiteralType<string>
        {
          private extern OES_texture_half_float();
        }

        [Name("System.String")]
        public class OES_texture_float_linear : LiteralType<string>
        {
          private extern OES_texture_float_linear();
        }

        [Name("System.String")]
        public class OES_texture_float : LiteralType<string>
        {
          private extern OES_texture_float();
        }

        [Name("System.String")]
        public class OES_standard_derivatives : LiteralType<string>
        {
          private extern OES_standard_derivatives();
        }

        [Name("System.String")]
        public class OES_element_index_uint : LiteralType<string>
        {
          private extern OES_element_index_uint();
        }

        [Name("System.String")]
        public class ANGLE_instanced_arrays : LiteralType<string>
        {
          private extern ANGLE_instanced_arrays();
        }
      }

      public static class Options
      {
        [Name("System.String")]
        public class type : LiteralType<string>
        {
          [Template("<self>\"drag\"")]
          public static readonly dom.Literals.Types.drag drag;
          [Template("<self>\"dragend\"")]
          public static readonly dom.Literals.Types.dragend dragend;
          [Template("<self>\"dragenter\"")]
          public static readonly dom.Literals.Types.dragenter dragenter;
          [Template("<self>\"dragexit\"")]
          public static readonly dom.Literals.Types.dragexit dragexit;
          [Template("<self>\"dragleave\"")]
          public static readonly dom.Literals.Types.dragleave dragleave;
          [Template("<self>\"dragover\"")]
          public static readonly dom.Literals.Types.dragover dragover;
          [Template("<self>\"dragstart\"")]
          public static readonly dom.Literals.Types.dragstart dragstart;
          [Template("<self>\"drop\"")]
          public static readonly dom.Literals.Types.drop drop;

          private extern type();

          public static extern implicit operator dom.Literals.Options.type(
            dom.Literals.Types.drag value);

          public static extern implicit operator dom.Literals.Options.type(
            dom.Literals.Types.dragend value);

          public static extern implicit operator dom.Literals.Options.type(
            dom.Literals.Types.dragenter value);

          public static extern implicit operator dom.Literals.Options.type(
            dom.Literals.Types.dragexit value);

          public static extern implicit operator dom.Literals.Options.type(
            dom.Literals.Types.dragleave value);

          public static extern implicit operator dom.Literals.Options.type(
            dom.Literals.Types.dragover value);

          public static extern implicit operator dom.Literals.Options.type(
            dom.Literals.Types.dragstart value);

          public static extern implicit operator dom.Literals.Options.type(
            dom.Literals.Types.drop value);
        }

        [Name("System.String")]
        public class playState : LiteralType<string>
        {
          [Template("<self>\"idle\"")]
          public static readonly dom.Literals.Types.idle idle;
          [Template("<self>\"running\"")]
          public static readonly dom.Literals.Types.running running;
          [Template("<self>\"paused\"")]
          public static readonly dom.Literals.Types.paused paused;
          [Template("<self>\"finished\"")]
          public static readonly dom.Literals.Types.finished finished;

          private extern playState();

          public static extern implicit operator dom.Literals.Options.playState(
            dom.Literals.Types.idle value);

          public static extern implicit operator dom.Literals.Options.playState(
            dom.Literals.Types.running value);

          public static extern implicit operator dom.Literals.Options.playState(
            dom.Literals.Types.paused value);

          public static extern implicit operator dom.Literals.Options.playState(
            dom.Literals.Types.finished value);
        }

        [Name("System.String")]
        public class direction : LiteralType<string>
        {
          [Template("<self>\"normal\"")]
          public static readonly dom.Literals.Types.normal normal;
          [Template("<self>\"reverse\"")]
          public static readonly dom.Literals.Types.reverse reverse;
          [Template("<self>\"alternate\"")]
          public static readonly dom.Literals.Types.alternate alternate;
          [Template("<self>\"alternate-reverse\"")]
          public static readonly dom.Literals.Types.alternate_reverse alternate_reverse;

          private extern direction();

          public static extern implicit operator dom.Literals.Options.direction(
            dom.Literals.Types.normal value);

          public static extern implicit operator dom.Literals.Options.direction(
            dom.Literals.Types.reverse value);

          public static extern implicit operator dom.Literals.Options.direction(
            dom.Literals.Types.alternate value);

          public static extern implicit operator dom.Literals.Options.direction(
            dom.Literals.Types.alternate_reverse value);
        }

        [Name("System.String")]
        public class fill : LiteralType<string>
        {
          [Template("<self>\"none\"")]
          public static readonly dom.Literals.Types.none none;
          [Template("<self>\"forwards\"")]
          public static readonly dom.Literals.Types.forwards forwards;
          [Template("<self>\"backwards\"")]
          public static readonly dom.Literals.Types.backwards backwards;
          [Template("<self>\"both\"")]
          public static readonly dom.Literals.Types.both both;
          [Template("<self>\"auto\"")]
          public static readonly dom.Literals.Types.auto auto;

          private extern fill();

          public static extern implicit operator dom.Literals.Options.fill(
            dom.Literals.Types.none value);

          public static extern implicit operator dom.Literals.Options.fill(
            dom.Literals.Types.forwards value);

          public static extern implicit operator dom.Literals.Options.fill(
            dom.Literals.Types.backwards value);

          public static extern implicit operator dom.Literals.Options.fill(
            dom.Literals.Types.both value);

          public static extern implicit operator dom.Literals.Options.fill(
            dom.Literals.Types.auto value);
        }

        [Name("System.String")]
        public class type2 : LiteralType<string>
        {
          [Template("<self>\"drag\"")]
          public static readonly dom.Literals.Types.drag drag;
          [Template("<self>\"dragend\"")]
          public static readonly dom.Literals.Types.dragend dragend;
          [Template("<self>\"dragenter\"")]
          public static readonly dom.Literals.Types.dragenter dragenter;
          [Template("<self>\"dragexit\"")]
          public static readonly dom.Literals.Types.dragexit dragexit;
          [Template("<self>\"dragleave\"")]
          public static readonly dom.Literals.Types.dragleave dragleave;
          [Template("<self>\"dragover\"")]
          public static readonly dom.Literals.Types.dragover dragover;
          [Template("<self>\"dragstart\"")]
          public static readonly dom.Literals.Types.dragstart dragstart;
          [Template("<self>\"drop\"")]
          public static readonly dom.Literals.Types.drop drop;

          private extern type2();

          public static extern implicit operator dom.Literals.Options.type2(
            dom.Literals.Types.drag value);

          public static extern implicit operator dom.Literals.Options.type2(
            dom.Literals.Types.dragend value);

          public static extern implicit operator dom.Literals.Options.type2(
            dom.Literals.Types.dragenter value);

          public static extern implicit operator dom.Literals.Options.type2(
            dom.Literals.Types.dragexit value);

          public static extern implicit operator dom.Literals.Options.type2(
            dom.Literals.Types.dragleave value);

          public static extern implicit operator dom.Literals.Options.type2(
            dom.Literals.Types.dragover value);

          public static extern implicit operator dom.Literals.Options.type2(
            dom.Literals.Types.dragstart value);

          public static extern implicit operator dom.Literals.Options.type2(
            dom.Literals.Types.drop value);

          public static extern implicit operator dom.Literals.Options.type2(
            dom.Literals.Options.type value);
        }

        [Name("System.String")]
        public class contextId : LiteralType<string>
        {
          [Template("<self>\"webgl\"")]
          public static readonly dom.Literals.Types.webgl webgl;
          [Template("<self>\"experimental-webgl\"")]
          public static readonly dom.Literals.Types.experimental_webgl experimental_webgl;

          private extern contextId();

          public static extern implicit operator dom.Literals.Options.contextId(
            dom.Literals.Types.webgl value);

          public static extern implicit operator dom.Literals.Options.contextId(
            dom.Literals.Types.experimental_webgl value);
        }

        [Name("System.String")]
        public class decoding : LiteralType<string>
        {
          [Template("<self>\"async\"")]
          public static readonly dom.Literals.Types.async async;
          [Template("<self>\"sync\"")]
          public static readonly dom.Literals.Types.sync sync;
          [Template("<self>\"auto\"")]
          public static readonly dom.Literals.Types.auto auto;

          private extern decoding();

          public static extern implicit operator dom.Literals.Options.decoding(
            dom.Literals.Types.async value);

          public static extern implicit operator dom.Literals.Options.decoding(
            dom.Literals.Types.sync value);

          public static extern implicit operator dom.Literals.Options.decoding(
            dom.Literals.Types.auto value);
        }

        [Name("System.String")]
        public class direction2 : LiteralType<string>
        {
          [Template("<self>\"forward\"")]
          public static readonly dom.Literals.Types.forward forward;
          [Template("<self>\"backward\"")]
          public static readonly dom.Literals.Types.backward backward;
          [Template("<self>\"none\"")]
          public static readonly dom.Literals.Types.none none;

          private extern direction2();

          public static extern implicit operator dom.Literals.Options.direction2(
            dom.Literals.Types.forward value);

          public static extern implicit operator dom.Literals.Options.direction2(
            dom.Literals.Types.backward value);

          public static extern implicit operator dom.Literals.Options.direction2(
            dom.Literals.Types.none value);
        }

        [Name("System.String")]
        public class direction3 : LiteralType<string>
        {
          [Template("<self>\"forward\"")]
          public static readonly dom.Literals.Types.forward forward;
          [Template("<self>\"backward\"")]
          public static readonly dom.Literals.Types.backward backward;
          [Template("<self>\"none\"")]
          public static readonly dom.Literals.Types.none none;

          private extern direction3();

          public static extern implicit operator dom.Literals.Options.direction3(
            dom.Literals.Types.forward value);

          public static extern implicit operator dom.Literals.Options.direction3(
            dom.Literals.Types.backward value);

          public static extern implicit operator dom.Literals.Options.direction3(
            dom.Literals.Types.none value);

          public static extern implicit operator dom.Literals.Options.direction3(
            dom.Literals.Options.direction2 value);
        }

        [Name("System.String")]
        public class colorSpaceConversion : LiteralType<string>
        {
          [Template("<self>\"none\"")]
          public static readonly dom.Literals.Types.none none;
          [Template("<self>\"default\"")]
          public static readonly dom.Literals.Types.@default @default;

          private extern colorSpaceConversion();

          public static extern implicit operator dom.Literals.Options.colorSpaceConversion(
            dom.Literals.Types.none value);

          public static extern implicit operator dom.Literals.Options.colorSpaceConversion(
            dom.Literals.Types.@default value);
        }

        [Name("System.String")]
        public class imageOrientation : LiteralType<string>
        {
          [Template("<self>\"none\"")]
          public static readonly dom.Literals.Types.none none;
          [Template("<self>\"flipY\"")]
          public static readonly dom.Literals.Types.flipY flipY;

          private extern imageOrientation();

          public static extern implicit operator dom.Literals.Options.imageOrientation(
            dom.Literals.Types.none value);

          public static extern implicit operator dom.Literals.Options.imageOrientation(
            dom.Literals.Types.flipY value);
        }

        [Name("System.String")]
        public class premultiplyAlpha : LiteralType<string>
        {
          [Template("<self>\"none\"")]
          public static readonly dom.Literals.Types.none none;
          [Template("<self>\"premultiply\"")]
          public static readonly dom.Literals.Types.premultiply premultiply;
          [Template("<self>\"default\"")]
          public static readonly dom.Literals.Types.@default @default;

          private extern premultiplyAlpha();

          public static extern implicit operator dom.Literals.Options.premultiplyAlpha(
            dom.Literals.Types.none value);

          public static extern implicit operator dom.Literals.Options.premultiplyAlpha(
            dom.Literals.Types.premultiply value);

          public static extern implicit operator dom.Literals.Options.premultiplyAlpha(
            dom.Literals.Types.@default value);

          public static extern implicit operator dom.Literals.Options.premultiplyAlpha(
            dom.Literals.Options.colorSpaceConversion value);
        }

        [Name("System.String")]
        public class resizeQuality : LiteralType<string>
        {
          [Template("<self>\"pixelated\"")]
          public static readonly dom.Literals.Types.pixelated pixelated;
          [Template("<self>\"low\"")]
          public static readonly dom.Literals.Types.low low;
          [Template("<self>\"medium\"")]
          public static readonly dom.Literals.Types.medium medium;
          [Template("<self>\"high\"")]
          public static readonly dom.Literals.Types.high high;

          private extern resizeQuality();

          public static extern implicit operator dom.Literals.Options.resizeQuality(
            dom.Literals.Types.pixelated value);

          public static extern implicit operator dom.Literals.Options.resizeQuality(
            dom.Literals.Types.low value);

          public static extern implicit operator dom.Literals.Options.resizeQuality(
            dom.Literals.Types.medium value);

          public static extern implicit operator dom.Literals.Options.resizeQuality(
            dom.Literals.Types.high value);
        }

        [Name("System.String")]
        public class mode : LiteralType<string>
        {
          [Template("<self>\"open\"")]
          public static readonly dom.Literals.Types.open open;
          [Template("<self>\"closed\"")]
          public static readonly dom.Literals.Types.closed closed;

          private extern mode();

          public static extern implicit operator dom.Literals.Options.mode(
            dom.Literals.Types.open value);

          public static extern implicit operator dom.Literals.Options.mode(
            dom.Literals.Types.closed value);
        }

        [Name("System.String")]
        public class format : LiteralType<string>
        {
          [Template("<self>\"raw\"")]
          public static readonly dom.Literals.Types.raw raw;
          [Template("<self>\"pkcs8\"")]
          public static readonly dom.Literals.Types.pkcs8 pkcs8;
          [Template("<self>\"spki\"")]
          public static readonly dom.Literals.Types.spki spki;

          private extern format();

          public static extern implicit operator dom.Literals.Options.format(
            dom.Literals.Types.raw value);

          public static extern implicit operator dom.Literals.Options.format(
            dom.Literals.Types.pkcs8 value);

          public static extern implicit operator dom.Literals.Options.format(
            dom.Literals.Types.spki value);
        }
      }
    }

    [Generated]
    [Virtual]
    public abstract class BlobStatics : IObject
    {
      private dom.Blob _prototype_BackingField;

      [Template("<self>new {this}()")]
      public abstract dom.Blob Create();

      [Template("<self>new {this}({0})")]
      public abstract dom.Blob Create(object[] blobParts);

      [Template("<self>new {this}({0}, {1})")]
      public abstract dom.Blob Create(object[] blobParts, dom.BlobPropertyBag options);

      public dom.Blob prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }
    }

    [Generated]
    [Virtual]
    public abstract class URLStatics : IObject
    {
      private dom.URL _prototype_BackingField;

      [Template("<self>new {this}({0})")]
      public abstract dom.URL Create(string url);

      [Template("<self>new {this}({0}, {1})")]
      public abstract dom.URL Create(string url, Union<string, dom.URL> @base);

      [Template("<self>new {this}({0}, {1})")]
      public abstract dom.URL Create(string url, string @base);

      [Template("<self>new {this}({0}, {1})")]
      public abstract dom.URL Create(string url, dom.URL @base);

      public dom.URL prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }

      public abstract string createObjectURL(object @object);

      public abstract string createObjectURL(object @object, dom.ObjectURLOptions options);

      public abstract void revokeObjectURL(string url);
    }

    [Generated]
    [Virtual]
    public abstract class URLSearchParamsStatics : IObject
    {
      private dom.URLSearchParams _prototype_BackingField;

      [Template("<self>new {this}()")]
      public abstract dom.URLSearchParams Create();

      [Template("<self>new {this}({0})")]
      public abstract dom.URLSearchParams Create(Union<string, dom.URLSearchParams> init);

      [Template("<self>new {this}({0})")]
      public abstract dom.URLSearchParams Create(string init);

      [Template("<self>new {this}({0})")]
      public abstract dom.URLSearchParams Create(dom.URLSearchParams init);

      public dom.URLSearchParams prototype
      {
        get
        {
          return this._prototype_BackingField;
        }
        set
        {
          this._prototype_BackingField = value;
        }
      }
    }
  }
}
