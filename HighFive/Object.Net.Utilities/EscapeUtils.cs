// Decompiled with JetBrains decompiler
// Type: Object.Net.Utilities.EscapeUtils
// Assembly: Object.Net.Utilities, Version=2.5.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0B5927F8-8BAA-4C4A-84B2-E1600C4FD3FC
// Assembly location: C:\highfive\2020-04-30\highfive\packages\Object.NET.Utilities.2.5.0\lib\Object.Net.Utilities.dll

using System;
using System.Text;

namespace Object.Net.Utilities
{
  public class EscapeUtils
  {
    private static readonly string[] HexMap = new string[256]
    {
      "00",
      "01",
      "02",
      "03",
      "04",
      "05",
      "06",
      "07",
      "08",
      "09",
      "0A",
      "0B",
      "0C",
      "0D",
      "0E",
      "0F",
      "10",
      "11",
      "12",
      "13",
      "14",
      "15",
      "16",
      "17",
      "18",
      "19",
      "1A",
      "1B",
      "1C",
      "1D",
      "1E",
      "1F",
      "20",
      "21",
      "22",
      "23",
      "24",
      "25",
      "26",
      "27",
      "28",
      "29",
      "2A",
      "2B",
      "2C",
      "2D",
      "2E",
      "2F",
      "30",
      "31",
      "32",
      "33",
      "34",
      "35",
      "36",
      "37",
      "38",
      "39",
      "3A",
      "3B",
      "3C",
      "3D",
      "3E",
      "3F",
      "40",
      "41",
      "42",
      "43",
      "44",
      "45",
      "46",
      "47",
      "48",
      "49",
      "4A",
      "4B",
      "4C",
      "4D",
      "4E",
      "4F",
      "50",
      "51",
      "52",
      "53",
      "54",
      "55",
      "56",
      "57",
      "58",
      "59",
      "5A",
      "5B",
      "5C",
      "5D",
      "5E",
      "5F",
      "60",
      "61",
      "62",
      "63",
      "64",
      "65",
      "66",
      "67",
      "68",
      "69",
      "6A",
      "6B",
      "6C",
      "6D",
      "6E",
      "6F",
      "70",
      "71",
      "72",
      "73",
      "74",
      "75",
      "76",
      "77",
      "78",
      "79",
      "7A",
      "7B",
      "7C",
      "7D",
      "7E",
      "7F",
      "80",
      "81",
      "82",
      "83",
      "84",
      "85",
      "86",
      "87",
      "88",
      "89",
      "8A",
      "8B",
      "8C",
      "8D",
      "8E",
      "8F",
      "90",
      "91",
      "92",
      "93",
      "94",
      "95",
      "96",
      "97",
      "98",
      "99",
      "9A",
      "9B",
      "9C",
      "9D",
      "9E",
      "9F",
      "A0",
      "A1",
      "A2",
      "A3",
      "A4",
      "A5",
      "A6",
      "A7",
      "A8",
      "A9",
      "AA",
      "AB",
      "AC",
      "AD",
      "AE",
      "AF",
      "B0",
      "B1",
      "B2",
      "B3",
      "B4",
      "B5",
      "B6",
      "B7",
      "B8",
      "B9",
      "BA",
      "BB",
      "BC",
      "BD",
      "BE",
      "BF",
      "C0",
      "C1",
      "C2",
      "C3",
      "C4",
      "C5",
      "C6",
      "C7",
      "C8",
      "C9",
      "CA",
      "CB",
      "CC",
      "CD",
      "CE",
      "CF",
      "D0",
      "D1",
      "D2",
      "D3",
      "D4",
      "D5",
      "D6",
      "D7",
      "D8",
      "D9",
      "DA",
      "DB",
      "DC",
      "DD",
      "DE",
      "DF",
      "E0",
      "E1",
      "E2",
      "E3",
      "E4",
      "E5",
      "E6",
      "E7",
      "E8",
      "E9",
      "EA",
      "EB",
      "EC",
      "ED",
      "EE",
      "EF",
      "F0",
      "F1",
      "F2",
      "F3",
      "F4",
      "F5",
      "F6",
      "F7",
      "F8",
      "F9",
      "FA",
      "FB",
      "FC",
      "FD",
      "FE",
      "FF"
    };
    private static readonly byte[] ByteMap = new byte[256]
    {
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 0,
      (byte) 1,
      (byte) 2,
      (byte) 3,
      (byte) 4,
      (byte) 5,
      (byte) 6,
      (byte) 7,
      (byte) 8,
      (byte) 9,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 10,
      (byte) 11,
      (byte) 12,
      (byte) 13,
      (byte) 14,
      (byte) 15,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 10,
      (byte) 11,
      (byte) 12,
      (byte) 13,
      (byte) 14,
      (byte) 15,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63,
      (byte) 63
    };

    public static string Escape(string s)
    {
      StringBuilder stringBuilder = new StringBuilder();
      for (int index1 = 0; index1 < s.Length; ++index1)
      {
        int index2 = (int) s[index1];
        if (index2 >= 65 && index2 <= 90)
          stringBuilder.Append((char) index2);
        else if (index2 >= 97 && index2 <= 122)
          stringBuilder.Append((char) index2);
        else if (index2 >= 48 && index2 <= 57)
          stringBuilder.Append((char) index2);
        else if (index2 == 45 || index2 == 95 || (index2 == 46 || index2 == 33) || (index2 == 126 || index2 == 42 || (index2 == 39 || index2 == 40)) || index2 == 41)
          stringBuilder.Append((char) index2);
        else if (index2 <= (int) sbyte.MaxValue)
        {
          stringBuilder.Append('%');
          stringBuilder.Append(EscapeUtils.HexMap[index2]);
        }
        else
        {
          stringBuilder.Append('%');
          stringBuilder.Append('u');
          stringBuilder.Append(EscapeUtils.HexMap[(long) ((uint) index2 >> 8)]);
          stringBuilder.Append(EscapeUtils.HexMap[(int) byte.MaxValue & index2]);
        }
      }
      return stringBuilder.ToString();
    }

    public static string Unescape(string s)
    {
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < s.Length; ++index)
      {
        int num1 = (int) s[index];
        if (num1 == 37)
        {
          int num2 = 0;
          int num3;
          if (s[index + 1] != 'u')
          {
            num3 = (num2 << 4 | (int) EscapeUtils.ByteMap[(int) s[index + 1]]) << 4 | (int) EscapeUtils.ByteMap[(int) s[index + 2]];
            index += 2;
          }
          else
          {
            num3 = (((num2 << 4 | (int) EscapeUtils.ByteMap[(int) s[index + 2]]) << 4 | (int) EscapeUtils.ByteMap[(int) s[index + 3]]) << 4 | (int) EscapeUtils.ByteMap[(int) s[index + 4]]) << 4 | (int) EscapeUtils.ByteMap[(int) s[index + 5]];
            index += 5;
          }
          stringBuilder.Append((char) num3);
        }
        else
          stringBuilder.Append((char) num1);
      }
      return stringBuilder.ToString();
    }
  }
}
